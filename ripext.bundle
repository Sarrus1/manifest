{"meta":{"name":"RIPExt","description":"SourceMod REST in Pawn Extension","author":"ErikMinekus"},"source":{"type":"git","merge":true,"repository":"https://github.com/ErikMinekus/sm-ripext.git","endpoints":null,"patterns":["pawn/scripting/include/ripext.inc","pawn/scripting/include/ripext/*.inc"]},"strands":{"http":{"functions":{},"methodmaps":{"HTTPResponse":{"symbol":{"name":"HTTPResponse","docStart":0,"docEnd":0,"docs":null,"parent":null,"methods":[{"name":"GetHeader","docStart":2260,"docEnd":2529,"docs":{"brief":"Retrieves a HTTP header from the response.","tags":[{"tag":"","text":"Retrieves a HTTP header from the response."},{"tag":"param:name","text":"Header name."},{"tag":"param:buffer","text":"String buffer to store value."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"return","text":"True on success, false if the header was not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"properties":[{"name":"Data","docStart":2612,"docEnd":2655,"docs":{"brief":"Retrieves the JSON data of the response.","tags":[{"tag":"","text":"Retrieves the JSON data of the response."}]},"type":"JSON","getter":true,"setter":false},{"name":"Status","docStart":2706,"docEnd":2751,"docs":{"brief":"Retrieves the HTTP status of the response.","tags":[{"tag":"","text":"Retrieves the HTTP status of the response."}]},"type":"HTTPStatus","getter":true,"setter":false}]},"created":{"hash":"b44b96badc2b31f6b76315cf3bbca1356ba6e613","count":5,"time":1498905000},"last_updated":{"hash":"3ee12838893eeff9df64bfeb2a3022301fded12f","count":67,"time":1599903900}},"HTTPClient":{"symbol":{"name":"HTTPClient","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"HTTPClient","docStart":2845,"docEnd":2988,"docs":{"brief":"Creates a HTTP client.\n\nThe HTTPClient must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Creates a HTTP client.\n\nThe HTTPClient must be freed via delete or CloseHandle()."},{"tag":"param:baseURL","text":"Base URL to the REST API."}]},"kind":"native","returnType":"HTTPClient","arguments":[{"type":"const char[]","name":"baseURL","decl":"const char[] baseURL","default":null}]},{"name":"SetHeader","docStart":3040,"docEnd":3172,"docs":{"brief":"Sets a HTTP header to be used for all requests.","tags":[{"tag":"","text":"Sets a HTTP header to be used for all requests."},{"tag":"param:name","text":"Header name."},{"tag":"param:value","text":"String value to set."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Get","docStart":3245,"docEnd":3483,"docs":{"brief":"Performs a HTTP GET request.","tags":[{"tag":"","text":"Performs a HTTP GET request."},{"tag":"param:endpoint","text":"API endpoint to request."},{"tag":"param:callback","text":"A function to use as a callback when the request has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"HTTPRequestCallback","name":"callback","decl":"HTTPRequestCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},{"name":"Post","docStart":3579,"docEnd":3859,"docs":{"brief":"Performs a HTTP POST request.","tags":[{"tag":"","text":"Performs a HTTP POST request."},{"tag":"param:endpoint","text":"API endpoint to request."},{"tag":"param:data","text":"JSON data to send."},{"tag":"param:callback","text":"A function to use as a callback when the request has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"JSON","name":"data","decl":"JSON data","default":null},{"type":"HTTPRequestCallback","name":"callback","decl":"HTTPRequestCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},{"name":"Put","docStart":3967,"docEnd":4246,"docs":{"brief":"Performs a HTTP PUT request.","tags":[{"tag":"","text":"Performs a HTTP PUT request."},{"tag":"param:endpoint","text":"API endpoint to request."},{"tag":"param:data","text":"JSON data to send."},{"tag":"param:callback","text":"A function to use as a callback when the request has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"JSON","name":"data","decl":"JSON data","default":null},{"type":"HTTPRequestCallback","name":"callback","decl":"HTTPRequestCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},{"name":"Patch","docStart":4353,"docEnd":4634,"docs":{"brief":"Performs a HTTP PATCH request.","tags":[{"tag":"","text":"Performs a HTTP PATCH request."},{"tag":"param:endpoint","text":"API endpoint to request."},{"tag":"param:data","text":"JSON data to send."},{"tag":"param:callback","text":"A function to use as a callback when the request has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"JSON","name":"data","decl":"JSON data","default":null},{"type":"HTTPRequestCallback","name":"callback","decl":"HTTPRequestCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},{"name":"Delete","docStart":4743,"docEnd":4984,"docs":{"brief":"Performs a HTTP DELETE request.","tags":[{"tag":"","text":"Performs a HTTP DELETE request."},{"tag":"param:endpoint","text":"API endpoint to request."},{"tag":"param:callback","text":"A function to use as a callback when the request has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"HTTPRequestCallback","name":"callback","decl":"HTTPRequestCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},{"name":"DownloadFile","docStart":5083,"docEnd":5357,"docs":{"brief":"Downloads a file.","tags":[{"tag":"","text":"Downloads a file."},{"tag":"param:endpoint","text":"API endpoint to download from."},{"tag":"param:path","text":"File to write to."},{"tag":"param:callback","text":"A function to use as a callback when the download has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"HTTPFileCallback","name":"callback","decl":"HTTPFileCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},{"name":"UploadFile","docStart":5478,"docEnd":5830,"docs":{"brief":"Uploads a file.\n\nThis performs a HTTP PUT request. The file contents are in the request body.","tags":[{"tag":"","text":"Uploads a file.\n\nThis performs a HTTP PUT request. The file contents are in the request body."},{"tag":"param:endpoint","text":"API endpoint to upload to."},{"tag":"param:path","text":"File to read from."},{"tag":"param:callback","text":"A function to use as a callback when the upload has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"endpoint","decl":"const char[] endpoint","default":null},{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"HTTPFileCallback","name":"callback","decl":"HTTPFileCallback callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]}],"properties":[{"name":"ConnectTimeout","docStart":5949,"docEnd":5979,"docs":{"brief":"Connect timeout in seconds.","tags":[{"tag":"","text":"Connect timeout in seconds."}]},"type":"int","getter":true,"setter":true},{"name":"FollowLocation","docStart":6080,"docEnd":6109,"docs":{"brief":"Follow HTTP 3xx redirects.","tags":[{"tag":"","text":"Follow HTTP 3xx redirects."}]},"type":"bool","getter":true,"setter":true},{"name":"Timeout","docStart":6212,"docEnd":6234,"docs":{"brief":"Timeout in seconds.","tags":[{"tag":"","text":"Timeout in seconds."}]},"type":"int","getter":true,"setter":true},{"name":"MaxSendSpeed","docStart":6321,"docEnd":6361,"docs":{"brief":"Max upload speed in bytes per second.","tags":[{"tag":"","text":"Max upload speed in bytes per second."}]},"type":"int","getter":true,"setter":true},{"name":"MaxRecvSpeed","docStart":6451,"docEnd":6493,"docs":{"brief":"Max download speed in bytes per second.","tags":[{"tag":"","text":"Max download speed in bytes per second."}]},"type":"int","getter":true,"setter":true}]},"created":{"hash":"b44b96badc2b31f6b76315cf3bbca1356ba6e613","count":5,"time":1498905000},"last_updated":{"hash":"3ee12838893eeff9df64bfeb2a3022301fded12f","count":67,"time":1599903900}}},"enumstructs":{},"constants":{},"defines":{},"enums":{"HTTPStatus":{"symbol":{"name":"HTTPStatus","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HTTPStatus_Invalid","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"HTTPStatus_Continue","docStart":45,"docEnd":65,"docs":{"brief":"1xx Informational","tags":[{"tag":"","text":"1xx Informational"}]},"value":"100"},{"name":"HTTPStatus_SwitchingProtocols","docStart":0,"docEnd":0,"docs":null,"value":"101"},{"name":"HTTPStatus_OK","docStart":134,"docEnd":148,"docs":{"brief":"2xx Success","tags":[{"tag":"","text":"2xx Success"}]},"value":"200"},{"name":"HTTPStatus_Created","docStart":0,"docEnd":0,"docs":null,"value":"201"},{"name":"HTTPStatus_Accepted","docStart":0,"docEnd":0,"docs":null,"value":"202"},{"name":"HTTPStatus_NonAuthoritativeInformation","docStart":0,"docEnd":0,"docs":null,"value":"203"},{"name":"HTTPStatus_NoContent","docStart":0,"docEnd":0,"docs":null,"value":"204"},{"name":"HTTPStatus_ResetContent","docStart":0,"docEnd":0,"docs":null,"value":"205"},{"name":"HTTPStatus_PartialContent","docStart":0,"docEnd":0,"docs":null,"value":"206"},{"name":"HTTPStatus_MultipleChoices","docStart":370,"docEnd":388,"docs":{"brief":"3xx Redirection","tags":[{"tag":"","text":"3xx Redirection"}]},"value":"300"},{"name":"HTTPStatus_MovedPermanently","docStart":0,"docEnd":0,"docs":null,"value":"301"},{"name":"HTTPStatus_Found","docStart":0,"docEnd":0,"docs":null,"value":"302"},{"name":"HTTPStatus_SeeOther","docStart":0,"docEnd":0,"docs":null,"value":"303"},{"name":"HTTPStatus_NotModified","docStart":0,"docEnd":0,"docs":null,"value":"304"},{"name":"HTTPStatus_UseProxy","docStart":0,"docEnd":0,"docs":null,"value":"305"},{"name":"HTTPStatus_TemporaryRedirect","docStart":0,"docEnd":0,"docs":null,"value":"307"},{"name":"HTTPStatus_PermanentRedirect","docStart":0,"docEnd":0,"docs":null,"value":"308"},{"name":"HTTPStatus_BadRequest","docStart":648,"docEnd":667,"docs":{"brief":"4xx Client Error","tags":[{"tag":"","text":"4xx Client Error"}]},"value":"400"},{"name":"HTTPStatus_Unauthorized","docStart":0,"docEnd":0,"docs":null,"value":"401"},{"name":"HTTPStatus_PaymentRequired","docStart":0,"docEnd":0,"docs":null,"value":"402"},{"name":"HTTPStatus_Forbidden","docStart":0,"docEnd":0,"docs":null,"value":"403"},{"name":"HTTPStatus_NotFound","docStart":0,"docEnd":0,"docs":null,"value":"404"},{"name":"HTTPStatus_MethodNotAllowed","docStart":0,"docEnd":0,"docs":null,"value":"405"},{"name":"HTTPStatus_NotAcceptable","docStart":0,"docEnd":0,"docs":null,"value":"406"},{"name":"HTTPStatus_ProxyAuthenticationRequired","docStart":0,"docEnd":0,"docs":null,"value":"407"},{"name":"HTTPStatus_RequestTimeout","docStart":0,"docEnd":0,"docs":null,"value":"408"},{"name":"HTTPStatus_Conflict","docStart":0,"docEnd":0,"docs":null,"value":"409"},{"name":"HTTPStatus_Gone","docStart":0,"docEnd":0,"docs":null,"value":"410"},{"name":"HTTPStatus_LengthRequired","docStart":0,"docEnd":0,"docs":null,"value":"411"},{"name":"HTTPStatus_PreconditionFailed","docStart":0,"docEnd":0,"docs":null,"value":"412"},{"name":"HTTPStatus_RequestEntityTooLarge","docStart":0,"docEnd":0,"docs":null,"value":"413"},{"name":"HTTPStatus_RequestURITooLong","docStart":0,"docEnd":0,"docs":null,"value":"414"},{"name":"HTTPStatus_UnsupportedMediaType","docStart":0,"docEnd":0,"docs":null,"value":"415"},{"name":"HTTPStatus_RequestedRangeNotSatisfiable","docStart":0,"docEnd":0,"docs":null,"value":"416"},{"name":"HTTPStatus_ExpectationFailed","docStart":0,"docEnd":0,"docs":null,"value":"417"},{"name":"HTTPStatus_MisdirectedRequest","docStart":0,"docEnd":0,"docs":null,"value":"421"},{"name":"HTTPStatus_TooEarly","docStart":0,"docEnd":0,"docs":null,"value":"425"},{"name":"HTTPStatus_UpgradeRequired","docStart":0,"docEnd":0,"docs":null,"value":"426"},{"name":"HTTPStatus_PreconditionRequired","docStart":0,"docEnd":0,"docs":null,"value":"428"},{"name":"HTTPStatus_TooManyRequests","docStart":0,"docEnd":0,"docs":null,"value":"429"},{"name":"HTTPStatus_RequestHeaderFieldsTooLarge","docStart":0,"docEnd":0,"docs":null,"value":"431"},{"name":"HTTPStatus_UnavailableForLegalReasons","docStart":0,"docEnd":0,"docs":null,"value":"451"},{"name":"HTTPStatus_InternalServerError","docStart":1570,"docEnd":1589,"docs":{"brief":"5xx Server Error","tags":[{"tag":"","text":"5xx Server Error"}]},"value":"500"},{"name":"HTTPStatus_NotImplemented","docStart":0,"docEnd":0,"docs":null,"value":"501"},{"name":"HTTPStatus_BadGateway","docStart":0,"docEnd":0,"docs":null,"value":"502"},{"name":"HTTPStatus_ServiceUnavailable","docStart":0,"docEnd":0,"docs":null,"value":"503"},{"name":"HTTPStatus_GatewayTimeout","docStart":0,"docEnd":0,"docs":null,"value":"504"},{"name":"HTTPStatus_HTTPVersionNotSupported","docStart":0,"docEnd":0,"docs":null,"value":"505"},{"name":"HTTPStatus_VariantAlsoNegotiates","docStart":0,"docEnd":0,"docs":null,"value":"506"},{"name":"HTTPStatus_NotExtended","docStart":0,"docEnd":0,"docs":null,"value":"510"},{"name":"HTTPStatus_NetworkAuthenticationRequired","docStart":0,"docEnd":0,"docs":null,"value":"511"}]},"created":{"hash":"b44b96badc2b31f6b76315cf3bbca1356ba6e613","count":5,"time":1498905000},"last_updated":{"hash":"3ee12838893eeff9df64bfeb2a3022301fded12f","count":67,"time":1599903900}}},"typesets":{"HTTPFileCallback":{"symbol":{"name":"HTTPFileCallback","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void(HTTPStatus status, any value)","parsedSignature":{"returnType":"void","arguments":[{"type":"HTTPStatus","name":"status","decl":"HTTPStatus status","default":null},{"type":"any","name":"value","decl":"any value","default":null}]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function void(HTTPStatus status, any value, const char[] error)","parsedSignature":{"returnType":"void","arguments":[{"type":"HTTPStatus","name":"status","decl":"HTTPStatus status","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"const char[]","name":"error","decl":"const char[] error","default":null}]}}]},"created":{"hash":"8a5216bb602dc25dccf116ee016deb6d9eec578f","count":47,"time":1592752554},"last_updated":{"hash":"8a5216bb602dc25dccf116ee016deb6d9eec578f","count":47,"time":1592752554}},"HTTPRequestCallback":{"symbol":{"name":"HTTPRequestCallback","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void(HTTPResponse response, any value)","parsedSignature":{"returnType":"void","arguments":[{"type":"HTTPResponse","name":"response","decl":"HTTPResponse response","default":null},{"type":"any","name":"value","decl":"any value","default":null}]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function void(HTTPResponse response, any value, const char[] error)","parsedSignature":{"returnType":"void","arguments":[{"type":"HTTPResponse","name":"response","decl":"HTTPResponse response","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"const char[]","name":"error","decl":"const char[] error","default":null}]}}]},"created":{"hash":"b44b96badc2b31f6b76315cf3bbca1356ba6e613","count":5,"time":1498905000},"last_updated":{"hash":"1c8c232ae4bfe2e101a44bf42ed9688128f5cf50","count":16,"time":1535297400}}},"typedefs":{}},"ripext":{"functions":{},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_ripext_included_":{"symbol":{"name":"_ripext_included_","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"edc2f4c91186907b05a2f03fb6ab37540ff08592","count":3,"time":1496089800},"last_updated":{"hash":"edc2f4c91186907b05a2f03fb6ab37540ff08592","count":3,"time":1496089800}}},"enums":{},"typesets":{},"typedefs":{}},"json":{"functions":{"JSON_INDENT":{"symbol":{"name":"JSON_INDENT","docStart":923,"docEnd":974,"docs":{"brief":"Pretty-print the result, indenting with n spaces","tags":[{"tag":"","text":"Pretty-print the result, indenting with n spaces"}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"n","decl":"int n","default":null}]},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_REAL_PRECISION":{"symbol":{"name":"JSON_REAL_PRECISION","docStart":1038,"docEnd":1089,"docs":{"brief":"Output floats with at most n digits of precision","tags":[{"tag":"","text":"Output floats with at most n digits of precision"}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"n","decl":"int n","default":null}]},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}}},"methodmaps":{"JSONObject":{"symbol":{"name":"JSONObject","docStart":0,"docEnd":0,"docs":null,"parent":"JSON","methods":[{"name":"JSONObject","docStart":1837,"docEnd":2084,"docs":{"brief":"Creates a JSON object. A JSON object maps strings (called \"keys\") to values. Keys in a\nJSON object are unique. That is, there is at most one entry in the map for a given key.\n\nThe JSONObject must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Creates a JSON object. A JSON object maps strings (called \"keys\") to values. Keys in a\nJSON object are unique. That is, there is at most one entry in the map for a given key.\n\nThe JSONObject must be freed via delete or CloseHandle()."}]},"kind":"native","returnType":"JSONObject","arguments":[]},{"name":"FromFile","docStart":2116,"docEnd":2327,"docs":{"brief":"Loads a JSON object from a file.","tags":[{"tag":"","text":"Loads a JSON object from a file."},{"tag":"param:file","text":"File to read from."},{"tag":"param:flags","text":"Decoding flags."},{"tag":"return","text":"Object handle, or null on failure."},{"tag":"error","text":"Invalid JSON."}]},"kind":"native","returnType":"JSONObject","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"FromString","docStart":2407,"docEnd":2645,"docs":{"brief":"Loads a JSON object from a string.","tags":[{"tag":"","text":"Loads a JSON object from a string."},{"tag":"param:buffer","text":"String buffer to load into the JSON object."},{"tag":"param:flags","text":"Decoding flags."},{"tag":"return","text":"Object handle, or null on failure."},{"tag":"error","text":"Invalid JSON."}]},"kind":"native","returnType":"JSONObject","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"Get","docStart":2729,"docEnd":2950,"docs":{"brief":"Retrieves an array or object value from the object.\n\nThe JSON must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Retrieves an array or object value from the object.\n\nThe JSON must be freed via delete or CloseHandle()."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid key."}]},"kind":"native","returnType":"JSON","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetBool","docStart":2996,"docEnd":3148,"docs":{"brief":"Retrieves a boolean value from the object.","tags":[{"tag":"","text":"Retrieves a boolean value from the object."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetFloat","docStart":3198,"docEnd":3348,"docs":{"brief":"Retrieves a float value from the object.","tags":[{"tag":"","text":"Retrieves a float value from the object."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid key."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetInt","docStart":3400,"docEnd":3553,"docs":{"brief":"Retrieves an integer value from the object.","tags":[{"tag":"","text":"Retrieves an integer value from the object."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid key."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetInt64","docStart":3601,"docEnd":3873,"docs":{"brief":"Retrieves a 64-bit integer value from the object.","tags":[{"tag":"","text":"Retrieves a 64-bit integer value from the object."},{"tag":"param:key","text":"Key string."},{"tag":"param:buffer","text":"String buffer to store value."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"return","text":"True on success, false if the key was not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetString","docStart":3954,"docEnd":4248,"docs":{"brief":"Retrieves a string value from the object.","tags":[{"tag":"","text":"Retrieves a string value from the object."},{"tag":"param:key","text":"Key string."},{"tag":"param:buffer","text":"String buffer to store value."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"return","text":"True on success. False if the key was not found, or the value is not a string."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"IsNull","docStart":4330,"docEnd":4525,"docs":{"brief":"Returns whether or not a value in the object is null.","tags":[{"tag":"","text":"Returns whether or not a value in the object is null."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True if the value is null, false otherwise."},{"tag":"error","text":"Invalid key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"HasKey","docStart":4574,"docEnd":4728,"docs":{"brief":"Returns whether or not a key exists in the object.","tags":[{"tag":"","text":"Returns whether or not a key exists in the object."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True if the key exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"Set","docStart":4777,"docEnd":5023,"docs":{"brief":"Sets an array or object value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets an array or object value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSON","name":"value","decl":"JSON value","default":null}]},{"name":"SetBool","docStart":5081,"docEnd":5318,"docs":{"brief":"Sets a boolean value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a boolean value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"SetFloat","docStart":5380,"docEnd":5615,"docs":{"brief":"Sets a float value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a float value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetInt","docStart":5679,"docEnd":5917,"docs":{"brief":"Sets an integer value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets an integer value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetInt64","docStart":5977,"docEnd":6221,"docs":{"brief":"Sets a 64-bit integer value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a 64-bit integer value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetNull","docStart":6292,"docEnd":6476,"docs":{"brief":"Sets a null value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a null value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"SetString","docStart":6526,"docEnd":6762,"docs":{"brief":"Sets a string value in the object, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a string value in the object, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Remove","docStart":6834,"docEnd":6979,"docs":{"brief":"Removes an entry from the object.","tags":[{"tag":"","text":"Removes an entry from the object."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True on success, false if the key was not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"Clear","docStart":7028,"docEnd":7121,"docs":{"brief":"Clears the object of all entries.","tags":[{"tag":"","text":"Clears the object of all entries."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"Keys","docStart":7153,"docEnd":7218,"docs":{"brief":"Returns an iterator for the object's keys. See JSONObjectKeys.","tags":[{"tag":"","text":"Returns an iterator for the object's keys. See JSONObjectKeys."}]},"kind":"native","returnType":"JSONObjectKeys","arguments":[]}],"properties":[{"name":"Size","docStart":7259,"docEnd":7295,"docs":{"brief":"Retrieves the size of the object.","tags":[{"tag":"","text":"Retrieves the size of the object."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSONObjectKeys":{"symbol":{"name":"JSONObjectKeys","docStart":7347,"docEnd":7525,"docs":{"brief":"A JSONObjectKeys is created via JSONObject.Keys(). It allows the keys of an\nobject to be iterated. The JSONObjectKeys must be freed with delete or\nCloseHandle().","tags":[{"tag":"","text":"A JSONObjectKeys is created via JSONObject.Keys(). It allows the keys of an\nobject to be iterated. The JSONObjectKeys must be freed with delete or\nCloseHandle()."}]},"parent":"Handle","methods":[{"name":"ReadKey","docStart":7563,"docEnd":7809,"docs":{"brief":"Reads an object key, then advances to the next key if any.","tags":[{"tag":"","text":"Reads an object key, then advances to the next key if any."},{"tag":"param:buffer","text":"String buffer to store key."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"return","text":"True on success, false if there are no more keys."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"properties":[]},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSONArray":{"symbol":{"name":"JSONArray","docStart":0,"docEnd":0,"docs":null,"parent":"JSON","methods":[{"name":"JSONArray","docStart":7903,"docEnd":7992,"docs":{"brief":"Creates a JSON array.\n\nThe JSONArray must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Creates a JSON array.\n\nThe JSONArray must be freed via delete or CloseHandle()."}]},"kind":"native","returnType":"JSONArray","arguments":[]},{"name":"FromFile","docStart":8023,"docEnd":8232,"docs":{"brief":"Loads a JSON array from a file.","tags":[{"tag":"","text":"Loads a JSON array from a file."},{"tag":"param:file","text":"File to read from."},{"tag":"param:flags","text":"Decoding flags."},{"tag":"return","text":"Array handle, or null on failure."},{"tag":"error","text":"Invalid JSON."}]},"kind":"native","returnType":"JSONArray","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"FromString","docStart":8311,"docEnd":8546,"docs":{"brief":"Loads a JSON array from a string.","tags":[{"tag":"","text":"Loads a JSON array from a string."},{"tag":"param:buffer","text":"String buffer to load into the JSON array."},{"tag":"param:flags","text":"Decoding flags."},{"tag":"return","text":"Array handle, or null on failure."},{"tag":"error","text":"Invalid JSON."}]},"kind":"native","returnType":"JSONArray","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"Get","docStart":8629,"docEnd":8859,"docs":{"brief":"Retrieves an array or object value from the array.\n\nThe JSON must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Retrieves an array or object value from the array.\n\nThe JSON must be freed via delete or CloseHandle()."},{"tag":"param:index","text":"Index in the array."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"JSON","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetBool","docStart":8898,"docEnd":9059,"docs":{"brief":"Retrieves a boolean value from the array.","tags":[{"tag":"","text":"Retrieves a boolean value from the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetFloat","docStart":9102,"docEnd":9261,"docs":{"brief":"Retrieves a float value from the array.","tags":[{"tag":"","text":"Retrieves a float value from the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetInt","docStart":9306,"docEnd":9468,"docs":{"brief":"Retrieves an integer value from the array.","tags":[{"tag":"","text":"Retrieves an integer value from the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetInt64","docStart":9509,"docEnd":9735,"docs":{"brief":"Retrieves an 64-bit integer value from the array.","tags":[{"tag":"","text":"Retrieves an 64-bit integer value from the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetString","docStart":9809,"docEnd":10101,"docs":{"brief":"Retrieves a string value from the array.","tags":[{"tag":"","text":"Retrieves a string value from the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"True on success, false if the value is not a string."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"IsNull","docStart":10176,"docEnd":10380,"docs":{"brief":"Returns whether or not a value in the array is null.","tags":[{"tag":"","text":"Returns whether or not a value in the array is null."},{"tag":"param:index","text":"Index in the array."},{"tag":"return","text":"True if the value is null, false otherwise."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"Set","docStart":10422,"docEnd":10607,"docs":{"brief":"Sets an array or object value in the array.","tags":[{"tag":"","text":"Sets an array or object value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Value to set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSON","name":"value","decl":"JSON value","default":null}]},{"name":"SetBool","docStart":10658,"docEnd":10834,"docs":{"brief":"Sets a boolean value in the array.","tags":[{"tag":"","text":"Sets a boolean value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Value to set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"SetFloat","docStart":10889,"docEnd":11063,"docs":{"brief":"Sets a float value in the array.","tags":[{"tag":"","text":"Sets a float value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Value to set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetInt","docStart":11120,"docEnd":11297,"docs":{"brief":"Sets an integer value in the array.","tags":[{"tag":"","text":"Sets an integer value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Value to set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetInt64","docStart":11350,"docEnd":11548,"docs":{"brief":"Sets a 64 bit integer value in the array.","tags":[{"tag":"","text":"Sets a 64 bit integer value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"64-bit integer value to set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetNull","docStart":11612,"docEnd":11749,"docs":{"brief":"Sets a null value in the array.","tags":[{"tag":"","text":"Sets a null value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SetString","docStart":11792,"docEnd":11974,"docs":{"brief":"Sets a string value in the array.","tags":[{"tag":"","text":"Sets a string value in the array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"String value to set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Push","docStart":12039,"docEnd":12218,"docs":{"brief":"Pushes an array or object value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes an array or object value onto the end of the array, adding a new index."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"JSON","name":"value","decl":"JSON value","default":null}]},{"name":"PushBool","docStart":12259,"docEnd":12429,"docs":{"brief":"Pushes a boolean value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes a boolean value onto the end of the array, adding a new index."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"PushFloat","docStart":12474,"docEnd":12642,"docs":{"brief":"Pushes a float value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes a float value onto the end of the array, adding a new index."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"PushInt","docStart":12689,"docEnd":12860,"docs":{"brief":"Pushes an integer value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes an integer value onto the end of the array, adding a new index."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"PushInt64","docStart":12903,"docEnd":13095,"docs":{"brief":"Pushes a 64-bit integer value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes a 64-bit integer value onto the end of the array, adding a new index."},{"tag":"param:value","text":"64-bit integer value to push."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushNull","docStart":13149,"docEnd":13275,"docs":{"brief":"Pushes a null value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes a null value onto the end of the array, adding a new index."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"PushString","docStart":13310,"docEnd":13486,"docs":{"brief":"Pushes a string value onto the end of the array, adding a new index.","tags":[{"tag":"","text":"Pushes a string value onto the end of the array, adding a new index."},{"tag":"param:value","text":"String value to push."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Remove","docStart":13541,"docEnd":13695,"docs":{"brief":"Removes an entry from the array.","tags":[{"tag":"","text":"Removes an entry from the array."},{"tag":"param:index","text":"Index in the array to remove."},{"tag":"return","text":"True on success, false on invalid index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"Clear","docStart":13737,"docEnd":13829,"docs":{"brief":"Clears the array of all entries.","tags":[{"tag":"","text":"Clears the array of all entries."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[]}],"properties":[{"name":"Length","docStart":13861,"docEnd":13896,"docs":{"brief":"Retrieves the size of the array.","tags":[{"tag":"","text":"Retrieves the size of the array."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON":{"symbol":{"name":"JSON","docStart":1158,"docEnd":1192,"docs":{"brief":"Generic type for encoding JSON.","tags":[{"tag":"","text":"Generic type for encoding JSON."}]},"parent":"Handle","methods":[{"name":"ToFile","docStart":1220,"docEnd":1410,"docs":{"brief":"Writes the JSON string representation to a file.","tags":[{"tag":"","text":"Writes the JSON string representation to a file."},{"tag":"param:file","text":"File to write to."},{"tag":"param:flags","text":"Encoding flags."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"ToString","docStart":1475,"docEnd":1726,"docs":{"brief":"Retrieves the JSON string representation.","tags":[{"tag":"","text":"Retrieves the JSON string representation."},{"tag":"param:buffer","text":"String buffer to write to."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"param:flags","text":"Encoding flags."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]}],"properties":[]},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}}},"enumstructs":{},"constants":{"JSON_ENSURE_ASCII":{"symbol":{"name":"JSON_ENSURE_ASCII","docStart":537,"docEnd":598,"docs":{"brief":"Escape all Unicode characters outside the ASCII range","tags":[{"tag":"","text":"Escape all Unicode characters outside the ASCII range"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_COMPACT":{"symbol":{"name":"JSON_COMPACT","docStart":478,"docEnd":508,"docs":{"brief":"Compact representation","tags":[{"tag":"","text":"Compact representation"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_SORT_KEYS":{"symbol":{"name":"JSON_SORT_KEYS","docStart":627,"docEnd":651,"docs":{"brief":"Sort object keys","tags":[{"tag":"","text":"Sort object keys"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_DISABLE_EOF_CHECK":{"symbol":{"name":"JSON_DISABLE_EOF_CHECK","docStart":148,"docEnd":207,"docs":{"brief":"Allow extra data after a valid JSON array or object","tags":[{"tag":"","text":"Allow extra data after a valid JSON array or object"}]}},"created":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_ESCAPE_SLASH":{"symbol":{"name":"JSON_ESCAPE_SLASH","docStart":735,"docEnd":759,"docs":{"brief":"Escape / with \\/","tags":[{"tag":"","text":"Escape / with \\/"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_DECODE_INT_AS_REAL":{"symbol":{"name":"JSON_DECODE_INT_AS_REAL","docStart":299,"docEnd":338,"docs":{"brief":"Interpret all numbers as floats","tags":[{"tag":"","text":"Interpret all numbers as floats"}]}},"created":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_MAX_INDENT":{"symbol":{"name":"JSON_MAX_INDENT","docStart":53,"docEnd":80,"docs":{"brief":"Maximum indentation","tags":[{"tag":"","text":"Maximum indentation"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231}},"JSON_EMBED":{"symbol":{"name":"JSON_EMBED","docStart":790,"docEnd":853,"docs":{"brief":"Omit opening and closing braces of the top-level object","tags":[{"tag":"","text":"Omit opening and closing braces of the top-level object"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_DECODE_ANY":{"symbol":{"name":"JSON_DECODE_ANY","docStart":241,"docEnd":265,"docs":{"brief":"Decode any value","tags":[{"tag":"","text":"Decode any value"}]}},"created":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_ALLOW_NUL":{"symbol":{"name":"JSON_ALLOW_NUL","docStart":372,"docEnd":420,"docs":{"brief":"Allow \\u0000 escape inside string values","tags":[{"tag":"","text":"Allow \\u0000 escape inside string values"}]}},"created":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_ENCODE_ANY":{"symbol":{"name":"JSON_ENCODE_ANY","docStart":681,"docEnd":705,"docs":{"brief":"Encode any value","tags":[{"tag":"","text":"Encode any value"}]}},"created":{"hash":"109066d4a83d19188c97f84680f0df81ca356d12","count":52,"time":1592761231},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}},"JSON_REJECT_DUPLICATES":{"symbol":{"name":"JSON_REJECT_DUPLICATES","docStart":58,"docEnd":114,"docs":{"brief":"Error if any JSON object contains duplicate keys","tags":[{"tag":"","text":"Error if any JSON object contains duplicate keys"}]}},"created":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800},"last_updated":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}}},"defines":{},"enums":{},"typesets":{},"typedefs":{}}},"version":{"hash":"1b4b6068ff3ef0d768324179a48a1af1b453c7d7","count":68,"time":1599904800}}