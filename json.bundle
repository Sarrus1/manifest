{"meta":{"name":"JSON","description":"A pure SourcePawn JSON encoder/decoder","author":"Clugg"},"source":{"type":"git","merge":true,"repository":"https://github.com/clugg/sm-json.git","endpoints":null,"patterns":["addons/sourcemod/scripting/include/json.inc","addons/sourcemod/scripting/include/json/*.inc","addons/sourcemod/scripting/include/json/helpers/*.inc"]},"strands":{"definitions":{"functions":{"json_format_meta_key":{"symbol":{"name":"json_format_meta_key","refLine":145,"docStart":3907,"docEnd":4185,"docs":{"brief":"Formats the key/metainfo combination into a buffer.","tags":[{"tag":"","text":"Formats the key/metainfo combination into a buffer."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:key","text":"Key to generate metakey for."},{"tag":"param:meta","text":"Meta information to generate metakey for."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null}]},"created":{"hash":"ca5d82469be1789fe95ca425a537275373453007","count":148,"time":1586451664},"last_updated":{"hash":"0dca0399a852abd0369374e9c2b1a6be048c1c39","count":214,"time":1619949936}},"json_escape_string":{"symbol":{"name":"json_escape_string","refLine":0,"docStart":2665,"docEnd":2832,"docs":{"brief":"Escapes a string based on the rules defined in json/definitions.inc","tags":[{"tag":"","text":"Escapes a string based on the rules defined in json/definitions.inc"},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum buffer length."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"e9913970d4da947e0a8435ed634ae9a40aa4ecdf","count":63,"time":1569732333}},"json_meta_key_length":{"symbol":{"name":"json_meta_key_length","refLine":131,"docStart":3608,"docEnd":3788,"docs":{"brief":"Calculates the length required to store a meta key\nfor a specified key/metainfo combination.","tags":[{"tag":"","text":"Calculates the length required to store a meta key\nfor a specified key/metainfo combination."},{"tag":"param:unknown","text":"key"},{"tag":"returns","text":"The length required to store the meta key."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},"created":{"hash":"ca5d82469be1789fe95ca425a537275373453007","count":148,"time":1586451664},"last_updated":{"hash":"0dca0399a852abd0369374e9c2b1a6be048c1c39","count":214,"time":1619949936}},"json_unescape_string":{"symbol":{"name":"json_unescape_string","refLine":0,"docStart":3046,"docEnd":3215,"docs":{"brief":"Unescapes a string based on the rules defined in json/definitions.inc","tags":[{"tag":"","text":"Unescapes a string based on the rules defined in json/definitions.inc"},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum buffer length."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"e9913970d4da947e0a8435ed634ae9a40aa4ecdf","count":63,"time":1569732333}},"json_is_meta_key":{"symbol":{"name":"json_is_meta_key","refLine":161,"docStart":4373,"docEnd":4528,"docs":{"brief":"Checks whether the key provided is a metadata key.","tags":[{"tag":"","text":"Checks whether the key provided is a metadata key."},{"tag":"param:key","text":"Key to check."},{"tag":"returns","text":"True when it is a meta-key, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"0dca0399a852abd0369374e9c2b1a6be048c1c39","count":214,"time":1619949936}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"JSON_NONE":{"symbol":{"name":"JSON_NONE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"0"},"created":{"hash":"bac9652512ad8d54ca1461f3a77b07bceb90546f","count":157,"time":1586458705},"last_updated":{"hash":"bac9652512ad8d54ca1461f3a77b07bceb90546f","count":157,"time":1586458705}},"JSON_META_LENGTH_KEY":{"symbol":{"name":"JSON_META_LENGTH_KEY","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\":length\""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_FLOAT_BUFFER_SIZE":{"symbol":{"name":"JSON_FLOAT_BUFFER_SIZE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"32"},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_BOOL_BUFFER_SIZE":{"symbol":{"name":"JSON_BOOL_BUFFER_SIZE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"6"},"created":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265},"last_updated":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265}},"JSON_META_TYPE_KEY":{"symbol":{"name":"JSON_META_TYPE_KEY","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\":type\""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_MERGE_REPLACE":{"symbol":{"name":"JSON_MERGE_REPLACE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"1 << 0"},"created":{"hash":"35b5d8dff35196ba42467914814efbee9ee2edd4","count":158,"time":1586458705},"last_updated":{"hash":"79bd71d029a1596824a0cd463354b18eff621379","count":195,"time":1591271938}},"JSON_ENCODE_PRETTY":{"symbol":{"name":"JSON_ENCODE_PRETTY","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"1 << 0"},"created":{"hash":"bac9652512ad8d54ca1461f3a77b07bceb90546f","count":157,"time":1586458705},"last_updated":{"hash":"bac9652512ad8d54ca1461f3a77b07bceb90546f","count":157,"time":1586458705}},"_json_definitions_included":{"symbol":{"name":"_json_definitions_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_DECODE_SINGLE_QUOTES":{"symbol":{"name":"JSON_DECODE_SINGLE_QUOTES","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"1 << 0"},"created":{"hash":"3fa7a6c480dbd5ebf3f436e243fa7889ed9824ea","count":159,"time":1586458705},"last_updated":{"hash":"79bd71d029a1596824a0cd463354b18eff621379","count":195,"time":1591271938}},"JSON_ARRAY_TYPE_KEY":{"symbol":{"name":"JSON_ARRAY_TYPE_KEY","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\"__array_type\""},"created":{"hash":"d58c110ffdf9da5130317ab8faa8dff5f8737a32","count":152,"time":1586458703},"last_updated":{"hash":"d58c110ffdf9da5130317ab8faa8dff5f8737a32","count":152,"time":1586458703}},"JSON_INDEX_BUFFER_SIZE":{"symbol":{"name":"JSON_INDEX_BUFFER_SIZE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"16"},"created":{"hash":"80205cdaa8adb9fde0c92ae34d0514d66d1a1ad9","count":22,"time":1554734657},"last_updated":{"hash":"80205cdaa8adb9fde0c92ae34d0514d66d1a1ad9","count":22,"time":1554734657}},"JSON_BUFFER_SIZE":{"symbol":{"name":"JSON_BUFFER_SIZE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"8192"},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_PP_AFTER_COLON":{"symbol":{"name":"JSON_PP_AFTER_COLON","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\" \""},"created":{"hash":"885953eda6c8eb0c85e7777af2a1bab1094232f1","count":40,"time":1554750300},"last_updated":{"hash":"885953eda6c8eb0c85e7777af2a1bab1094232f1","count":40,"time":1554750300}},"JSON_NULL_BUFFER_SIZE":{"symbol":{"name":"JSON_NULL_BUFFER_SIZE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"5"},"created":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265},"last_updated":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265}},"JSON_META_HIDDEN_KEY":{"symbol":{"name":"JSON_META_HIDDEN_KEY","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\":hidden\""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_PP_INDENT":{"symbol":{"name":"JSON_PP_INDENT","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\"    \""},"created":{"hash":"885953eda6c8eb0c85e7777af2a1bab1094232f1","count":40,"time":1554750300},"last_updated":{"hash":"885953eda6c8eb0c85e7777af2a1bab1094232f1","count":40,"time":1554750300}},"JSON_ARRAY_INDEX_KEY":{"symbol":{"name":"JSON_ARRAY_INDEX_KEY","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\"__array_index\""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_PP_NEWLINE":{"symbol":{"name":"JSON_PP_NEWLINE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"\"\n\""},"created":{"hash":"885953eda6c8eb0c85e7777af2a1bab1094232f1","count":40,"time":1554750300},"last_updated":{"hash":"885953eda6c8eb0c85e7777af2a1bab1094232f1","count":40,"time":1554750300}},"JSON_INDEX_BUFFER_LENGTH":{"symbol":{"name":"JSON_INDEX_BUFFER_LENGTH","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"16"},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}},"JSON_INT_BUFFER_SIZE":{"symbol":{"name":"JSON_INT_BUFFER_SIZE","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"12"},"created":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265},"last_updated":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265}},"JSON_MERGE_CLEANUP":{"symbol":{"name":"JSON_MERGE_CLEANUP","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"1 << 1"},"created":{"hash":"35b5d8dff35196ba42467914814efbee9ee2edd4","count":158,"time":1586458705},"last_updated":{"hash":"79bd71d029a1596824a0cd463354b18eff621379","count":195,"time":1591271938}}},"enums":{"JSONMetaInfo":{"symbol":{"name":"JSONMetaInfo","refLine":111,"docStart":3315,"docEnd":3367,"docs":{"brief":"Types of metadata a JSON element can have","tags":[{"tag":"","text":"Types of metadata a JSON element can have"}]},"entries":[{"name":"JSON_Meta_Type","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"JSON_Meta_Length","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_Meta_Hidden","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"ca5d82469be1789fe95ca425a537275373453007","count":148,"time":1586451664},"last_updated":{"hash":"0dca0399a852abd0369374e9c2b1a6be048c1c39","count":214,"time":1619949936}},"JSON_CELL_TYPE":{"symbol":{"name":"JSON_CELL_TYPE","refLine":0,"docStart":2893,"docEnd":2939,"docs":{"brief":"Types of cells within a JSON object","tags":[{"tag":"","text":"Types of cells within a JSON object"}]},"entries":[{"name":"Type_Invalid","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"-1"},{"name":"Type_String","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"Type_Int","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Type_Float","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Type_Bool","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Type_Null","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Type_Object","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"4dbc7868f310e909ba91b17e61c93216b4fe24b1","count":139,"time":1586191265}},"JSONCellType":{"symbol":{"name":"JSONCellType","refLine":99,"docStart":3109,"docEnd":3155,"docs":{"brief":"Types of cells within a JSON object","tags":[{"tag":"","text":"Types of cells within a JSON object"}]},"entries":[{"name":"JSON_Type_Invalid","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"-1"},{"name":"JSON_Type_String","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"JSON_Type_Int","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_Type_Float","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_Type_Bool","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_Type_Object","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"04728bd9afc0f3149e22e99cf4ecbcdd43074edb","count":146,"time":1586451664},"last_updated":{"hash":"0dca0399a852abd0369374e9c2b1a6be048c1c39","count":214,"time":1619949936}}},"typesets":{},"typedefs":{}},"decode_helpers":{"functions":{"json_is_bool":{"symbol":{"name":"json_is_bool","refLine":0,"docStart":7265,"docEnd":7442,"docs":{"brief":"Checks whether the buffer provided contains a bool.","tags":[{"tag":"","text":"Checks whether the buffer provided contains a bool."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains a bool, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_int":{"symbol":{"name":"json_is_int","refLine":0,"docStart":2627,"docEnd":2804,"docs":{"brief":"Checks whether the buffer provided contains an int.","tags":[{"tag":"","text":"Checks whether the buffer provided contains an int."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains an int, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_extract_bool":{"symbol":{"name":"json_extract_bool","refLine":0,"docStart":14689,"docEnd":14840,"docs":{"brief":"Extracts a bool from the buffer.","tags":[{"tag":"","text":"Extracts a bool from the buffer."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"Bool value of the buffer."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_whitespace":{"symbol":{"name":"json_is_whitespace","refLine":0,"docStart":1844,"docEnd":2104,"docs":{"brief":"Checks whether the character at the given\nposition in the buffer is whitespace.","tags":[{"tag":"","text":"Checks whether the character at the given\nposition in the buffer is whitespace."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:pos","text":"Position to check in buffer."},{"tag":"returns","text":"True if buffer[pos] is whitespace, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"d43da6b066ad4a4cc5d72e8ab9d7009e1251c777","count":56,"time":1569512228}},"json_is_array":{"symbol":{"name":"json_is_array","refLine":0,"docStart":8496,"docEnd":8746,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an array.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is the start of an array, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_array_end":{"symbol":{"name":"json_is_array_end","refLine":0,"docStart":8827,"docEnd":9077,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an array.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is the start of an array, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_object_end":{"symbol":{"name":"json_is_object_end","refLine":0,"docStart":8162,"docEnd":8410,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the end of an object.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the end of an object."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is the end of an object, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_string":{"symbol":{"name":"json_is_string","refLine":0,"docStart":2295,"docEnd":2545,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of a string.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of a string."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is the start of a string, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_object":{"symbol":{"name":"json_is_object","refLine":0,"docStart":7828,"docEnd":8080,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an object.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an object."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is the start of an object, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_extract_until_end":{"symbol":{"name":"json_extract_until_end","refLine":0,"docStart":10349,"docEnd":10896,"docs":{"brief":"Extracts a JSON cell from the buffer until\na valid end point is reached.","tags":[{"tag":"","text":"Extracts a JSON cell from the buffer until\na valid end point is reached."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:output_maxlen","text":"Maximum size of output string buffer."},{"tag":"param:is_array","text":"Whether the decoder is currently processing an array."},{"tag":"returns","text":"True if pos is not at the end of the buffer, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"output_maxlen","decl":"int output_maxlen","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_extract_float":{"symbol":{"name":"json_extract_float","refLine":0,"docStart":14444,"docEnd":14597,"docs":{"brief":"Extracts a float from the buffer.","tags":[{"tag":"","text":"Extracts a float from the buffer."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"Float value of the buffer."}]},"kind":"stock","returnType":"float","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_extract_int":{"symbol":{"name":"json_extract_int","refLine":0,"docStart":14208,"docEnd":14358,"docs":{"brief":"Extracts an int from the buffer.","tags":[{"tag":"","text":"Extracts an int from the buffer."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"Int value of the buffer."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_skip_whitespace":{"symbol":{"name":"json_skip_whitespace","refLine":0,"docStart":9820,"docEnd":10159,"docs":{"brief":"Moves the position until it reaches a non-whitespace\ncharacter or the end of the buffer's maximum size.","tags":[{"tag":"","text":"Moves the position until it reaches a non-whitespace\ncharacter or the end of the buffer's maximum size."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"returns","text":"True if pos is not at the end of the buffer, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_float":{"symbol":{"name":"json_is_float","refLine":0,"docStart":3806,"docEnd":3985,"docs":{"brief":"Checks whether the buffer provided contains a float.","tags":[{"tag":"","text":"Checks whether the buffer provided contains a float."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains a float, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_extract_string":{"symbol":{"name":"json_extract_string","refLine":0,"docStart":11697,"docEnd":12246,"docs":{"brief":"Extracts a JSON string from the buffer until\na valid end point is reached.","tags":[{"tag":"","text":"Extracts a JSON string from the buffer until\na valid end point is reached."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:output_maxlen","text":"Maximum size of output string buffer."},{"tag":"param:is_array","text":"Whether the decoder is currently processing an array."},{"tag":"returns","text":"True if pos is not at the end of the buffer, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"output_maxlen","decl":"int output_maxlen","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_null":{"symbol":{"name":"json_is_null","refLine":0,"docStart":7567,"docEnd":7740,"docs":{"brief":"Checks whether the buffer provided contains null.","tags":[{"tag":"","text":"Checks whether the buffer provided contains null."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains null, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_is_at_end":{"symbol":{"name":"json_is_at_end","refLine":0,"docStart":9162,"docEnd":9580,"docs":{"brief":"Checks whether the character at the given position in the buffer\nis considered a valid 'end point' for some data, such as a\ncolon (indicating a key), a comma (indicating a new element),\nor the end of an object or array.","tags":[{"tag":"","text":"Checks whether the character at the given position in the buffer\nis considered a valid 'end point' for some data, such as a\ncolon (indicating a key), a comma (indicating a new element),\nor the end of an object or array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:pos","text":"Position to check in buffer."},{"tag":"returns","text":"True if buffer[pos] is a valid data end point, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_decode_helpers_included":{"symbol":{"name":"_json_decode_helpers_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}}},"enums":{},"typesets":{},"typedefs":{}},"object":{"functions":{},"methodmaps":{"JSON_Object":{"symbol":{"name":"JSON_Object","refLine":0,"docStart":0,"docEnd":0,"docs":null,"parent":"StringMap","methods":[{"name":"HasKey","refLine":65,"docStart":2013,"docEnd":2183,"docs":{"brief":"Checks whether the object has a key.","tags":[{"tag":"","text":"Checks whether the object has a key."},{"tag":"param:key","text":"Key to check existence of."},{"tag":"returns","text":"True if the key exists, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetMetadata","refLine":0,"docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"any","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null},{"type":"any","name":"default_value","decl":"any default_value","default":null}]},{"name":"GetKeyType","refLine":127,"docStart":3412,"docEnd":3632,"docs":{"brief":"Gets the cell type stored at a key.","tags":[{"tag":"","text":"Gets the cell type stored at a key."},{"tag":"param:key","text":"Key to get value type for."},{"tag":"returns","text":"Value type for key provided,\nor JSON_Type_Invalid if it does not exist."}]},"kind":"stock","returnType":"JSONCellType","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetKeyLength","refLine":141,"docStart":3821,"docEnd":4061,"docs":{"brief":"Gets the length of the string stored at a key.","tags":[{"tag":"","text":"Gets the length of the string stored at a key."},{"tag":"param:key","text":"Key to get string length for."},{"tag":"returns","text":"Length of string at key provided,\nor -1 if it is not a string/does not exist."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetKeyHidden","refLine":152,"docStart":4199,"docEnd":4387,"docs":{"brief":"Gets whether the key should be hidden from encoding.","tags":[{"tag":"","text":"Gets whether the key should be hidden from encoding."},{"tag":"param:key","text":"Key to get hidden state for."},{"tag":"returns","text":"Whether or not the key should be hidden."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"SetMetadata","refLine":0,"docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"RemoveMetadata","refLine":0,"docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null}]},{"name":"SetKeyType","refLine":192,"docStart":5301,"docEnd":5503,"docs":{"brief":"Sets the cell type stored at a key.","tags":[{"tag":"","text":"Sets the cell type stored at a key."},{"tag":"param:key","text":"Key to set value type for."},{"tag":"param:type","text":"Type to set key to."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":null}]},{"name":"SetKeyLength","refLine":204,"docStart":5645,"docEnd":5878,"docs":{"brief":"Sets the length of the string stored at a key.","tags":[{"tag":"","text":"Sets the length of the string stored at a key."},{"tag":"param:key","text":"Key to set string length for."},{"tag":"param:length","text":"Length to set string to."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},{"name":"SetKeyHidden","refLine":216,"docStart":6019,"docEnd":6272,"docs":{"brief":"Sets whether the key should be hidden from encoding.","tags":[{"tag":"","text":"Sets whether the key should be hidden from encoding."},{"tag":"param:key","text":"Key to set hidden state for."},{"tag":"param:hidden","text":"Wheter or not the key should be hidden."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"hidden","decl":"bool hidden","default":null}]},{"name":"GetInt","refLine":236,"docStart":6564,"docEnd":6804,"docs":{"brief":"Retrieves the int stored at a key.","tags":[{"tag":"","text":"Retrieves the int stored at a key."},{"tag":"param:key","text":"Key to retrieve int value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"default_value","decl":"int default_value","default":"-1"}]},{"name":"GetFloat","refLine":249,"docStart":6971,"docEnd":7215,"docs":{"brief":"Retrieves the float stored at a key.","tags":[{"tag":"","text":"Retrieves the float stored at a key."},{"tag":"param:key","text":"Key to retrieve float value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"default_value","decl":"float default_value","default":"-1.000000"}]},{"name":"GetBool","refLine":262,"docStart":7392,"docEnd":7634,"docs":{"brief":"Retrieves the bool stored at a key.","tags":[{"tag":"","text":"Retrieves the bool stored at a key."},{"tag":"param:key","text":"Key to retrieve bool value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"default_value","decl":"bool default_value","default":"false"}]},{"name":"GetObject","refLine":275,"docStart":7808,"docEnd":8059,"docs":{"brief":"Retrieves the JSON object stored at a key.","tags":[{"tag":"","text":"Retrieves the JSON object stored at a key."},{"tag":"param:key","text":"Key to retrieve object value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSON_Object","name":"default_value","decl":"JSON_Object default_value","default":"null"}]},{"name":"SetString","refLine":295,"docStart":8318,"docEnd":8524,"docs":{"brief":"Sets the string stored at a key.","tags":[{"tag":"","text":"Sets the string stored at a key."},{"tag":"param:key","text":"Key to set to string value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetInt","refLine":309,"docStart":8762,"docEnd":8962,"docs":{"brief":"Sets the int stored at a key.","tags":[{"tag":"","text":"Sets the int stored at a key."},{"tag":"param:key","text":"Key to set to int value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetFloat","refLine":322,"docStart":9125,"docEnd":9329,"docs":{"brief":"Sets the float stored at a key.","tags":[{"tag":"","text":"Sets the float stored at a key."},{"tag":"param:key","text":"Key to set to float value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetBool","refLine":335,"docStart":9498,"docEnd":9700,"docs":{"brief":"Sets the bool stored at a key.","tags":[{"tag":"","text":"Sets the bool stored at a key."},{"tag":"param:key","text":"Key to set to bool value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"SetObject","refLine":348,"docStart":9866,"docEnd":10077,"docs":{"brief":"Sets the JSON object stored at a key.","tags":[{"tag":"","text":"Sets the JSON object stored at a key."},{"tag":"param:key","text":"Key to set to object value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSON_Object","name":"value","decl":"JSON_Object value","default":null}]},{"name":"Remove","refLine":364,"docStart":10307,"docEnd":10496,"docs":{"brief":"Removes an item from the object by key.","tags":[{"tag":"","text":"Removes an item from the object by key."},{"tag":"param:key","text":"Key of object to remove."},{"tag":"returns","text":"True on success, false if the value was never set."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"JSON_Object","refLine":382,"docStart":10796,"docEnd":10887,"docs":{"brief":"Creates a new JSON_Object.","tags":[{"tag":"","text":"Creates a new JSON_Object."},{"tag":"returns","text":"A new JSON_Object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[]},{"name":"Encode","refLine":393,"docStart":10981,"docEnd":11117,"docs":{"brief":"Calls the json_encode method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_encode method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_encode"}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_NONE"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},{"name":"Merge","refLine":409,"docStart":11326,"docEnd":11458,"docs":{"brief":"Calls the json_merge method, replacing the 'to' parameter\nith this instance.","tags":[{"tag":"","text":"Calls the json_merge method, replacing the 'to' parameter\nith this instance."},{"tag":"see","text":"json_merge"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSON_Object","name":"from","decl":"JSON_Object from","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_MERGE_REPLACE"}]},{"name":"ShallowCopy","refLine":420,"docStart":11598,"docEnd":11746,"docs":{"brief":"Calls the json_copy_shallow method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_copy_shallow method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_copy_shallow"}]},"kind":"stock","returnType":"JSON_Object","arguments":[]},{"name":"DeepCopy","refLine":431,"docStart":11841,"docEnd":11983,"docs":{"brief":"Calls the json_copy_deep method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_copy_deep method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_copy_deep"}]},"kind":"stock","returnType":"JSON_Object","arguments":[]},{"name":"Cleanup","refLine":442,"docStart":12072,"docEnd":12210,"docs":{"brief":"Calls the json_cleanup method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_cleanup method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_cleanup"}]},"kind":"stock","returnType":"void","arguments":[]}],"properties":[{"name":"Super","refLine":51,"docStart":1795,"docEnd":1880,"docs":{"brief":"Views the instance as its superclass to access overridden methods.","tags":[{"tag":"","text":"Views the instance as its superclass to access overridden methods."}]},"type":"StringMap","getter":true,"setter":false},{"name":"IsArray","refLine":77,"docStart":2404,"docEnd":2462,"docs":{"brief":"Whether the current object is an array.","tags":[{"tag":"","text":"Whether the current object is an array."}]},"type":"bool","getter":true,"setter":false},{"name":"Length","refLine":87,"docStart":2597,"docEnd":2671,"docs":{"brief":"The number of keys in the object (including meta-keys).","tags":[{"tag":"","text":"The number of keys in the object (including meta-keys)."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}}},"enumstructs":{},"constants":{},"defines":{"_json_object_included":{"symbol":{"name":"_json_object_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}}},"enums":{},"typesets":{},"typedefs":{}},"decode":{"functions":{"json_is_at_end":{"symbol":{"name":"json_is_at_end","refLine":236,"docStart":7367,"docEnd":7773,"docs":{"brief":"Checks whether the character at the beginning of the buffer\nis considered a valid 'end point' for some data, such as a\ncolon (indicating a key), a comma (indicating a new element),\nor the end of an object or array.","tags":[{"tag":"","text":"Checks whether the character at the beginning of the buffer\nis considered a valid 'end point' for some data, such as a\ncolon (indicating a key), a comma (indicating a new element),\nor the end of an object or array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer\nis a valid data end point, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_is_null":{"symbol":{"name":"json_is_null","refLine":0,"docStart":7661,"docEnd":7834,"docs":{"brief":"Checks whether the buffer provided contains null.","tags":[{"tag":"","text":"Checks whether the buffer provided contains null."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains null, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"81ce3782a1c45ff74c0d7a3f813b3cdb1e403c9a","count":175,"time":1586543360}},"json_extract_string_size":{"symbol":{"name":"json_extract_string_size","refLine":365,"docStart":11143,"docEnd":11723,"docs":{"brief":"Calculates the size of the buffer required to store the next\nJSON string stored in the provided buffer at the provided position.\nThis function is quite forgiving of malformed input and shouldn't be\nrelied upon as proof that the input is valid.","tags":[{"tag":"","text":"Calculates the size of the buffer required to store the next\nJSON string stored in the provided buffer at the provided position.\nThis function is quite forgiving of malformed input and shouldn't be\nrelied upon as proof that the input is valid."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"param:is_array","text":"Whether the decoder is processing an array."},{"tag":"returns","text":"The size of the buffer required to store the string."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"pos","decl":"int pos","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"399906b99544efb606c23ca164f4385664e7c8ef","count":188,"time":1589553848},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_is_bool":{"symbol":{"name":"json_is_bool","refLine":0,"docStart":7367,"docEnd":7544,"docs":{"brief":"Checks whether the buffer provided contains a bool.","tags":[{"tag":"","text":"Checks whether the buffer provided contains a bool."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains a bool, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"81ce3782a1c45ff74c0d7a3f813b3cdb1e403c9a","count":175,"time":1586543360}},"json_extract_string":{"symbol":{"name":"json_extract_string","refLine":418,"docStart":12655,"docEnd":13228,"docs":{"brief":"Extracts a JSON string from the buffer until\na valid end point is reached.","tags":[{"tag":"","text":"Extracts a JSON string from the buffer until\na valid end point is reached."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:output_max_size","text":"Maximum size of output string buffer."},{"tag":"param:is_array","text":"Whether the decoder is processing an array."},{"tag":"returns","text":"True if pos has not reached the end\nof the buffer, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"output_max_size","decl":"int output_max_size","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_skip_whitespace":{"symbol":{"name":"json_skip_whitespace","refLine":258,"docStart":8020,"docEnd":8385,"docs":{"brief":"Moves the position until it reaches a non-whitespace\ncharacter or the end of the buffer's maximum size.","tags":[{"tag":"","text":"Moves the position until it reaches a non-whitespace\ncharacter or the end of the buffer's maximum size."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"returns","text":"True if pos has not reached the end\nof the buffer, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_is_object":{"symbol":{"name":"json_is_object","refLine":0,"docStart":7922,"docEnd":8194,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an object.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an object."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is\nthe start of an object, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"81ce3782a1c45ff74c0d7a3f813b3cdb1e403c9a","count":175,"time":1586543360}},"json_is_object_start":{"symbol":{"name":"json_is_object_start","refLine":0,"docStart":7367,"docEnd":7639,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an object.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an object."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is\nthe start of an object, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"c1be287fda302bacbf598538f8d8a7715a5da930","count":181,"time":1586882078},"last_updated":{"hash":"fba4f7df77c85b333c3f086a72e91c3aff4c5a0c","count":203,"time":1592891669}},"json_is_string":{"symbol":{"name":"json_is_string","refLine":72,"docStart":2201,"docEnd":2624,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of a string.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of a string."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:allow_single_quotes","text":"Should strings wrapped in\nsingle quotes be accepted?"},{"tag":"returns","text":"True if the first character in the buffer\nis the start of a string, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"bool","name":"allow_single_quotes","decl":"bool allow_single_quotes","default":"false"}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_extract_until_end":{"symbol":{"name":"json_extract_until_end","refLine":314,"docStart":9607,"docEnd":10178,"docs":{"brief":"Extracts a JSON cell from the buffer until\na valid end point is reached.","tags":[{"tag":"","text":"Extracts a JSON cell from the buffer until\na valid end point is reached."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:output_max_size","text":"Maximum size of output string buffer."},{"tag":"param:is_array","text":"Whether the decoder is processing an array."},{"tag":"returns","text":"True if pos has not reached the end\nof the buffer, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"pos","decl":"int& pos","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"output_max_size","decl":"int output_max_size","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_extract_float":{"symbol":{"name":"json_extract_float","refLine":0,"docStart":14962,"docEnd":15099,"docs":{"brief":"Extracts a float from the buffer.","tags":[{"tag":"","text":"Extracts a float from the buffer."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"Float value of the buffer."}]},"kind":"stock","returnType":"float","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"3fa7a6c480dbd5ebf3f436e243fa7889ed9824ea","count":159,"time":1586458705}},"json_is_float":{"symbol":{"name":"json_is_float","refLine":127,"docStart":3864,"docEnd":4043,"docs":{"brief":"Checks whether the buffer provided contains a float.","tags":[{"tag":"","text":"Checks whether the buffer provided contains a float."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains a float, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_is_whitespace":{"symbol":{"name":"json_is_whitespace","refLine":54,"docStart":1780,"docEnd":2028,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is whitespace.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is whitespace."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer\nis whitespace, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_extract_int":{"symbol":{"name":"json_extract_int","refLine":0,"docStart":14742,"docEnd":14876,"docs":{"brief":"Extracts an int from the buffer.","tags":[{"tag":"","text":"Extracts an int from the buffer."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"Int value of the buffer."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"3fa7a6c480dbd5ebf3f436e243fa7889ed9824ea","count":159,"time":1586458705}},"json_is_array":{"symbol":{"name":"json_is_array","refLine":0,"docStart":8630,"docEnd":8900,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an array.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is\nthe start of an array, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"81ce3782a1c45ff74c0d7a3f813b3cdb1e403c9a","count":175,"time":1586543360}},"json_is_array_end":{"symbol":{"name":"json_is_array_end","refLine":0,"docStart":8438,"docEnd":8704,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the end of an array.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the end of an array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is\nthe end of an array, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"fba4f7df77c85b333c3f086a72e91c3aff4c5a0c","count":203,"time":1592891669}},"json_extract_bool":{"symbol":{"name":"json_extract_bool","refLine":0,"docStart":15191,"docEnd":15326,"docs":{"brief":"Extracts a bool from the buffer.","tags":[{"tag":"","text":"Extracts a bool from the buffer."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"Bool value of the buffer."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"3fa7a6c480dbd5ebf3f436e243fa7889ed9824ea","count":159,"time":1586458705}},"json_is_object_end":{"symbol":{"name":"json_is_object_end","refLine":0,"docStart":7727,"docEnd":7995,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the end of an object.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the end of an object."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is\nthe end of an object, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"fba4f7df77c85b333c3f086a72e91c3aff4c5a0c","count":203,"time":1592891669}},"json_is_int":{"symbol":{"name":"json_is_int","refLine":83,"docStart":2786,"docEnd":2963,"docs":{"brief":"Checks whether the buffer provided contains an int.","tags":[{"tag":"","text":"Checks whether the buffer provided contains an int."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if buffer contains an int, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_extract_until_end_size":{"symbol":{"name":"json_extract_until_end_size","refLine":279,"docStart":8584,"docEnd":9160,"docs":{"brief":"Calculates the size of the buffer required to store the next\nJSON cell stored in the provided buffer at the provided position.\nThis function is quite forgiving of malformed input and shouldn't be\nrelied upon as proof that the input is valid.","tags":[{"tag":"","text":"Calculates the size of the buffer required to store the next\nJSON cell stored in the provided buffer at the provided position.\nThis function is quite forgiving of malformed input and shouldn't be\nrelied upon as proof that the input is valid."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:pos","text":"Position to increment."},{"tag":"param:is_array","text":"Whether the decoder is processing an array."},{"tag":"returns","text":"The size of the buffer required to store the cell."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"pos","decl":"int pos","default":null},{"type":"bool","name":"is_array","decl":"bool is_array","default":null}]},"created":{"hash":"aadfc24065dfd0badf40eae5b528cb40549c4bb4","count":189,"time":1589553860},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_is_array_start":{"symbol":{"name":"json_is_array_start","refLine":0,"docStart":8081,"docEnd":8351,"docs":{"brief":"Checks whether the character at the beginning\nof the buffer is the start of an array.","tags":[{"tag":"","text":"Checks whether the character at the beginning\nof the buffer is the start of an array."},{"tag":"param:buffer","text":"String buffer of data."},{"tag":"returns","text":"True if the first character in the buffer is\nthe start of an array, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]},"created":{"hash":"c1be287fda302bacbf598538f8d8a7715a5da930","count":181,"time":1586882078},"last_updated":{"hash":"fba4f7df77c85b333c3f086a72e91c3aff4c5a0c","count":203,"time":1592891669}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_helpers_decode_included":{"symbol":{"name":"_json_helpers_decode_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582}}},"enums":{},"typesets":{},"typedefs":{}},"json":{"functions":{"json_merge":{"symbol":{"name":"json_merge","refLine":568,"docStart":17592,"docEnd":18317,"docs":{"brief":"Merges the entries from the second object to the first,\noptionally replacing existing entries with the same key.","tags":[{"tag":"","text":"Merges the entries from the second object to the first,\noptionally replacing existing entries with the same key."},{"tag":"param:to","text":"Object to merge on to."},{"tag":"param:from","text":"Object to merge entries from."},{"tag":"param:options","text":"Bitwise combination of JSON_MERGE_* options.\n[default: JSON_MERGE_REPLACE]"},{"tag":"returns","text":"True on success, false otherwise."},{"tag":"error","text":"If the objects are not the same structure type\nas one another, an error will be thrown.\nFor example, an object cannot be reliably merged over an\narray and vice versa. Only array over array and\nobject over object merging is supported."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSON_Object","name":"to","decl":"JSON_Object to","default":null},{"type":"JSON_Object","name":"from","decl":"JSON_Object from","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_MERGE_REPLACE"}]},"created":{"hash":"83e300008a65b8bfd2d7e5a1a96964b01f85906e","count":99,"time":1578289536},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}},"json_encode":{"symbol":{"name":"json_encode","refLine":56,"docStart":1807,"docEnd":2190,"docs":{"brief":"Encodes a JSON instance into its string representation.","tags":[{"tag":"","text":"Encodes a JSON instance into its string representation."},{"tag":"param:obj","text":"Object to encode."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:options","text":"Bitwise combination of JSON_ENCODE_* options.\n[default: JSON_NONE]"},{"tag":"param:depth","text":"The current depth of the encoder. [default: 0]"}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_NONE"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}},"json_copy_shallow":{"symbol":{"name":"json_copy_shallow","refLine":706,"docStart":22152,"docEnd":22301,"docs":{"brief":"Creates a shallow copy of the specified object.","tags":[{"tag":"","text":"Creates a shallow copy of the specified object."},{"tag":"param:obj","text":"Object to copy."},{"tag":"returns","text":"A shallow copy of the specified object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},"created":{"hash":"9da625e5cfceff3f0fed430438908b84cdc76316","count":102,"time":1578937374},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}},"json_cleanup":{"symbol":{"name":"json_cleanup","refLine":759,"docStart":23481,"docEnd":23613,"docs":{"brief":"Recursively cleans up a JSON instance and any JSON instances stored within.","tags":[{"tag":"","text":"Recursively cleans up a JSON instance and any JSON instances stored within."},{"tag":"param:obj","text":"JSON instance to clean up."}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}},"json_cleanup_and_delete":{"symbol":{"name":"json_cleanup_and_delete","refLine":801,"docStart":24471,"docEnd":24629,"docs":{"brief":"Cleans up and deletes an object, ensuring all resources are freed.\nAlso sets the passed variable to null.","tags":[{"tag":"","text":"Cleans up and deletes an object, ensuring all resources are freed.\nAlso sets the passed variable to null."},{"tag":"param:obj","text":"Object to clean up."}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object&","name":"obj","decl":"JSON_Object &obj","default":null}]},"created":{"hash":"6a8188b88aaea559fac541ac62e867a7907f0d04","count":142,"time":1586195664},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}},"json_decode":{"symbol":{"name":"json_decode","refLine":254,"docStart":7606,"docEnd":8204,"docs":{"brief":"Decodes a JSON string into a JSON instance.","tags":[{"tag":"","text":"Decodes a JSON string into a JSON instance."},{"tag":"param:buffer","text":"Buffer to decode."},{"tag":"param:options","text":"Bitwise combination of JSON_DECODE_* options.\n[default: JSON_NONE]"},{"tag":"param:pos","text":"Current position of the decoder as bytes\noffset into the buffer."},{"tag":"param:depth","text":"Current nested depth of the decoder."},{"tag":"returns","text":"JSON instance or null if decoding failed becase\nthe buffer didn't contain valid JSON."},{"tag":"error","text":"If the buffer does not contain valid JSON,\nan error will be thrown."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_NONE"},{"type":"int&","name":"pos","decl":"int& pos","default":"0"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}},"json_copy_deep":{"symbol":{"name":"json_copy_deep","refLine":722,"docStart":22518,"docEnd":22661,"docs":{"brief":"Creates a deep copy of the specified object.","tags":[{"tag":"","text":"Creates a deep copy of the specified object."},{"tag":"param:obj","text":"Object to copy."},{"tag":"returns","text":"A deep copy of the specified object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},"created":{"hash":"9da625e5cfceff3f0fed430438908b84cdc76316","count":102,"time":1578937374},"last_updated":{"hash":"792edd0b5bad0770cab03c489b481798f9fd5dd6","count":213,"time":1619863259}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_included":{"symbol":{"name":"_json_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}}},"enums":{},"typesets":{},"typedefs":{}},"encode_helpers":{"functions":{"json_cell_int":{"symbol":{"name":"json_cell_int","refLine":0,"docStart":4012,"docEnd":4227,"docs":{"brief":"Generates the JSON cell representation of an int.","tags":[{"tag":"","text":"Generates the JSON cell representation of an int."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:maxlen","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"input","decl":"int input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_string_size":{"symbol":{"name":"json_cell_string_size","refLine":0,"docStart":1844,"docEnd":2064,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a string.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a string."},{"tag":"param:maxlen","text":"The string's current length or buffer size."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"d43da6b066ad4a4cc5d72e8ab9d7009e1251c777","count":56,"time":1569512228}},"json_cell_float_size":{"symbol":{"name":"json_cell_float_size","refLine":0,"docStart":2633,"docEnd":2788,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a float.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a float."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_bool_size":{"symbol":{"name":"json_cell_bool_size","refLine":0,"docStart":2879,"docEnd":3033,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a bool.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a bool."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_bool":{"symbol":{"name":"json_cell_bool","refLine":0,"docStart":4886,"docEnd":5101,"docs":{"brief":"Generates the JSON cell representation of a bool.","tags":[{"tag":"","text":"Generates the JSON cell representation of a bool."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:maxlen","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"bool","name":"input","decl":"bool input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_string":{"symbol":{"name":"json_cell_string","refLine":0,"docStart":3375,"docEnd":3592,"docs":{"brief":"Generates the JSON cell representation of a string.","tags":[{"tag":"","text":"Generates the JSON cell representation of a string."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:maxlen","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"input","decl":"const char[] input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_int_size":{"symbol":{"name":"json_cell_int_size","refLine":0,"docStart":2209,"docEnd":2392,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of an int.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of an int."},{"tag":"param:input","text":"The int."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"input","decl":"int input","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_null_size":{"symbol":{"name":"json_cell_null_size","refLine":0,"docStart":3109,"docEnd":3261,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of null.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of null."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_null":{"symbol":{"name":"json_cell_null","refLine":0,"docStart":5229,"docEnd":5392,"docs":{"brief":"Generates the JSON cell representation of null.","tags":[{"tag":"","text":"Generates the JSON cell representation of null."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:maxlen","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}},"json_cell_float":{"symbol":{"name":"json_cell_float","refLine":0,"docStart":4336,"docEnd":4552,"docs":{"brief":"Generates the JSON cell representation of a float.","tags":[{"tag":"","text":"Generates the JSON cell representation of a float."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:maxlen","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"float","name":"input","decl":"float input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"5eff5c3cdb90cfb091cf8f8eca56d49c743107bd","count":57,"time":1569516136}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_encode_helpers_included":{"symbol":{"name":"_json_encode_helpers_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}}},"enums":{},"typesets":{},"typedefs":{}},"string_helpers":{"functions":{"String_StartsWith":{"symbol":{"name":"String_StartsWith","refLine":0,"docStart":1712,"docEnd":2041,"docs":{"brief":"Checks if a string starts with another string.","tags":[{"tag":"","text":"Checks if a string starts with another string."},{"tag":"param:haystack","text":"String to check that starts with needle."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack starts with."},{"tag":"return","text":"True if haystack begins with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"316ecb710e430d6949a46ea821f0ef9610f762b0","count":8,"time":1522737929}},"json_string_startswith":{"symbol":{"name":"json_string_startswith","refLine":0,"docStart":1763,"docEnd":2092,"docs":{"brief":"Checks if a string starts with another string.","tags":[{"tag":"","text":"Checks if a string starts with another string."},{"tag":"param:haystack","text":"String to check that starts with needle."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack starts with."},{"tag":"returns","text":"True if haystack begins with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},"created":{"hash":"f7f6f2d05feb44233eca0a9c1b7bb5caea02e49c","count":10,"time":1536031635},"last_updated":{"hash":"d43da6b066ad4a4cc5d72e8ab9d7009e1251c777","count":56,"time":1569512228}},"String_EndsWith":{"symbol":{"name":"String_EndsWith","refLine":0,"docStart":2382,"docEnd":2703,"docs":{"brief":"Checks if a string ends with another string.","tags":[{"tag":"","text":"Checks if a string ends with another string."},{"tag":"param:haystack","text":"String to check that ends with needle."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack ends with."},{"tag":"return","text":"True if haystack ends with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"316ecb710e430d6949a46ea821f0ef9610f762b0","count":8,"time":1522737929}},"json_string_endswith":{"symbol":{"name":"json_string_endswith","refLine":0,"docStart":2478,"docEnd":2799,"docs":{"brief":"Checks if a string ends with another string.","tags":[{"tag":"","text":"Checks if a string ends with another string."},{"tag":"param:haystack","text":"String to check that ends with needle."},{"tag":"param:maxlen","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack ends with."},{"tag":"returns","text":"True if haystack ends with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},"created":{"hash":"f7f6f2d05feb44233eca0a9c1b7bb5caea02e49c","count":10,"time":1536031635},"last_updated":{"hash":"d43da6b066ad4a4cc5d72e8ab9d7009e1251c777","count":56,"time":1569512228}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_string_helpers_included":{"symbol":{"name":"_json_string_helpers_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531},"last_updated":{"hash":"8500fa22551914bef7d485d6e9a707fe558a4999","count":2,"time":1522600531}}},"enums":{},"typesets":{},"typedefs":{}},"array":{"functions":{},"methodmaps":{"JSON_Array":{"symbol":{"name":"JSON_Array","refLine":0,"docStart":0,"docEnd":0,"docs":null,"parent":"JSON_Object","methods":[{"name":"CanUseType","refLine":108,"docStart":2954,"docEnd":3149,"docs":{"brief":"Checks whether the array accepts the type provided.","tags":[{"tag":"","text":"Checks whether the array accepts the type provided."},{"tag":"param:type","text":"Type to check for enforcement."},{"tag":"returns","text":"True if the type can be used, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":null}]},{"name":"HasKey","refLine":119,"docStart":3281,"docEnd":3466,"docs":{"brief":"Checks whether the object has an index.","tags":[{"tag":"","text":"Checks whether the object has an index."},{"tag":"param:index","text":"Index to check existence of."},{"tag":"returns","text":"True if the index exists, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetIndexAsString","refLine":134,"docStart":3568,"docEnd":4006,"docs":{"brief":"Outputs an index as a string with optional validation.","tags":[{"tag":"","text":"Outputs an index as a string with optional validation."},{"tag":"param:index","text":"Index to output."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:validate","text":"Should we check that the index is valid before\nconverting it to a string? [default: true]"},{"tag":"returns","text":"True if the index is valid, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"bool","name":"validate","decl":"bool validate","default":"true"}]},{"name":"GetMetadata","refLine":157,"docStart":4349,"docEnd":4482,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetMetadata"}]},"kind":"stock","returnType":"any","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null},{"type":"any","name":"default_value","decl":"any default_value","default":null}]},{"name":"GetKeyType","refLine":172,"docStart":4790,"docEnd":4922,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetKeyType"}]},"kind":"stock","returnType":"JSONCellType","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetKeyLength","refLine":187,"docStart":5182,"docEnd":5316,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetKeyLength"}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetKeyHidden","refLine":202,"docStart":5556,"docEnd":5690,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetKeyHidden"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SetMetadata","refLine":221,"docStart":5984,"docEnd":6117,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetMetadata"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"RemoveMetadata","refLine":236,"docStart":6402,"docEnd":6538,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.RemoveMetadata"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null}]},{"name":"SetKeyType","refLine":251,"docStart":6811,"docEnd":6943,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetKeyType"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":null}]},{"name":"SetKeyLength","refLine":266,"docStart":7208,"docEnd":7342,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetKeyLength"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},{"name":"SetKeyHidden","refLine":281,"docStart":7606,"docEnd":7740,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetKeyHidden"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"bool","name":"hidden","decl":"bool hidden","default":null}]},{"name":"GetValue","refLine":300,"docStart":8046,"docEnd":8176,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetValue"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"any&","name":"value","decl":"any& value","default":null}]},{"name":"GetString","refLine":315,"docStart":8431,"docEnd":8562,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetString"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"GetInt","refLine":330,"docStart":8866,"docEnd":8994,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetInt"}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"default_value","decl":"int default_value","default":"-1"}]},{"name":"GetFloat","refLine":345,"docStart":9272,"docEnd":9402,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetFloat"}]},"kind":"stock","returnType":"float","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"float","name":"default_value","decl":"float default_value","default":"-1.000000"}]},{"name":"GetBool","refLine":360,"docStart":9690,"docEnd":9819,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetBool"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"bool","name":"default_value","decl":"bool default_value","default":"false"}]},{"name":"GetObject","refLine":375,"docStart":10104,"docEnd":10235,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.GetObject"}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSON_Object","name":"default_value","decl":"JSON_Object default_value","default":"null"}]},{"name":"SetString","refLine":394,"docStart":10578,"docEnd":10709,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetString"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetInt","refLine":413,"docStart":11061,"docEnd":11189,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetInt"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetFloat","refLine":432,"docStart":11523,"docEnd":11653,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetFloat"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetBool","refLine":451,"docStart":11995,"docEnd":12124,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetBool"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"SetObject","refLine":470,"docStart":12462,"docEnd":12593,"docs":{"brief":"Converts index to a string ('key') and calls the relevant Super method.","tags":[{"tag":"","text":"Converts index to a string ('key') and calls the relevant Super method."},{"tag":"see","text":"JSON_Object.SetObject"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSON_Object","name":"value","decl":"JSON_Object value","default":null}]},{"name":"PushString","refLine":494,"docStart":12985,"docEnd":13160,"docs":{"brief":"Pushes a string to the end of the array.","tags":[{"tag":"","text":"Pushes a string to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"The element's index on success, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushInt","refLine":513,"docStart":13416,"docEnd":13589,"docs":{"brief":"Pushes an int to the end of the array.","tags":[{"tag":"","text":"Pushes an int to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"The element's index on success, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"PushFloat","refLine":532,"docStart":13830,"docEnd":14004,"docs":{"brief":"Pushes a float to the end of the array.","tags":[{"tag":"","text":"Pushes a float to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"The element's index on success, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"PushBool","refLine":551,"docStart":14251,"docEnd":14424,"docs":{"brief":"Pushes a bool to the end of the array.","tags":[{"tag":"","text":"Pushes a bool to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"The element's index on success, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"PushObject","refLine":570,"docStart":14668,"docEnd":14848,"docs":{"brief":"Pushes a JSON object to the end of the array.","tags":[{"tag":"","text":"Pushes a JSON object to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"The element's index on success, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"JSON_Object","name":"value","decl":"JSON_Object value","default":null}]},{"name":"IndexOf","refLine":593,"docStart":15151,"docEnd":15339,"docs":{"brief":"Finds the index of a value in the array.","tags":[{"tag":"","text":"Finds the index of a value in the array."},{"tag":"param:value","text":"Value to search for."},{"tag":"returns","text":"The index of the value if it is found, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"IndexOfString","refLine":612,"docStart":15627,"docEnd":15818,"docs":{"brief":"Finds the index of a string in the array.","tags":[{"tag":"","text":"Finds the index of a string in the array."},{"tag":"param:value","text":"String to search for."},{"tag":"returns","text":"The index of the string if it is found, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Contains","refLine":637,"docStart":16342,"docEnd":16528,"docs":{"brief":"Determines whether the array contains a value.","tags":[{"tag":"","text":"Determines whether the array contains a value."},{"tag":"param:value","text":"Value to search for."},{"tag":"returns","text":"True if the value is found, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"ContainsString","refLine":648,"docStart":16624,"docEnd":16813,"docs":{"brief":"Determines whether the array contains a string.","tags":[{"tag":"","text":"Determines whether the array contains a string."},{"tag":"param:value","text":"String to search for."},{"tag":"returns","text":"True if the string is found, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Clear","refLine":660,"docStart":16983,"docEnd":17059,"docs":{"brief":"Clears all entries and ensures the array index is re-set.","tags":[{"tag":"","text":"Clears all entries and ensures the array index is re-set."}]},"kind":"stock","returnType":"void","arguments":[]},{"name":"Remove","refLine":673,"docStart":17154,"docEnd":17398,"docs":{"brief":"Removes an index and its related meta-keys from the array,\nand shifts down all following element indices.","tags":[{"tag":"","text":"Removes an index and its related meta-keys from the array,\nand shifts down all following element indices."},{"tag":"param:key","text":"Key to remove."},{"tag":"returns","text":"True on success, false if the value was never set."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SetType","refLine":768,"docStart":19767,"docEnd":20062,"docs":{"brief":"Sets the array to enforce a specific type.\nThis will fail if there are any existing elements\nin the array which are not of the same type.","tags":[{"tag":"","text":"Sets the array to enforce a specific type.\nThis will fail if there are any existing elements\nin the array which are not of the same type."},{"tag":"param:type","text":"Type to enforce."},{"tag":"returns","text":"True if the type was enforced successfully, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":null}]},{"name":"ImportValues","refLine":796,"docStart":20460,"docEnd":20721,"docs":{"brief":"Imports a native array's values into the instance.","tags":[{"tag":"","text":"Imports a native array's values into the instance."},{"tag":"param:type","text":"Type of native values."},{"tag":"param:values","text":"Array of values."},{"tag":"param:size","text":"Size of array."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":null},{"type":"any[]","name":"values","decl":"any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"ImportStrings","refLine":826,"docStart":21481,"docEnd":21697,"docs":{"brief":"Imports a native array's strings into the instance.","tags":[{"tag":"","text":"Imports a native array's strings into the instance."},{"tag":"param:strings","text":"Array of strings."},{"tag":"param:size","text":"Size of array."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[][]","name":"strings","decl":"const char[][] strings","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"ExportValues","refLine":842,"docStart":21954,"docEnd":22113,"docs":{"brief":"Exports the instance's values into a native array.","tags":[{"tag":"","text":"Exports the instance's values into a native array."},{"tag":"param:values","text":"Array to export to."},{"tag":"param:size","text":"Size of array."}]},"kind":"stock","returnType":"void","arguments":[{"type":"any[]","name":"values","decl":"any[] values","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},{"name":"ExportStrings","refLine":860,"docStart":22396,"docEnd":22556,"docs":{"brief":"Exports the instance's strings into a native array.","tags":[{"tag":"","text":"Exports the instance's strings into a native array."},{"tag":"param:values","text":"Array to export to."},{"tag":"param:size","text":"Size of array."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[][]","name":"values","decl":"char[][] values","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"max_string_size","decl":"int max_string_size","default":null}]},{"name":"JSON_Array","refLine":887,"docStart":22978,"docEnd":23186,"docs":{"brief":"Creates a new JSON_Array.","tags":[{"tag":"","text":"Creates a new JSON_Array."},{"tag":"param:type","text":"The type to enforce for this array, or\nJSON_Type_Invalid for no enforced type."},{"tag":"returns","text":"A new JSON_Array."}]},"kind":"stock","returnType":"JSON_Array","arguments":[{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":"JSON_Type_Invalid"}]},{"name":"ShallowCopy","refLine":905,"docStart":23462,"docEnd":23651,"docs":{"brief":"Calls the json_copy_shallow method, replacing the 'obj' parameter\nwith this instance and casting the return value to an array.","tags":[{"tag":"","text":"Calls the json_copy_shallow method, replacing the 'obj' parameter\nwith this instance and casting the return value to an array."},{"tag":"see","text":"json_copy_shallow"}]},"kind":"stock","returnType":"JSON_Array","arguments":[]},{"name":"DeepCopy","refLine":916,"docStart":23767,"docEnd":23950,"docs":{"brief":"Calls the json_copy_deep method, replacing the 'obj' parameter\nwith this instance and casting the return value to an array.","tags":[{"tag":"","text":"Calls the json_copy_deep method, replacing the 'obj' parameter\nwith this instance and casting the return value to an array."},{"tag":"see","text":"json_copy_deep"}]},"kind":"stock","returnType":"JSON_Array","arguments":[]}],"properties":[{"name":"Super","refLine":52,"docStart":1817,"docEnd":1902,"docs":{"brief":"Views the instance as its superclass to access overridden methods.","tags":[{"tag":"","text":"Views the instance as its superclass to access overridden methods."}]},"type":"JSON_Object","getter":true,"setter":false},{"name":"Length","refLine":63,"docStart":2039,"docEnd":2094,"docs":{"brief":"The number of elements in the array.","tags":[{"tag":"","text":"The number of elements in the array."}]},"type":"int","getter":true,"setter":true},{"name":"Type","refLine":82,"docStart":2409,"docEnd":2459,"docs":{"brief":"The enforced type of the array.","tags":[{"tag":"","text":"The enforced type of the array."}]},"type":"JSONCellType","getter":true,"setter":true},{"name":"MaxStringLength","refLine":738,"docStart":19178,"docEnd":19243,"docs":{"brief":"The length of the longest string in the array.","tags":[{"tag":"","text":"The length of the longest string in the array."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"36b928581e9f5846c0361d499cd2e51799ed1b70","count":88,"time":1571074934},"last_updated":{"hash":"0e2186cf0d8f056ea4e221b7e4a5772f3a5fe08c","count":215,"time":1622994519}}},"enumstructs":{},"constants":{},"defines":{"_json_array_included":{"symbol":{"name":"_json_array_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"36b928581e9f5846c0361d499cd2e51799ed1b70","count":88,"time":1571074934},"last_updated":{"hash":"36b928581e9f5846c0361d499cd2e51799ed1b70","count":88,"time":1571074934}}},"enums":{},"typesets":{},"typedefs":{}},"encode":{"functions":{"json_cell_string":{"symbol":{"name":"json_cell_string","refLine":0,"docStart":2154,"docEnd":2371,"docs":{"brief":"Generates the JSON cell representation of a string.","tags":[{"tag":"","text":"Generates the JSON cell representation of a string."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"input","decl":"const char[] input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"11fad127b3310aabf7ea3e1df30eafb7d0496e83","count":160,"time":1586458705}},"json_cell_int_size":{"symbol":{"name":"json_cell_int_size","refLine":0,"docStart":2207,"docEnd":2427,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of an int.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of an int."},{"tag":"param:input","text":"Value to calculate maximum buffer length for."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"input","decl":"int input","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"2cc37e59a2cdf9de4d274dadd31f842477ef3fee","count":137,"time":1586184160}},"json_cell_int":{"symbol":{"name":"json_cell_int","refLine":0,"docStart":2911,"docEnd":3126,"docs":{"brief":"Generates the JSON cell representation of an int.","tags":[{"tag":"","text":"Generates the JSON cell representation of an int."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"input","decl":"int input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"43f249cb5aaf1f008644f98f4854bab8f7fc7cd7","count":153,"time":1586458704}},"json_cell_null_size":{"symbol":{"name":"json_cell_null_size","refLine":0,"docStart":2953,"docEnd":3101,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of null.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of null."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"5e55a1ab48d96789fefa1bb056c55cb37b29f72c","count":140,"time":1586195656}},"json_cell_null":{"symbol":{"name":"json_cell_null","refLine":0,"docStart":4138,"docEnd":4301,"docs":{"brief":"Generates the JSON cell representation of null.","tags":[{"tag":"","text":"Generates the JSON cell representation of null."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"43f249cb5aaf1f008644f98f4854bab8f7fc7cd7","count":153,"time":1586458704}},"json_cell_bool_size":{"symbol":{"name":"json_cell_bool_size","refLine":0,"docStart":2731,"docEnd":2881,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a bool.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a bool."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"5e55a1ab48d96789fefa1bb056c55cb37b29f72c","count":140,"time":1586195656}},"json_cell_float_size":{"symbol":{"name":"json_cell_float_size","refLine":0,"docStart":2506,"docEnd":2657,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a float.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a float."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"5e55a1ab48d96789fefa1bb056c55cb37b29f72c","count":140,"time":1586195656}},"json_cell_float":{"symbol":{"name":"json_cell_float","refLine":0,"docStart":3239,"docEnd":3455,"docs":{"brief":"Generates the JSON cell representation of a float.","tags":[{"tag":"","text":"Generates the JSON cell representation of a float."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"float","name":"input","decl":"float input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"43f249cb5aaf1f008644f98f4854bab8f7fc7cd7","count":153,"time":1586458704}},"json_cell_bool":{"symbol":{"name":"json_cell_bool","refLine":0,"docStart":3793,"docEnd":4008,"docs":{"brief":"Generates the JSON cell representation of a bool.","tags":[{"tag":"","text":"Generates the JSON cell representation of a bool."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"bool","name":"input","decl":"bool input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"43f249cb5aaf1f008644f98f4854bab8f7fc7cd7","count":153,"time":1586458704}},"json_cell_string_size":{"symbol":{"name":"json_cell_string_size","refLine":0,"docStart":1794,"docEnd":1996,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a string.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a string."},{"tag":"param:length","text":"The length of the string."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"length","decl":"int length","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"11fad127b3310aabf7ea3e1df30eafb7d0496e83","count":160,"time":1586458705}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_helpers_encode_included":{"symbol":{"name":"_json_helpers_encode_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582}}},"enums":{},"typesets":{},"typedefs":{}},"string":{"functions":{"json_cell_string_size":{"symbol":{"name":"json_cell_string_size","refLine":240,"docStart":7382,"docEnd":7584,"docs":{"brief":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a string.","tags":[{"tag":"","text":"Calculates the maximum buffer length required to\nstore the JSON cell representation of a string."},{"tag":"param:length","text":"The length of the string."},{"tag":"returns","text":"Maximum buffer length."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"length","decl":"int length","default":null}]},"created":{"hash":"3c40c9985dc811e7b7d974dbac18f24fddd0a088","count":161,"time":1586458705},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}},"json_char_is_hex":{"symbol":{"name":"json_char_is_hex","refLine":224,"docStart":7030,"docEnd":7222,"docs":{"brief":"Checks whether the provided character is a valid hexadecimal character.","tags":[{"tag":"","text":"Checks whether the provided character is a valid hexadecimal character."},{"tag":"param:c","text":"Character to check."},{"tag":"returns","text":"True if c is a hexadecimal character, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"c","decl":"int c","default":null}]},"created":{"hash":"3ec8212cce54d117a7cf51dd2f604d0ac2473c34","count":199,"time":1591272729},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}},"json_string_startswith":{"symbol":{"name":"json_string_startswith","refLine":176,"docStart":5610,"docEnd":5919,"docs":{"brief":"Checks if a string starts with another string.","tags":[{"tag":"","text":"Checks if a string starts with another string."},{"tag":"param:haystack","text":"String to check that starts with needle."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack starts with."},{"tag":"returns","text":"True if haystack begins with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}},"json_cell_string":{"symbol":{"name":"json_cell_string","refLine":253,"docStart":7742,"docEnd":7959,"docs":{"brief":"Generates the JSON cell representation of a string.","tags":[{"tag":"","text":"Generates the JSON cell representation of a string."},{"tag":"param:input","text":"Value to generate output for."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"input","decl":"const char[] input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"3c40c9985dc811e7b7d974dbac18f24fddd0a088","count":161,"time":1586458705},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}},"json_escape_string":{"symbol":{"name":"json_escape_string","refLine":57,"docStart":1963,"docEnd":2101,"docs":{"brief":"Escapes a string in-place in a buffer.","tags":[{"tag":"","text":"Escapes a string in-place in a buffer."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"bf855614908e8e3a15e7b23d33c226f7338d9a1e","count":74,"time":1569849973},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}},"json_string_endswith":{"symbol":{"name":"json_string_endswith","refLine":201,"docStart":6308,"docEnd":6609,"docs":{"brief":"Checks if a string ends with another string.","tags":[{"tag":"","text":"Checks if a string ends with another string."},{"tag":"param:haystack","text":"String to check that ends with needle."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack ends with."},{"tag":"returns","text":"True if haystack ends with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}},"json_unescape_string":{"symbol":{"name":"json_unescape_string","refLine":112,"docStart":3609,"docEnd":3749,"docs":{"brief":"Unescapes a string in-place in a buffer.","tags":[{"tag":"","text":"Unescapes a string in-place in a buffer."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"bf855614908e8e3a15e7b23d33c226f7338d9a1e","count":74,"time":1569849973},"last_updated":{"hash":"3a9e22b8b4056809c95b3329e9f779b9c0be34cc","count":208,"time":1592977975}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_helpers_string_included":{"symbol":{"name":"_json_helpers_string_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582},"last_updated":{"hash":"6f007fe309e66236bc08601d68e520b19e239a5a","count":62,"time":1569517582}}},"enums":{},"typesets":{},"typedefs":{}},"unicode":{"functions":{"json_ascii_to_utf8":{"symbol":{"name":"json_ascii_to_utf8","refLine":0,"docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"ascii","decl":"const char[] ascii","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":null}]},"created":{"hash":"636d474b63f8c42fca8284501f9b44b96cfd9bd1","count":200,"time":1591272742},"last_updated":{"hash":"636d474b63f8c42fca8284501f9b44b96cfd9bd1","count":200,"time":1591272742}},"json_utf8_to_ascii":{"symbol":{"name":"json_utf8_to_ascii","refLine":78,"docStart":2347,"docEnd":2631,"docs":{"brief":"Converts a UTF-8 character to its ASCII representation.","tags":[{"tag":"","text":"Converts a UTF-8 character to its ASCII representation."},{"tag":"param:c","text":"The UTF-8 character."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"returns","text":"The number of bytes written, or -1 if c is invalid."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"c","decl":"int c","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},"created":{"hash":"636d474b63f8c42fca8284501f9b44b96cfd9bd1","count":200,"time":1591272742},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}},"json_utf8_to_ascii_size":{"symbol":{"name":"json_utf8_to_ascii_size","refLine":48,"docStart":1761,"docEnd":1982,"docs":{"brief":"Calculates how many bytes will be required to store the ASCII\nrepresentation of a UTF-8 character.","tags":[{"tag":"","text":"Calculates how many bytes will be required to store the ASCII\nrepresentation of a UTF-8 character."},{"tag":"param:c","text":"The UTF-8 character."},{"tag":"returns","text":"The number of bytes required, or -1 if c is invalid."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"c","decl":"int c","default":null}]},"created":{"hash":"636d474b63f8c42fca8284501f9b44b96cfd9bd1","count":200,"time":1591272742},"last_updated":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_json_helpers_unicode_included":{"symbol":{"name":"_json_helpers_unicode_included","refLine":0,"docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"636d474b63f8c42fca8284501f9b44b96cfd9bd1","count":200,"time":1591272742},"last_updated":{"hash":"636d474b63f8c42fca8284501f9b44b96cfd9bd1","count":200,"time":1591272742}}},"enums":{},"typesets":{},"typedefs":{}}},"version":{"hash":"9de367c42041b9f60a04e375ea24d2717d2a2827","count":216,"time":1628591000}}