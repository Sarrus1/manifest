{"meta":{"name":"DHooks Detour","description":"Dynamic hooking w/ dynamic detouring support","author":"Drifter321 & Peacemaker"},"source":{"type":"git","merge":null,"repository":"https://github.com/peace-maker/DHooks2.git","endpoints":null,"patterns":["sourcemod/scripting/include/dhooks.inc"]},"strands":{"dhooks":{"functions":{"DHookGetParamObjectPtrVar":{"symbol":{"name":"DHookGetParamObjectPtrVar","docStart":34877,"docEnd":35282,"docs":{"brief":"Gets an objects variable value","tags":[{"tag":"","text":"Gets an objects variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get."},{"tag":"param:offset","text":"Offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."},{"tag":"return","text":"Value of the objects var. If EHANDLE type or entity returns entity index."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetParamString":{"symbol":{"name":"DHookSetParamString","docStart":32575,"docEnd":32928,"docs":{"brief":"Set string param value","tags":[{"tag":"","text":"Set string param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set (Example if the function has 2 params and you need to set the value of the first param num would be 1.)"},{"tag":"param:value","text":"Value to set string as."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetReturnVector":{"symbol":{"name":"DHookSetReturnVector","docStart":34268,"docEnd":34457,"docs":{"brief":"Set return vector value","tags":[{"tag":"","text":"Set return vector value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:vec","text":"Value to set return vector as"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookDisableDetour":{"symbol":{"name":"DHookDisableDetour","docStart":26408,"docEnd":26764,"docs":{"brief":"Disable the detour of the function described in the hook setup handle.","tags":[{"tag":"","text":"Disable the detour of the function described in the hook setup handle."},{"tag":"param:setup","text":"Hook setup handle"},{"tag":"param:post","text":"True to disable a post hook."},{"tag":"param:callback","text":"Callback function"},{"tag":"return","text":"True if detour was disabled, false otherwise."},{"tag":"error","text":"Hook handle is not setup for a detour or function is not detoured."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]},"created":{"hash":"5906744fa674f78a9b04a58044a0fe5b28e6ad38","count":134,"time":1583168274},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookEnableDetour":{"symbol":{"name":"DHookEnableDetour","docStart":25843,"docEnd":26323,"docs":{"brief":"Enable the detour of the function described in the hook setup handle.","tags":[{"tag":"","text":"Enable the detour of the function described in the hook setup handle."},{"tag":"param:setup","text":"Hook setup handle"},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the retunr value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:callback","text":"Callback function"},{"tag":"return","text":"True if detour was enabled, false otherwise."},{"tag":"error","text":"Hook handle is not setup for a detour."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]},"created":{"hash":"644ce2273f42605d9e8013e503b0c762f0d9e096","count":132,"time":1583168033},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookRemoveEntityListener":{"symbol":{"name":"DHookRemoveEntityListener","docStart":23269,"docEnd":23467,"docs":{"brief":"Removes an entity listener hook","tags":[{"tag":"","text":"Removes an entity listener hook"},{"tag":"param:type","text":"Type of listener to remove"},{"tag":"param:callback","text":"Callback this listener was using"},{"tag":"return","text":"True if one was removed false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"ListenType","name":"type","decl":"ListenType type","default":null},{"type":"ListenCB","name":"callback","decl":"ListenCB callback","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookIsNullParam":{"symbol":{"name":"DHookIsNullParam","docStart":37479,"docEnd":37685,"docs":{"brief":"Checks if a pointer param is null","tags":[{"tag":"","text":"Checks if a pointer param is null"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to check."},{"tag":"error","text":"Non pointer param"},{"tag":"return","text":"True if null false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGamerules":{"symbol":{"name":"DHookGamerules","docStart":28340,"docEnd":29009,"docs":{"brief":"Hook gamerules","tags":[{"tag":"","text":"Hook gamerules"},{"tag":"param:setup","text":"Setup handle to use to add the hook."},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the return value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:removalcb","text":"Callback for when the hook is removed (Game rules hooks are auto-removed on map end and will call this callback)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when creating the hook."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."},{"tag":"return","text":"INVALID_HOOK_ID on fail a hookid on success"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetParamObjectPtrString":{"symbol":{"name":"DHookGetParamObjectPtrString","docStart":36918,"docEnd":37348,"docs":{"brief":"Gets an objects string variable value","tags":[{"tag":"","text":"Gets an objects string variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get."},{"tag":"param:offset","text":"Offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:buffer","text":"Buffer to store the result vector"},{"tag":"param:size","text":"Size of the buffer"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookRemoveHookID":{"symbol":{"name":"DHookRemoveHookID","docStart":30017,"docEnd":30188,"docs":{"brief":"Remove hook by hook id","tags":[{"tag":"","text":"Remove hook by hook id"},{"tag":"param:hookid","text":"Hook id to remove"},{"tag":"return","text":"true on success false otherwise"},{"tag":"note","text":"This will not fire the removal callback!"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"hookid","decl":"int hookid","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookAddEntityListener":{"symbol":{"name":"DHookAddEntityListener","docStart":23056,"docEnd":23192,"docs":{"brief":"Adds an entity listener hook","tags":[{"tag":"","text":"Adds an entity listener hook"},{"tag":"param:type","text":"Type of listener to add"},{"tag":"param:callback","text":"Callback to use"}]},"kind":"native","returnType":"void","arguments":[{"type":"ListenType","name":"type","decl":"ListenType type","default":null},{"type":"ListenCB","name":"callback","decl":"ListenCB callback","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetReturn":{"symbol":{"name":"DHookGetReturn","docStart":33005,"docEnd":33262,"docs":{"brief":"Get return value (Use only for: int, entity, bool or float return types)","tags":[{"tag":"","text":"Get return value (Use only for: int, entity, bool or float return types)"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"error","text":"Invalid Handle, invalid type."},{"tag":"return","text":"Returns default value if prehook returns actual value if post hook."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetParamVector":{"symbol":{"name":"DHookSetParamVector","docStart":32147,"docEnd":32498,"docs":{"brief":"Set vector param value","tags":[{"tag":"","text":"Set vector param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set (Example if the function has 2 params and you need to set the value of the first param num would be 1.)"},{"tag":"param:vec","text":"Value to set vector as."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookCreateFromConf":{"symbol":{"name":"DHookCreateFromConf","docStart":24791,"docEnd":25249,"docs":{"brief":"Setup a detour or hook for a function as described in a \"Functions\" section in gamedata.","tags":[{"tag":"","text":"Setup a detour or hook for a function as described in a \"Functions\" section in gamedata."},{"tag":"param:gameconf","text":"GameConfig handle"},{"tag":"param:name","text":"Name of the function in the gamedata to load."},{"tag":"return","text":"Setup handle for the detour or INVALID_HANDLE if offset/signature/address wasn't found."},{"tag":"error","text":"Failed to create detour setup handle, invalid gamedata handle, invalid callback function or failed to find function in gamedata."}]},"kind":"native","returnType":"DHookSetup","arguments":[{"type":"Handle","name":"gameconf","decl":"Handle gameconf","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"4f1803f1b48759d806fe20cfb2542e9996fa144c","count":150,"time":1583169022},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetParamVector":{"symbol":{"name":"DHookGetParamVector","docStart":30738,"docEnd":31090,"docs":{"brief":"Get vector param value","tags":[{"tag":"","text":"Get vector param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get. (Example if the function has 2 params and you need the value of the first param num would be 1.)"},{"tag":"param:vec","text":"Vector buffer to store result."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookCreateDetour":{"symbol":{"name":"DHookCreateDetour","docStart":24166,"docEnd":24650,"docs":{"brief":"Creates a detour","tags":[{"tag":"","text":"Creates a detour"},{"tag":"param:funcaddr","text":"The address of the function to detour.\nCan be Address_Null if you want to load the address from gamedata using DHookSetFromConf."},{"tag":"param:callConv","text":"Calling convention of the function."},{"tag":"param:returnType","text":"Type of the return value."},{"tag":"param:thisType","text":"Type of this pointer or ignore (ignore can be used if not needed)"},{"tag":"return","text":"Setup handle for the detour."},{"tag":"error","text":"Failed to create detour setup handle."}]},"kind":"native","returnType":"DynamicDetour","arguments":[{"type":"Address","name":"funcaddr","decl":"Address funcaddr","default":null},{"type":"CallingConvention","name":"callConv","decl":"CallingConvention callConv","default":null},{"type":"ReturnType","name":"returntype","decl":"ReturnType returntype","default":null},{"type":"ThisPointerType","name":"thisType","decl":"ThisPointerType thisType","default":null}]},"created":{"hash":"644ce2273f42605d9e8013e503b0c762f0d9e096","count":132,"time":1583168033},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetReturnString":{"symbol":{"name":"DHookSetReturnString","docStart":34526,"docEnd":34717,"docs":{"brief":"Set return string value","tags":[{"tag":"","text":"Set return string value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:value","text":"Value to set return string as"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetParamObjectPtrVarVector":{"symbol":{"name":"DHookGetParamObjectPtrVarVector","docStart":35879,"docEnd":36272,"docs":{"brief":"Gets an objects vector variable value","tags":[{"tag":"","text":"Gets an objects vector variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get."},{"tag":"param:offset","text":"Offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:buffer","text":"Buffer to store the result vector"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookAddParam":{"symbol":{"name":"DHookAddParam","docStart":26850,"docEnd":27307,"docs":{"brief":"Adds param to a hook setup","tags":[{"tag":"","text":"Adds param to a hook setup"},{"tag":"param:setup","text":"Setup handle to add the param to."},{"tag":"param:type","text":"Param type"},{"tag":"param:size","text":"Used for Objects (not Object ptr) to define the size of the object."},{"tag":"param:flag","text":"Used to change the pass type."},{"tag":"param:custom_register","text":"The register this argument is passed in instead of the stack."},{"tag":"error","text":"Invalid setup handle or too many params added (request upping the max in thread)"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"HookParamType","name":"type","decl":"HookParamType type","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"},{"type":"DHookPassFlag","name":"flag","decl":"DHookPassFlag flag","default":"DHookPass_ByVal"},{"type":"DHookRegister","name":"custom_register","decl":"DHookRegister custom_register","default":"DHookRegister_Default"}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetReturnString":{"symbol":{"name":"DHookGetReturnString","docStart":33623,"docEnd":33895,"docs":{"brief":"Get return string value","tags":[{"tag":"","text":"Get return string value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:buffer","text":"String buffer to store result in. (In pre hooks will be default value \"\")"},{"tag":"param:size","text":"String buffer size"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"__ext_dhooks_SetNTVOptional":{"symbol":{"name":"__ext_dhooks_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}},"DHookSetParamObjectPtrVar":{"symbol":{"name":"DHookSetParamObjectPtrVar","docStart":35384,"docEnd":35765,"docs":{"brief":"Sets an objects variable value","tags":[{"tag":"","text":"Sets an objects variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set."},{"tag":"param:offset","text":"Offset within the object to the var to set."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:value","text":"The value to set the var to."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetParamString":{"symbol":{"name":"DHookGetParamString","docStart":31167,"docEnd":31550,"docs":{"brief":"Get string param value","tags":[{"tag":"","text":"Get string param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get. (Example if the function has 2 params and you need the value of the first param num would be 1.)"},{"tag":"param:buffer","text":"String buffer to store result"},{"tag":"param:size","text":"Buffer size"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetFromConf":{"symbol":{"name":"DHookSetFromConf","docStart":25329,"docEnd":25732,"docs":{"brief":"Load details for a vhook or detour from a gamedata file.","tags":[{"tag":"","text":"Load details for a vhook or detour from a gamedata file."},{"tag":"param:setup","text":"Hook setup handle to set the offset or address on."},{"tag":"param:gameconf","text":"GameConfig handle"},{"tag":"param:source","text":"Whether to look in Offsets or Signatures."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"True on success, false if nothing was found."},{"tag":"error","text":"Invalid setup or gamedata handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"Handle","name":"gameconf","decl":"Handle gameconf","default":null},{"type":"SDKFuncConfSource","name":"source","decl":"SDKFuncConfSource source","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"644ce2273f42605d9e8013e503b0c762f0d9e096","count":132,"time":1583168033},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetParam":{"symbol":{"name":"DHookSetParam","docStart":31638,"docEnd":32079,"docs":{"brief":"Set param value (Use only for: int, entity, bool or float param types)","tags":[{"tag":"","text":"Set param value (Use only for: int, entity, bool or float param types)"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set (Example if the function has 2 params and you need to set the value of the first param num would be 1.)"},{"tag":"param:value","text":"Value to set it as (only pass int, bool, float or entity index)"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookEntity":{"symbol":{"name":"DHookEntity","docStart":27475,"docEnd":28190,"docs":{"brief":"Hook entity","tags":[{"tag":"","text":"Hook entity"},{"tag":"param:setup","text":"Setup handle to use to add the hook."},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the return value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:entity","text":"Entity index to hook on."},{"tag":"param:removalcb","text":"Callback for when the hook is removed (Entity hooks are auto-removed on entity destroyed and will call this callback)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when creating the hook."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."},{"tag":"return","text":"INVALID_HOOK_ID on fail a hookid on success"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookRaw":{"symbol":{"name":"DHookRaw","docStart":29150,"docEnd":29868,"docs":{"brief":"Hook a raw pointer","tags":[{"tag":"","text":"Hook a raw pointer"},{"tag":"param:setup","text":"Setup handle to use to add the hook."},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the return value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:addr","text":"This pointer address."},{"tag":"param:removalcb","text":"Callback for when the hook is removed (Entity hooks are auto-removed on entity destroyed and will call this callback)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when creating the hook."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."},{"tag":"return","text":"INVALID_HOOK_ID on fail a hookid on success"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"Address","name":"addr","decl":"Address addr","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetReturn":{"symbol":{"name":"DHookSetReturn","docStart":33975,"docEnd":34208,"docs":{"brief":"Set return value (Use only for: int, entity, bool or float return types)","tags":[{"tag":"","text":"Set return value (Use only for: int, entity, bool or float return types)"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:value","text":"Value to set return as"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetReturnVector":{"symbol":{"name":"DHookGetReturnVector","docStart":33310,"docEnd":33554,"docs":{"brief":"Get return vector value","tags":[{"tag":"","text":"Get return vector value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:vec","text":"Vector buffer to store result in. (In pre hooks will be default value (0.0,0.0,0.0))"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookSetParamObjectPtrVarVector":{"symbol":{"name":"DHookSetParamObjectPtrVarVector","docStart":36398,"docEnd":36793,"docs":{"brief":"Sets an objects vector variable value","tags":[{"tag":"","text":"Sets an objects vector variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set."},{"tag":"param:offset","text":"Offset within the object to the var to set."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:value","text":"The value to set the vector var to."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"float[3]","name":"value","decl":"float value[3]","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookCreate":{"symbol":{"name":"DHookCreate","docStart":23547,"docEnd":24008,"docs":{"brief":"Creates a hook","tags":[{"tag":"","text":"Creates a hook"},{"tag":"param:offset","text":"vtable offset of function to hook"},{"tag":"param:hooktype","text":"Type of hook"},{"tag":"param:returntype","text":"Type of return value"},{"tag":"param:thistype","text":"Type of this pointer or ignore (ignore can be used if not needed)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when hooking."},{"tag":"return","text":"Returns setup handle for the hook."},{"tag":"error","text":"Failed to create hook setup handle or invalid callback function."}]},"kind":"native","returnType":"DynamicHook","arguments":[{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"HookType","name":"hooktype","decl":"HookType hooktype","default":null},{"type":"ReturnType","name":"returntype","decl":"ReturnType returntype","default":null},{"type":"ThisPointerType","name":"thistype","decl":"ThisPointerType thistype","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookGetParam":{"symbol":{"name":"DHookGetParam","docStart":30236,"docEnd":30682,"docs":{"brief":"Get param value (Use only for: int, entity, bool or float param types)","tags":[{"tag":"","text":"Get param value (Use only for: int, entity, bool or float param types)"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get. (Example if the function has 2 params and you need the value of the first param num would be 1. 0 Will return the number of params stored)"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."},{"tag":"return","text":"value if num greater than 0. If 0 returns paramcount."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}}},"methodmaps":{"DHookSetup":{"symbol":{"name":"DHookSetup","docStart":13165,"docEnd":13239,"docs":{"brief":"Base method map for common functions between virtual hooks and detours.","tags":[{"tag":"","text":"Base method map for common functions between virtual hooks and detours."}]},"parent":"Handle","methods":[{"name":"SetFromConf","docStart":13276,"docEnd":13671,"docs":{"brief":"Load address or offset for a vtable hook or detour from a gamedata file.","tags":[{"tag":"","text":"Load address or offset for a vtable hook or detour from a gamedata file."},{"tag":"param:gameconf","text":"GameData handle."},{"tag":"param:source","text":"Whether to look in Offsets, Signatures, or Addresses."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"True on success, false if nothing was found."},{"tag":"error","text":"Invalid setup or gamedata handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"GameData","name":"gameconf","decl":"GameData gameconf","default":null},{"type":"SDKFuncConfSource","name":"source","decl":"SDKFuncConfSource source","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"AddParam","docStart":13774,"docEnd":14270,"docs":{"brief":"Adds a parameter to a hook setup.","tags":[{"tag":"","text":"Adds a parameter to a hook setup."},{"tag":"param:type","text":"Parameter type."},{"tag":"param:size","text":"Used for Objects (not Object ptr) to define the size of the object."},{"tag":"param:flag","text":"Used to change the pass type (ignored by detours)."},{"tag":"param:custom_register","text":"The register this argument is passed in instead of the stack (ignored by vhooks)."},{"tag":"error","text":"Invalid setup handle or too many params added (request upping the max in thread)."}]},"kind":"native","returnType":"void","arguments":[{"type":"HookParamType","name":"type","decl":"HookParamType type","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"},{"type":"DHookPassFlag","name":"flag","decl":"DHookPassFlag flag","default":"DHookPass_ByVal"},{"type":"DHookRegister","name":"custom_register","decl":"DHookRegister custom_register","default":"DHookRegister_Default"}]}],"properties":[]},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookParam":{"symbol":{"name":"DHookParam","docStart":5154,"docEnd":5206,"docs":{"brief":"Represents the parameters of the hooked function.","tags":[{"tag":"","text":"Represents the parameters of the hooked function."}]},"parent":"Handle","methods":[{"name":"Get","docStart":5243,"docEnd":5734,"docs":{"brief":"Get the value of a parameter.\nUse only for: int, entity, edict, bool or float parameter types.","tags":[{"tag":"","text":"Get the value of a parameter.\nUse only for: int, entity, edict, bool or float parameter types."},{"tag":"param:num","text":"Parameter number to get, starting at 1. Parameter number 0 returns\nthe number of parameters."},{"tag":"return","text":"Value if num greater than 0. If 0 returns parameter count.\nIf CBaseEntity returns entity index."},{"tag":"error","text":"Invalid handle, invalid param number or invalid param type."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"num","decl":"int num","default":null}]},{"name":"GetVector","docStart":5773,"docEnd":6087,"docs":{"brief":"Get the value of a vector parameter.\nUse only for: vector or vectorptr parameter types.","tags":[{"tag":"","text":"Get the value of a vector parameter.\nUse only for: vector or vectorptr parameter types."},{"tag":"param:num","text":"Parameter number to get, starting at 1."},{"tag":"param:vec","text":"Vector buffer to store result."},{"tag":"error","text":"Invalid handle, invalid param number or invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"GetString","docStart":6147,"docEnd":6510,"docs":{"brief":"Get the value of a string parameter.\nUse only for: string, stringptr or charptr parameter types.","tags":[{"tag":"","text":"Get the value of a string parameter.\nUse only for: string, stringptr or charptr parameter types."},{"tag":"param:num","text":"Parameter number to get, starting at 1."},{"tag":"param:buffer","text":"String buffer to store result."},{"tag":"param:size","text":"Buffer size."},{"tag":"error","text":"Invalid handle, invalid param number or invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"Set","docStart":6581,"docEnd":7057,"docs":{"brief":"Set the value of a parameter.\nUse only for: int, entity, edict, bool or float parameter types.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback.","tags":[{"tag":"","text":"Set the value of a parameter.\nUse only for: int, entity, edict, bool or float parameter types.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback."},{"tag":"param:num","text":"Parameter number to set starting at 1."},{"tag":"param:value","text":"Value to set it as (only pass int, bool, float or entity index)."},{"tag":"error","text":"Invalid handle, invalid param number or invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"SetVector","docStart":7108,"docEnd":7537,"docs":{"brief":"Set the value of a vector parameter.\nUse only for: vector or vectorptr parameter types.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback.","tags":[{"tag":"","text":"Set the value of a vector parameter.\nUse only for: vector or vectorptr parameter types.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback."},{"tag":"param:num","text":"Parameter number to set, starting at 1."},{"tag":"param:vec","text":"Value to set vector as."},{"tag":"error","text":"Invalid handle, invalid param number or invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"SetString","docStart":7603,"docEnd":8041,"docs":{"brief":"Set the value of a string parameter.\nUse only for: string, stringptr or charptr parameter types.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback.","tags":[{"tag":"","text":"Set the value of a string parameter.\nUse only for: string, stringptr or charptr parameter types.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback."},{"tag":"param:num","text":"Parameter number to set, starting at 1."},{"tag":"param:value","text":"Value to set string as."},{"tag":"error","text":"Invalid handle, invalid param number or invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"GetObjectVar","docStart":8107,"docEnd":8545,"docs":{"brief":"Gets an object's variable value.","tags":[{"tag":"","text":"Gets an object's variable value."},{"tag":"param:num","text":"Parameter number to get, starting at 1."},{"tag":"param:offset","text":"Byte offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is."},{"tag":"return","text":"Value of the objects var. If EHANDLE type or entity returns entity index."},{"tag":"error","text":"Invalid handle, invalid param number, invalid param type or invalid Object type."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null}]},{"name":"GetObjectVarVector","docStart":8627,"docEnd":9033,"docs":{"brief":"Gets an object's vector variable value.","tags":[{"tag":"","text":"Gets an object's vector variable value."},{"tag":"param:num","text":"Parameter number to get, starting at 1."},{"tag":"param:offset","text":"Byte offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is."},{"tag":"param:vec","text":"Buffer to store the result vector."},{"tag":"error","text":"Invalid handle, invalid param number, invalid param type or invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"GetObjectVarString","docStart":9136,"docEnd":9588,"docs":{"brief":"Gets an object's string variable value.","tags":[{"tag":"","text":"Gets an object's string variable value."},{"tag":"param:num","text":"Parameter number to get, starting at 1."},{"tag":"param:offset","text":"Byte offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is."},{"tag":"param:buffer","text":"Buffer to store the result string."},{"tag":"param:size","text":"Size of the buffer."},{"tag":"error","text":"Invalid handle, invalid param number, invalid param type or invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"SetObjectVar","docStart":9702,"docEnd":10217,"docs":{"brief":"Sets an object's variable value.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback.","tags":[{"tag":"","text":"Sets an object's variable value.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback."},{"tag":"param:num","text":"Parameter number to set, starting at 1."},{"tag":"param:offset","text":"Byte offset within the object to the var to set."},{"tag":"param:type","text":"Type of var it is."},{"tag":"param:value","text":"The value to set the var to."},{"tag":"error","text":"Invalid handle, invalid param number, invalid param type or invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"SetObjectVarVector","docStart":10311,"docEnd":10840,"docs":{"brief":"Sets an object's vector variable value.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback.","tags":[{"tag":"","text":"Sets an object's vector variable value.\n\nThe changes are only applied when MRES_ChangedHandled or MRES_ChangedOverride\nis returned in the callback."},{"tag":"param:num","text":"Parameter number to set, starting at 1."},{"tag":"param:offset","text":"Byte offset within the object to the var to set."},{"tag":"param:type","text":"Type of var it is."},{"tag":"param:vec","text":"The value to set the vector var to."},{"tag":"error","text":"Invalid handle, invalid param number, invalid param type or invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"IsNull","docStart":11027,"docEnd":11252,"docs":{"brief":"Checks if a pointer parameter is null.","tags":[{"tag":"","text":"Checks if a pointer parameter is null."},{"tag":"param:num","text":"Parameter number to check, starting at 1."},{"tag":"return","text":"True if null, false otherwise."},{"tag":"error","text":"Non-pointer parameter."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"num","decl":"int num","default":null}]}],"properties":[]},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookReturn":{"symbol":{"name":"DHookReturn","docStart":11300,"docEnd":11354,"docs":{"brief":"Represents the return value of the hooked function.","tags":[{"tag":"","text":"Represents the return value of the hooked function."}]},"parent":"Handle","methods":[{"name":"GetVector","docStart":11754,"docEnd":11999,"docs":{"brief":"Get return vector value.\nUse only for: vector or vectorptr return types.\n\nOnly useful in post hooks.","tags":[{"tag":"","text":"Get return vector value.\nUse only for: vector or vectorptr return types.\n\nOnly useful in post hooks."},{"tag":"param:vec","text":"Vector buffer to store result in."},{"tag":"error","text":"Invalid Handle or invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"GetString","docStart":12050,"docEnd":12350,"docs":{"brief":"Get return string value.\nUse only for: string, stringptr or charptr return types.\n\nOnly useful in post hooks.","tags":[{"tag":"","text":"Get return string value.\nUse only for: string, stringptr or charptr return types.\n\nOnly useful in post hooks."},{"tag":"param:buffer","text":"String buffer to store result in."},{"tag":"param:size","text":"String buffer size."},{"tag":"error","text":"Invalid Handle or invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"SetVector","docStart":12412,"docEnd":12725,"docs":{"brief":"Set return vector value.\nUse only for: vector or vectorptr return types.\n\nThe value is only applied when MRES_Override or MRES_Supercede is returned\nin the callback.","tags":[{"tag":"","text":"Set return vector value.\nUse only for: vector or vectorptr return types.\n\nThe value is only applied when MRES_Override or MRES_Supercede is returned\nin the callback."},{"tag":"param:vec","text":"Value to set return vector to."},{"tag":"error","text":"Invalid Handle or invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"SetString","docStart":12782,"docEnd":13104,"docs":{"brief":"Set return string value.\nUse only for: string, stringptr or charptr return types.\n\nThe value is only applied when MRES_Override or MRES_Supercede is returned\nin the callback.","tags":[{"tag":"","text":"Set return string value.\nUse only for: string, stringptr or charptr return types.\n\nThe value is only applied when MRES_Override or MRES_Supercede is returned\nin the callback."},{"tag":"param:buffer","text":"Value to set return string to."},{"tag":"error","text":"Invalid Handle or invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null}]}],"properties":[{"name":"Value","docStart":11393,"docEnd":11665,"docs":{"brief":"Retrieves or sets the return value.\nUse only for: int, entity, edict, bool or float return types.\n\nThe return value is only readable in a post hook.\nThe value is only applied when MRES_Override or MRES_Supercede is returned\nin the callback.","tags":[{"tag":"","text":"Retrieves or sets the return value.\nUse only for: int, entity, edict, bool or float return types.\n\nThe return value is only readable in a post hook.\nThe value is only applied when MRES_Override or MRES_Supercede is returned\nin the callback."}]},"type":"any","getter":true,"setter":true}]},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DynamicHook":{"symbol":{"name":"DynamicHook","docStart":14431,"docEnd":14822,"docs":{"brief":"A DynamicHook allows to hook a virtual function on any C++ object.\nCurrently CBaseEntity and CGameRules have a convenience API for easy entity hooking,\nbut it's possible to provide a raw this-pointer to hook any object in memory too.\n\nInternally this intercepts function calls by replacing the function pointer\nin the virtual table of the object with our own function.","tags":[{"tag":"","text":"A DynamicHook allows to hook a virtual function on any C++ object.\nCurrently CBaseEntity and CGameRules have a convenience API for easy entity hooking,\nbut it's possible to provide a raw this-pointer to hook any object in memory too.\n\nInternally this intercepts function calls by replacing the function pointer\nin the virtual table of the object with our own function."}]},"parent":"DHookSetup","methods":[{"name":"DynamicHook","docStart":14864,"docEnd":15243,"docs":{"brief":"Creates a vtable hook.","tags":[{"tag":"","text":"Creates a vtable hook."},{"tag":"param:offset","text":"Virtual table offset of function to hook."},{"tag":"param:hooktype","text":"Type of hook."},{"tag":"param:returntype","text":"Type of return value."},{"tag":"param:thistype","text":"Type of this pointer or ignore (ignore can be used if not needed)."},{"tag":"error","text":"Failed to create hook setup handle or invalid callback function."}]},"kind":"native","returnType":"DynamicHook","arguments":[{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"HookType","name":"hooktype","decl":"HookType hooktype","default":null},{"type":"ReturnType","name":"returntype","decl":"ReturnType returntype","default":null},{"type":"ThisPointerType","name":"thistype","decl":"ThisPointerType thistype","default":null}]},{"name":"FromConf","docStart":15357,"docEnd":16079,"docs":{"brief":"Setup a vtable hook for a function as described in a \"Functions\" section in gamedata.\nThe \"Functions\" section is parsed once the gamedata file is loaded and cached globally.","tags":[{"tag":"","text":"Setup a vtable hook for a function as described in a \"Functions\" section in gamedata.\nThe \"Functions\" section is parsed once the gamedata file is loaded and cached globally."},{"tag":"param:gameconf","text":"GameData handle to use for address lookup.\nDoesn't have to be the same as the one with the \"Functions\" section."},{"tag":"param:name","text":"Name of the function in a \"Functions\" section to load."},{"tag":"return","text":"Setup handle for the detour or null if offset wasn't found."},{"tag":"error","text":"Failed to create detour setup handle, invalid gamedata handle,\ninvalid callback function or failed to find function in cached \"Functions\" sections."}]},"kind":"native","returnType":"DynamicHook","arguments":[{"type":"GameData","name":"gameconf","decl":"GameData gameconf","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"HookEntity","docStart":16167,"docEnd":17151,"docs":{"brief":"Hook an entity.\n\nEntity hooks are auto-removed when the entity is destroyed.\nIf you need to read the return value of the function, choose a post hook.","tags":[{"tag":"","text":"Hook an entity.\n\nEntity hooks are auto-removed when the entity is destroyed.\nIf you need to read the return value of the function, choose a post hook."},{"tag":"param:mode","text":"The desired hook mode - pre or post.\nA pre hook calls your callback BEFORE the original function is called.\nYou can access the parameters, set the return value, and skip the original function.\nA post hook calls your callback AFTER the original function executed.\nYou can access the parameters and get/set the return value."},{"tag":"param:entity","text":"Entity index to hook on."},{"tag":"param:callback","text":"Callback function."},{"tag":"param:removalcb","text":"Optional callback for when the hook is removed."},{"tag":"return","text":"A hookid on success, INVALID_HOOK_ID otherwise."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."}]},"kind":"native","returnType":"int","arguments":[{"type":"HookMode","name":"mode","decl":"HookMode mode","default":null},{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"}]},{"name":"HookGamerules","docStart":17282,"docEnd":18208,"docs":{"brief":"Hook gamerules object.\n\nGame rules hooks are auto-removed on map end.\nIf you need to read the return value of the function, choose a post hook.","tags":[{"tag":"","text":"Hook gamerules object.\n\nGame rules hooks are auto-removed on map end.\nIf you need to read the return value of the function, choose a post hook."},{"tag":"param:mode","text":"The desired hook mode - pre or post.\nA pre hook calls your callback BEFORE the original function is called.\nYou can access the parameters, set the return value, and skip the original function.\nA post hook calls your callback AFTER the original function executed.\nYou can access the parameters and get/set the return value."},{"tag":"param:callback","text":"Callback function."},{"tag":"param:removalcb","text":"Optional callback for when the hook is removed."},{"tag":"return","text":"A hookid on success, INVALID_HOOK_ID otherwise."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."}]},"kind":"native","returnType":"int","arguments":[{"type":"HookMode","name":"mode","decl":"HookMode mode","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"}]},{"name":"HookRaw","docStart":18330,"docEnd":19176,"docs":{"brief":"Hook a raw this-pointer.\nIf you need to read the return value of the function, choose a post hook.","tags":[{"tag":"","text":"Hook a raw this-pointer.\nIf you need to read the return value of the function, choose a post hook."},{"tag":"param:mode","text":"The desired hook mode - pre or post.\nA pre hook calls your callback BEFORE the original function is called.\nYou can access the parameters, set the return value, and skip the original function.\nA post hook calls your callback AFTER the original function executed.\nYou can access the parameters and get/set the return value."},{"tag":"param:addr","text":"This pointer address."},{"tag":"param:callback","text":"Callback function."},{"tag":"return","text":"A hookid on success, INVALID_HOOK_ID otherwise."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."}]},"kind":"native","returnType":"int","arguments":[{"type":"HookMode","name":"mode","decl":"HookMode mode","default":null},{"type":"Address","name":"addr","decl":"Address addr","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]},{"name":"RemoveHook","docStart":19263,"docEnd":19451,"docs":{"brief":"Remove hook by hook id:\nThis will NOT fire the removal callback!","tags":[{"tag":"","text":"Remove hook by hook id:\nThis will NOT fire the removal callback!"},{"tag":"param:hookid","text":"Hook id to remove."},{"tag":"return","text":"True on success, false otherwise"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"hookid","decl":"int hookid","default":null}]}],"properties":[]},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DynamicDetour":{"symbol":{"name":"DynamicDetour","docStart":19511,"docEnd":20225,"docs":{"brief":"A DynamicDetour is a way to hook and block any function in memory.\nGiven the address of a function, it can call a callback in your script whenever\nthe function gets called. The callback has access to all parameters of the function\nas well as the return value.\n\nInternally this works by replacing the first instructions of the function\nwith a jump to our own code. This means that the signature used to find\nthe function address in the first place might not match anymore after a detour.\nIf you need to detour the same function in different plugins make sure to\nwildcard \\x2a the first 6 bytes of the signature to accommodate for the patched\njump introduced by the detour.","tags":[{"tag":"","text":"A DynamicDetour is a way to hook and block any function in memory.\nGiven the address of a function, it can call a callback in your script whenever\nthe function gets called. The callback has access to all parameters of the function\nas well as the return value.\n\nInternally this works by replacing the first instructions of the function\nwith a jump to our own code. This means that the signature used to find\nthe function address in the first place might not match anymore after a detour.\nIf you need to detour the same function in different plugins make sure to\nwildcard \\x2a the first 6 bytes of the signature to accommodate for the patched\njump introduced by the detour."}]},"parent":"DHookSetup","methods":[{"name":"DynamicDetour","docStart":20269,"docEnd":20809,"docs":{"brief":"Creates a detour.","tags":[{"tag":"","text":"Creates a detour."},{"tag":"param:funcaddr","text":"The address of the function to detour.\nCan be Address_Null if you want to load the address from gamedata using DHookSetFromConf."},{"tag":"param:callConv","text":"Calling convention of the function."},{"tag":"param:returnType","text":"Type of the return value."},{"tag":"param:thisType","text":"Type of this pointer or ignore (ignore can be used if not needed).\nOnly used for thiscall detours."},{"tag":"error","text":"Failed to create detour setup handle."}]},"kind":"native","returnType":"DynamicDetour","arguments":[{"type":"Address","name":"funcaddr","decl":"Address funcaddr","default":null},{"type":"CallingConvention","name":"callConv","decl":"CallingConvention callConv","default":null},{"type":"ReturnType","name":"returntype","decl":"ReturnType returntype","default":null},{"type":"ThisPointerType","name":"thisType","decl":"ThisPointerType thisType","default":"ThisPointer_Ignore"}]},{"name":"FromConf","docStart":20959,"docEnd":21676,"docs":{"brief":"Setup a detour for a function as described in a \"Functions\" section in gamedata.\nThe \"Functions\" section is parsed once the gamedata file is loaded and cached globally.","tags":[{"tag":"","text":"Setup a detour for a function as described in a \"Functions\" section in gamedata.\nThe \"Functions\" section is parsed once the gamedata file is loaded and cached globally."},{"tag":"param:gameconf","text":"GameData handle to use for address lookup.\nDoesn't have to be the same as the one with the \"Functions\" section."},{"tag":"param:name","text":"Name of the function in a \"Functions\" section to load."},{"tag":"return","text":"Setup handle for the detour or null if offset wasn't found."},{"tag":"error","text":"Failed to create detour setup handle, invalid gamedata handle,\ninvalid callback function or failed to find function in cached \"Functions\" sections."}]},"kind":"native","returnType":"DynamicDetour","arguments":[{"type":"GameData","name":"gameconf","decl":"GameData gameconf","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"Enable","docStart":21766,"docEnd":22562,"docs":{"brief":"Enable the detour of the function described in this detour setup.\nIf you need to read the return value of the function, choose a post hook.","tags":[{"tag":"","text":"Enable the detour of the function described in this detour setup.\nIf you need to read the return value of the function, choose a post hook."},{"tag":"param:mode","text":"The desired hook mode - pre or post.\nA pre hook calls your callback BEFORE the original function is called.\nYou can access the parameters, set the return value, and skip the original function.\nA post hook calls your callback AFTER the original function executed.\nYou can access the parameters and get/set the return value."},{"tag":"param:callback","text":"Callback function."},{"tag":"return","text":"True if detour was enabled, false otherwise."},{"tag":"error","text":"Hook handle is not setup for a detour."}]},"kind":"native","returnType":"bool","arguments":[{"type":"HookMode","name":"mode","decl":"HookMode mode","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]},{"name":"Disable","docStart":22635,"docEnd":22979,"docs":{"brief":"Disable the detour of the function described in this detour setup.","tags":[{"tag":"","text":"Disable the detour of the function described in this detour setup."},{"tag":"param:mode","text":"The hook mode to disable - pre or post."},{"tag":"param:callback","text":"Callback function."},{"tag":"return","text":"True if detour was disabled, false otherwise."},{"tag":"error","text":"Hook handle is not setup for a detour or function is not detoured."}]},"kind":"native","returnType":"bool","arguments":[{"type":"HookMode","name":"mode","decl":"HookMode mode","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]}],"properties":[]},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}}},"enumstructs":{},"constants":{},"defines":{"INVALID_HOOK_ID":{"symbol":{"name":"INVALID_HOOK_ID","docStart":0,"docEnd":0,"docs":null,"value":"0"},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"_dhooks_included":{"symbol":{"name":"_dhooks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}}},"enums":{"ReturnType":{"symbol":{"name":"ReturnType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ReturnType_Unknown","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Void","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Int","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Bool","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_String","docStart":765,"docEnd":790,"docs":{"brief":"Note this is a string_t","tags":[{"tag":"","text":"Note this is a string_t"}]},"value":null},{"name":"ReturnType_StringPtr","docStart":815,"docEnd":842,"docs":{"brief":"Note this is a string_t *","tags":[{"tag":"","text":"Note this is a string_t *"}]},"value":null},{"name":"ReturnType_CharPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Vector","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_VectorPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_CBaseEntity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Edict","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"ThisPointerType":{"symbol":{"name":"ThisPointerType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ThisPointer_Ignore","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ThisPointer_CBaseEntity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ThisPointer_Address","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}},"HookType":{"symbol":{"name":"HookType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HookType_Entity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookType_GameRules","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookType_Raw","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}},"DHookRegister":{"symbol":{"name":"DHookRegister","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"DHookRegister_Default","docStart":2645,"docEnd":2721,"docs":{"brief":"Don't change the register and use the default for the calling convention.","tags":[{"tag":"","text":"Don't change the register and use the default for the calling convention."}]},"value":null},{"name":"DHookRegister_AL","docStart":2752,"docEnd":2786,"docs":{"brief":"8-bit general purpose registers","tags":[{"tag":"","text":"8-bit general purpose registers"}]},"value":null},{"name":"DHookRegister_CL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_DL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_BL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_AH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_CH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_DH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_BH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EAX","docStart":2952,"docEnd":2987,"docs":{"brief":"32-bit general purpose registers","tags":[{"tag":"","text":"32-bit general purpose registers"}]},"value":null},{"name":"DHookRegister_ECX","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EDX","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EBX","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_ESP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EBP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_ESI","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EDI","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM0","docStart":3161,"docEnd":3185,"docs":{"brief":"128-bit XMM registers","tags":[{"tag":"","text":"128-bit XMM registers"}]},"value":null},{"name":"DHookRegister_XMM1","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM2","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM3","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM4","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM5","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM6","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM7","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_ST0","docStart":3367,"docEnd":3390,"docs":{"brief":"80-bit FPU registers","tags":[{"tag":"","text":"80-bit FPU registers"}]},"value":null}]},"created":{"hash":"5a8c67e969e3f6dce469bd4a7e1e2740a48c086b","count":143,"time":1583168833},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookPassFlag":{"symbol":{"name":"DHookPassFlag","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"DHookPass_ByVal","docStart":2329,"docEnd":2353,"docs":{"brief":"Passing by value","tags":[{"tag":"","text":"Passing by value"}]},"value":"1 << 0"},{"name":"DHookPass_ByRef","docStart":2385,"docEnd":2413,"docs":{"brief":"Passing by reference","tags":[{"tag":"","text":"Passing by reference"}]},"value":"1 << 1"},{"name":"DHookPass_ODTOR","docStart":2444,"docEnd":2475,"docs":{"brief":"Object has a destructor","tags":[{"tag":"","text":"Object has a destructor"}]},"value":"1 << 2"},{"name":"DHookPass_OCTOR","docStart":2506,"docEnd":2538,"docs":{"brief":"Object has a constructor","tags":[{"tag":"","text":"Object has a constructor"}]},"value":"1 << 3"},{"name":"DHookPass_OASSIGNOP","docStart":2572,"docEnd":2613,"docs":{"brief":"Object has an assignment operator","tags":[{"tag":"","text":"Object has an assignment operator"}]},"value":"1 << 4"}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"MRESReturn":{"symbol":{"name":"MRESReturn","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"MRES_ChangedHandled","docStart":1884,"docEnd":1929,"docs":{"brief":"Use changed values and return MRES_Handled","tags":[{"tag":"","text":"Use changed values and return MRES_Handled"}]},"value":"-2"},{"name":"MRES_ChangedOverride","docStart":1955,"docEnd":2001,"docs":{"brief":"Use changed values and return MRES_Override","tags":[{"tag":"","text":"Use changed values and return MRES_Override"}]},"value":null},{"name":"MRES_Ignored","docStart":2021,"docEnd":2053,"docs":{"brief":"plugin didn't take any action","tags":[{"tag":"","text":"plugin didn't take any action"}]},"value":null},{"name":"MRES_Handled","docStart":2073,"docEnd":2138,"docs":{"brief":"plugin did something, but real function should still be called","tags":[{"tag":"","text":"plugin did something, but real function should still be called"}]},"value":null},{"name":"MRES_Override","docStart":2159,"docEnd":2205,"docs":{"brief":"call real function, but use my return value","tags":[{"tag":"","text":"call real function, but use my return value"}]},"value":null},{"name":"MRES_Supercede","docStart":2226,"docEnd":2268,"docs":{"brief":"skip real function; use my return value","tags":[{"tag":"","text":"skip real function; use my return value"}]},"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"HookMode":{"symbol":{"name":"HookMode","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Hook_Pre","docStart":1683,"docEnd":1741,"docs":{"brief":"Callback will be executed BEFORE the original function.","tags":[{"tag":"","text":"Callback will be executed BEFORE the original function."}]},"value":null},{"name":"Hook_Post","docStart":1772,"docEnd":1829,"docs":{"brief":"Callback will be executed AFTER the original function.","tags":[{"tag":"","text":"Callback will be executed AFTER the original function."}]},"value":null}]},"created":{"hash":"5fe46a330bc7d50a0720f29e9d00ff38b278353d","count":208,"time":1602714240},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"ObjectValueType":{"symbol":{"name":"ObjectValueType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ObjectValueType_Int","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"ObjectValueType_Bool","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_Ehandle","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_CBaseEntityPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_IntPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_BoolPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_EhandlePtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_FloatPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_Vector","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_VectorPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_CharPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_String","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}},"ListenType":{"symbol":{"name":"ListenType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ListenType_Created","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ListenType_Deleted","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}},"CallingConvention":{"symbol":{"name":"CallingConvention","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"CallConv_CDECL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CallConv_THISCALL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CallConv_STDCALL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CallConv_FASTCALL","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"644ce2273f42605d9e8013e503b0c762f0d9e096","count":132,"time":1583168033},"last_updated":{"hash":"38bf922fb101191aa242bb4303301866d14d854e","count":184,"time":1583171382}},"HookParamType":{"symbol":{"name":"HookParamType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HookParamType_Unknown","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Int","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Bool","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_String","docStart":1099,"docEnd":1124,"docs":{"brief":"Note this is a string_t","tags":[{"tag":"","text":"Note this is a string_t"}]},"value":null},{"name":"HookParamType_StringPtr","docStart":1152,"docEnd":1179,"docs":{"brief":"Note this is a string_t *","tags":[{"tag":"","text":"Note this is a string_t *"}]},"value":null},{"name":"HookParamType_CharPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_VectorPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_CBaseEntity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_ObjectPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Edict","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Object","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}}},"typesets":{"ListenCB":{"symbol":{"name":"ListenCB","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":3440,"docEnd":3449,"docs":{"brief":"Deleted","tags":[{"tag":"","text":"Deleted"}]},"type":"function void(int entity)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]}},{"docStart":3485,"docEnd":3494,"docs":{"brief":"Created","tags":[{"tag":"","text":"Created"}]},"type":"function void(int entity, const char[] classname)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null}]}}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}},"DHookRemovalCB":{"symbol":{"name":"DHookRemovalCB","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void(int hookid)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"hookid","decl":"int hookid","default":null}]}}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075}},"DHookCallback":{"symbol":{"name":"DHookCallback","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":3644,"docEnd":3705,"docs":{"brief":"Function Example: void Ham::Test() with this pointer ignore","tags":[{"tag":"","text":"Function Example: void Ham::Test() with this pointer ignore"}]},"type":"function MRESReturn()","parsedSignature":{"returnType":"MRESReturn","arguments":[]}},{"docStart":3737,"docEnd":3798,"docs":{"brief":"Function Example: void Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(int pThis)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null}]}},{"docStart":3839,"docEnd":3908,"docs":{"brief":"Function Example: void Ham::Test(int cake) with this pointer ignore","tags":[{"tag":"","text":"Function Example: void Ham::Test(int cake) with this pointer ignore"}]},"type":"function MRESReturn(DHookParam hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"DHookParam","name":"hParams","decl":"DHookParam hParams","default":null}]}},{"docStart":3958,"docEnd":4027,"docs":{"brief":"Function Example: void Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(int pThis, DHookParam hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null},{"type":"DHookParam","name":"hParams","decl":"DHookParam hParams","default":null}]}},{"docStart":4088,"docEnd":4148,"docs":{"brief":"Function Example: int Ham::Test() with this pointer ignore","tags":[{"tag":"","text":"Function Example: int Ham::Test() with this pointer ignore"}]},"type":"function MRESReturn(DHookReturn hReturn)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"DHookReturn","name":"hReturn","decl":"DHookReturn hReturn","default":null}]}},{"docStart":4199,"docEnd":4259,"docs":{"brief":"Function Example: int Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(int pThis, DHookReturn hReturn)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null},{"type":"DHookReturn","name":"hReturn","decl":"DHookReturn hReturn","default":null}]}},{"docStart":4321,"docEnd":4389,"docs":{"brief":"Function Example: int Ham::Test(int cake) with this pointer ignore","tags":[{"tag":"","text":"Function Example: int Ham::Test(int cake) with this pointer ignore"}]},"type":"function MRESReturn(DHookReturn hReturn, DHookParam hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"DHookReturn","name":"hReturn","decl":"DHookReturn hReturn","default":null},{"type":"DHookParam","name":"hParams","decl":"DHookParam hParams","default":null}]}},{"docStart":4460,"docEnd":4528,"docs":{"brief":"Function Example: int Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(int pThis, DHookReturn hReturn, DHookParam hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null},{"type":"DHookReturn","name":"hReturn","decl":"DHookReturn hReturn","default":null},{"type":"DHookParam","name":"hParams","decl":"DHookParam hParams","default":null}]}},{"docStart":4629,"docEnd":4690,"docs":{"brief":"Function Example: void Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(Address pThis)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null}]}},{"docStart":4735,"docEnd":4804,"docs":{"brief":"Function Example: void Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(Address pThis, DHookParam hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null},{"type":"DHookParam","name":"hParams","decl":"DHookParam hParams","default":null}]}},{"docStart":4869,"docEnd":4929,"docs":{"brief":"Function Example: int Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(Address pThis, DHookReturn hReturn)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null},{"type":"DHookReturn","name":"hReturn","decl":"DHookReturn hReturn","default":null}]}},{"docStart":4995,"docEnd":5063,"docs":{"brief":"Function Example: int Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(Address pThis, DHookReturn hReturn, DHookParam hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null},{"type":"DHookReturn","name":"hReturn","decl":"DHookReturn hReturn","default":null},{"type":"DHookParam","name":"hParams","decl":"DHookParam hParams","default":null}]}}]},"created":{"hash":"1e1dbb75014cae76a13d66ab95ec5b6527b89779","count":65,"time":1427403075},"last_updated":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}}},"typedefs":{}}},"version":{"hash":"e5d5e9a28908aa12561ea4dc120ab090a76e60fc","count":215,"time":1603113281}}