{"meta":{"name":"Core","description":"SourceMod Core","author":"AlliedModders LLC"},"source":{"type":"git","merge":null,"repository":"https://github.com/alliedmodders/sourcemod.git","endpoints":null,"patterns":["plugins/include/*.inc"]},"strands":{"sdktools_stocks":{"functions":{"FindTeamByName":{"symbol":{"name":"FindTeamByName","docStart":1656,"docEnd":2129,"docs":{"brief":"Given a partial team name, attempts to find a matching team.\n\nThe search is performed case insensitively and only against the\nfirst N characters of the team names, where N is the number of\ncharacters in the search pattern.","tags":[{"tag":"","text":"Given a partial team name, attempts to find a matching team.\n\nThe search is performed case insensitively and only against the\nfirst N characters of the team names, where N is the number of\ncharacters in the search pattern."},{"tag":"param:name","text":"Partial or full team name."},{"tag":"return","text":"A valid team index on success.\n-1 if no team matched.\n-2 if more than one team matched."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"1d3f8a44e5189e276c034f18ae54350c2bed331d","count":1617,"time":1192925806},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_stocks_included":{"symbol":{"name":"_sdktools_stocks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"1d3f8a44e5189e276c034f18ae54350c2bed331d","count":1617,"time":1192925806},"last_updated":{"hash":"1d3f8a44e5189e276c034f18ae54350c2bed331d","count":1617,"time":1192925806}}},"enums":{},"typesets":{},"typedefs":{}},"adt_stack":{"functions":{"GetStackBlockSize":{"symbol":{"name":"GetStackBlockSize","docStart":9319,"docEnd":9517,"docs":{"brief":"Returns the blocksize the stack was created with.","tags":[{"tag":"","text":"Returns the blocksize the stack was created with."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"return","text":"The blocksize of the stack."},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null}]},"created":{"hash":"86363dd3ecf27d57ad1bfe01d63fee68b435291a","count":6053,"time":1486668374},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"IsStackEmpty":{"symbol":{"name":"IsStackEmpty","docStart":8777,"docEnd":8961,"docs":{"brief":"Checks if a stack is empty.","tags":[{"tag":"","text":"Checks if a stack is empty."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"return","text":"True if empty, false if not empty."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"CreateStack":{"symbol":{"name":"CreateStack","docStart":5224,"docEnd":5971,"docs":{"brief":"Creates a stack structure.  A stack is a LIFO (last in, first out)\nvector (array) of items.  It has O(1) insertion and O(1) removal.\n\nStacks have two operations: Push (adding an item) and Pop (removes\nitems in reverse-push order).\n\nThe contents of the stack are uniform; i.e. storing a string and then\nretrieving it as an integer is NOT the same as StringToInt()!\n\nThe \"blocksize\" determines how many cells each slot has; it cannot\nbe changed after creation.","tags":[{"tag":"","text":"Creates a stack structure.  A stack is a LIFO (last in, first out)\nvector (array) of items.  It has O(1) insertion and O(1) removal.\n\nStacks have two operations: Push (adding an item) and Pop (removes\nitems in reverse-push order).\n\nThe contents of the stack are uniform; i.e. storing a string and then\nretrieving it as an integer is NOT the same as StringToInt()!\n\nThe \"blocksize\" determines how many cells each slot has; it cannot\nbe changed after creation."},{"tag":"param:blocksize","text":"The number of cells each entry in the stack can\nhold.  For example, 32 cells is equivalent to:\nnew Array[X][32]"},{"tag":"return","text":"New stack Handle."}]},"kind":"native","returnType":"ArrayStack","arguments":[{"type":"int","name":"blocksize","decl":"int blocksize","default":"1"}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PopStackArray":{"symbol":{"name":"PopStackArray","docStart":8295,"docEnd":8704,"docs":{"brief":"Pops an array of cells from a stack.","tags":[{"tag":"","text":"Pops an array of cells from a stack."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:buffer","text":"Buffer to store the array in."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"True on success, false if the stack is empty."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null},{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PushStackCell":{"symbol":{"name":"PushStackCell","docStart":6024,"docEnd":6325,"docs":{"brief":"Pushes a value onto the end of the stack, adding a new index.\n\nThis may safely be used even if the stack has a blocksize\ngreater than 1.","tags":[{"tag":"","text":"Pushes a value onto the end of the stack, adding a new index.\n\nThis may safely be used even if the stack has a blocksize\ngreater than 1."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:value","text":"Value to push."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PopStackCell":{"symbol":{"name":"PopStackCell","docStart":7362,"docEnd":7810,"docs":{"brief":"Pops a cell value from a stack.","tags":[{"tag":"","text":"Pops a cell value from a stack."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:value","text":"Variable to store the value."},{"tag":"param:block","text":"Optionally specify which block to read from\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally read as a byte instead of a cell."},{"tag":"return","text":"True on success, false if the stack is empty."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null},{"type":"any&","name":"value","decl":"any& value","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PopStackString":{"symbol":{"name":"PopStackString","docStart":7899,"docEnd":8202,"docs":{"brief":"Pops a string value from a stack.","tags":[{"tag":"","text":"Pops a string value from a stack."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:buffer","text":"Buffer to store string."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"True on success, false if the stack is empty."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PushStackString":{"symbol":{"name":"PushStackString","docStart":6382,"docEnd":6624,"docs":{"brief":"Pushes a copy of a string onto the end of a stack, truncating it if it is\ntoo big.","tags":[{"tag":"","text":"Pushes a copy of a string onto the end of a stack, truncating it if it is\ntoo big."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:value","text":"String to push."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PushStackArray":{"symbol":{"name":"PushStackArray","docStart":6692,"docEnd":7282,"docs":{"brief":"Pushes a copy of an array of cells onto the end of a stack.  The cells\nare pushed as a block (i.e. the entire array takes up one stack slot),\nrather than pushing each cell individually.","tags":[{"tag":"","text":"Pushes a copy of an array of cells onto the end of a stack.  The cells\nare pushed as a block (i.e. the entire array takes up one stack slot),\nrather than pushing each cell individually."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:values","text":"Block of values to copy."},{"tag":"param:size","text":"If not set, the number of elements copied from the array\nwill be equal to the blocksize.  If set higher than the\nblocksize, the operation will be truncated."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}},"PopStack":{"symbol":{"name":"PopStack","docStart":9006,"docEnd":9224,"docs":{"brief":"Pops a value off a stack, ignoring it completely.","tags":[{"tag":"","text":"Pops a value off a stack, ignoring it completely."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"return","text":"True if something was popped, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"stack","decl":"Handle stack","default":null}]},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}}},"methodmaps":{"ArrayStack":{"symbol":{"name":"ArrayStack","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"ArrayStack","docStart":1696,"docEnd":2401,"docs":{"brief":"Creates a stack structure.  A stack is a LIFO (last in, first out)\nvector (array) of items.  It has O(1) insertion and O(1) removal.\n\nStacks have two operations: Push (adding an item) and Pop (removes\nitems in reverse-push order).\n\nThe contents of the stack are uniform; i.e. storing a string and then\nretrieving it as an integer is NOT the same as StringToInt()!\n\nThe \"blocksize\" determines how many cells each slot has; it cannot\nbe changed after creation.","tags":[{"tag":"","text":"Creates a stack structure.  A stack is a LIFO (last in, first out)\nvector (array) of items.  It has O(1) insertion and O(1) removal.\n\nStacks have two operations: Push (adding an item) and Pop (removes\nitems in reverse-push order).\n\nThe contents of the stack are uniform; i.e. storing a string and then\nretrieving it as an integer is NOT the same as StringToInt()!\n\nThe \"blocksize\" determines how many cells each slot has; it cannot\nbe changed after creation."},{"tag":"param:blocksize","text":"The number of cells each entry in the stack can\nhold.  For example, 32 cells is equivalent to:\nnew Array[X][32]"}]},"kind":"native","returnType":"ArrayStack","arguments":[{"type":"int","name":"blocksize","decl":"int blocksize","default":"1"}]},{"name":"Clone","docStart":2451,"docEnd":2775,"docs":{"brief":"Clones an stack, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should\nclosed when no longer needed.","tags":[{"tag":"","text":"Clones an stack, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should\nclosed when no longer needed."},{"tag":"return","text":"New handle to the cloned stack object"}]},"kind":"native","returnType":"ArrayStack","arguments":[]},{"name":"Push","docStart":2816,"docEnd":3014,"docs":{"brief":"Pushes a value onto the end of the stack, adding a new index.\n\nThis may safely be used even if the stack has a blocksize\ngreater than 1.","tags":[{"tag":"","text":"Pushes a value onto the end of the stack, adding a new index.\n\nThis may safely be used even if the stack has a blocksize\ngreater than 1."},{"tag":"param:value","text":"Value to push."}]},"kind":"native","returnType":"void","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"PushString","docStart":3057,"docEnd":3193,"docs":{"brief":"Pushes a copy of a string onto the end of a stack, truncating it if it\nis too big.","tags":[{"tag":"","text":"Pushes a copy of a string onto the end of a stack, truncating it if it\nis too big."},{"tag":"param:value","text":"String to push."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushArray","docStart":3251,"docEnd":3775,"docs":{"brief":"Pushes a copy of an array of cells onto the end of a stack. The cells\nare pushed as a block (i.e. the entire array takes up one stack slot),\nrather than pushing each cell individually.","tags":[{"tag":"","text":"Pushes a copy of an array of cells onto the end of a stack. The cells\nare pushed as a block (i.e. the entire array takes up one stack slot),\nrather than pushing each cell individually."},{"tag":"param:stack","text":"Stack Handle."},{"tag":"param:values","text":"Block of values to copy."},{"tag":"param:size","text":"If not set, the number of elements copied from the array\nwill be equal to the blocksize.  If set higher than the\nblocksize, the operation will be truncated."}]},"kind":"native","returnType":"void","arguments":[{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"Pop","docStart":3845,"docEnd":4178,"docs":{"brief":"Pops a cell value from a stack.","tags":[{"tag":"","text":"Pops a cell value from a stack."},{"tag":"param:block","text":"Optionally specify which block to read from\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally read as a byte instead of a cell."},{"tag":"return","text":"Value popped from the stack."},{"tag":"error","text":"The stack is empty."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"PopString","docStart":4240,"docEnd":4553,"docs":{"brief":"Pops a string value from a stack.","tags":[{"tag":"","text":"Pops a string value from a stack."},{"tag":"param:buffer","text":"Buffer to store string."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"param:written","text":"Number of characters written to buffer, not including\nthe null terminator."},{"tag":"error","text":"The stack is empty."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"}]},{"name":"PopArray","docStart":4638,"docEnd":4932,"docs":{"brief":"Pops an array of cells from a stack.","tags":[{"tag":"","text":"Pops an array of cells from a stack."},{"tag":"param:buffer","text":"Buffer to store the array in."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"error","text":"The stack is empty."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]}],"properties":[{"name":"Empty","docStart":4995,"docEnd":5050,"docs":{"brief":"Returns true if the stack is empty, false otherwise.","tags":[{"tag":"","text":"Returns true if the stack is empty, false otherwise."}]},"type":"bool","getter":true,"setter":false},{"name":"BlockSize","docStart":5108,"docEnd":5161,"docs":{"brief":"Retrieve the blocksize the stack was created with.","tags":[{"tag":"","text":"Retrieve the blocksize the stack was created with."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"4cb29eb0541405db43c202fcf769dcc1ebf2011c","count":5035,"time":1416084377},"last_updated":{"hash":"611bad40369dd16aeecbc2b7370fc2397f9ae987","count":6589,"time":1594267157}}},"enumstructs":{},"constants":{},"defines":{"_adt_stack_included":{"symbol":{"name":"_adt_stack_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787},"last_updated":{"hash":"046ce18e8b0c3dce7d972ede102a89daa53b8980","count":2000,"time":1208066787}}},"enums":{},"typesets":{},"typedefs":{}},"keyvalues":{"functions":{"KvSetUint64":{"symbol":{"name":"KvSetUint64","docStart":2189,"docEnd":2430,"docs":{"brief":"Sets a large integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets a large integer value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key."},{"tag":"param:value","text":"Large integer value (0=High bits, 1=Low bits)"},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[2]","name":"value","decl":"const int value[2]","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"45d5518b111a3be69c467cbace1a73941b207fad","count":726,"time":1178139088}},"KvGetUInt64":{"symbol":{"name":"KvGetUInt64","docStart":18685,"docEnd":19040,"docs":{"brief":"Retrieves a large integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a large integer value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Array to represent the large integer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int[2]","name":"defvalue","decl":"int defvalue[2]","default":"{ 0, 0 }"}]},"created":{"hash":"2cad3c34241c91edf78b39e7fb1f282b98955d1c","count":817,"time":1179610574},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KeyValuesToFile":{"symbol":{"name":"KeyValuesToFile","docStart":24499,"docEnd":24794,"docs":{"brief":"Converts a KeyValues tree to a file.  The tree is dumped\nfrom the current position.","tags":[{"tag":"","text":"Converts a KeyValues tree to a file.  The tree is dumped\nfrom the current position."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:file","text":"File to dump write to."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetUint64":{"symbol":{"name":"KvGetUint64","docStart":4779,"docEnd":5095,"docs":{"brief":"Retrieves a large integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a large integer value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key."},{"tag":"param:value","text":"Array to represent the large integer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int[2]","name":"defvalue","decl":"int defvalue[2]","default":"{ 0, 0 }"}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"45d5518b111a3be69c467cbace1a73941b207fad","count":726,"time":1178139088}},"KvGetDataType":{"symbol":{"name":"KvGetDataType","docStart":24210,"docEnd":24431,"docs":{"brief":"Returns the data type at a key.","tags":[{"tag":"","text":"Returns the data type at a key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Key name."},{"tag":"return","text":"KvDataType value of the key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"KvDataTypes","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvFindKeyById":{"symbol":{"name":"KvFindKeyById","docStart":26948,"docEnd":27294,"docs":{"brief":"Finds a KeyValues name by id.","tags":[{"tag":"","text":"Finds a KeyValues name by id."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"KeyValues id."},{"tag":"param:name","text":"Buffer to store the name."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"return","text":"True on success, false if id not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"int","name":"id","decl":"int id","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"2ff0469648f3f0b13c0f5768c41dbfa5a3140bc5","count":1402,"time":1189447386},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSetFloat":{"symbol":{"name":"KvSetFloat","docStart":15726,"docEnd":15979,"docs":{"brief":"Sets a floating point value of a KeyValues key.","tags":[{"tag":"","text":"Sets a floating point value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Floating point value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetSectionSymbol":{"symbol":{"name":"KvGetSectionSymbol","docStart":27743,"docEnd":27989,"docs":{"brief":"Retrieves the current section id.","tags":[{"tag":"","text":"Retrieves the current section id."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"Id of the current section."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"int&","name":"id","decl":"int& id","default":null}]},"created":{"hash":"19c184aefc21f6a2987e722cf5776c2af2b16909","count":1710,"time":1195678680},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSetEscapeSequences":{"symbol":{"name":"KvSetEscapeSequences","docStart":25766,"docEnd":26115,"docs":{"brief":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures.","tags":[{"tag":"","text":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:useEscapes","text":"Whether or not to read escape sequences."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"bool","name":"useEscapes","decl":"bool useEscapes","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateKeyValues":{"symbol":{"name":"CreateKeyValues","docStart":14282,"docEnd":14637,"docs":{"brief":"Creates a new KeyValues structure.  The Handle must always be closed.","tags":[{"tag":"","text":"Creates a new KeyValues structure.  The Handle must always be closed."},{"tag":"param:name","text":"Name of the root section."},{"tag":"param:firstKey","text":"If non-empty, specifies the first key value."},{"tag":"param:firstValue","text":"If firstKey is non-empty, specifies the first key's value."},{"tag":"return","text":"A Handle to a new KeyValues structure."}]},"kind":"native","returnType":"KeyValues","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"firstKey","decl":"const char[] firstKey","default":"\"\""},{"type":"const char[]","name":"firstValue","decl":"const char[] firstValue","default":"\"\""}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetString":{"symbol":{"name":"KvGetString","docStart":16808,"docEnd":17209,"docs":{"brief":"Retrieves a string value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a string value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Buffer to store key value in."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue","default":"\"\""}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvCopySubkeys":{"symbol":{"name":"KvCopySubkeys","docStart":26554,"docEnd":26888,"docs":{"brief":"Makes a new copy of all subkeys in the origin KeyValues to\nthe destination KeyValues.\nNOTE: All KeyValues are processed from the current location not the root one.","tags":[{"tag":"","text":"Makes a new copy of all subkeys in the origin KeyValues to\nthe destination KeyValues.\nNOTE: All KeyValues are processed from the current location not the root one."},{"tag":"param:origin","text":"Origin KeyValues Handle."},{"tag":"param:dest","text":"Destination KeyValues Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"origin","decl":"Handle origin","default":null},{"type":"Handle","name":"dest","decl":"Handle dest","default":null}]},"created":{"hash":"2ff0469648f3f0b13c0f5768c41dbfa5a3140bc5","count":1402,"time":1189447386},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetColor":{"symbol":{"name":"KvGetColor","docStart":18162,"docEnd":18595,"docs":{"brief":"Retrieves a set of color values from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a set of color values from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value, set by reference."},{"tag":"param:g","text":"Green value, set by reference."},{"tag":"param:b","text":"Blue value, set by reference."},{"tag":"param:a","text":"Alpha value, set by reference."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"r","decl":"int& r","default":null},{"type":"int&","name":"g","decl":"int& g","default":null},{"type":"int&","name":"b","decl":"int& b","default":null},{"type":"int&","name":"a","decl":"int& a","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvRewind":{"symbol":{"name":"KvRewind","docStart":23261,"docEnd":23542,"docs":{"brief":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important.","tags":[{"tag":"","text":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvNodesInStack":{"symbol":{"name":"KvNodesInStack","docStart":26182,"docEnd":26511,"docs":{"brief":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned.","tags":[{"tag":"","text":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"Number of non-root nodes in the jump stack."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"e69edf05ebe2b2e6dab9c61d0574c19d83c16879","count":751,"time":1178496153},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetVector":{"symbol":{"name":"KvGetVector","docStart":19136,"docEnd":19488,"docs":{"brief":"Retrieves a vector value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a vector value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Destination vector to store the value in."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"const float[3]","name":"defvalue","decl":"const float defvalue[3]","default":"{ 0.000000, 0.000000, 0.000000 }"}]},"created":{"hash":"221429ff6e12b540644cdebe81224b9fcbf0923d","count":1735,"time":1196469467},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetFloat":{"symbol":{"name":"KvGetFloat","docStart":17732,"docEnd":18083,"docs":{"brief":"Retrieves a floating point value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a floating point value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Floating point value of the key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"defvalue","decl":"float defvalue","default":"0.000000"}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGotoNextKey":{"symbol":{"name":"KvGotoNextKey","docStart":20751,"docEnd":21213,"docs":{"brief":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nKvGoBack() is not needed for each successive call to this function.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nKvGoBack() is not needed for each successive call to this function."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no next sub key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},"created":{"hash":"34934677718051aec37377fdab1ddf9fe7cfd95a","count":754,"time":1178506738},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGotoFirstSubKey":{"symbol":{"name":"KvGotoFirstSubKey","docStart":20310,"docEnd":20685,"docs":{"brief":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no first sub key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},"created":{"hash":"34934677718051aec37377fdab1ddf9fe7cfd95a","count":754,"time":1178506738},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvDeleteKey":{"symbol":{"name":"KvDeleteKey","docStart":21615,"docEnd":21876,"docs":{"brief":"Removes the given key from the current position.","tags":[{"tag":"","text":"Removes the given key from the current position."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key."},{"tag":"return","text":"True on success, false if key did not exist."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},"created":{"hash":"70130722363984b9f08febae9b7a69449b6d93fe","count":744,"time":1178432148},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetSectionName":{"symbol":{"name":"KvGetSectionName","docStart":23580,"docEnd":23895,"docs":{"brief":"Retrieves the current section name.","tags":[{"tag":"","text":"Retrieves the current section name."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:section","text":"Buffer to store the section name."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"char[]","name":"section","decl":"char[] section","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSetString":{"symbol":{"name":"KvSetString","docStart":14749,"docEnd":14986,"docs":{"brief":"Sets a string value of a KeyValues key.","tags":[{"tag":"","text":"Sets a string value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"String value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetNameSymbol":{"symbol":{"name":"KvGetNameSymbol","docStart":27373,"docEnd":27671,"docs":{"brief":"Finds a KeyValues id inside a KeyValues tree.","tags":[{"tag":"","text":"Finds a KeyValues id inside a KeyValues tree."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Key name."},{"tag":"param:id","text":"Id of the found KeyValue."},{"tag":"return","text":"True on success, false if key not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"id","decl":"int& id","default":null}]},"created":{"hash":"2ff0469648f3f0b13c0f5768c41dbfa5a3140bc5","count":1402,"time":1189447386},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSetUInt64":{"symbol":{"name":"KvSetUInt64","docStart":15371,"docEnd":15647,"docs":{"brief":"Sets a large integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets a large integer value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Large integer value (0=High bits, 1=Low bits)"},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[2]","name":"value","decl":"const int value[2]","default":null}]},"created":{"hash":"2cad3c34241c91edf78b39e7fb1f282b98955d1c","count":817,"time":1179610574},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGetNum":{"symbol":{"name":"KvGetNum","docStart":17323,"docEnd":17661,"docs":{"brief":"Retrieves an integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves an integer value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Integer value of the key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"defvalue","decl":"int defvalue","default":"0"}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvJumpToKeySymbol":{"symbol":{"name":"KvJumpToKeySymbol","docStart":20020,"docEnd":20255,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"KeyValues id."},{"tag":"return","text":"True if the key exists, false if it does not."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"int","name":"id","decl":"int id","default":null}]},"created":{"hash":"64a07ce1980ff9837ee7bbc65b51848355b071a0","count":1708,"time":1195627780},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvJumpNextSubKey":{"symbol":{"name":"KvJumpNextSubKey","docStart":5833,"docEnd":6050,"docs":{"brief":"Sets the current position in the KeyValues tree to the next sub key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the next sub key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"True on success, false if there was no next sub key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"45d5518b111a3be69c467cbace1a73941b207fad","count":726,"time":1178139088}},"KvSetSectionName":{"symbol":{"name":"KvSetSectionName","docStart":23972,"docEnd":24142,"docs":{"brief":"Sets the current section name.","tags":[{"tag":"","text":"Sets the current section name."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:section","text":"Section name."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"section","decl":"const char[] section","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvJumpFirstSubKey":{"symbol":{"name":"KvJumpFirstSubKey","docStart":5567,"docEnd":5786,"docs":{"brief":"Sets the current position in the KeyValues tree to the first sub key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the first sub key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"True on success, false if there was no first sub key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"45d5518b111a3be69c467cbace1a73941b207fad","count":726,"time":1178139088}},"KvSetColor":{"symbol":{"name":"KvSetColor","docStart":16050,"docEnd":16404,"docs":{"brief":"Sets a set of color values of a KeyValues key.","tags":[{"tag":"","text":"Sets a set of color values of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value."},{"tag":"param:g","text":"Green value."},{"tag":"param:b","text":"Blue value."},{"tag":"param:a","text":"Alpha value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"r","decl":"int r","default":null},{"type":"int","name":"g","decl":"int g","default":null},{"type":"int","name":"b","decl":"int b","default":null},{"type":"int","name":"a","decl":"int a","default":"0"}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvGoBack":{"symbol":{"name":"KvGoBack","docStart":22765,"docEnd":23223,"docs":{"brief":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack.","tags":[{"tag":"","text":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"True on success, false if there is no higher node."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSavePosition":{"symbol":{"name":"KvSavePosition","docStart":21275,"docEnd":21571,"docs":{"brief":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal.","tags":[{"tag":"","text":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"34934677718051aec37377fdab1ddf9fe7cfd95a","count":754,"time":1178506738},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvJumpToKey":{"symbol":{"name":"KvJumpToKey","docStart":19602,"docEnd":19942,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key."},{"tag":"param:create","text":"If true, and the key does not exist, it will be created."},{"tag":"return","text":"True if the key exists, false if it does not and was not created."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"create","decl":"bool create","default":"false"}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSetNum":{"symbol":{"name":"KvSetNum","docStart":15065,"docEnd":15304,"docs":{"brief":"Sets an integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets an integer value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Value number."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvDeleteThis":{"symbol":{"name":"KvDeleteThis","docStart":21935,"docEnd":22724,"docs":{"brief":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\"","tags":[{"tag":"","text":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\""},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"1 if removal succeeded and there was another key.\n0 if the current node was not contained in the\nprevious node, or no previous node exists.\n-1 if removal succeeded and there were no more keys,\nthus the state is as if KvGoBack() was called."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},"created":{"hash":"70130722363984b9f08febae9b7a69449b6d93fe","count":744,"time":1178432148},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StringToKeyValues":{"symbol":{"name":"StringToKeyValues","docStart":25223,"docEnd":25651,"docs":{"brief":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree.","tags":[{"tag":"","text":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:buffer","text":"String buffer to load into the KeyValues."},{"tag":"param:resourceName","text":"The resource name of the KeyValues, used for error tracking purposes."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"const char[]","name":"resourceName","decl":"const char[] resourceName","default":"\"StringToKeyValues\""}]},"created":{"hash":"878a82a6e5b7f1c5233e75069fa888fd6a26ef54","count":4587,"time":1404493478},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FileToKeyValues":{"symbol":{"name":"FileToKeyValues","docStart":24858,"docEnd":25159,"docs":{"brief":"Converts a file to a KeyValues tree.  The file is read into\nthe current position of the tree.","tags":[{"tag":"","text":"Converts a file to a KeyValues tree.  The file is read into\nthe current position of the tree."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:file","text":"File to read from."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KvSetVector":{"symbol":{"name":"KvSetVector","docStart":16492,"docEnd":16729,"docs":{"brief":"Sets a vector value of a KeyValues key.","tags":[{"tag":"","text":"Sets a vector value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Vector value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"221429ff6e12b540644cdebe81224b9fcbf0923d","count":1735,"time":1196469467},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"KeyValues":{"symbol":{"name":"KeyValues","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"KeyValues","docStart":2209,"docEnd":2521,"docs":{"brief":"Creates a new KeyValues structure.  The Handle must be closed with\nCloseHandle() or delete.","tags":[{"tag":"","text":"Creates a new KeyValues structure.  The Handle must be closed with\nCloseHandle() or delete."},{"tag":"param:name","text":"Name of the root section."},{"tag":"param:firstKey","text":"If non-empty, specifies the first key value."},{"tag":"param:firstValue","text":"If firstKey is non-empty, specifies the first key's value."}]},"kind":"native","returnType":"KeyValues","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"firstKey","decl":"const char[] firstKey","default":"\"\""},{"type":"const char[]","name":"firstValue","decl":"const char[] firstValue","default":"\"\""}]},{"name":"ExportToFile","docStart":2626,"docEnd":2824,"docs":{"brief":"Exports a KeyValues tree to a file. The tree is dumped from the current position.","tags":[{"tag":"","text":"Exports a KeyValues tree to a file. The tree is dumped from the current position."},{"tag":"param:file","text":"File to dump write to."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"ExportToString","docStart":2883,"docEnd":3143,"docs":{"brief":"Exports a KeyValues tree to a string. The string is dumped from the current position.","tags":[{"tag":"","text":"Exports a KeyValues tree to a string. The string is dumped from the current position."},{"tag":"param:buffer","text":"Buffer to write to."},{"tag":"param:maxlength","text":"Max length of buffer."},{"tag":"return","text":"Number of bytes that can be written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"ImportFromFile","docStart":3337,"docEnd":3546,"docs":{"brief":"Imports a file in KeyValues format. The file is read into the current\nposition of the tree.","tags":[{"tag":"","text":"Imports a file in KeyValues format. The file is read into the current\nposition of the tree."},{"tag":"param:file","text":"File to read from."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"ImportFromString","docStart":3607,"docEnd":3946,"docs":{"brief":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree.","tags":[{"tag":"","text":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree."},{"tag":"param:buffer","text":"String buffer to load into the KeyValues."},{"tag":"param:resourceName","text":"The resource name of the KeyValues, used for error tracking purposes."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"const char[]","name":"resourceName","decl":"const char[] resourceName","default":"\"StringToKeyValues\""}]},{"name":"Import","docStart":4058,"docEnd":4321,"docs":{"brief":"Imports subkeys in the given KeyValues, at the current position in that\nKeyValues, into the current position in this KeyValues. Note that this\ncopies keys; it does not embed a reference to them.","tags":[{"tag":"","text":"Imports subkeys in the given KeyValues, at the current position in that\nKeyValues, into the current position in this KeyValues. Note that this\ncopies keys; it does not embed a reference to them."},{"tag":"param:other","text":"Origin KeyValues Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"KeyValues","name":"other","decl":"KeyValues other","default":null}]},{"name":"SetString","docStart":4372,"docEnd":4562,"docs":{"brief":"Sets a string value of a KeyValues key.","tags":[{"tag":"","text":"Sets a string value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"String value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetNum","docStart":4637,"docEnd":4785,"docs":{"brief":"Sets an integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets an integer value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Value number."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetUInt64","docStart":4848,"docEnd":5033,"docs":{"brief":"Sets a large integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets a large integer value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Large integer value (0=High bits, 1=Low bits)"}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[2]","name":"value","decl":"const int value[2]","default":null}]},{"name":"SetFloat","docStart":5108,"docEnd":5270,"docs":{"brief":"Sets a floating point value of a KeyValues key.","tags":[{"tag":"","text":"Sets a floating point value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Floating point value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetColor","docStart":5337,"docEnd":5603,"docs":{"brief":"Sets a set of color values of a KeyValues key.","tags":[{"tag":"","text":"Sets a set of color values of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value."},{"tag":"param:g","text":"Green value."},{"tag":"param:b","text":"Blue value."},{"tag":"param:a","text":"Alpha value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"r","decl":"int r","default":null},{"type":"int","name":"g","decl":"int g","default":null},{"type":"int","name":"b","decl":"int b","default":null},{"type":"int","name":"a","decl":"int a","default":"0"}]},{"name":"SetColor4","docStart":5687,"docEnd":5863,"docs":{"brief":"Sets a set of color values of a KeyValues key.","tags":[{"tag":"","text":"Sets a set of color values of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:color","text":"Red, green, blue and alpha channels."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null}]},{"name":"SetVector","docStart":5999,"docEnd":6145,"docs":{"brief":"Sets a vector value of a KeyValues key.","tags":[{"tag":"","text":"Sets a vector value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Vector value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"GetString","docStart":6220,"docEnd":6532,"docs":{"brief":"Retrieves a string value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a string value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Buffer to store key value in."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue","default":"\"\""}]},{"name":"GetNum","docStart":6642,"docEnd":6890,"docs":{"brief":"Retrieves an integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves an integer value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Integer value of the key."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"defvalue","decl":"int defvalue","default":"0"}]},{"name":"GetFloat","docStart":6957,"docEnd":7218,"docs":{"brief":"Retrieves a floating point value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a floating point value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Floating point value of the key."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"defvalue","decl":"float defvalue","default":"0.000000"}]},{"name":"GetColor","docStart":7293,"docEnd":7638,"docs":{"brief":"Retrieves a set of color values from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a set of color values from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value, set by reference."},{"tag":"param:g","text":"Green value, set by reference."},{"tag":"param:b","text":"Blue value, set by reference."},{"tag":"param:a","text":"Alpha value, set by reference."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"r","decl":"int& r","default":null},{"type":"int&","name":"g","decl":"int& g","default":null},{"type":"int&","name":"b","decl":"int& b","default":null},{"type":"int&","name":"a","decl":"int& a","default":null}]},{"name":"GetColor4","docStart":7724,"docEnd":7908,"docs":{"brief":"Retrieves a set of color values from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a set of color values from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:color","text":"Red, green, blue, and alpha channels."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[4]","name":"color","decl":"int color[4]","default":null}]},{"name":"GetUInt64","docStart":8097,"docEnd":8362,"docs":{"brief":"Retrieves a large integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a large integer value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Array to represent the large integer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int[2]","name":"defvalue","decl":"int defvalue[2]","default":"{ 0, 0 }"}]},{"name":"GetVector","docStart":8454,"docEnd":8716,"docs":{"brief":"Retrieves a vector value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a vector value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Destination vector to store the value in."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"const float[3]","name":"defvalue","decl":"const float defvalue[3]","default":"{ 0.000000, 0.000000, 0.000000 }"}]},{"name":"JumpToKey","docStart":8826,"docEnd":9117,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:key","text":"Name of the key."},{"tag":"param:create","text":"If true, and the key does not exist, it will be created."},{"tag":"return","text":"True if the key exists, false if it does not and was not created."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"create","decl":"bool create","default":"false"}]},{"name":"JumpToKeySymbol","docStart":9191,"docEnd":9376,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:id","text":"KeyValues id."},{"tag":"return","text":"True if the key exists, false if it does not."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"id","decl":"int id","default":null}]},{"name":"GotoFirstSubKey","docStart":9427,"docEnd":9712,"docs":{"brief":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no first sub key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},{"name":"GotoNextKey","docStart":9774,"docEnd":10145,"docs":{"brief":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nGoBack() is not needed for each successive call to this function.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nGoBack() is not needed for each successive call to this function."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no next sub key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},{"name":"SavePosition","docStart":10203,"docEnd":10452,"docs":{"brief":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal.","tags":[{"tag":"","text":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal."},{"tag":"param:kv","text":"KeyValues Handle."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GoBack","docStart":10494,"docEnd":10863,"docs":{"brief":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack.","tags":[{"tag":"","text":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack."},{"tag":"return","text":"True on success, false if there is no higher node."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"DeleteKey","docStart":10899,"docEnd":11069,"docs":{"brief":"Removes the given key from the current position.","tags":[{"tag":"","text":"Removes the given key from the current position."},{"tag":"param:key","text":"Name of the key."},{"tag":"return","text":"True on success, false if key did not exist."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"DeleteThis","docStart":11124,"docEnd":11874,"docs":{"brief":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\"","tags":[{"tag":"","text":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\""},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"1 if removal succeeded and there was another key.\n0 if the current node was not contained in the\nprevious node, or no previous node exists.\n-1 if removal succeeded and there were no more keys,\nthus the state is as if KvGoBack() was called."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"Rewind","docStart":11913,"docEnd":12147,"docs":{"brief":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important.","tags":[{"tag":"","text":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important."},{"tag":"param:kv","text":"KeyValues Handle."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GetSectionName","docStart":12183,"docEnd":12408,"docs":{"brief":"Retrieves the current section name.","tags":[{"tag":"","text":"Retrieves the current section name."},{"tag":"param:section","text":"Buffer to store the section name."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"section","decl":"char[] section","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"SetSectionName","docStart":12481,"docEnd":12559,"docs":{"brief":"Sets the current section name.","tags":[{"tag":"","text":"Sets the current section name."},{"tag":"param:section","text":"Section name."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"section","decl":"const char[] section","default":null}]},{"name":"GetDataType","docStart":12623,"docEnd":12753,"docs":{"brief":"Returns the data type at a key.","tags":[{"tag":"","text":"Returns the data type at a key."},{"tag":"param:key","text":"Key name."},{"tag":"return","text":"KvDataType value of the key."}]},"kind":"native","returnType":"KvDataTypes","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"SetEscapeSequences","docStart":12817,"docEnd":13076,"docs":{"brief":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures.","tags":[{"tag":"","text":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures."},{"tag":"param:useEscapes","text":"Whether or not to read escape sequences."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"useEscapes","decl":"bool useEscapes","default":null}]},{"name":"NodesInStack","docStart":13139,"docEnd":13378,"docs":{"brief":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned.","tags":[{"tag":"","text":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned."},{"tag":"return","text":"Number of non-root nodes in the jump stack."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"FindKeyById","docStart":13419,"docEnd":13676,"docs":{"brief":"Finds a KeyValues name by id.","tags":[{"tag":"","text":"Finds a KeyValues name by id."},{"tag":"param:id","text":"KeyValues id."},{"tag":"param:name","text":"Buffer to store the name."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"return","text":"True on success, false if id not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"id","decl":"int id","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetNameSymbol","docStart":13751,"docEnd":13959,"docs":{"brief":"Finds a KeyValues id inside a KeyValues tree.","tags":[{"tag":"","text":"Finds a KeyValues id inside a KeyValues tree."},{"tag":"param:key","text":"Key name."},{"tag":"param:id","text":"Id of the found KeyValue."},{"tag":"return","text":"True on success, false if key not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"id","decl":"int& id","default":null}]},{"name":"GetSectionSymbol","docStart":14027,"docEnd":14226,"docs":{"brief":"Retrieves the current section id.","tags":[{"tag":"","text":"Retrieves the current section id."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"Id of the current section."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"id","decl":"int& id","default":null}]}],"properties":[{"name":"ExportLength","docStart":3214,"docEnd":3274,"docs":{"brief":"Amount of bytes written by ExportToFile & ExportToString.","tags":[{"tag":"","text":"Amount of bytes written by ExportToFile & ExportToString."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"f020b5682ecc0de51a2370f1b82dde3c2363f539","count":4982,"time":1415490880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_keyvalues_included":{"symbol":{"name":"_keyvalues_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043}}},"enums":{"KvDataTypes":{"symbol":{"name":"KvDataTypes","docStart":1659,"docEnd":1697,"docs":{"brief":"KeyValue data value types","tags":[{"tag":"","text":"KeyValue data value types"}]},"entries":[{"name":"KvData_None","docStart":1741,"docEnd":1789,"docs":{"brief":"Type could not be identified, or no type","tags":[{"tag":"","text":"Type could not be identified, or no type"}]},"value":"0"},{"name":"KvData_String","docStart":1812,"docEnd":1832,"docs":{"brief":"String value","tags":[{"tag":"","text":"String value"}]},"value":null},{"name":"KvData_Int","docStart":1855,"docEnd":1876,"docs":{"brief":"Integer value","tags":[{"tag":"","text":"Integer value"}]},"value":null},{"name":"KvData_Float","docStart":1899,"docEnd":1927,"docs":{"brief":"Floating point value","tags":[{"tag":"","text":"Floating point value"}]},"value":null},{"name":"KvData_Ptr","docStart":1950,"docEnd":1997,"docs":{"brief":"Pointer value (sometimes called \"long\")","tags":[{"tag":"","text":"Pointer value (sometimes called \"long\")"}]},"value":null},{"name":"KvData_WString","docStart":2020,"docEnd":2045,"docs":{"brief":"Wide string value","tags":[{"tag":"","text":"Wide string value"}]},"value":null},{"name":"KvData_Color","docStart":2068,"docEnd":2087,"docs":{"brief":"Color value","tags":[{"tag":"","text":"Color value"}]},"value":null},{"name":"KvData_UInt64","docStart":2110,"docEnd":2149,"docs":{"brief":"Large integer value\n---","tags":[{"tag":"","text":"Large integer value"},{"tag":"","text":"---"}]},"value":null},{"name":"KvData_NUMTYPES","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"08ec195e27c2044d5fead6bdf9f7bc253f4247a9","count":655,"time":1174854043},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"profiler":{"functions":{"GetProfilerTime":{"symbol":{"name":"GetProfilerTime","docStart":2902,"docEnd":3171,"docs":{"brief":"Returns the amount of high-precision time in seconds\nthat passed during the profiler's last start/stop\ncycle.","tags":[{"tag":"","text":"Returns the amount of high-precision time in seconds\nthat passed during the profiler's last start/stop\ncycle."},{"tag":"param:prof","text":"Profiling object."},{"tag":"return","text":"Time elapsed in seconds."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"prof","decl":"Handle prof","default":null}]},"created":{"hash":"63c5d0574723b2dad5340e1255f68daa40b8c769","count":915,"time":1181201395},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StartProfiling":{"symbol":{"name":"StartProfiling","docStart":2545,"docEnd":2663,"docs":{"brief":"Starts profiling.","tags":[{"tag":"","text":"Starts profiling."},{"tag":"param:prof","text":"Profiling object."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"prof","decl":"Handle prof","default":null}]},"created":{"hash":"63c5d0574723b2dad5340e1255f68daa40b8c769","count":915,"time":1181201395},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateProfiler":{"symbol":{"name":"CreateProfiler","docStart":2343,"docEnd":2506,"docs":{"brief":"Creates a new profile object.  The Handle must be freed\nusing delete or CloseHandle().","tags":[{"tag":"","text":"Creates a new profile object.  The Handle must be freed\nusing delete or CloseHandle()."},{"tag":"return","text":"Handle to the profiler object."}]},"kind":"native","returnType":"Profiler","arguments":[]},"created":{"hash":"63c5d0574723b2dad5340e1255f68daa40b8c769","count":915,"time":1181201395},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StopProfiling":{"symbol":{"name":"StopProfiling","docStart":2709,"docEnd":2857,"docs":{"brief":"Stops profiling.","tags":[{"tag":"","text":"Stops profiling."},{"tag":"param:prof","text":"Profiling object."},{"tag":"error","text":"Invalid Handle or profiling was never started."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"prof","decl":"Handle prof","default":null}]},"created":{"hash":"63c5d0574723b2dad5340e1255f68daa40b8c769","count":915,"time":1181201395},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EnterProfilingEvent":{"symbol":{"name":"EnterProfilingEvent","docStart":3219,"docEnd":3477,"docs":{"brief":"Mark the start of a profiling event.","tags":[{"tag":"","text":"Mark the start of a profiling event."},{"tag":"param:group","text":"Budget group. This can be \"all\" for a default, or a short\ndescription like \"Timers\" or \"Events\"."},{"tag":"param:name","text":"A name to attribute to this profiling event."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"group","decl":"const char[] group","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"ec61d4d188389b2af59d51b09319b13468ddccec","count":4543,"time":1403597053},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LeaveProfilingEvent":{"symbol":{"name":"LeaveProfilingEvent","docStart":3554,"docEnd":3764,"docs":{"brief":"Mark the end of the last profiling event. This must be called in the same\nstack frame as StartProfilingEvent(). Not doing so, or throwing errors,\nwill make the resulting profile very wrong.","tags":[{"tag":"","text":"Mark the end of the last profiling event. This must be called in the same\nstack frame as StartProfilingEvent(). Not doing so, or throwing errors,\nwill make the resulting profile very wrong."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"ec61d4d188389b2af59d51b09319b13468ddccec","count":4543,"time":1403597053},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsProfilingActive":{"symbol":{"name":"IsProfilingActive","docStart":3804,"docEnd":3952,"docs":{"brief":"Returns true if the global profiler is enabled; false otherwise. It is\nnot necessary to call this before Enter/LeaveProfilingEvent.","tags":[{"tag":"","text":"Returns true if the global profiler is enabled; false otherwise. It is\nnot necessary to call this before Enter/LeaveProfilingEvent."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"ec61d4d188389b2af59d51b09319b13468ddccec","count":4543,"time":1403597053},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"Profiler":{"symbol":{"name":"Profiler","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"Profiler","docStart":1730,"docEnd":1878,"docs":{"brief":"Creates a new profile object.  The Handle must be freed\nusing delete or CloseHandle().","tags":[{"tag":"","text":"Creates a new profile object.  The Handle must be freed\nusing delete or CloseHandle()."},{"tag":"return","text":"A new Profiler Handle."}]},"kind":"native","returnType":"Profiler","arguments":[]},{"name":"Start","docStart":1912,"docEnd":1944,"docs":{"brief":"Starts a cycle for profiling.","tags":[{"tag":"","text":"Starts a cycle for profiling."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Stop","docStart":1979,"docEnd":2069,"docs":{"brief":"Stops a cycle for profiling.","tags":[{"tag":"","text":"Stops a cycle for profiling."},{"tag":"error","text":"Profiler was never started."}]},"kind":"native","returnType":"void","arguments":[]}],"properties":[{"name":"Time","docStart":2104,"docEnd":2283,"docs":{"brief":"Returns the amount of high-precision time in seconds\nthat passed during the profiler's last start/stop\ncycle.","tags":[{"tag":"","text":"Returns the amount of high-precision time in seconds\nthat passed during the profiler's last start/stop\ncycle."},{"tag":"return","text":"Time elapsed in seconds."}]},"type":"float","getter":true,"setter":false}]},"created":{"hash":"c09b32010f9648f541bb090ddc5917bba6aa9866","count":6301,"time":1531062329},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_profiler_included":{"symbol":{"name":"_profiler_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"63c5d0574723b2dad5340e1255f68daa40b8c769","count":915,"time":1181201395},"last_updated":{"hash":"63c5d0574723b2dad5340e1255f68daa40b8c769","count":915,"time":1181201395}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_tempents":{"functions":{"TE_ReadNum":{"symbol":{"name":"TE_ReadNum","docStart":3398,"docEnd":3593,"docs":{"brief":"Reads an integer value in the current temp entity.","tags":[{"tag":"","text":"Reads an integer value in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"return","text":"Property value."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_ReadVector":{"symbol":{"name":"TE_ReadVector","docStart":4432,"docEnd":4619,"docs":{"brief":"Reads a vector in the current temp entity.","tags":[{"tag":"","text":"Reads a vector in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:vector","text":"Vector to read."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"float[3]","name":"vector","decl":"float vector[3]","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddTempEntHook":{"symbol":{"name":"AddTempEntHook","docStart":2151,"docEnd":2364,"docs":{"brief":"Hooks a temp entity.","tags":[{"tag":"","text":"Hooks a temp entity."},{"tag":"param:te_name","text":"TE name to hook."},{"tag":"param:hook","text":"Function to use as a hook."},{"tag":"error","text":"Temp Entity name not available or invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"te_name","decl":"const char[] te_name","default":null},{"type":"TEHook","name":"hook","decl":"TEHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveTempEntHook":{"symbol":{"name":"RemoveTempEntHook","docStart":2432,"docEnd":2655,"docs":{"brief":"Removes a temp entity hook.","tags":[{"tag":"","text":"Removes a temp entity hook."},{"tag":"param:te_name","text":"TE name to unhook."},{"tag":"param:hook","text":"Function used for the hook."},{"tag":"error","text":"Temp Entity name not available or invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"te_name","decl":"const char[] te_name","default":null},{"type":"TEHook","name":"hook","decl":"TEHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SendToAllInRange":{"symbol":{"name":"TE_SendToAllInRange","docStart":6914,"docEnd":7269,"docs":{"brief":"Sends the current TE to all clients that are in\nvisible or audible range of the origin.","tags":[{"tag":"","text":"Sends the current TE to all clients that are in\nvisible or audible range of the origin."},{"tag":"note","text":"See TE_Start()."},{"tag":"note","text":"See GetClientsInRange()"},{"tag":"param:origin","text":"Coordinates from which to test range."},{"tag":"param:rangeType","text":"Range type to use for filtering clients."},{"tag":"param:delay","text":"Delay in seconds to send the TE."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":null},{"type":"ClientRangeType","name":"rangeType","decl":"ClientRangeType rangeType","default":null},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"b53947ccc306858ff0b4b4f4bfddf639f23f2418","count":5323,"time":1425399721},"last_updated":{"hash":"2a9deb6a64799740617751a71fb30a592594d296","count":6470,"time":1573633980}},"TE_WriteVector":{"symbol":{"name":"TE_WriteVector","docStart":4172,"docEnd":4357,"docs":{"brief":"Sets a vector in the current temp entity.","tags":[{"tag":"","text":"Sets a vector in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:vector","text":"Vector to set."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const float[3]","name":"vector","decl":"const float vector[3]","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_WriteEncodedEnt":{"symbol":{"name":"TE_WriteEncodedEnt","docStart":5703,"docEnd":5966,"docs":{"brief":"Sets an encoded entity index in the current temp entity.\n(This is usually used for m_nStartEntity and m_nEndEntity).","tags":[{"tag":"","text":"Sets an encoded entity index in the current temp entity.\n(This is usually used for m_nStartEntity and m_nEndEntity)."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:value","text":"Value to set."},{"tag":"error","text":"Property not found."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SendToOne":{"symbol":{"name":"TE_SendToOne","docStart":3704,"docEnd":3943,"docs":{"brief":"Sends the current TE to only a client.","tags":[{"tag":"","text":"Sends the current TE to only a client."},{"tag":"note","text":"See TE_Start()."},{"tag":"param:client","text":"Client to send to."},{"tag":"param:delay","text":"Delay in seconds to send the TE."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919}},"TE_WriteNum":{"symbol":{"name":"TE_WriteNum","docStart":3138,"docEnd":3338,"docs":{"brief":"Sets an integer value in the current temp entity.","tags":[{"tag":"","text":"Sets an integer value in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:value","text":"Integer value to set."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_WriteFloatArray":{"symbol":{"name":"TE_WriteFloatArray","docStart":4947,"docEnd":5203,"docs":{"brief":"Sets an array of floats in the current temp entity.","tags":[{"tag":"","text":"Sets an array of floats in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:array","text":"Array of values to copy."},{"tag":"param:arraySize","text":"Number of values to copy."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const float[]","name":"array","decl":"const float[] array","default":null},{"type":"int","name":"arraySize","decl":"int arraySize","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_IsValidProp":{"symbol":{"name":"TE_IsValidProp","docStart":2917,"docEnd":3086,"docs":{"brief":"Checks if a certain TE property exists.","tags":[{"tag":"","text":"Checks if a certain TE property exists."},{"tag":"param:prop","text":"Property to use."},{"tag":"return","text":"True if the property exists, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SendToAll":{"symbol":{"name":"TE_SendToAll","docStart":6121,"docEnd":6272,"docs":{"brief":"Broadcasts the current temp entity to all clients.","tags":[{"tag":"","text":"Broadcasts the current temp entity to all clients."},{"tag":"note","text":"See TE_Start()."},{"tag":"param:delay","text":"Delay in seconds to send the TE."}]},"kind":"stock","returnType":"void","arguments":[{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_ReadFloat":{"symbol":{"name":"TE_ReadFloat","docStart":3919,"docEnd":4121,"docs":{"brief":"Reads a floating point number in the current temp entity.","tags":[{"tag":"","text":"Reads a floating point number in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"return","text":"Property value."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SendToClient":{"symbol":{"name":"TE_SendToClient","docStart":6520,"docEnd":6772,"docs":{"brief":"Sends the current TE to only a client.","tags":[{"tag":"","text":"Sends the current TE to only a client."},{"tag":"note","text":"See TE_Start()."},{"tag":"param:client","text":"Client to send to."},{"tag":"param:delay","text":"Delay in seconds to send the TE."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"b0f5b985bbb5e04b20a569c85f39c174c7501667","count":1054,"time":1183841300},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_WriteAngles":{"symbol":{"name":"TE_WriteAngles","docStart":4687,"docEnd":4872,"docs":{"brief":"Sets a QAngle in the current temp entity.","tags":[{"tag":"","text":"Sets a QAngle in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:angles","text":"Angles to set."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const float[3]","name":"angles","decl":"const float angles[3]","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_Send":{"symbol":{"name":"TE_Send","docStart":5295,"docEnd":5623,"docs":{"brief":"Sends the current temp entity to one or more clients.","tags":[{"tag":"","text":"Sends the current temp entity to one or more clients."},{"tag":"param:clients","text":"Array containing player indexes to broadcast to."},{"tag":"param:numClients","text":"Number of players in the array."},{"tag":"param:delay","text":"Delay in seconds to send the TE."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_Start":{"symbol":{"name":"TE_Start","docStart":2726,"docEnd":2868,"docs":{"brief":"Starts a temp entity transmission.","tags":[{"tag":"","text":"Starts a temp entity transmission."},{"tag":"param:te_name","text":"TE name."},{"tag":"error","text":"Temp Entity name not available."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"te_name","decl":"const char[] te_name","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_WriteFloat":{"symbol":{"name":"TE_WriteFloat","docStart":3640,"docEnd":3855,"docs":{"brief":"Sets a floating point number in the current temp entity.","tags":[{"tag":"","text":"Sets a floating point number in the current temp entity."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:value","text":"Floating point number to set."},{"tag":"error","text":"Property not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_tempents_included":{"symbol":{"name":"_sdktools_tempents_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946},"last_updated":{"hash":"8749f537d43fbb528aa1b2196e0dc7cc7085a559","count":1032,"time":1183335946}}},"enums":{},"typesets":{},"typedefs":{"TEHook":{"symbol":{"name":"TEHook","docStart":1659,"docEnd":2039,"docs":{"brief":"Called when a temp entity is going to be sent.","tags":[{"tag":"","text":"Called when a temp entity is going to be sent."},{"tag":"param:te_name","text":"TE name."},{"tag":"param:Players","text":"Array containing target player indexes."},{"tag":"param:numClients","text":"Number of players in the array."},{"tag":"param:delay","text":"Delay in seconds to send the TE."},{"tag":"return","text":"Plugin_Continue to allow the transmission of the TE, Plugin_Stop to block it."}]},"type":"function Action(const char[] te_name, const int[] Players, int numClients, float delay)","parsedSignature":{"returnType":"Action","arguments":[{"type":"const char[]","name":"te_name","decl":"const char[] te_name","default":null},{"type":"const int[]","name":"Players","decl":"const int[] Players","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"float","name":"delay","decl":"float delay","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"clients":{"functions":{"GetClientInfo":{"symbol":{"name":"GetClientInfo","docStart":16473,"docEnd":16855,"docs":{"brief":"Retrieves values from client replicated keys.","tags":[{"tag":"","text":"Retrieves values from client replicated keys."},{"tag":"param:client","text":"Player's index."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Buffer to store value."},{"tag":"param:maxlen","text":"Maximum length of valve (UTF-8 safe)."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientCommand":{"symbol":{"name":"OnClientCommand","docStart":4990,"docEnd":5419,"docs":{"brief":"Called when a client is sending a command.\n\nAs of SourceMod 1.3, the client is guaranteed to be in-game.\nUse command listeners (console.inc) for more advanced hooks.","tags":[{"tag":"","text":"Called when a client is sending a command.\n\nAs of SourceMod 1.3, the client is guaranteed to be in-game.\nUse command listeners (console.inc) for more advanced hooks."},{"tag":"param:client","text":"Client index."},{"tag":"param:args","text":"Number of arguments."},{"tag":"return","text":"Plugin_Handled blocks the command from being sent,\nand Plugin_Continue resumes normal functionality."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"args","decl":"int args","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientAuthorized":{"symbol":{"name":"IsClientAuthorized","docStart":14960,"docEnd":15148,"docs":{"brief":"Returns if a certain player has been authenticated.","tags":[{"tag":"","text":"Returns if a certain player has been authenticated."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"True if player has been authenticated, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAvgLatency":{"symbol":{"name":"GetClientAvgLatency","docStart":25425,"docEnd":25749,"docs":{"brief":"Returns the client's average packet latency in seconds.","tags":[{"tag":"","text":"Returns the client's average packet latency in seconds."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Latency, or -1 if network info is not available."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMaxHumanPlayers":{"symbol":{"name":"GetMaxHumanPlayers","docStart":9284,"docEnd":9934,"docs":{"brief":"Returns the maximum number of human players allowed on the server.  This is\na game-specific function used on newer games to limit the number of humans\nthat can join a game and can be lower than MaxClients. It is the number often\nreflected in the server browser or when viewing the output of the status command.\nOn unsupported games or modes without overrides, it will return the same value\nas MaxClients.\n\nYou should not globally cache the value to GetMaxHumanPlayers() because it can change across\ngame modes. You may still cache it locally.","tags":[{"tag":"","text":"Returns the maximum number of human players allowed on the server.  This is\na game-specific function used on newer games to limit the number of humans\nthat can join a game and can be lower than MaxClients. It is the number often\nreflected in the server browser or when viewing the output of the status command.\nOn unsupported games or modes without overrides, it will return the same value\nas MaxClients.\n\nYou should not globally cache the value to GetMaxHumanPlayers() because it can change across\ngame modes. You may still cache it locally."},{"tag":"return","text":"Maximum number of humans allowed."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"99f741fb3b9fc32bdb686f7af39851bb5df1c9a3","count":3698,"time":1354464207},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsPlayerInGame":{"symbol":{"name":"IsPlayerInGame","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"OnClientConnected":{"symbol":{"name":"OnClientConnected","docStart":3918,"docEnd":4067,"docs":{"brief":"Called once a client successfully connects.  This callback is paired with OnClientDisconnect.","tags":[{"tag":"","text":"Called once a client successfully connects.  This callback is paired with OnClientDisconnect."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"a6579c7bcb78ca5191aa36b130fb3e531e57de4e","count":2366,"time":1224386053},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientDisconnect":{"symbol":{"name":"OnClientDisconnect","docStart":4666,"docEnd":4776,"docs":{"brief":"Called when a client is disconnecting from the server.","tags":[{"tag":"","text":"Called when a client is disconnecting from the server."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ChangeClientTeam":{"symbol":{"name":"ChangeClientTeam","docStart":29236,"docEnd":29574,"docs":{"brief":"Changes a client's team through the mod's generic team changing function.\nOn CS:S, this will kill the player.","tags":[{"tag":"","text":"Changes a client's team through the mod's generic team changing function.\nOn CS:S, this will kill the player."},{"tag":"param:client","text":"Client index."},{"tag":"param:team","text":"Mod-specific team index."},{"tag":"error","text":"Invalid client index, client not connected, or lack of\nmod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"team","decl":"int team","default":null}]},"created":{"hash":"816bdc8102e29c3c66fda164a8846eb13d4d614c","count":1034,"time":1183489394},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAvgPackets":{"symbol":{"name":"GetAvgPackets","docStart":13771,"docEnd":14034,"docs":{"brief":"Returns the client's average packet frequency in packets/sec.","tags":[{"tag":"","text":"Returns the client's average packet frequency in packets/sec."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Packet frequency."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"GetClientAvgLoss":{"symbol":{"name":"GetClientAvgLoss","docStart":25814,"docEnd":26177,"docs":{"brief":"Returns the client's average packet loss, values go from 0 to 1 (for percentages).","tags":[{"tag":"","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages)."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Average packet loss, or -1 if network info is not available."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetDataRate":{"symbol":{"name":"GetDataRate","docStart":11415,"docEnd":11614,"docs":{"brief":"Returns the client's send data rate in bytes/sec.","tags":[{"tag":"","text":"Returns the client's send data rate in bytes/sec."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Data rate."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"GetAvgChoke":{"symbol":{"name":"GetAvgChoke","docStart":13138,"docEnd":13427,"docs":{"brief":"Returns the client's average packet choke, values go from 0 to 1 (for percentages).","tags":[{"tag":"","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages)."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Average packet choke."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"NotifyPostAdminCheck":{"symbol":{"name":"NotifyPostAdminCheck","docStart":20082,"docEnd":20423,"docs":{"brief":"Signals that a player has completed post-connection admin checks.\nHas no effect if the player has already had this event signalled.\n\nNote: This must be sent even if no admin id was assigned.","tags":[{"tag":"","text":"Signals that a player has completed post-connection admin checks.\nHas no effect if the player has already had this event signalled.\n\nNote: This must be sent even if no admin id was assigned."},{"tag":"param:client","text":"Client index."},{"tag":"error","text":"Invalid client index or client not in-game AND authorized."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"6da3335588e30058633bcb9fcf7e234b76a3ebdd","count":1274,"time":1186590171},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientConnect":{"symbol":{"name":"OnClientConnect","docStart":3029,"docEnd":3841,"docs":{"brief":"Called on client connection.  If you return true, the client will be allowed in the server.\nIf you return false (or return nothing), the client will be rejected.  If the client is\nrejected by this forward or any other, OnClientDisconnect will not be called.\n\nNote: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write\nto the string buffer, it is not defined which plugin's string will be shown to the client,\nbut it is guaranteed one of them will.","tags":[{"tag":"","text":"Called on client connection.  If you return true, the client will be allowed in the server.\nIf you return false (or return nothing), the client will be rejected.  If the client is\nrejected by this forward or any other, OnClientDisconnect will not be called.\n\nNote: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write\nto the string buffer, it is not defined which plugin's string will be shown to the client,\nbut it is guaranteed one of them will."},{"tag":"param:client","text":"Client index."},{"tag":"param:rejectmsg","text":"Buffer to store the rejection message when the connection is refused."},{"tag":"param:maxlen","text":"Maximum number of characters for rejection buffer."},{"tag":"return","text":"True to validate client's connection, false to refuse it."}]},"kind":"forward","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"rejectmsg","decl":"char[] rejectmsg","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddUserFlags":{"symbol":{"name":"AddUserFlags","docStart":17914,"docEnd":18204,"docs":{"brief":"Sets access flags on a client.  If the client is not an admin,\na temporary, anonymous AdminId is given.","tags":[{"tag":"","text":"Sets access flags on a client.  If the client is not an admin,\na temporary, anonymous AdminId is given."},{"tag":"param:client","text":"Player's index."},{"tag":"param:...","text":"Flags to set on the client."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AdminFlag ...","name":"...","decl":"AdminFlag ...","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetTimeConnected":{"symbol":{"name":"GetTimeConnected","docStart":11904,"docEnd":12108,"docs":{"brief":"Returns the client's connection time in seconds.","tags":[{"tag":"","text":"Returns the client's connection time in seconds."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Connection time."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"GetClientOfUserId":{"symbol":{"name":"GetClientOfUserId","docStart":27367,"docEnd":27568,"docs":{"brief":"Translates an userid index to the real player index.","tags":[{"tag":"","text":"Translates an userid index to the real player index."},{"tag":"param:userid","text":"Userid value."},{"tag":"return","text":"Client value."},{"tag":"error","text":"Returns 0 if invalid userid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"userid","decl":"int userid","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientArmor":{"symbol":{"name":"GetClientArmor","docStart":23384,"docEnd":23593,"docs":{"brief":"Returns the client's armor.","tags":[{"tag":"","text":"Returns the client's armor."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Armor value."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAbsOrigin":{"symbol":{"name":"GetClientAbsOrigin","docStart":23061,"docEnd":23321,"docs":{"brief":"Returns the client's origin vector.","tags":[{"tag":"","text":"Returns the client's origin vector."},{"tag":"param:client","text":"Player's index."},{"tag":"param:vec","text":"Destination vector to store the client's origin vector."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAvgChoke":{"symbol":{"name":"GetClientAvgChoke","docStart":26239,"docEnd":26603,"docs":{"brief":"Returns the client's average packet choke, values go from 0 to 1 (for percentages).","tags":[{"tag":"","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages)."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Average packet loss, or -1 if network info is not available."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsFakeClient":{"symbol":{"name":"IsFakeClient","docStart":15197,"docEnd":15373,"docs":{"brief":"Returns if a certain player is a fake client.","tags":[{"tag":"","text":"Returns if a certain player is a fake client."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"True if player is a fake client, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientObserver":{"symbol":{"name":"IsClientObserver","docStart":15868,"docEnd":16050,"docs":{"brief":"Returns if a certain player is an observer/spectator.","tags":[{"tag":"","text":"Returns if a certain player is an observer/spectator."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"True if player is an observer, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"aef5ba1d09cd5816adf9967fa3d0e252f2cabdf4","count":1002,"time":1182526632},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientPostAdminCheck":{"symbol":{"name":"OnClientPostAdminCheck","docStart":8256,"docEnd":8554,"docs":{"brief":"Called once a client is authorized and fully in-game, and\nafter all post-connection authorizations have been performed.\n\nThis callback is guaranteed to occur on all clients, and always\nafter each OnClientPutInServer() call.","tags":[{"tag":"","text":"Called once a client is authorized and fully in-game, and\nafter all post-connection authorizations have been performed.\n\nThis callback is guaranteed to occur on all clients, and always\nafter each OnClientPutInServer() call."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"6da3335588e30058633bcb9fcf7e234b76a3ebdd","count":1274,"time":1186590171},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientSerial":{"symbol":{"name":"GetClientSerial","docStart":29631,"docEnd":29844,"docs":{"brief":"Returns the clients unique serial identifier.","tags":[{"tag":"","text":"Returns the clients unique serial identifier."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"Serial number."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"ca3df3bd5014251c52b5559ea035a16d9467489b","count":2592,"time":1235024384},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetLatency":{"symbol":{"name":"GetLatency","docStart":12152,"docEnd":12436,"docs":{"brief":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering.","tags":[{"tag":"","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Latency."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"GetClientDeaths":{"symbol":{"name":"GetClientDeaths","docStart":23637,"docEnd":23852,"docs":{"brief":"Returns the client's death count.","tags":[{"tag":"","text":"Returns the client's death count."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Death count."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAvgPackets":{"symbol":{"name":"GetClientAvgPackets","docStart":27003,"docEnd":27302,"docs":{"brief":"Returns the client's average packet frequency in packets/sec.","tags":[{"tag":"","text":"Returns the client's average packet frequency in packets/sec."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Packet frequency."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientInGame":{"symbol":{"name":"IsClientInGame","docStart":14029,"docEnd":14298,"docs":{"brief":"Returns if a certain player has entered the game.","tags":[{"tag":"","text":"Returns if a certain player has entered the game."},{"tag":"param:client","text":"Player index (index does not have to be connected)."},{"tag":"return","text":"True if player has entered the game, false otherwise."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"8a9b5b7d415dd7c7f19df67b53da97c5a577de68","count":785,"time":1179042516},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientDisconnect_Post":{"symbol":{"name":"OnClientDisconnect_Post","docStart":4826,"docEnd":4935,"docs":{"brief":"Called when a client is disconnected from the server.","tags":[{"tag":"","text":"Called when a client is disconnected from the server."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientAuthorized":{"symbol":{"name":"OnClientAuthorized","docStart":6557,"docEnd":6942,"docs":{"brief":"Called when a client receives an auth ID.  The state of a client's\nauthorization as an admin is not guaranteed here.  Use\nOnClientPostAdminCheck() if you need a client's admin status.\n\nThis is called by bots, but the ID will be \"BOT\".","tags":[{"tag":"","text":"Called when a client receives an auth ID.  The state of a client's\nauthorization as an admin is not guaranteed here.  Use\nOnClientPostAdminCheck() if you need a client's admin status.\n\nThis is called by bots, but the ID will be \"BOT\"."},{"tag":"param:client","text":"Client index."},{"tag":"param:auth","text":"Client Steam2 id, if available, else engine auth id."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"auth","decl":"const char[] auth","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetUserFlagBits":{"symbol":{"name":"GetUserFlagBits","docStart":18925,"docEnd":19175,"docs":{"brief":"Returns client access flags.  If the client is not an admin,\nthe result is always 0.","tags":[{"tag":"","text":"Returns client access flags.  If the client is not an admin,\nthe result is always 0."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Flags"},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CanUserTarget":{"symbol":{"name":"CanUserTarget","docStart":19220,"docEnd":19575,"docs":{"brief":"Returns whether a user can target another user.\nThis is a helper function for CanAdminTarget.","tags":[{"tag":"","text":"Returns whether a user can target another user.\nThis is a helper function for CanAdminTarget."},{"tag":"param:client","text":"Player's index."},{"tag":"param:target","text":"Target player's index."},{"tag":"return","text":"True if target is targettable by the player, false otherwise."},{"tag":"error","text":"Invalid or unconnected player indexers."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"target","decl":"int target","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientModel":{"symbol":{"name":"GetClientModel","docStart":21306,"docEnd":21633,"docs":{"brief":"Returns the client's model name.","tags":[{"tag":"","text":"Returns the client's model name."},{"tag":"param:client","text":"Player's index."},{"tag":"param:model","text":"Buffer to store the client's model name."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"model","decl":"char[] model","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KickClientEx":{"symbol":{"name":"KickClientEx","docStart":28565,"docEnd":29160,"docs":{"brief":"Immediately disconnects a client from the server.\n\nKicking clients from certain events or callbacks may cause crashes.  If in\ndoubt, create a short (0.1 second) timer to kick the client in the next\navailable frame.","tags":[{"tag":"","text":"Immediately disconnects a client from the server.\n\nKicking clients from certain events or callbacks may cause crashes.  If in\ndoubt, create a short (0.1 second) timer to kick the client in the next\navailable frame."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Optional formatting rules for disconnect reason.\nNote that a period is automatically appended to the string by the engine."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":"\"\""},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"0e1ae4d85bc3e4a4f6c2854d3f302d961964103f","count":2163,"time":1215305126},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetUserAdmin":{"symbol":{"name":"SetUserAdmin","docStart":17232,"docEnd":17560,"docs":{"brief":"Sets a client's AdminId.","tags":[{"tag":"","text":"Sets a client's AdminId."},{"tag":"param:client","text":"Player's index."},{"tag":"param:id","text":"AdminId to set.  INVALID_ADMIN_ID removes admin permissions."},{"tag":"param:temp","text":"True if the id should be freed on disconnect."},{"tag":"error","text":"Invalid client index, client not connected, or bogus AdminId."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"bool","name":"temp","decl":"bool temp","default":"false"}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientPutInServer":{"symbol":{"name":"OnClientPutInServer","docStart":4116,"docEnd":4615,"docs":{"brief":"Called when a client is entering the game.\n\nWhether a client has a steamid is undefined until OnClientAuthorized\nis called, which may occur either before or after OnClientPutInServer.\nSimilarly, use OnClientPostAdminCheck() if you need to verify whether\nconnecting players are admins.\n\nGetClientCount() will include clients as they are passed through this\nfunction, as clients are already in game at this point.","tags":[{"tag":"","text":"Called when a client is entering the game.\n\nWhether a client has a steamid is undefined until OnClientAuthorized\nis called, which may occur either before or after OnClientPutInServer.\nSimilarly, use OnClientPostAdminCheck() if you need to verify whether\nconnecting players are admins.\n\nGetClientCount() will include clients as they are passed through this\nfunction, as clients are already in game at this point."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientInKickQueue":{"symbol":{"name":"IsClientInKickQueue","docStart":14343,"docEnd":14665,"docs":{"brief":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked\nshortly and thus they should not appear as valid).","tags":[{"tag":"","text":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked\nshortly and thus they should not appear as valid)."},{"tag":"param:client","text":"Player index (must be connected)."},{"tag":"return","text":"True if in the kick queue, false otherwise."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"2c5cd635526b45d585f663d9b7f7b49507408ffc","count":1510,"time":1191264099},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientDataRate":{"symbol":{"name":"GetClientDataRate","docStart":24154,"docEnd":24382,"docs":{"brief":"Returns the client's send data rate in bytes/sec.","tags":[{"tag":"","text":"Returns the client's send data rate in bytes/sec."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Data rate."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientMaxs":{"symbol":{"name":"GetClientMaxs","docStart":22106,"docEnd":22363,"docs":{"brief":"Returns the client's max size vector.","tags":[{"tag":"","text":"Returns the client's max size vector."},{"tag":"param:client","text":"Player's index."},{"tag":"param:vec","text":"Destination vector to store the client's max size."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateFakeClient":{"symbol":{"name":"CreateFakeClient","docStart":20474,"docEnd":20615,"docs":{"brief":"Creates a fake client.","tags":[{"tag":"","text":"Creates a fake client."},{"tag":"param:name","text":"Name to use."},{"tag":"return","text":"Client index on success, 0 otherwise."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetFakeClientConVar":{"symbol":{"name":"SetFakeClientConVar","docStart":20668,"docEnd":20961,"docs":{"brief":"Sets a convar value on a fake client.","tags":[{"tag":"","text":"Sets a convar value on a fake client."},{"tag":"param:client","text":"Client index."},{"tag":"param:cvar","text":"ConVar name."},{"tag":"param:value","text":"ConVar value."},{"tag":"error","text":"Invalid client index, client not connected,\nor client not a fake client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"cvar","decl":"const char[] cvar","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientSourceTV":{"symbol":{"name":"IsClientSourceTV","docStart":15416,"docEnd":15598,"docs":{"brief":"Returns if a certain player is the SourceTV bot.","tags":[{"tag":"","text":"Returns if a certain player is the SourceTV bot."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"True if player is the SourceTV bot, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"f3d19a860ad1e0425f6465c6c9a2b543f4be918b","count":3419,"time":1319161197},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetUserAdmin":{"symbol":{"name":"GetUserAdmin","docStart":17632,"docEnd":17868,"docs":{"brief":"Retrieves a client's AdminId.","tags":[{"tag":"","text":"Retrieves a client's AdminId."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"AdminId of the client, or INVALID_ADMIN_ID if none."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"AdminId","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveUserFlags":{"symbol":{"name":"RemoveUserFlags","docStart":18262,"docEnd":18534,"docs":{"brief":"Removes flags from a client.  If the client is not an admin,\nthis has no effect.","tags":[{"tag":"","text":"Removes flags from a client.  If the client is not an admin,\nthis has no effect."},{"tag":"param:client","text":"Player's index."},{"tag":"param:...","text":"Flags to remove from the client."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AdminFlag ...","name":"...","decl":"AdminFlag ...","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientLatency":{"symbol":{"name":"GetClientLatency","docStart":25003,"docEnd":25363,"docs":{"brief":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering.","tags":[{"tag":"","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Latency, or -1 if network info is not available."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAuthId":{"symbol":{"name":"GetClientAuthId","docStart":11994,"docEnd":12668,"docs":{"brief":"Retrieves a client's authentication string (SteamID).","tags":[{"tag":"","text":"Retrieves a client's authentication string (SteamID)."},{"tag":"param:client","text":"Player index."},{"tag":"param:authType","text":"Auth id type and format to use."},{"tag":"param:auth","text":"Buffer to store the client's auth id."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"param:validate","text":"Check backend validation status.\nDO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,\nYou WILL KNOW if you need to use this, MOST WILL NOT."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AuthIdType","name":"authType","decl":"AuthIdType authType","default":null},{"type":"char[]","name":"auth","decl":"char[] auth","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"bool","name":"validate","decl":"bool validate","default":"true"}]},"created":{"hash":"e11fec9ba1cd24e1bf252ea00452af3d12590f9e","count":4829,"time":1409706696},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAvgData":{"symbol":{"name":"GetClientAvgData","docStart":26666,"docEnd":26941,"docs":{"brief":"Returns the client's data flow in bytes/sec.","tags":[{"tag":"","text":"Returns the client's data flow in bytes/sec."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Data flow."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientPostAdminFilter":{"symbol":{"name":"OnClientPostAdminFilter","docStart":7691,"docEnd":8201,"docs":{"brief":"Called directly before OnClientPostAdminCheck() as a method to\nalter administrative permissions before plugins perform final\npost-connect operations.\n\nIn general, do not use this function unless you are specifically\nattempting to change access permissions.  Use OnClientPostAdminCheck()\ninstead if you simply want to perform post-connect authorization\nroutines.\n\nSee OnClientPostAdminCheck() for more information.","tags":[{"tag":"","text":"Called directly before OnClientPostAdminCheck() as a method to\nalter administrative permissions before plugins perform final\npost-connect operations.\n\nIn general, do not use this function unless you are specifically\nattempting to change access permissions.  Use OnClientPostAdminCheck()\ninstead if you simply want to perform post-connect authorization\nroutines.\n\nSee OnClientPostAdminCheck() for more information."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"89ac3a14ba1e0514dee6da89dc7b65a7f6544d5a","count":1832,"time":1199389255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientFromSerial":{"symbol":{"name":"GetClientFromSerial","docStart":29889,"docEnd":30056,"docs":{"brief":"Returns the client index by its serial number.","tags":[{"tag":"","text":"Returns the client index by its serial number."},{"tag":"param:serial","text":"Serial number."},{"tag":"return","text":"Client index, or 0 for invalid serial."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"serial","decl":"int serial","default":null}]},"created":{"hash":"ca3df3bd5014251c52b5559ea035a16d9467489b","count":2592,"time":1235024384},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetUserFlagBits":{"symbol":{"name":"SetUserFlagBits","docStart":18595,"docEnd":18868,"docs":{"brief":"Sets access flags on a client using bits instead of flags.  If the\nclient is not an admin, and flags not 0, a temporary, anonymous AdminId is given.","tags":[{"tag":"","text":"Sets access flags on a client using bits instead of flags.  If the\nclient is not an admin, and flags not 0, a temporary, anonymous AdminId is given."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flags","text":"Bitstring of flags to set on client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FakeClientCommand":{"symbol":{"name":"FakeClientCommand","docStart":14531,"docEnd":14809,"docs":{"brief":"Executes a client command on the server without being networked.","tags":[{"tag":"","text":"Executes a client command on the server without being networked."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:fmt","text":"Format of the client command."},{"tag":"param:...","text":"Format parameters"},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634}},"DisconnectClient":{"symbol":{"name":"DisconnectClient","docStart":14613,"docEnd":14997,"docs":{"brief":"Disconnects a client from the server.","tags":[{"tag":"","text":"Disconnects a client from the server."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Optional formatting rules for disconnect reason.\nNote that a period is automatically appended to the string by the engine."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":"\"\""},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"243d31b7a63eda587c3ec6f4c934cd078c6f15d9","count":993,"time":1182337618},"last_updated":{"hash":"243d31b7a63eda587c3ec6f4c934cd078c6f15d9","count":993,"time":1182337618}},"GetClientAuthString":{"symbol":{"name":"GetClientAuthString","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"auth","decl":"char[] auth","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"bool","name":"validate","decl":"bool validate","default":"true"}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"e3b87a5ca4b358da7108c38fbdef1823f45fa953","count":4826,"time":1409704990}},"GetClientWeapon":{"symbol":{"name":"GetClientWeapon","docStart":21704,"docEnd":22033,"docs":{"brief":"Returns the client's weapon name.","tags":[{"tag":"","text":"Returns the client's weapon name."},{"tag":"param:client","text":"Player's index."},{"tag":"param:weapon","text":"Buffer to store the client's weapon name."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"weapon","decl":"char[] weapon","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RunAdminCacheChecks":{"symbol":{"name":"RunAdminCacheChecks","docStart":19631,"docEnd":20032,"docs":{"brief":"Runs through the Core-defined admin authorization checks on a player.\nHas no effect if the player is already an admin.\n\nNote: This function is based on the internal cache only.","tags":[{"tag":"","text":"Runs through the Core-defined admin authorization checks on a player.\nHas no effect if the player is already an admin.\n\nNote: This function is based on the internal cache only."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if access was changed, false if it did not."},{"tag":"error","text":"Invalid client index or client not in-game AND authorized."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"6da3335588e30058633bcb9fcf7e234b76a3ebdd","count":1274,"time":1186590171},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAbsAngles":{"symbol":{"name":"GetClientAbsAngles","docStart":22736,"docEnd":22998,"docs":{"brief":"Returns the client's position angle.","tags":[{"tag":"","text":"Returns the client's position angle."},{"tag":"param:client","text":"Player's index."},{"tag":"param:ang","text":"Destination vector to store the client's position angle."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float[3]","name":"ang","decl":"float ang[3]","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientMins":{"symbol":{"name":"GetClientMins","docStart":22421,"docEnd":22678,"docs":{"brief":"Returns the client's min size vector.","tags":[{"tag":"","text":"Returns the client's min size vector."},{"tag":"param:client","text":"Player's index."},{"tag":"param:vec","text":"Destination vector to store the client's min size."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientName":{"symbol":{"name":"GetClientName","docStart":10210,"docEnd":10577,"docs":{"brief":"Returns the client's name.","tags":[{"tag":"","text":"Returns the client's name."},{"tag":"param:client","text":"Player index."},{"tag":"param:name","text":"Buffer to store the client's name."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientPreAdminCheck":{"symbol":{"name":"OnClientPreAdminCheck","docStart":7011,"docEnd":7636,"docs":{"brief":"Called once a client is authorized and fully in-game, but\nbefore admin checks are done.  This can be used to override\nthe default admin checks for a client.  You should only use\nthis for overriding; use OnClientPostAdminCheck() instead\nif you want notification.\n\nNote: If handled/blocked, PostAdminCheck must be signalled\nmanually via NotifyPostAdminCheck().\n\nThis callback is guaranteed to occur on all clients, and always\nafter each OnClientPutInServer() call.","tags":[{"tag":"","text":"Called once a client is authorized and fully in-game, but\nbefore admin checks are done.  This can be used to override\nthe default admin checks for a client.  You should only use\nthis for overriding; use OnClientPostAdminCheck() instead\nif you want notification.\n\nNote: If handled/blocked, PostAdminCheck must be signalled\nmanually via NotifyPostAdminCheck().\n\nThis callback is guaranteed to occur on all clients, and always\nafter each OnClientPutInServer() call."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"Plugin_Handled to block admin checks."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"6da3335588e30058633bcb9fcf7e234b76a3ebdd","count":1274,"time":1186590171},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientCommandKeyValues_Post":{"symbol":{"name":"OnClientCommandKeyValues_Post","docStart":6019,"docEnd":6321,"docs":{"brief":"Called after a client has sent a KeyValues command.","tags":[{"tag":"","text":"Called after a client has sent a KeyValues command."},{"tag":"param:client","text":"Client index."},{"tag":"param:kv","text":"KeyValues data sent as the command.\n(This handle should not be stored and will be closed\nafter this forward completes.)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"KeyValues","name":"kv","decl":"KeyValues kv","default":null}]},"created":{"hash":"c85cc5cbf722397b26960e459e2ae1bc9f8a5e56","count":5516,"time":1436721286},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAvgData":{"symbol":{"name":"GetAvgData","docStart":13480,"docEnd":13719,"docs":{"brief":"Returns the client's data flow in bytes/sec.","tags":[{"tag":"","text":"Returns the client's data flow in bytes/sec."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Data flow."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"GetClientTime":{"symbol":{"name":"GetClientTime","docStart":24725,"docEnd":24958,"docs":{"brief":"Returns the client's connection time in seconds.","tags":[{"tag":"","text":"Returns the client's connection time in seconds."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Connection time."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientTimingOut":{"symbol":{"name":"IsClientTimingOut","docStart":24429,"docEnd":24677,"docs":{"brief":"Returns if a client is timing out","tags":[{"tag":"","text":"Returns if a client is timing out"},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"True if client is timing out, false otherwise."},{"tag":"error","text":"Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"c7db1854003fda74463729bfe04f23747cd948c6","count":692,"time":1176448672},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientCount":{"symbol":{"name":"GetClientCount","docStart":9972,"docEnd":10156,"docs":{"brief":"Returns the client count put in the server.","tags":[{"tag":"","text":"Returns the client count put in the server."},{"tag":"param:inGameOnly","text":"If false connecting players are also counted."},{"tag":"return","text":"Client count in the server."}]},"kind":"native","returnType":"int","arguments":[{"type":"bool","name":"inGameOnly","decl":"bool inGameOnly","default":"true"}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientReplay":{"symbol":{"name":"IsClientReplay","docStart":15645,"docEnd":15823,"docs":{"brief":"Returns if a certain player is the Replay bot.","tags":[{"tag":"","text":"Returns if a certain player is the Replay bot."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"True if player is the Replay bot, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"f3d19a860ad1e0425f6465c6c9a2b543f4be918b","count":3419,"time":1319161197},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KickClient":{"symbol":{"name":"KickClient","docStart":27615,"docEnd":28491,"docs":{"brief":"Disconnects a client from the server as soon as the next frame starts.\n\nNote: Originally, KickClient() was immediate.  The delay was introduced\nbecause despite warnings, plugins were using it in ways that would crash.\nThe new safe version can break cases that rely on immediate disconnects,\nbut ensures that plugins do not accidentally cause crashes.\n\nIf you need immediate disconnects, use KickClientEx().\n\nNote: IsClientInKickQueue() will return true before the kick occurs.","tags":[{"tag":"","text":"Disconnects a client from the server as soon as the next frame starts.\n\nNote: Originally, KickClient() was immediate.  The delay was introduced\nbecause despite warnings, plugins were using it in ways that would crash.\nThe new safe version can break cases that rely on immediate disconnects,\nbut ensures that plugins do not accidentally cause crashes.\n\nIf you need immediate disconnects, use KickClientEx().\n\nNote: IsClientInKickQueue() will return true before the kick occurs."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Optional formatting rules for disconnect reason.\nNote that a period is automatically appended to the string by the engine."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":"\"\""},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"4a82ce501be552707dfeacab5b406c8eef3492e2","count":997,"time":1182455494},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAvgLatency":{"symbol":{"name":"GetAvgLatency","docStart":12488,"docEnd":12744,"docs":{"brief":"Returns the client's average packet latency in seconds.","tags":[{"tag":"","text":"Returns the client's average packet latency in seconds."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Average latency."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"GetClientTeam":{"symbol":{"name":"GetClientTeam","docStart":16943,"docEnd":17188,"docs":{"brief":"Retrieves a client's team index.","tags":[{"tag":"","text":"Retrieves a client's team index."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Team index the client is on (mod specific)."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"49c9ab6e25637658b336db816ec3e341130e15c0","count":645,"time":1174172624},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientUserId":{"symbol":{"name":"GetClientUserId","docStart":13466,"docEnd":13754,"docs":{"brief":"Retrieves a client's user id, which is an index incremented for every client\nthat joins the server.","tags":[{"tag":"","text":"Retrieves a client's user id, which is an index incremented for every client\nthat joins the server."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"User id of the client."},{"tag":"error","text":"If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsClientConnected":{"symbol":{"name":"IsClientConnected","docStart":13799,"docEnd":13981,"docs":{"brief":"Returns if a certain player is connected.","tags":[{"tag":"","text":"Returns if a certain player is connected."},{"tag":"param:client","text":"Player index."},{"tag":"return","text":"True if player is connected to the server, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientSettingsChanged":{"symbol":{"name":"OnClientSettingsChanged","docStart":6396,"docEnd":6502,"docs":{"brief":"Called whenever the client's settings are changed.","tags":[{"tag":"","text":"Called whenever the client's settings are changed."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientIP":{"symbol":{"name":"GetClientIP","docStart":10646,"docEnd":11109,"docs":{"brief":"Retrieves a client's IP address.","tags":[{"tag":"","text":"Retrieves a client's IP address."},{"tag":"param:client","text":"Player index."},{"tag":"param:ip","text":"Buffer to store the client's ip address."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"param:remport","text":"Remove client's port from the ip string (true by default)."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"ip","decl":"char[] ip","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"bool","name":"remport","decl":"bool remport","default":"true"}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAvgLoss":{"symbol":{"name":"GetAvgLoss","docStart":12799,"docEnd":13086,"docs":{"brief":"Returns the client's average packet loss, values go from 0 to 1 (for percentages).","tags":[{"tag":"","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages)."},{"tag":"param:client","text":"Player's index."},{"tag":"param:flow","text":"Traffic flowing direction."},{"tag":"return","text":"Average packet loss."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"NetFlow","name":"flow","decl":"NetFlow flow","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"IsPlayerAlive":{"symbol":{"name":"IsPlayerAlive","docStart":16097,"docEnd":16429,"docs":{"brief":"Returns if the client is alive or dead.\n\nNote: This function was originally in SDKTools and was moved to core.","tags":[{"tag":"","text":"Returns if the client is alive or dead.\n\nNote: This function was originally in SDKTools and was moved to core."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"True if the client is alive, false otherwise."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMaxClients":{"symbol":{"name":"GetMaxClients","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"7f552e4d7563c92c1057f9f110ec7f75ebf9aafc","count":6278,"time":1527076716}},"GetClientHealth":{"symbol":{"name":"GetClientHealth","docStart":21050,"docEnd":21261,"docs":{"brief":"Returns the client's health.","tags":[{"tag":"","text":"Returns the client's health."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Health value."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetSteamAccountID":{"symbol":{"name":"GetSteamAccountID","docStart":12780,"docEnd":13399,"docs":{"brief":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account.\nThis number is the basis for the various display SteamID forms, see the AuthIdType enum for examples.","tags":[{"tag":"","text":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account.\nThis number is the basis for the various display SteamID forms, see the AuthIdType enum for examples."},{"tag":"param:client","text":"Client Index."},{"tag":"param:validate","text":"Check backend validation status.\nDO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,\nYou WILL KNOW if you need to use this, MOST WILL NOT."},{"tag":"return","text":"Steam account ID or 0 if not available."},{"tag":"error","text":"If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"validate","decl":"bool validate","default":"true"}]},"created":{"hash":"5951cbf7b9d010b87b564653bb592cd9de3350ad","count":3826,"time":1363489960},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientAuthString2":{"symbol":{"name":"GetClientAuthString2","docStart":10624,"docEnd":11230,"docs":{"brief":"Retrieves a client's authentication string (SteamID).","tags":[{"tag":"","text":"Retrieves a client's authentication string (SteamID)."},{"tag":"param:client","text":"Player index."},{"tag":"param:authType","text":"Auth string type and format to use."},{"tag":"param:auth","text":"Buffer to store the client's auth string."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"param:validate","text":"Check backend validation status.\nDO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,\nYou WILL KNOW if you need to use this, MOST WILL NOT."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AuthStringType","name":"authType","decl":"AuthStringType authType","default":null},{"type":"char[]","name":"auth","decl":"char[] auth","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"bool","name":"validate","decl":"bool validate","default":"true"}]},"created":{"hash":"e3b87a5ca4b358da7108c38fbdef1823f45fa953","count":4826,"time":1409704990},"last_updated":{"hash":"d0c701793c3cd7279c1104c4ea8656620e9081b6","count":4828,"time":1409705253}},"IsTimingOut":{"symbol":{"name":"IsTimingOut","docStart":11647,"docEnd":11866,"docs":{"brief":"Returns if a client is timing out","tags":[{"tag":"","text":"Returns if a client is timing out"},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"True if client is timing out, false otherwise."},{"tag":"error","text":"Invalid client index, client not in game, or fake client."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753}},"OnClientCommandKeyValues":{"symbol":{"name":"OnClientCommandKeyValues","docStart":5478,"docEnd":5947,"docs":{"brief":"Called when a client is sending a KeyValues command.","tags":[{"tag":"","text":"Called when a client is sending a KeyValues command."},{"tag":"param:client","text":"Client index."},{"tag":"param:kv","text":"Editable KeyValues data to be sent as the command.\n(This handle should not be stored and will be closed\nafter this forward completes.)"},{"tag":"return","text":"Plugin_Handled blocks the command from being sent,\nand Plugin_Continue resumes normal functionality."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"KeyValues","name":"kv","decl":"KeyValues kv","default":null}]},"created":{"hash":"c85cc5cbf722397b26960e459e2ae1bc9f8a5e56","count":5516,"time":1436721286},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientFrags":{"symbol":{"name":"GetClientFrags","docStart":23897,"docEnd":24110,"docs":{"brief":"Returns the client's frag count.","tags":[{"tag":"","text":"Returns the client's frag count."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Frag count."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"daeb5a7dba4b377b368b9c365382fa14f8fba05e","count":659,"time":1175124912},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_clients_included":{"symbol":{"name":"_clients_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572}},"MAX_NAME_LENGTH":{"symbol":{"name":"MAX_NAME_LENGTH","docStart":2873,"docEnd":2927,"docs":{"brief":"Maximum buffer required to store a client name","tags":[{"tag":"","text":"Maximum buffer required to store a client name"}]},"value":"128"},"created":{"hash":"a1acf91af762d58078104d4ee954fa8ef36b6cc7","count":1343,"time":1187219353},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MAXPLAYERS":{"symbol":{"name":"MAXPLAYERS","docStart":2791,"docEnd":2843,"docs":{"brief":"Maximum number of players SourceMod supports","tags":[{"tag":"","text":"Maximum number of players SourceMod supports"}]},"value":"65"},"created":{"hash":"7817602d7501830fd10c0ad8962a5833ffc1bc82","count":902,"time":1181183977},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"NetFlow":{"symbol":{"name":"NetFlow","docStart":1640,"docEnd":1677,"docs":{"brief":"Network flow directions.","tags":[{"tag":"","text":"Network flow directions."}]},"entries":[{"name":"NetFlow_Outgoing","docStart":1721,"docEnd":1745,"docs":{"brief":"Outgoing traffic","tags":[{"tag":"","text":"Outgoing traffic"}]},"value":"0"},{"name":"NetFlow_Incoming","docStart":1772,"docEnd":1796,"docs":{"brief":"Incoming traffic","tags":[{"tag":"","text":"Incoming traffic"}]},"value":null},{"name":"NetFlow_Both","docStart":1823,"docEnd":1857,"docs":{"brief":"Both values added together","tags":[{"tag":"","text":"Both values added together"}]},"value":null}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AuthStringType":{"symbol":{"name":"AuthStringType","docStart":1850,"docEnd":2144,"docs":{"brief":"Auth string types.\n\nNote that for the Steam2 and Steam3 types, the following ids are\nalso valid values:\n\"STEAM_ID_PENDING\" - Authentication is pending.\n\"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server.\n\"BOT\" - The client is a bot.","tags":[{"tag":"","text":"Auth string types.\n\nNote that for the Steam2 and Steam3 types, the following ids are\nalso valid values:\n\"STEAM_ID_PENDING\" - Authentication is pending.\n\"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server.\n\"BOT\" - The client is a bot."}]},"entries":[{"name":"AuthString_Engine","docStart":2194,"docEnd":2259,"docs":{"brief":"The game-specific auth string as returned from the engine","tags":[{"tag":"","text":"The game-specific auth string as returned from the engine"}]},"value":"0"},{"name":"AuthString_Steam2","docStart":2265,"docEnd":2344,"docs":{"brief":"The following are only available on games that support Steam authentication.","tags":[{"tag":"","text":"The following are only available on games that support Steam authentication."}]},"value":null},{"name":"AuthString_Steam3","docStart":2450,"docEnd":2500,"docs":{"brief":"Steam3 rendered format, ex \"[U:1:8307981]\"","tags":[{"tag":"","text":"Steam3 rendered format, ex \"[U:1:8307981]\""}]},"value":null},{"name":"AuthString_SteamID64","docStart":2526,"docEnd":2590,"docs":{"brief":"A SteamID64 (uint64) as a String, ex \"76561197968573709\"","tags":[{"tag":"","text":"A SteamID64 (uint64) as a String, ex \"76561197968573709\""}]},"value":null}]},"created":{"hash":"8c89b72fbc8b31c0794562683df69ea72c3cadc2","count":4825,"time":1409694039},"last_updated":{"hash":"3fba1d2817883f53a9f12784e3be2bc0b456ab74","count":4831,"time":1409766611}},"AuthIdType":{"symbol":{"name":"AuthIdType","docStart":1865,"docEnd":2159,"docs":{"brief":"Auth string types.\n\nNote that for the Steam2 and Steam3 types, the following ids are\nalso valid values:\n\"STEAM_ID_PENDING\" - Authentication is pending.\n\"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server.\n\"BOT\" - The client is a bot.","tags":[{"tag":"","text":"Auth string types.\n\nNote that for the Steam2 and Steam3 types, the following ids are\nalso valid values:\n\"STEAM_ID_PENDING\" - Authentication is pending.\n\"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server.\n\"BOT\" - The client is a bot."}]},"entries":[{"name":"AuthId_Engine","docStart":2205,"docEnd":2270,"docs":{"brief":"The game-specific auth string as returned from the engine","tags":[{"tag":"","text":"The game-specific auth string as returned from the engine"}]},"value":"0"},{"name":"AuthId_Steam2","docStart":2276,"docEnd":2355,"docs":{"brief":"The following are only available on games that support Steam authentication.","tags":[{"tag":"","text":"The following are only available on games that support Steam authentication."}]},"value":null},{"name":"AuthId_Steam3","docStart":2461,"docEnd":2511,"docs":{"brief":"Steam3 rendered format, ex \"[U:1:8307981]\"","tags":[{"tag":"","text":"Steam3 rendered format, ex \"[U:1:8307981]\""}]},"value":null},{"name":"AuthId_SteamID64","docStart":2537,"docEnd":2601,"docs":{"brief":"A SteamID64 (uint64) as a String, ex \"76561197968573709\"","tags":[{"tag":"","text":"A SteamID64 (uint64) as a String, ex \"76561197968573709\""}]},"value":null}]},"created":{"hash":"7f3656215bb0cecf8d0a5830c063e2644ce29e46","count":4835,"time":1409782410},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"sdktools_gamerules":{"functions":{"GameRules_SetPropVector":{"symbol":{"name":"GameRules_SetPropVector","docStart":6013,"docEnd":6360,"docs":{"brief":"Sets a vector of floats in the gamerules entity, given a named network property.","tags":[{"tag":"","text":"Sets a vector of floats in the gamerules entity, given a named network property."},{"tag":"param:prop","text":"Property name."},{"tag":"param:vec","text":"Vector to set."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"This parameter is ignored."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"element","decl":"int element","default":"0"},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_SetPropFloat":{"symbol":{"name":"GameRules_SetPropFloat","docStart":4216,"docEnd":4540,"docs":{"brief":"Sets a float value for a property of the gamerules entity.","tags":[{"tag":"","text":"Sets a float value for a property of the gamerules entity."},{"tag":"param:prop","text":"Property name."},{"tag":"param:value","text":"Value to set."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"This parameter is ignored."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"float","name":"value","decl":"float value","default":null},{"type":"int","name":"element","decl":"int element","default":"0"},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_GetProp":{"symbol":{"name":"GameRules_GetProp","docStart":2543,"docEnd":3080,"docs":{"brief":"Retrieves an integer value from a property of the gamerules entity.","tags":[{"tag":"","text":"Retrieves an integer value from a property of the gamerules entity."},{"tag":"param:prop","text":"Property name."},{"tag":"param:size","text":"Number of bytes to read (valid values are 1, 2, or 4).\nThis value is auto-detected, and the size parameter is\nonly used as a fallback in case detection fails."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Value at the given property offset."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"size","decl":"int size","default":"4"},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_GetPropVector":{"symbol":{"name":"GameRules_GetPropVector","docStart":5604,"docEnd":5923,"docs":{"brief":"Retrieves a vector of floats from the gamerules entity, given a named network property.","tags":[{"tag":"","text":"Retrieves a vector of floats from the gamerules entity, given a named network property."},{"tag":"param:prop","text":"Property name."},{"tag":"param:vec","text":"Vector buffer to store data in."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_GetPropEnt":{"symbol":{"name":"GameRules_GetPropEnt","docStart":4652,"docEnd":5075,"docs":{"brief":"Retrieves a entity index from a property of the gamerules entity.","tags":[{"tag":"","text":"Retrieves a entity index from a property of the gamerules entity."},{"tag":"param:prop","text":"Property name."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Entity index at the given property.\nIf there is no entity, or the entity is not valid,\nthen -1 is returned."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_SetPropString":{"symbol":{"name":"GameRules_SetPropString","docStart":6880,"docEnd":7168,"docs":{"brief":"Sets a gamerules property as a string.","tags":[{"tag":"","text":"Sets a gamerules property as a string."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:buffer","text":"String to set."},{"tag":"param:changeState","text":"This parameter is ignored."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_SetPropEnt":{"symbol":{"name":"GameRules_SetPropEnt","docStart":5147,"docEnd":5496,"docs":{"brief":"Sets an entity index for a property of the gamerules entity.","tags":[{"tag":"","text":"Sets an entity index for a property of the gamerules entity."},{"tag":"param:prop","text":"Property name."},{"tag":"param:other","text":"Entity index to set, or -1 to unset."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"This parameter is ignored."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"other","decl":"int other","default":null},{"type":"int","name":"element","decl":"int element","default":"0"},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_GetPropString":{"symbol":{"name":"GameRules_GetPropString","docStart":6480,"docEnd":6793,"docs":{"brief":"Gets a gamerules property as a string.","tags":[{"tag":"","text":"Gets a gamerules property as a string."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_GetRoundState":{"symbol":{"name":"GameRules_GetRoundState","docStart":7273,"docEnd":7416,"docs":{"brief":"Gets the current round state.","tags":[{"tag":"","text":"Gets the current round state."},{"tag":"return","text":"Round state."},{"tag":"error","text":"Game doesn't support round state."}]},"kind":"stock","returnType":"RoundState","arguments":[]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_GetPropFloat":{"symbol":{"name":"GameRules_GetPropFloat","docStart":3840,"docEnd":4140,"docs":{"brief":"Retrieves a float value from a property of the gamerules entity.","tags":[{"tag":"","text":"Retrieves a float value from a property of the gamerules entity."},{"tag":"param:prop","text":"Property name."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Value at the given property offset."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GameRules_SetProp":{"symbol":{"name":"GameRules_SetProp","docStart":3161,"docEnd":3723,"docs":{"brief":"Sets an integer value for a property of the gamerules entity.","tags":[{"tag":"","text":"Sets an integer value for a property of the gamerules entity."},{"tag":"param:prop","text":"Property name."},{"tag":"param:value","text":"Value to set."},{"tag":"param:size","text":"Number of bytes to write (valid values are 1, 2, or 4).\nThis value is auto-detected, and the size parameter is\nonly used as a fallback in case detection fails."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"This parameter is ignored."},{"tag":"error","text":"Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"size","decl":"int size","default":"4"},{"type":"int","name":"element","decl":"int element","default":"0"},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_gamerules_included":{"symbol":{"name":"_sdktools_gamerules_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255}}},"enums":{"RoundState":{"symbol":{"name":"RoundState","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RoundState_Init","docStart":1681,"docEnd":1717,"docs":{"brief":"initialize the game, create teams","tags":[{"tag":"","text":"initialize the game, create teams"}]},"value":null},{"name":"RoundState_Pregame","docStart":1741,"docEnd":1909,"docs":{"brief":"Before players have joined the game. Periodically checks to see if enough players are ready\nto start a game. Also reverts to this when there are no active players","tags":[{"tag":"","text":"Before players have joined the game. Periodically checks to see if enough players are ready\nto start a game. Also reverts to this when there are no active players"}]},"value":null},{"name":"RoundState_StartGame","docStart":1936,"docEnd":1995,"docs":{"brief":"The game is about to start, wait a bit and spawn everyone","tags":[{"tag":"","text":"The game is about to start, wait a bit and spawn everyone"}]},"value":null},{"name":"RoundState_Preround","docStart":2024,"docEnd":2068,"docs":{"brief":"All players are respawned, frozen in place","tags":[{"tag":"","text":"All players are respawned, frozen in place"}]},"value":null},{"name":"RoundState_RoundRunning","docStart":2096,"docEnd":2127,"docs":{"brief":"Round is on, playing normally","tags":[{"tag":"","text":"Round is on, playing normally"}]},"value":null},{"name":"RoundState_TeamWin","docStart":2159,"docEnd":2186,"docs":{"brief":"Someone has won the round","tags":[{"tag":"","text":"Someone has won the round"}]},"value":null},{"name":"RoundState_Restart","docStart":2213,"docEnd":2269,"docs":{"brief":"Noone has won, manually restart the game, reset scores","tags":[{"tag":"","text":"Noone has won, manually restart the game, reset scores"}]},"value":null},{"name":"RoundState_Stalemate","docStart":2296,"docEnd":2329,"docs":{"brief":"Noone has won, restart the game","tags":[{"tag":"","text":"Noone has won, restart the game"}]},"value":null},{"name":"RoundState_GameOver","docStart":2358,"docEnd":2400,"docs":{"brief":"Game is over, showing the scoreboard etc","tags":[{"tag":"","text":"Game is over, showing the scoreboard etc"}]},"value":null},{"name":"RoundState_Bonus","docStart":2428,"docEnd":2467,"docs":{"brief":"Game is over, doing bonus round stuff","tags":[{"tag":"","text":"Game is over, doing bonus round stuff"}]},"value":null},{"name":"RoundState_BetweenRounds","docStart":2492,"docEnd":2508,"docs":{"brief":"Between rounds","tags":[{"tag":"","text":"Between rounds"}]},"value":null}]},"created":{"hash":"4521f80e5a0881ecb4d21f35730ee9c7bbf576f0","count":3334,"time":1309988255},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"lang":{"functions":{"GetLanguageByCode":{"symbol":{"name":"GetLanguageByCode","docStart":3669,"docEnd":3861,"docs":{"brief":"Retrieves the language number from a language code.","tags":[{"tag":"","text":"Retrieves the language number from a language code."},{"tag":"param:code","text":"Language code (2-3 characters usually)."},{"tag":"return","text":"Language number. -1 if not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"code","decl":"const char[] code","default":null}]},"created":{"hash":"ca75d0d7651ad9697e47dca0efb15e1f2b0c8fec","count":3209,"time":1299591501},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TranslationPhraseExists":{"symbol":{"name":"TranslationPhraseExists","docStart":4155,"docEnd":4349,"docs":{"brief":"Determines if the specified phrase exists within the plugin's\ntranslation cache.","tags":[{"tag":"","text":"Determines if the specified phrase exists within the plugin's\ntranslation cache."},{"tag":"param:phrase","text":"Phrase to look for."},{"tag":"return","text":"True if phrase exists."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"phrase","decl":"const char[] phrase","default":null}]},"created":{"hash":"d685f30847e861cb855633229286876a4ac2f00b","count":6208,"time":1511241841},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsTranslatedForLanguage":{"symbol":{"name":"IsTranslatedForLanguage","docStart":4412,"docEnd":4630,"docs":{"brief":"Determines if there is a translation for the specified language.","tags":[{"tag":"","text":"Determines if there is a translation for the specified language."},{"tag":"param:phrase","text":"Phrase to check."},{"tag":"param:language","text":"Language number."},{"tag":"return","text":"True if translation exists."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"phrase","decl":"const char[] phrase","default":null},{"type":"int","name":"language","decl":"int language","default":null}]},"created":{"hash":"d685f30847e861cb855633229286876a4ac2f00b","count":6208,"time":1511241841},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetLanguageCount":{"symbol":{"name":"GetLanguageCount","docStart":2731,"docEnd":2844,"docs":{"brief":"Returns the number of languages known in languages.cfg.","tags":[{"tag":"","text":"Returns the number of languages known in languages.cfg."},{"tag":"return","text":"Language count."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"9c531423fb61364049c8c9b1ef3089f755a9d66c","count":1106,"time":1184375055},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetGlobalTransTarget":{"symbol":{"name":"SetGlobalTransTarget","docStart":1934,"docEnd":2262,"docs":{"brief":"Sets the global language target.  This is useful for creating functions\nthat will be compatible with the %t format specifier.  Note that invalid\nindexes can be specified but the error will occur during translation,\nnot during this function call.","tags":[{"tag":"","text":"Sets the global language target.  This is useful for creating functions\nthat will be compatible with the %t format specifier.  Note that invalid\nindexes can be specified but the error will occur during translation,\nnot during this function call."},{"tag":"param:client","text":"Client index or LANG_SERVER."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"cb77ef5b7d731d36a5d9ebabf1200f300550d387","count":1035,"time":1183493800},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LoadTranslations":{"symbol":{"name":"LoadTranslations","docStart":1709,"docEnd":1880,"docs":{"brief":"Loads a translation file for the plugin calling this native.\nIf no extension is specified, .txt is assumed.","tags":[{"tag":"","text":"Loads a translation file for the plugin calling this native.\nIf no extension is specified, .txt is assumed."},{"tag":"param:file","text":"Translation file."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},"created":{"hash":"aa8bf86dc15c2b841ebdf31572058f0dadcc6dc7","count":390,"time":1169868334},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetServerLanguage":{"symbol":{"name":"GetServerLanguage","docStart":2587,"docEnd":2694,"docs":{"brief":"Retrieves the server's language.","tags":[{"tag":"","text":"Retrieves the server's language."},{"tag":"return","text":"Language number server is using."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"9c531423fb61364049c8c9b1ef3089f755a9d66c","count":1106,"time":1184375055},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetClientLanguage":{"symbol":{"name":"SetClientLanguage","docStart":3401,"docEnd":3607,"docs":{"brief":"Sets the language number of a client.","tags":[{"tag":"","text":"Sets the language number of a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:language","text":"Language number."},{"tag":"error","text":"Invalid client index or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"language","decl":"int language","default":null}]},"created":{"hash":"ca75d0d7651ad9697e47dca0efb15e1f2b0c8fec","count":3209,"time":1299591501},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetLanguageInfo":{"symbol":{"name":"GetLanguageInfo","docStart":2880,"docEnd":3291,"docs":{"brief":"Retrieves info about a given language number.","tags":[{"tag":"","text":"Retrieves info about a given language number."},{"tag":"param:language","text":"Language number."},{"tag":"param:code","text":"Language code buffer (2-3 characters usually)."},{"tag":"param:codeLen","text":"Maximum length of the language code buffer."},{"tag":"param:name","text":"Language name buffer."},{"tag":"param:nameLen","text":"Maximum length of the language name buffer."},{"tag":"error","text":"Invalid language number."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"language","decl":"int language","default":null},{"type":"char[]","name":"code","decl":"char[] code","default":"\"\""},{"type":"int","name":"codeLen","decl":"int codeLen","default":"0"},{"type":"char[]","name":"name","decl":"char[] name","default":"\"\""},{"type":"int","name":"nameLen","decl":"int nameLen","default":"0"}]},"created":{"hash":"9c531423fb61364049c8c9b1ef3089f755a9d66c","count":1106,"time":1184375055},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientLanguage":{"symbol":{"name":"GetClientLanguage","docStart":2313,"docEnd":2540,"docs":{"brief":"Retrieves the language number of a client.","tags":[{"tag":"","text":"Retrieves the language number of a client."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"Language number client is using."},{"tag":"error","text":"Invalid client index or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"9c531423fb61364049c8c9b1ef3089f755a9d66c","count":1106,"time":1184375055},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetLanguageByName":{"symbol":{"name":"GetLanguageByName","docStart":3915,"docEnd":4101,"docs":{"brief":"Retrieves the language number from a language name.","tags":[{"tag":"","text":"Retrieves the language number from a language name."},{"tag":"param:name","text":"Language name (case insensitive)."},{"tag":"return","text":"Language number. -1 if not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"ca75d0d7651ad9697e47dca0efb15e1f2b0c8fec","count":3209,"time":1299591501},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"LANG_SERVER":{"symbol":{"name":"LANG_SERVER","docStart":1660,"docEnd":1705,"docs":{"brief":"Translate using the server's language","tags":[{"tag":"","text":"Translate using the server's language"}]},"value":"0"},"created":{"hash":"c7f1f04246f77743a6b0cb8c93cc8e1385879a27","count":673,"time":1175770942},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_lang_included":{"symbol":{"name":"_lang_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"aa8bf86dc15c2b841ebdf31572058f0dadcc6dc7","count":390,"time":1169868334},"last_updated":{"hash":"aa8bf86dc15c2b841ebdf31572058f0dadcc6dc7","count":390,"time":1169868334}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_voice":{"functions":{"IsClientMuted":{"symbol":{"name":"IsClientMuted","docStart":4680,"docEnd":4897,"docs":{"brief":"Retrieves if the muter has muted the mutee.","tags":[{"tag":"","text":"Retrieves if the muter has muted the mutee."},{"tag":"param:iMuter","text":"The muter index."},{"tag":"param:iMutee","text":"The mutee index."},{"tag":"return","text":"True if muter has muted mutee, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"iMuter","decl":"int iMuter","default":null},{"type":"int","name":"iMutee","decl":"int iMutee","default":null}]},"created":{"hash":"70bb4930f63808bbcc071d314fb83fefb11e0496","count":2797,"time":1252368568},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}},"OnClientSpeaking":{"symbol":{"name":"OnClientSpeaking","docStart":2421,"docEnd":2513,"docs":{"brief":"Called when a client is speaking.","tags":[{"tag":"","text":"Called when a client is speaking."},{"tag":"param:client","text":"The client index"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}},"SetClientListening":{"symbol":{"name":"SetClientListening","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"iReceiver","decl":"int iReceiver","default":null},{"type":"int","name":"iSender","decl":"int iSender","default":null},{"type":"bool","name":"bListen","decl":"bool bListen","default":null}]},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"70bb4930f63808bbcc071d314fb83fefb11e0496","count":2797,"time":1252368568}},"SetClientListeningFlags":{"symbol":{"name":"SetClientListeningFlags","docStart":2705,"docEnd":2836,"docs":{"brief":"Set the client listening flags.","tags":[{"tag":"","text":"Set the client listening flags."},{"tag":"param:client","text":"The client index"},{"tag":"param:flags","text":"The voice flags"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}},"GetClientListeningFlags":{"symbol":{"name":"GetClientListeningFlags","docStart":2901,"docEnd":3053,"docs":{"brief":"Retrieve the client current listening flags.","tags":[{"tag":"","text":"Retrieve the client current listening flags."},{"tag":"param:client","text":"The client index"},{"tag":"return","text":"The current voice flags"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}},"SetListenOverride":{"symbol":{"name":"SetListenOverride","docStart":3983,"docEnd":4294,"docs":{"brief":"Override the receiver's ability to listen to the sender.","tags":[{"tag":"","text":"Override the receiver's ability to listen to the sender."},{"tag":"param:iReceiver","text":"The listener index."},{"tag":"param:iSender","text":"The sender index."},{"tag":"param:override","text":"The override of the receiver's ability to listen to the sender."},{"tag":"return","text":"True if successful otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"iReceiver","decl":"int iReceiver","default":null},{"type":"int","name":"iSender","decl":"int iSender","default":null},{"type":"ListenOverride","name":"override","decl":"ListenOverride override","default":null}]},"created":{"hash":"70bb4930f63808bbcc071d314fb83fefb11e0496","count":2797,"time":1252368568},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}},"GetClientListening":{"symbol":{"name":"GetClientListening","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"iReceiver","decl":"int iReceiver","default":null},{"type":"int","name":"iSender","decl":"int iSender","default":null}]},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"70bb4930f63808bbcc071d314fb83fefb11e0496","count":2797,"time":1252368568}},"GetListenOverride":{"symbol":{"name":"GetListenOverride","docStart":4383,"docEnd":4606,"docs":{"brief":"Retrieves the override of the receiver's ability to listen to the sender.","tags":[{"tag":"","text":"Retrieves the override of the receiver's ability to listen to the sender."},{"tag":"param:iReceiver","text":"The listener index."},{"tag":"param:iSender","text":"The sender index."},{"tag":"return","text":"The override value."}]},"kind":"native","returnType":"ListenOverride","arguments":[{"type":"int","name":"iReceiver","decl":"int iReceiver","default":null},{"type":"int","name":"iSender","decl":"int iSender","default":null}]},"created":{"hash":"70bb4930f63808bbcc071d314fb83fefb11e0496","count":2797,"time":1252368568},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}},"OnClientSpeakingEnd":{"symbol":{"name":"OnClientSpeakingEnd","docStart":2561,"docEnd":2654,"docs":{"brief":"Called once a client speaking end.","tags":[{"tag":"","text":"Called once a client speaking end."},{"tag":"param:client","text":"The client index"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754},"last_updated":{"hash":"1b86c8564def3e4c6c031bf5a4a09671dba99438","count":6612,"time":1597755754}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_voice_included":{"symbol":{"name":"_sdktools_voice_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856}},"VOICE_LISTENTEAM":{"symbol":{"name":"VOICE_LISTENTEAM","docStart":2154,"docEnd":2225,"docs":{"brief":"Allow the client to always hear teammates, including dead ones.","tags":[{"tag":"","text":"Allow the client to always hear teammates, including dead ones."}]},"value":"16"},"created":{"hash":"e4728b0413b1627d718bf370a6f8d9421bc50c92","count":1469,"time":1190581267},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOICE_MUTED":{"symbol":{"name":"VOICE_MUTED","docStart":1809,"docEnd":1860,"docs":{"brief":"Mutes the client from speaking to everyone.","tags":[{"tag":"","text":"Mutes the client from speaking to everyone."}]},"value":"1"},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOICE_LISTENALL":{"symbol":{"name":"VOICE_LISTENALL","docStart":1974,"docEnd":2021,"docs":{"brief":"Allow the client to listen to everyone.","tags":[{"tag":"","text":"Allow the client to listen to everyone."}]},"value":"4"},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOICE_TEAM":{"symbol":{"name":"VOICE_TEAM","docStart":2055,"docEnd":2120,"docs":{"brief":"Allow the client to always speak to team, even when dead.","tags":[{"tag":"","text":"Allow the client to always speak to team, even when dead."}]},"value":"8"},"created":{"hash":"e4728b0413b1627d718bf370a6f8d9421bc50c92","count":1469,"time":1190581267},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOICE_NORMAL":{"symbol":{"name":"VOICE_NORMAL","docStart":1721,"docEnd":1775,"docs":{"brief":"Allow the client to listen and speak normally.","tags":[{"tag":"","text":"Allow the client to listen and speak normally."}]},"value":"0"},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOICE_SPEAKALL":{"symbol":{"name":"VOICE_SPEAKALL","docStart":1894,"docEnd":1940,"docs":{"brief":"Allow the client to speak to everyone.","tags":[{"tag":"","text":"Allow the client to speak to everyone."}]},"value":"2"},"created":{"hash":"15018176b5c14846100550d8b983afc65bb75ccc","count":1236,"time":1185941856},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"ListenOverride":{"symbol":{"name":"ListenOverride","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Listen_Default","docStart":2302,"docEnd":2333,"docs":{"brief":"Leave it up to the game","tags":[{"tag":"","text":"Leave it up to the game"}]},"value":"0"},{"name":"Listen_No","docStart":2356,"docEnd":2374,"docs":{"brief":"Can't hear","tags":[{"tag":"","text":"Can't hear"}]},"value":null},{"name":"Listen_Yes","docStart":2397,"docEnd":2413,"docs":{"brief":"Can hear","tags":[{"tag":"","text":"Can hear"}]},"value":null}]},"created":{"hash":"70bb4930f63808bbcc071d314fb83fefb11e0496","count":2797,"time":1252368568},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"convars":{"functions":{"GetConVarName":{"symbol":{"name":"GetConVarName","docStart":19439,"docEnd":19717,"docs":{"brief":"Retrieves the name of a console variable.","tags":[{"tag":"","text":"Retrieves the name of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:name","text":"Buffer to store the name of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarInt":{"symbol":{"name":"GetConVarInt","docStart":12885,"docEnd":13101,"docs":{"brief":"Returns the integer value of a console variable.","tags":[{"tag":"","text":"Returns the integer value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The integer value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarBool":{"symbol":{"name":"SetConVarBool","docStart":11979,"docEnd":12788,"docs":{"brief":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New boolean value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"bool","name":"value","decl":"bool value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarInt":{"symbol":{"name":"SetConVarInt","docStart":13143,"docEnd":13952,"docs":{"brief":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New integer value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"int","name":"value","decl":"int value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarFloat":{"symbol":{"name":"SetConVarFloat","docStart":14323,"docEnd":15146,"docs":{"brief":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New floating point value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"float","name":"value","decl":"float value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarFlags":{"symbol":{"name":"SetConVarFlags","docStart":18114,"docEnd":18351,"docs":{"brief":"Sets the bitstring of flags on a console variable.","tags":[{"tag":"","text":"Sets the bitstring of flags on a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:flags","text":"A bitstring containing the FCVAR_* flags to enable."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HookConVarChange":{"symbol":{"name":"HookConVarChange","docStart":11022,"docEnd":11285,"docs":{"brief":"Creates a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Creates a hook for when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."},{"tag":"error","text":"Invalid or corrupt Handle or invalid callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarFlags":{"symbol":{"name":"GetConVarFlags","docStart":17823,"docEnd":18070,"docs":{"brief":"Returns the bitstring of flags on a console variable.","tags":[{"tag":"","text":"Returns the bitstring of flags on a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"A bitstring containing the FCVAR_* flags that are enabled."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SendConVarValue":{"symbol":{"name":"SendConVarValue","docStart":19789,"docEnd":20158,"docs":{"brief":"Replicates a convar value to a specific client. This does not change the actual convar value.","tags":[{"tag":"","text":"Replicates a convar value to a specific client. This does not change the actual convar value."},{"tag":"param:client","text":"Client index"},{"tag":"param:convar","text":"ConVar handle"},{"tag":"param:value","text":"String value to send"},{"tag":"return","text":"True on success, false on failure"},{"tag":"error","text":"Invalid client index, client not in game, or client is fake"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UnhookConVarChange":{"symbol":{"name":"UnhookConVarChange","docStart":11356,"docEnd":11646,"docs":{"brief":"Removes a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Removes a hook for when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."},{"tag":"error","text":"Invalid or corrupt Handle, invalid callback function, or no active hook on convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarString":{"symbol":{"name":"GetConVarString","docStart":15245,"docEnd":15532,"docs":{"brief":"Retrieves the string value of a console variable.","tags":[{"tag":"","text":"Retrieves the string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindConVar":{"symbol":{"name":"FindConVar","docStart":3794,"docEnd":3954,"docs":{"brief":"Searches for a console variable.","tags":[{"tag":"","text":"Searches for a console variable."},{"tag":"param:name","text":"Name of convar to find."},{"tag":"return","text":"A ConVar object if found; null otherwise."}]},"kind":"native","returnType":"ConVar","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsValidConVarChar":{"symbol":{"name":"IsValidConVarChar","docStart":22238,"docEnd":22431,"docs":{"brief":"Returns true if the supplied character is valid in a ConVar name.","tags":[{"tag":"","text":"Returns true if the supplied character is valid in a ConVar name."},{"tag":"param:c","text":"Character to validate."},{"tag":"return","text":"True is valid for ConVars, false otherwise"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"c","decl":"int c","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarString":{"symbol":{"name":"SetConVarString","docStart":15607,"docEnd":16414,"docs":{"brief":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New string value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarBounds":{"symbol":{"name":"GetConVarBounds","docStart":18407,"docEnd":18843,"docs":{"brief":"Retrieves the specified bound of a console variable.","tags":[{"tag":"","text":"Retrieves the specified bound of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:type","text":"Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper."},{"tag":"param:value","text":"By-reference cell to store the specified floating point bound value."},{"tag":"return","text":"True if the convar has the specified bound set, false otherwise."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type","default":null},{"type":"float&","name":"value","decl":"float& value","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarFloat":{"symbol":{"name":"GetConVarFloat","docStart":14047,"docEnd":14277,"docs":{"brief":"Returns the floating point value of a console variable.","tags":[{"tag":"","text":"Returns the floating point value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The floating point value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarBounds":{"symbol":{"name":"SetConVarBounds","docStart":18922,"docEnd":19347,"docs":{"brief":"Sets the specified bound of a console variable.","tags":[{"tag":"","text":"Sets the specified bound of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:type","text":"Type of bound to set, ConVarBound_Lower or ConVarBound_Upper"},{"tag":"param:set","text":"If set to true, convar will use specified bound. If false, bound will be removed."},{"tag":"param:value","text":"Floating point value to use as the specified bound."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type","default":null},{"type":"bool","name":"set","decl":"bool set","default":null},{"type":"float","name":"value","decl":"float value","default":"0.000000"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarDefault":{"symbol":{"name":"GetConVarDefault","docStart":17374,"docEnd":17748,"docs":{"brief":"Retrieves the default string value of a console variable.","tags":[{"tag":"","text":"Retrieves the default string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the default value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarBool":{"symbol":{"name":"GetConVarBool","docStart":11719,"docEnd":11935,"docs":{"brief":"Returns the boolean value of a console variable.","tags":[{"tag":"","text":"Returns the boolean value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The boolean value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ResetConVar":{"symbol":{"name":"ResetConVar","docStart":16521,"docEnd":17291,"docs":{"brief":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateConVar":{"symbol":{"name":"CreateConVar","docStart":2638,"docEnd":3601,"docs":{"brief":"Creates a new console variable.","tags":[{"tag":"","text":"Creates a new console variable."},{"tag":"param:name","text":"Name of new convar."},{"tag":"param:defaultValue","text":"String containing the default value of new convar."},{"tag":"param:description","text":"Optional description of the convar."},{"tag":"param:flags","text":"Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details."},{"tag":"param:hasMin","text":"Optional boolean that determines if the convar has a minimum value."},{"tag":"param:min","text":"Minimum floating point value that the convar can have if hasMin is true."},{"tag":"param:hasMax","text":"Optional boolean that determines if the convar has a maximum value."},{"tag":"param:max","text":"Maximum floating point value that the convar can have if hasMax is true."},{"tag":"return","text":"A handle to the newly created convar. If the convar already exists, a handle to it will still be returned."},{"tag":"error","text":"Convar name is blank or is the same as an existing console command."}]},"kind":"native","returnType":"ConVar","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"defaultValue","decl":"const char[] defaultValue","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"bool","name":"hasMin","decl":"bool hasMin","default":"false"},{"type":"float","name":"min","decl":"float min","default":"0.000000"},{"type":"bool","name":"hasMax","decl":"bool hasMax","default":"false"},{"type":"float","name":"max","decl":"float max","default":"0.000000"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"QueryClientConVar":{"symbol":{"name":"QueryClientConVar","docStart":21625,"docEnd":22120,"docs":{"brief":"Starts a query to retrieve the value of a client's console variable.","tags":[{"tag":"","text":"Starts a query to retrieve the value of a client's console variable."},{"tag":"param:client","text":"Player index."},{"tag":"param:cvarName","text":"Name of client convar to query."},{"tag":"param:callback","text":"A function to use as a callback when the query has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."},{"tag":"return","text":"A cookie that uniquely identifies the query.\nReturns QUERYCOOKIE_FAILED on failure, such as when used on a bot."}]},"kind":"native","returnType":"QueryCookie","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"cvarName","decl":"const char[] cvarName","default":null},{"type":"ConVarQueryFinished","name":"callback","decl":"ConVarQueryFinished callback","default":null},{"type":"any","name":"value","decl":"any value","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"ConVar":{"symbol":{"name":"ConVar","docStart":4001,"docEnd":4067,"docs":{"brief":"A ConVar is a configurable, named setting in the srcds console.","tags":[{"tag":"","text":"A ConVar is a configurable, named setting in the srcds console."}]},"parent":"Handle","methods":[{"name":"SetBool","docStart":4652,"docEnd":5346,"docs":{"brief":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New boolean value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"value","decl":"bool value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},{"name":"SetInt","docStart":5431,"docEnd":6125,"docs":{"brief":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New integer value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"value","decl":"int value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},{"name":"SetFloat","docStart":6208,"docEnd":6916,"docs":{"brief":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New floating point value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"value","decl":"float value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},{"name":"GetString","docStart":7003,"docEnd":7221,"docs":{"brief":"Retrieves the string value of a console variable.","tags":[{"tag":"","text":"Retrieves the string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"SetString","docStart":7284,"docEnd":7982,"docs":{"brief":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New string value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},{"name":"RestoreDefault","docStart":8077,"docEnd":8740,"docs":{"brief":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"replicate","decl":"bool replicate","default":"false"},{"type":"bool","name":"notify","decl":"bool notify","default":"false"}]},{"name":"GetDefault","docStart":8820,"docEnd":9084,"docs":{"brief":"Retrieves the default string value of a console variable.","tags":[{"tag":"","text":"Retrieves the default string value of a console variable."},{"tag":"param:value","text":"Buffer to store the default value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetBounds","docStart":9147,"docEnd":9473,"docs":{"brief":"Retrieves the specified bound of a console variable.","tags":[{"tag":"","text":"Retrieves the specified bound of a console variable."},{"tag":"param:type","text":"Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper."},{"tag":"param:value","text":"By-reference cell to store the specified floating point bound value."},{"tag":"return","text":"True if the convar has the specified bound set, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type","default":null},{"type":"float&","name":"value","decl":"float& value","default":null}]},{"name":"SetBounds","docStart":9540,"docEnd":9855,"docs":{"brief":"Sets the specified bound of a console variable.","tags":[{"tag":"","text":"Sets the specified bound of a console variable."},{"tag":"param:type","text":"Type of bound to set, ConVarBound_Lower or ConVarBound_Upper"},{"tag":"param:set","text":"If set to true, convar will use specified bound. If false, bound will be removed."},{"tag":"param:value","text":"Floating point value to use as the specified bound."}]},"kind":"native","returnType":"void","arguments":[{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type","default":null},{"type":"bool","name":"set","decl":"bool set","default":null},{"type":"float","name":"value","decl":"float value","default":"0.000000"}]},{"name":"GetName","docStart":9935,"docEnd":10100,"docs":{"brief":"Retrieves the name of a console variable.","tags":[{"tag":"","text":"Retrieves the name of a console variable."},{"tag":"param:name","text":"Buffer to store the name of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"ReplicateToClient","docStart":10160,"docEnd":10476,"docs":{"brief":"Replicates a convar value to a specific client. This does not change the actual convar value.","tags":[{"tag":"","text":"Replicates a convar value to a specific client. This does not change the actual convar value."},{"tag":"param:client","text":"Client index"},{"tag":"param:value","text":"String value to send"},{"tag":"return","text":"True on success, false on failure"},{"tag":"error","text":"Invalid client index, client not in game, or client is fake"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"AddChangeHook","docStart":10550,"docEnd":10677,"docs":{"brief":"Creates a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Creates a hook for when a console variable's value is changed."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."}]},"kind":"native","returnType":"void","arguments":[{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback","default":null}]},{"name":"RemoveChangeHook","docStart":10739,"docEnd":10956,"docs":{"brief":"Removes a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Removes a hook for when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."},{"tag":"error","text":"No active hook on convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback","default":null}]}],"properties":[{"name":"BoolValue","docStart":4097,"docEnd":4149,"docs":{"brief":"Retrieves or sets a boolean value for the convar.","tags":[{"tag":"","text":"Retrieves or sets a boolean value for the convar."}]},"type":"bool","getter":true,"setter":true},{"name":"IntValue","docStart":4234,"docEnd":4287,"docs":{"brief":"Retrieves or sets an integer value for the convar.","tags":[{"tag":"","text":"Retrieves or sets an integer value for the convar."}]},"type":"int","getter":true,"setter":true},{"name":"FloatValue","docStart":4373,"docEnd":4423,"docs":{"brief":"Retrieves or sets a float value for the convar.","tags":[{"tag":"","text":"Retrieves or sets a float value for the convar."}]},"type":"float","getter":true,"setter":true},{"name":"Flags","docStart":4515,"docEnd":4569,"docs":{"brief":"Gets or sets the flag bits (FCVAR_*) on the convar.","tags":[{"tag":"","text":"Gets or sets the flag bits (FCVAR_*) on the convar."}]},"type":"int","getter":true,"setter":true}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_convars_included":{"symbol":{"name":"_convars_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"e030bb44519af1a8f5d60564494c178f144746d8","count":5554,"time":1440008853},"last_updated":{"hash":"e030bb44519af1a8f5d60564494c178f144746d8","count":5554,"time":1440008853}}},"enums":{"ConVarQueryResult":{"symbol":{"name":"ConVarQueryResult","docStart":1759,"docEnd":1807,"docs":{"brief":"Console variable query result values.","tags":[{"tag":"","text":"Console variable query result values."}]},"entries":[{"name":"ConVarQuery_Okay","docStart":1870,"docEnd":1925,"docs":{"brief":"Retrieval of client convar value was successful. */","tags":[{"tag":"","text":"Retrieval of client convar value was successful. */"}]},"value":"0"},{"name":"ConVarQuery_NotFound","docStart":1963,"docEnd":1998,"docs":{"brief":"Client convar was not found. */","tags":[{"tag":"","text":"Client convar was not found. */"}]},"value":null},{"name":"ConVarQuery_NotValid","docStart":2036,"docEnd":2114,"docs":{"brief":"A console command with the same name was found, but there is no convar. */","tags":[{"tag":"","text":"A console command with the same name was found, but there is no convar. */"}]},"value":null},{"name":"ConVarQuery_Protected","docStart":2152,"docEnd":2242,"docs":{"brief":"Client convar was found, but it is protected. The server cannot retrieve its value. */","tags":[{"tag":"","text":"Client convar was found, but it is protected. The server cannot retrieve its value. */"}]},"value":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ConVarBounds":{"symbol":{"name":"ConVarBounds","docStart":1619,"docEnd":1691,"docs":{"brief":"Console variable bound values used with Get/SetConVarBounds()","tags":[{"tag":"","text":"Console variable bound values used with Get/SetConVarBounds()"}]},"entries":[{"name":"ConVarBound_Upper","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"ConVarBound_Lower","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"e030bb44519af1a8f5d60564494c178f144746d8","count":5554,"time":1440008853}}},"typesets":{"ConVarQueryFinished":{"symbol":{"name":"ConVarQueryFinished","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":20268,"docEnd":20850,"docs":{"brief":"Called when a query to retrieve a client's console variable has finished.","tags":[{"tag":"","text":"Called when a query to retrieve a client's console variable has finished."},{"tag":"param:cookie","text":"Unique identifier of query."},{"tag":"param:client","text":"Player index."},{"tag":"param:result","text":"Result of query that tells one whether or not query was successful.\nSee ConVarQueryResult enum for more details."},{"tag":"param:convarName","text":"Name of client convar that was queried."},{"tag":"param:convarValue","text":"Value of client convar that was queried if successful. This will be \"\" if it was not."},{"tag":"param:value","text":"Value that was passed when query was started."}]},"type":"function void(QueryCookie cookie, int client, ConVarQueryResult result, const char[] cvarName, const char[] cvarValue, any value)","parsedSignature":{"returnType":"void","arguments":[{"type":"QueryCookie","name":"cookie","decl":"QueryCookie cookie","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"ConVarQueryResult","name":"result","decl":"ConVarQueryResult result","default":null},{"type":"const char[]","name":"cvarName","decl":"const char[] cvarName","default":null},{"type":"const char[]","name":"cvarValue","decl":"const char[] cvarValue","default":null},{"type":"any","name":"value","decl":"any value","default":null}]}},{"docStart":20987,"docEnd":21498,"docs":{"brief":"Called when a query to retrieve a client's console variable has finished.","tags":[{"tag":"","text":"Called when a query to retrieve a client's console variable has finished."},{"tag":"param:cookie","text":"Unique identifier of query."},{"tag":"param:client","text":"Player index."},{"tag":"param:result","text":"Result of query that tells one whether or not query was successful.\nSee ConVarQueryResult enum for more details."},{"tag":"param:convarName","text":"Name of client convar that was queried."},{"tag":"param:convarValue","text":"Value of client convar that was queried if successful. This will be \"\" if it was not."}]},"type":"function void(QueryCookie cookie, int client, ConVarQueryResult result, const char[] cvarName, const char[] cvarValue)","parsedSignature":{"returnType":"void","arguments":[{"type":"QueryCookie","name":"cookie","decl":"QueryCookie cookie","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"ConVarQueryResult","name":"result","decl":"ConVarQueryResult result","default":null},{"type":"const char[]","name":"cvarName","decl":"const char[] cvarName","default":null},{"type":"const char[]","name":"cvarValue","decl":"const char[] cvarValue","default":null}]}}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"ConVarChanged":{"symbol":{"name":"ConVarChanged","docStart":2247,"docEnd":2535,"docs":{"brief":"Called when a console variable's value is changed.","tags":[{"tag":"","text":"Called when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar that was changed."},{"tag":"param:oldValue","text":"String containing the value of the convar before it was changed."},{"tag":"param:newValue","text":"String containing the new value of the convar."}]},"type":"function void(ConVar convar, const char[] oldValue, const char[] newValue)","parsedSignature":{"returnType":"void","arguments":[{"type":"ConVar","name":"convar","decl":"ConVar convar","default":null},{"type":"const char[]","name":"oldValue","decl":"const char[] oldValue","default":null},{"type":"const char[]","name":"newValue","decl":"const char[] newValue","default":null}]}},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"adt_array":{"functions":{"ByteCountToCells":{"symbol":{"name":"ByteCountToCells","docStart":1659,"docEnd":1920,"docs":{"brief":"Given a maximum string size (including the null terminator),\nreturns the number of cells required to fit that string.","tags":[{"tag":"","text":"Given a maximum string size (including the null terminator),\nreturns the number of cells required to fit that string."},{"tag":"param:size","text":"Number of bytes."},{"tag":"return","text":"Minimum number of cells required to fit the byte count."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ResizeArray":{"symbol":{"name":"ResizeArray","docStart":11301,"docEnd":11652,"docs":{"brief":"Resizes an array.  If the size is smaller than the current size,\nthe array is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized.","tags":[{"tag":"","text":"Resizes an array.  If the size is smaller than the current size,\nthe array is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:newsize","text":"New size."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"newsize","decl":"int newsize","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PushArrayArray":{"symbol":{"name":"PushArrayArray","docStart":12684,"docEnd":13307,"docs":{"brief":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually.","tags":[{"tag":"","text":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:values","text":"Block of values to copy."},{"tag":"param:size","text":"If not set, the number of elements copied from the array\nwill be equal to the blocksize.  If set higher than the\nblocksize, the operation will be truncated."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SwapArrayItems":{"symbol":{"name":"SwapArrayItems","docStart":17222,"docEnd":17442,"docs":{"brief":"Swaps two items in the array.","tags":[{"tag":"","text":"Swaps two items in the array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index1","text":"First index."},{"tag":"param:index2","text":"Second index."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index1","decl":"int index1","default":null},{"type":"int","name":"index2","decl":"int index2","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetArrayArray":{"symbol":{"name":"SetArrayArray","docStart":15800,"docEnd":16233,"docs":{"brief":"Sets an array of cells in an array.","tags":[{"tag":"","text":"Sets an array of cells in an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:values","text":"Array to copy."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ClearArray":{"symbol":{"name":"ClearArray","docStart":10652,"docEnd":10817,"docs":{"brief":"Clears an array of all entries.  This is the same as ResizeArray(0).","tags":[{"tag":"","text":"Clears an array of all entries.  This is the same as ResizeArray(0)."},{"tag":"param:array","text":"Array Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ShiftArrayUp":{"symbol":{"name":"ShiftArrayUp","docStart":16322,"docEnd":16702,"docs":{"brief":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined.","tags":[{"tag":"","text":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array to shift up from."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetArrayCell":{"symbol":{"name":"GetArrayCell","docStart":13386,"docEnd":13830,"docs":{"brief":"Retrieves a cell value from an array.","tags":[{"tag":"","text":"Retrieves a cell value from an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:block","text":"Optionally specify which block to read from\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally read as a byte instead of a cell."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid Handle, invalid index, or invalid block."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetArrayString":{"symbol":{"name":"SetArrayString","docStart":15432,"docEnd":15723,"docs":{"brief":"Sets a string value in an array.","tags":[{"tag":"","text":"Sets a string value in an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"String value to set."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetArrayString":{"symbol":{"name":"GetArrayString","docStart":13917,"docEnd":14266,"docs":{"brief":"Retrieves a string value from an array.","tags":[{"tag":"","text":"Retrieves a string value from an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveFromArray":{"symbol":{"name":"RemoveFromArray","docStart":16758,"docEnd":17163,"docs":{"brief":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.","tags":[{"tag":"","text":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array to remove at."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetArrayArray":{"symbol":{"name":"GetArrayArray","docStart":14353,"docEnd":14808,"docs":{"brief":"Retrieves an array of cells from an array.","tags":[{"tag":"","text":"Retrieves an array of cells from an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to store the array in."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindStringInArray":{"symbol":{"name":"FindStringInArray","docStart":17513,"docEnd":17834,"docs":{"brief":"Returns the index for the first occurrence of the provided string. If the string\ncannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided string. If the string\ncannot be located, -1 will be returned."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:item","text":"String to search for"},{"tag":"return","text":"Array index, or -1 on failure"},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const char[]","name":"item","decl":"const char[] item","default":null}]},"created":{"hash":"daaf961c07fe7f8161ae7c7919a0d848c31c1d4a","count":1665,"time":1194651965},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindValueInArray":{"symbol":{"name":"FindValueInArray","docStart":17902,"docEnd":18298,"docs":{"brief":"Returns the index for the first occurrence of the provided value. If the value\ncannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided value. If the value\ncannot be located, -1 will be returned."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:item","text":"Value to search for"},{"tag":"param:block","text":"Optionally which block to search in"},{"tag":"return","text":"Array index, or -1 on failure"},{"tag":"error","text":"Invalid Handle or invalid block"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"any","name":"item","decl":"any item","default":null},{"type":"int","name":"block","decl":"int block","default":"0"}]},"created":{"hash":"daaf961c07fe7f8161ae7c7919a0d848c31c1d4a","count":1665,"time":1194651965},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetArrayCell":{"symbol":{"name":"SetArrayCell","docStart":14891,"docEnd":15333,"docs":{"brief":"Sets a cell value in an array.","tags":[{"tag":"","text":"Sets a cell value in an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Cell value to set."},{"tag":"param:block","text":"Optionally specify which block to write to\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally set as a byte instead of a cell."},{"tag":"error","text":"Invalid Handle, invalid index, or invalid block."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PushArrayString":{"symbol":{"name":"PushArrayString","docStart":12336,"docEnd":12617,"docs":{"brief":"Pushes a string onto the end of an array, truncating it\nif it is too big.","tags":[{"tag":"","text":"Pushes a string onto the end of an array, truncating it\nif it is too big."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:value","text":"String to push."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetArrayBlockSize":{"symbol":{"name":"GetArrayBlockSize","docStart":18369,"docEnd":18567,"docs":{"brief":"Returns the blocksize the array was created with.","tags":[{"tag":"","text":"Returns the blocksize the array was created with."},{"tag":"param:array","text":"Array Handle."},{"tag":"return","text":"The blocksize of the array."},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},"created":{"hash":"86363dd3ecf27d57ad1bfe01d63fee68b435291a","count":6053,"time":1486668374},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateArray":{"symbol":{"name":"CreateArray","docStart":9788,"docEnd":10583,"docs":{"brief":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation.","tags":[{"tag":"","text":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation."},{"tag":"param:blocksize","text":"The number of cells each member of the array can\nhold.  For example, 32 cells is equivalent to:\nnew Array[X][32]"},{"tag":"param:startsize","text":"Initial size of the array.  Note that data will\nNOT be auto-initialized."},{"tag":"return","text":"New Handle to the array object."}]},"kind":"native","returnType":"ArrayList","arguments":[{"type":"int","name":"blocksize","decl":"int blocksize","default":"1"},{"type":"int","name":"startsize","decl":"int startsize","default":"0"}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsStringInArray":{"symbol":{"name":"IsStringInArray","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const char[]","name":"item","decl":"const char[] item","default":null}]},"created":{"hash":"d27a768d9704f9a37bcdc1b85cca3b466576c873","count":1452,"time":1190482999},"last_updated":{"hash":"daaf961c07fe7f8161ae7c7919a0d848c31c1d4a","count":1665,"time":1194651965}},"GetArraySize":{"symbol":{"name":"GetArraySize","docStart":11709,"docEnd":11887,"docs":{"brief":"Returns the array size.","tags":[{"tag":"","text":"Returns the array size."},{"tag":"param:array","text":"Array Handle."},{"tag":"return","text":"Number of elements in the array."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CloneArray":{"symbol":{"name":"CloneArray","docStart":10860,"docEnd":11256,"docs":{"brief":"Clones an array, returning a new handle with the same size and data. This should NOT\nbe confused with CloneHandle. This is a completely new handle with the same data but\nno relation to the original. You MUST close it.","tags":[{"tag":"","text":"Clones an array, returning a new handle with the same size and data. This should NOT\nbe confused with CloneHandle. This is a completely new handle with the same data but\nno relation to the original. You MUST close it."},{"tag":"param:array","text":"Array handle to be cloned"},{"tag":"return","text":"New handle to the cloned array object"},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},"created":{"hash":"daaf961c07fe7f8161ae7c7919a0d848c31c1d4a","count":1665,"time":1194651965},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PushArrayCell":{"symbol":{"name":"PushArrayCell","docStart":11931,"docEnd":12280,"docs":{"brief":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize\ngreater than 1.","tags":[{"tag":"","text":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize\ngreater than 1."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"ArrayList":{"symbol":{"name":"ArrayList","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"ArrayList","docStart":2063,"docEnd":2861,"docs":{"brief":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation.","tags":[{"tag":"","text":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation."},{"tag":"param:blocksize","text":"The number of cells each member of the array can\nhold.  For example, 32 cells is equivalent to:\nnew Array[X][32]"},{"tag":"param:startsize","text":"Initial size of the array.  Note that data will\nNOT be auto-initialized."},{"tag":"return","text":"New Handle to the array object."}]},"kind":"native","returnType":"ArrayList","arguments":[{"type":"int","name":"blocksize","decl":"int blocksize","default":"1"},{"type":"int","name":"startsize","decl":"int startsize","default":"0"}]},{"name":"Clear","docStart":2927,"docEnd":2993,"docs":{"brief":"Clears an array of all entries.  This is the same as Resize(0).","tags":[{"tag":"","text":"Clears an array of all entries.  This is the same as Resize(0)."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Clone","docStart":3028,"docEnd":3353,"docs":{"brief":"Clones an array, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should\nclosed when no longer needed.","tags":[{"tag":"","text":"Clones an array, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should\nclosed when no longer needed."},{"tag":"return","text":"New handle to the cloned array object"}]},"kind":"native","returnType":"ArrayList","arguments":[]},{"name":"Resize","docStart":3393,"docEnd":3641,"docs":{"brief":"Resizes an array.  If the size is smaller than the current size, the\narray is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized.","tags":[{"tag":"","text":"Resizes an array.  If the size is smaller than the current size, the\narray is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized."},{"tag":"param:newsize","text":"New size."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"newsize","decl":"int newsize","default":null}]},{"name":"Push","docStart":3688,"docEnd":3995,"docs":{"brief":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize greater\nthan 1.","tags":[{"tag":"","text":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize greater\nthan 1."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"PushString","docStart":4037,"docEnd":4210,"docs":{"brief":"Pushes a string onto the end of an array, truncating it if it is too big.","tags":[{"tag":"","text":"Pushes a string onto the end of an array, truncating it if it is too big."},{"tag":"param:value","text":"String to push."},{"tag":"return","text":"Index of the new entry."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushArray","docStart":4267,"docEnd":4791,"docs":{"brief":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually.","tags":[{"tag":"","text":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually."},{"tag":"param:values","text":"Block of values to copy."},{"tag":"param:size","text":"If not set, the number of elements copied from the array\nwill be equal to the blocksize.  If set higher than the\nblocksize, the operation will be truncated."},{"tag":"return","text":"Index of the new entry."}]},"kind":"native","returnType":"int","arguments":[{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"Get","docStart":4860,"docEnd":5228,"docs":{"brief":"Retrieves a cell value from an array.","tags":[{"tag":"","text":"Retrieves a cell value from an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:block","text":"Optionally specify which block to read from\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally read as a byte instead of a cell."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"GetString","docStart":5301,"docEnd":5589,"docs":{"brief":"Retrieves a string value from an array.","tags":[{"tag":"","text":"Retrieves a string value from an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetArray","docStart":5666,"docEnd":6061,"docs":{"brief":"Retrieves an array of cells from an array.","tags":[{"tag":"","text":"Retrieves an array of cells from an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to store the array in."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"Set","docStart":6134,"docEnd":6518,"docs":{"brief":"Sets a cell value in an array.","tags":[{"tag":"","text":"Sets a cell value in an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Cell value to set."},{"tag":"param:block","text":"Optionally specify which block to write to\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally set as a byte instead of a cell."},{"tag":"error","text":"Invalid index, or invalid block."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"SetString","docStart":6603,"docEnd":6832,"docs":{"brief":"Sets a string value in an array.","tags":[{"tag":"","text":"Sets a string value in an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"String value to set."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetArray","docStart":6900,"docEnd":7273,"docs":{"brief":"Sets an array of cells in an array.","tags":[{"tag":"","text":"Sets an array of cells in an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:values","text":"Array to copy."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"ShiftUp","docStart":7353,"docEnd":7671,"docs":{"brief":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined.","tags":[{"tag":"","text":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined."},{"tag":"param:index","text":"Index in the array to shift up from."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"Erase","docStart":7717,"docEnd":8060,"docs":{"brief":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.","tags":[{"tag":"","text":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged."},{"tag":"param:index","text":"Index in the array to remove at."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SwapAt","docStart":8104,"docEnd":8261,"docs":{"brief":"Swaps two items in the array.","tags":[{"tag":"","text":"Swaps two items in the array."},{"tag":"param:index1","text":"First index."},{"tag":"param:index2","text":"Second index."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index1","decl":"int index1","default":null},{"type":"int","name":"index2","decl":"int index2","default":null}]},{"name":"FindString","docStart":8319,"docEnd":8555,"docs":{"brief":"Returns the index for the first occurrence of the provided string. If\nthe string cannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided string. If\nthe string cannot be located, -1 will be returned."},{"tag":"param:item","text":"String to search for"},{"tag":"return","text":"Array index, or -1 on failure"}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"item","decl":"const char[] item","default":null}]},{"name":"FindValue","docStart":8611,"docEnd":8952,"docs":{"brief":"Returns the index for the first occurrence of the provided value. If the\nvalue cannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided value. If the\nvalue cannot be located, -1 will be returned."},{"tag":"param:item","text":"Value to search for"},{"tag":"param:block","text":"Optionally which block to search in"},{"tag":"return","text":"Array index, or -1 on failure"},{"tag":"error","text":"Invalid block index"}]},"kind":"native","returnType":"int","arguments":[{"type":"any","name":"item","decl":"any item","default":null},{"type":"int","name":"block","decl":"int block","default":"0"}]},{"name":"Sort","docStart":9011,"docEnd":9210,"docs":{"brief":"Sort an ADT Array. Specify the type as Integer, Float, or String.","tags":[{"tag":"","text":"Sort an ADT Array. Specify the type as Integer, Float, or String."},{"tag":"param:order","text":"Sort order to use, same as other sorts."},{"tag":"param:type","text":"Data type stored in the ADT Array"}]},"kind":"native","returnType":"void","arguments":[{"type":"SortOrder","name":"order","decl":"SortOrder order","default":null},{"type":"SortType","name":"type","decl":"SortType type","default":null}]},{"name":"SortCustom","docStart":9274,"docEnd":9486,"docs":{"brief":"Custom sorts an ADT Array. You must pass in a comparison function.","tags":[{"tag":"","text":"Custom sorts an ADT Array. You must pass in a comparison function."},{"tag":"param:sortfunc","text":"Sort comparison function to use"},{"tag":"param:hndl","text":"Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"SortFuncADTArray","name":"sortfunc","decl":"SortFuncADTArray sortfunc","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]}],"properties":[{"name":"Length","docStart":9580,"docEnd":9614,"docs":{"brief":"Retrieve the size of the array.","tags":[{"tag":"","text":"Retrieve the size of the array."}]},"type":"int","getter":true,"setter":false},{"name":"BlockSize","docStart":9672,"docEnd":9725,"docs":{"brief":"Retrieve the blocksize the array was created with.","tags":[{"tag":"","text":"Retrieve the blocksize the array was created with."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"919a31df57d41a44e26301b57c068ae256596c2c","count":4985,"time":1415493093},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_adt_array_included":{"symbol":{"name":"_adt_array_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908}}},"enums":{},"typesets":{},"typedefs":{}},"banning":{"functions":{"OnRemoveBan":{"symbol":{"name":"OnRemoveBan","docStart":3656,"docEnd":4078,"docs":{"brief":"Called for calls to RemoveBan() with a non-empty command.","tags":[{"tag":"","text":"Called for calls to RemoveBan() with a non-empty command."},{"tag":"param:identity","text":"Identity string being banned (authstring or ip)."},{"tag":"param:flags","text":"Ban flags (only IP or AUTHID are valid here)."},{"tag":"param:command","text":"Command string to identify the ban source."},{"tag":"param:source","text":"Source value passed via BanIdentity()."},{"tag":"return","text":"Plugin_Handled to block the actual unbanning."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"any","name":"source","decl":"any source","default":null}]},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BanIdentity":{"symbol":{"name":"BanIdentity","docStart":5339,"docEnd":6024,"docs":{"brief":"Bans an identity (either an IP address or auth string).","tags":[{"tag":"","text":"Bans an identity (either an IP address or auth string)."},{"tag":"param:identity","text":"String to ban (ip or authstring)."},{"tag":"param:time","text":"Time to ban for (0 = permanent)."},{"tag":"param:flags","text":"Flags (only IP and AUTHID are valid flags here)."},{"tag":"param:reason","text":"Ban reason string."},{"tag":"param:command","text":"Command string to identify the source.  If this is left\nempty, then the OnBanIdentity forward will not be called."},{"tag":"param:source","text":"A source value that could be interpreted as a player\nindex of any sort (not actually checked by Core)."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":"\"\""},{"type":"any","name":"source","decl":"any source","default":"0"}]},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BanClient":{"symbol":{"name":"BanClient","docStart":4209,"docEnd":5135,"docs":{"brief":"Bans a client.","tags":[{"tag":"","text":"Bans a client."},{"tag":"param:client","text":"Client being banned."},{"tag":"param:time","text":"Time (in minutes) to ban (0 = permanent)."},{"tag":"param:flags","text":"Flags for controlling the ban mechanism.  If AUTHID\nis set and no AUTHID is available, the ban will fail\nunless AUTO is also flagged."},{"tag":"param:reason","text":"Reason to ban the client for."},{"tag":"param:kick_message","text":"Message to display to the user when kicking."},{"tag":"param:command","text":"Command string to identify the source.  If this is left\nempty, then the OnBanClient forward will not be called."},{"tag":"param:source","text":"A source value that could be interpreted as a player\nindex of any sort (not actually checked by Core)."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null},{"type":"const char[]","name":"kick_message","decl":"const char[] kick_message","default":"\"\""},{"type":"const char[]","name":"command","decl":"const char[] command","default":"\"\""},{"type":"any","name":"source","decl":"any source","default":"0"}]},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnBanClient":{"symbol":{"name":"OnBanClient","docStart":1972,"docEnd":2700,"docs":{"brief":"Called for calls to BanClient() with a non-empty command.","tags":[{"tag":"","text":"Called for calls to BanClient() with a non-empty command."},{"tag":"param:client","text":"Client being banned."},{"tag":"param:time","text":"Time the client is being banned for (0 = permanent)."},{"tag":"param:flags","text":"One if AUTHID or IP will be enabled.  If AUTO is also\nenabled, it means Core autodetected which to use."},{"tag":"param:reason","text":"Reason passed via BanClient()."},{"tag":"param:kick_message","text":"Kick message passed via BanClient()."},{"tag":"param:command","text":"Command string to identify the ban source."},{"tag":"param:source","text":"Source value passed via BanClient()."},{"tag":"return","text":"Plugin_Handled to block the actual server banning.\nKicking will still occur."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null},{"type":"const char[]","name":"kick_message","decl":"const char[] kick_message","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"any","name":"source","decl":"any source","default":null}]},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveBan":{"symbol":{"name":"RemoveBan","docStart":6196,"docEnd":6788,"docs":{"brief":"Removes a ban that was written to the server (either in memory or on disk).","tags":[{"tag":"","text":"Removes a ban that was written to the server (either in memory or on disk)."},{"tag":"param:identity","text":"String to unban (ip or authstring)."},{"tag":"param:flags","text":"Flags (only IP and AUTHID are valid flags here)."},{"tag":"param:command","text":"Command string to identify the source.  If this is left\nempty, then OnRemoveBan will not be called."},{"tag":"param:source","text":"A source value that could be interpreted as a player\nindex of any sort (not actually checked by Core)."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":"\"\""},{"type":"any","name":"source","decl":"any source","default":"0"}]},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnBanIdentity":{"symbol":{"name":"OnBanIdentity","docStart":2912,"docEnd":3477,"docs":{"brief":"Called for calls to BanIdentity() with a non-empty command.","tags":[{"tag":"","text":"Called for calls to BanIdentity() with a non-empty command."},{"tag":"param:identity","text":"Identity string being banned (authstring or ip)."},{"tag":"param:time","text":"Time the client is being banned for (0 = permanent)."},{"tag":"param:flags","text":"Ban flags (only IP or AUTHID are valid here)."},{"tag":"param:reason","text":"Reason passed via BanIdentity()."},{"tag":"param:command","text":"Command string to identify the ban source."},{"tag":"param:source","text":"Source value passed via BanIdentity()."},{"tag":"return","text":"Plugin_Handled to block the actual server banning."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"any","name":"source","decl":"any source","default":null}]},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"BANFLAG_IP":{"symbol":{"name":"BANFLAG_IP","docStart":1766,"docEnd":1798,"docs":{"brief":"Always ban by IP address","tags":[{"tag":"","text":"Always ban by IP address"}]},"value":"(1<<1)"},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BANFLAG_AUTO":{"symbol":{"name":"BANFLAG_AUTO","docStart":1676,"docEnd":1728,"docs":{"brief":"Auto-detects whether to ban by steamid or IP","tags":[{"tag":"","text":"Auto-detects whether to ban by steamid or IP"}]},"value":"(1<<0)"},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BANFLAG_AUTHID":{"symbol":{"name":"BANFLAG_AUTHID","docStart":1836,"docEnd":1898,"docs":{"brief":"Always ban by authstring (for BanIdentity) if possible","tags":[{"tag":"","text":"Always ban by authstring (for BanIdentity) if possible"}]},"value":"(1<<2)"},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_banning_included":{"symbol":{"name":"_banning_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870}},"BANFLAG_NOKICK":{"symbol":{"name":"BANFLAG_NOKICK","docStart":1936,"docEnd":1968,"docs":{"brief":"Does not kick the client","tags":[{"tag":"","text":"Does not kick the client"}]},"value":"(1<<3)"},"created":{"hash":"74b23aebfee6560d4075922e0a3584eca176f044","count":1424,"time":1189735870},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{},"typesets":{},"typedefs":{}},"menus":{"functions":{"GetClientMenu":{"symbol":{"name":"GetClientMenu","docStart":36466,"docEnd":36754,"docs":{"brief":"Returns whether a client is viewing a menu.","tags":[{"tag":"","text":"Returns whether a client is viewing a menu."},{"tag":"param:client","text":"Client index."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"A MenuSource value."},{"tag":"error","text":"Invalid Handle other than null."}]},"kind":"native","returnType":"MenuSource","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"null"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuTitle":{"symbol":{"name":"GetMenuTitle","docStart":26376,"docEnd":26660,"docs":{"brief":"Returns the text of a menu's title.","tags":[{"tag":"","text":"Returns the text of a menu's title."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:buffer","text":"Buffer to store title."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"Number of bytes written."},{"tag":"error","text":"Invalid Handle/"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"InternalShowMenu":{"symbol":{"name":"InternalShowMenu","docStart":42462,"docEnd":43354,"docs":{"brief":"This function is provided for legacy code only.  Some older plugins may use\nnetwork messages instead of the panel API.  This function wraps the panel\nAPI for eased portability into the SourceMod menu system.\n\nThis function is only usable with the Radio Menu style.  You do not need to\nsplit up your menu into multiple packets; SourceMod will break the string\nup internally.","tags":[{"tag":"","text":"This function is provided for legacy code only.  Some older plugins may use\nnetwork messages instead of the panel API.  This function wraps the panel\nAPI for eased portability into the SourceMod menu system.\n\nThis function is only usable with the Radio Menu style.  You do not need to\nsplit up your menu into multiple packets; SourceMod will break the string\nup internally."},{"tag":"param:client","text":"Client index."},{"tag":"param:str","text":"Full menu string as would be passed over the network."},{"tag":"param:time","text":"Time to hold the menu for."},{"tag":"param:keys","text":"Selectable key bitstring."},{"tag":"param:handler","text":"Optional handler function, with the same rules as\nSendPanelToClient()."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid client index, or radio menus not supported."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"keys","decl":"int keys","default":"-1"},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":"INVALID_FUNCTION"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"IsVoteInProgress":{"symbol":{"name":"IsVoteInProgress","docStart":30613,"docEnd":30794,"docs":{"brief":"Returns whether a vote is in progress.","tags":[{"tag":"","text":"Returns whether a vote is in progress."},{"tag":"param:menu","text":"Deprecated; no longer used."},{"tag":"return","text":"True if a vote is in progress, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":"INVALID_HANDLE"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuSelectionPosition":{"symbol":{"name":"GetMenuSelectionPosition","docStart":24218,"docEnd":24706,"docs":{"brief":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback.","tags":[{"tag":"","text":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback."},{"tag":"return","text":"First item number on the page the client was viewing\nbefore selecting the item in the callback.  This can\nbe used to re-display the menu from the original\nposition."},{"tag":"error","text":"Not called from inside a MenuAction_Select callback."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CheckVoteDelay":{"symbol":{"name":"CheckVoteDelay","docStart":33804,"docEnd":34058,"docs":{"brief":"Returns the number of seconds you should \"wait\" before displaying\na publicly invocable menu.  This number is the time remaining until\n(last_vote + sm_vote_delay).","tags":[{"tag":"","text":"Returns the number of seconds you should \"wait\" before displaying\na publicly invocable menu.  This number is the time remaining until\n(last_vote + sm_vote_delay)."},{"tag":"return","text":"Number of seconds to wait, or 0 for none."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuExitBackButton":{"symbol":{"name":"GetMenuExitBackButton","docStart":28057,"docEnd":28491,"docs":{"brief":"Returns whether or not the menu has an \"exit back\" button.  By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack.","tags":[{"tag":"","text":"Returns whether or not the menu has an \"exit back\" button.  By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"True if the menu has an exit back button; false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuStyle":{"symbol":{"name":"GetMenuStyle","docStart":25773,"docEnd":26015,"docs":{"brief":"Returns a menu's MenuStyle Handle.  The Handle\nis global and cannot be freed.","tags":[{"tag":"","text":"Returns a menu's MenuStyle Handle.  The Handle\nis global and cannot be freed."},{"tag":"param:menu","text":"Handle to the menu."},{"tag":"return","text":"Handle to the menu's draw style."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"RemoveAllMenuItems":{"symbol":{"name":"RemoveAllMenuItems","docStart":22516,"docEnd":22659,"docs":{"brief":"Removes all items from a menu.","tags":[{"tag":"","text":"Removes all items from a menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"error","text":"Invalid Handle or menu position."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuItem":{"symbol":{"name":"GetMenuItem","docStart":22709,"docEnd":23346,"docs":{"brief":"Retrieves information about a menu item.","tags":[{"tag":"","text":"Retrieves information about a menu item."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:infoBuf","text":"Info buffer."},{"tag":"param:infoBufLen","text":"Maximum length of the info buffer."},{"tag":"param:style","text":"By-reference variable to store drawing flags."},{"tag":"param:dispBuf","text":"Display buffer."},{"tag":"param:dispBufLen","text":"Maximum length of the display buffer."},{"tag":"param:client","text":"Client index. Must be specified if menu is per-client random shuffled, -1 to ignore."},{"tag":"return","text":"True on success, false if position is invalid."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"position","decl":"int position","default":null},{"type":"char[]","name":"infoBuf","decl":"char[] infoBuf","default":null},{"type":"int","name":"infoBufLen","decl":"int infoBufLen","default":null},{"type":"int&","name":"style","decl":"int& style","default":"0"},{"type":"char[]","name":"dispBuf","decl":"char[] dispBuf","default":"\"\""},{"type":"int","name":"dispBufLen","decl":"int dispBufLen","default":"0"},{"type":"int","name":"client","decl":"int client","default":"0"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"DrawPanelText":{"symbol":{"name":"DrawPanelText","docStart":38885,"docEnd":39279,"docs":{"brief":"Draws a raw line of text on a panel, without any markup other than a newline.","tags":[{"tag":"","text":"Draws a raw line of text on a panel, without any markup other than a newline."},{"tag":"param:panel","text":"A MenuPanel Handle, or INVALID_HANDLE if inside a\nMenuAction_DisplayItem callback."},{"tag":"param:text","text":"Display text to use."},{"tag":"return","text":"True on success, false if raw lines are not supported."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"const char[]","name":"text","decl":"const char[] text","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CreateMenuEx":{"symbol":{"name":"CreateMenuEx","docStart":35704,"docEnd":36343,"docs":{"brief":"Creates a Menu from a MenuStyle.  The Handle must be closed with\nCloseHandle().","tags":[{"tag":"","text":"Creates a Menu from a MenuStyle.  The Handle must be closed with\nCloseHandle()."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"param:handler","text":"Function which will receive menu actions."},{"tag":"param:actions","text":"Optionally set which actions to receive.  Select,\nCancel, and End will always be received regardless\nof whether they are set or not.  They are also\nthe only default actions."},{"tag":"return","text":"A new menu Handle."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"Menu","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"MenuAction","name":"actions","decl":"MenuAction actions","default":"MenuAction_Select | MenuAction_Cancel | MenuAction_End"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CancelClientMenu":{"symbol":{"name":"CancelClientMenu","docStart":36824,"docEnd":37240,"docs":{"brief":"Cancels a menu on a client.  This will only affect non-external menus.","tags":[{"tag":"","text":"Cancels a menu on a client.  This will only affect non-external menus."},{"tag":"param:client","text":"Client index."},{"tag":"param:autoIgnore","text":"If true, no menus can be re-drawn on the client during\nthe cancellation process."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"True if a menu was cancelled, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"autoIgnore","decl":"bool autoIgnore","default":"false"},{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"RedrawMenuItem":{"symbol":{"name":"RedrawMenuItem","docStart":42204,"docEnd":42411,"docs":{"brief":"Redraws menu text from inside a MenuAction_DisplayItem callback.","tags":[{"tag":"","text":""},{"tag":"brief","text":"Redraws menu text from inside a MenuAction_DisplayItem callback."},{"tag":"param:text","text":"Menu text to draw."},{"tag":"return","text":"Item position; must be returned via the callback."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetMenuExitBackButton":{"symbol":{"name":"SetMenuExitBackButton","docStart":28544,"docEnd":28962,"docs":{"brief":"Sets whether or not the menu has an \"exit back\" button. By default, menus\ndo not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack.","tags":[{"tag":"","text":"Sets whether or not the menu has an \"exit back\" button. By default, menus\ndo not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:button","text":"True to enable the button, false to remove it."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"bool","name":"button","decl":"bool button","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CancelMenu":{"symbol":{"name":"CancelMenu","docStart":29434,"docEnd":29884,"docs":{"brief":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled.","tags":[{"tag":"","text":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"AddMenuItem":{"symbol":{"name":"AddMenuItem","docStart":20814,"docEnd":21292,"docs":{"brief":"Appends a new item to the end of a menu.","tags":[{"tag":"","text":"Appends a new item to the end of a menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or item limit reached."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuPagination":{"symbol":{"name":"GetMenuPagination","docStart":25541,"docEnd":25725,"docs":{"brief":"Returns a menu's pagination setting.","tags":[{"tag":"","text":"Returns a menu's pagination setting."},{"tag":"param:menu","text":"Handle to the menu."},{"tag":"return","text":"Pagination setting."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuItemCount":{"symbol":{"name":"GetMenuItemCount","docStart":24750,"docEnd":24938,"docs":{"brief":"Returns the number of items in a menu.","tags":[{"tag":"","text":"Returns the number of items in a menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"Number of items in the menu."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CreatePanel":{"symbol":{"name":"CreatePanel","docStart":35256,"docEnd":35643,"docs":{"brief":"Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw\nmenus without any extra helper functions.  The Handle must be closed\nwith CloseHandle().","tags":[{"tag":"","text":"Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw\nmenus without any extra helper functions.  The Handle must be closed\nwith CloseHandle()."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"A new MenuPanel Handle."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"Panel","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMaxPageItems":{"symbol":{"name":"GetMaxPageItems","docStart":37340,"docEnd":37601,"docs":{"brief":"Returns a style's maximum items per page.","tags":[{"tag":"","text":"Returns a style's maximum items per page."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"Maximum items per page."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"DisplayMenu":{"symbol":{"name":"DisplayMenu","docStart":19949,"docEnd":20261,"docs":{"brief":"Displays a menu to a client.","tags":[{"tag":"","text":"Displays a menu to a client."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"InsertMenuItem":{"symbol":{"name":"InsertMenuItem","docStart":21425,"docEnd":22048,"docs":{"brief":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward.","tags":[{"tag":"","text":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"position","decl":"int position","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"VoteMenuToAll":{"symbol":{"name":"VoteMenuToAll","docStart":31876,"docEnd":32284,"docs":{"brief":"Sends a vote menu to all clients.  See VoteMenu() for more information.","tags":[{"tag":"","text":"Sends a vote menu to all clients.  See VoteMenu() for more information."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a vote session\nin progress."},{"tag":"error","text":"Invalid Handle."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"MenuSetClientMapping":{"symbol":{"name":"MenuSetClientMapping","docStart":23896,"docEnd":24129,"docs":{"brief":"Fills the client vote option mapping with user supplied values.","tags":[{"tag":"","text":"Fills the client vote option mapping with user supplied values."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"param:array","text":"Integer array with mapping."},{"tag":"param:length","text":"Length of array."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int[]","name":"array","decl":"int[] array","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},"created":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"DrawPanelItem":{"symbol":{"name":"DrawPanelItem","docStart":38267,"docEnd":38793,"docs":{"brief":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned.","tags":[{"tag":"","text":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:text","text":"Display text to use.  If not a raw line,\nthe style may automatically add color markup.\nNo numbering or newlines are needed."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"A slot position, or 0 if item was a rawline or could not be drawn."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuOptionFlags":{"symbol":{"name":"GetMenuOptionFlags","docStart":29926,"docEnd":30109,"docs":{"brief":"Retrieves a menu's option flags.","tags":[{"tag":"","text":"Retrieves a menu's option flags."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"A bitstring of MENUFLAG bits."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuVoteInfo":{"symbol":{"name":"GetMenuVoteInfo","docStart":43480,"docEnd":43745,"docs":{"brief":"Retrieves voting information from MenuAction_VoteEnd.","tags":[{"tag":"","text":"Retrieves voting information from MenuAction_VoteEnd."},{"tag":"param:param2","text":"Second parameter of MenuAction_VoteEnd."},{"tag":"param:winningVotes","text":"Number of votes received by the winning option."},{"tag":"param:totalVotes","text":"Number of total votes received."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"param2","decl":"int param2","default":null},{"type":"int&","name":"winningVotes","decl":"int& winningVotes","default":null},{"type":"int&","name":"totalVotes","decl":"int& totalVotes","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuExitButton":{"symbol":{"name":"GetMenuExitButton","docStart":27030,"docEnd":27299,"docs":{"brief":"Returns whether or not the menu has an exit button.\nBy default, menus have an exit button.","tags":[{"tag":"","text":"Returns whether or not the menu has an exit button.\nBy default, menus have an exit button."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"True if the menu has an exit button; false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"IsNewVoteAllowed":{"symbol":{"name":"IsNewVoteAllowed","docStart":43894,"docEnd":44240,"docs":{"brief":"Quick stock to determine whether voting is allowed.  This doesn't let you\nfine-tune a reason for not voting, so it's not recommended for lazily\ntelling clients that voting isn't allowed.","tags":[{"tag":"","text":"Quick stock to determine whether voting is allowed.  This doesn't let you\nfine-tune a reason for not voting, so it's not recommended for lazily\ntelling clients that voting isn't allowed."},{"tag":"return","text":"True if voting is allowed, false if voting is in progress\nor the cooldown is active."}]},"kind":"stock","returnType":"bool","arguments":[]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetPanelKeys":{"symbol":{"name":"SetPanelKeys","docStart":39706,"docEnd":40149,"docs":{"brief":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing).","tags":[{"tag":"","text":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing)."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:keys","text":"An integer where each bit N allows key\nN+1 to be selected.  If no keys are selectable,\nthen key 0 (bit 9) is automatically set."},{"tag":"return","text":"True if supported, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"keys","decl":"int keys","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetPanelStyle":{"symbol":{"name":"GetPanelStyle","docStart":37664,"docEnd":37872,"docs":{"brief":"Returns a MenuPanel's parent style.","tags":[{"tag":"","text":"Returns a MenuPanel's parent style."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"return","text":"The MenuStyle Handle that created the panel."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CreatePanelFromMenu":{"symbol":{"name":"CreatePanelFromMenu","docStart":26733,"docEnd":26978,"docs":{"brief":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle().","tags":[{"tag":"","text":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle()."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"A new MenuPanel Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Panel","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetMenuPagination":{"symbol":{"name":"SetMenuPagination","docStart":24985,"docEnd":25474,"docs":{"brief":"Sets whether the menu should be paginated or not.\n\nIf itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed.  It can be re-applied if desired.","tags":[{"tag":"","text":"Sets whether the menu should be paginated or not.\n\nIf itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed.  It can be re-applied if desired."},{"tag":"param:menu","text":"Handle to the menu."},{"tag":"param:itemsPerPage","text":"Number of items per page, or MENU_NO_PAGINATION."},{"tag":"return","text":"True on success, false if pagination is too high or\nlow."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"itemsPerPage","decl":"int itemsPerPage","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetPanelTextRemaining":{"symbol":{"name":"GetPanelTextRemaining","docStart":41010,"docEnd":41489,"docs":{"brief":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning).","tags":[{"tag":"","text":""},{"tag":"brief","text":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning)."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"return","text":"Number of characters that the menu can still hold,\nor -1 if there is no known limit."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"RedrawClientVoteMenu":{"symbol":{"name":"RedrawClientVoteMenu","docStart":34516,"docEnd":34965,"docs":{"brief":"Redraws the current vote menu to a client in the voting pool.","tags":[{"tag":"","text":"Redraws the current vote menu to a client in the voting pool."},{"tag":"param:client","text":"Client index."},{"tag":"param:revotes","text":"True to allow revotes, false otherwise."},{"tag":"return","text":"True on success, false if the client is in the vote pool\nbut cannot vote again."},{"tag":"error","text":"No vote in progress, int client is not in the voting pool,\nor client index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"revotes","decl":"bool revotes","default":"true"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SendPanelToClient":{"symbol":{"name":"SendPanelToClient","docStart":40204,"docEnd":40917,"docs":{"brief":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have INVALID_HANDLE for a menu, and the client\nas param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called.","tags":[{"tag":"","text":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have INVALID_HANDLE for a menu, and the client\nas param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:client","text":"A client to draw to."},{"tag":"param:handler","text":"The MenuHandler function to catch actions with."},{"tag":"param:time","text":"Time to hold the menu for."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetPanelTitle":{"symbol":{"name":"SetPanelTitle","docStart":37920,"docEnd":38178,"docs":{"brief":"Sets the panel's title.","tags":[{"tag":"","text":"Sets the panel's title."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:text","text":"Text to set as the title."},{"tag":"param:onlyIfEmpty","text":"If true, the title will only be set if no title is set."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"bool","name":"onlyIfEmpty","decl":"bool onlyIfEmpty","default":"false"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"MenuShufflePerClient":{"symbol":{"name":"MenuShufflePerClient","docStart":23549,"docEnd":23818,"docs":{"brief":"Generates a per-client random mapping for the current vote options.","tags":[{"tag":"","text":"Generates a per-client random mapping for the current vote options."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:start","text":"Menu item index to start randomizing from."},{"tag":"param:stop","text":"Menu item index to stop randomizing at. -1 = infinite"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"start","decl":"int start","default":"0"},{"type":"int","name":"stop","decl":"int stop","default":"-1"}]},"created":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetMenuStyleHandle":{"symbol":{"name":"GetMenuStyleHandle","docStart":35035,"docEnd":35200,"docs":{"brief":"Returns a style's global Handle.","tags":[{"tag":"","text":"Returns a style's global Handle."},{"tag":"param:style","text":"Menu Style."},{"tag":"return","text":"A Handle, or INVALID_HANDLE if not found or unusable."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"MenuStyle","name":"style","decl":"MenuStyle style","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"IsClientInVotePool":{"symbol":{"name":"IsClientInVotePool","docStart":34092,"docEnd":34467,"docs":{"brief":"Returns whether a client is in the pool of clients allowed\nto participate in the current vote.  This is determined by\nthe client list passed to VoteMenu().","tags":[{"tag":"","text":"Returns whether a client is in the pool of clients allowed\nto participate in the current vote.  This is determined by\nthe client list passed to VoteMenu()."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if client is allowed to vote, false otherwise."},{"tag":"error","text":"If no vote is in progress or client index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"GetPanelCurrentKey":{"symbol":{"name":"GetPanelCurrentKey","docStart":41542,"docEnd":41746,"docs":{"brief":"Returns the current key position.","tags":[{"tag":"","text":""},{"tag":"brief","text":"Returns the current key position."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"return","text":"Current key position starting at 1."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"VoteMenu":{"symbol":{"name":"VoteMenu","docStart":30986,"docEnd":31782,"docs":{"brief":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled.","tags":[{"tag":"","text":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:clients","text":"Array of clients to broadcast to."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a vote session\nin progress."},{"tag":"error","text":"Invalid Handle, or a vote is already in progress."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"DisplayMenuAtItem":{"symbol":{"name":"DisplayMenuAtItem","docStart":20326,"docEnd":20727,"docs":{"brief":"Displays a menu to a client, starting from the given item.","tags":[{"tag":"","text":"Displays a menu to a client, starting from the given item."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"param:first_item","text":"First item to begin drawing from."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"first_item","decl":"int first_item","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetMenuNoVoteButton":{"symbol":{"name":"SetMenuNoVoteButton","docStart":29028,"docEnd":29370,"docs":{"brief":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button.","tags":[{"tag":"","text":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:button","text":"True to enable the button, false to remove it."},{"tag":"return","text":"True if allowed; false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"bool","name":"button","decl":"bool button","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetMenuTitle":{"symbol":{"name":"SetMenuTitle","docStart":26061,"docEnd":26305,"docs":{"brief":"Sets the menu's default title/instruction message.","tags":[{"tag":"","text":"Sets the menu's default title/instruction message."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:fmt","text":"Message string format"},{"tag":"param:...","text":"Message string arguments."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CancelVote":{"symbol":{"name":"CancelVote","docStart":30857,"docEnd":30955,"docs":{"brief":"Cancels the vote in progress.","tags":[{"tag":"","text":"Cancels the vote in progress."},{"tag":"error","text":"If no vote is in progress."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetPanelCurrentKey":{"symbol":{"name":"SetPanelCurrentKey","docStart":41796,"docEnd":42144,"docs":{"brief":"Sets the next key position.  This cannot be used\nto traverse backwards.","tags":[{"tag":"","text":""},{"tag":"brief","text":"Sets the next key position.  This cannot be used\nto traverse backwards."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:key","text":"Key that is greater or equal to\nGetPanelCurrentKey()."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"key","decl":"int key","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetMenuExitButton":{"symbol":{"name":"SetMenuExitButton","docStart":27348,"docEnd":27995,"docs":{"brief":"Sets whether or not the menu has an exit button.  By default, paginated menus\nhave an exit button.\n\nIf a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination\nwas previously a different value, then the Exit button status is changed to\nfalse.  It must be explicitly re-enabled afterwards.\n\nIf a non-paginated menu has an exit button, then at most 9 items will be\ndisplayed.","tags":[{"tag":"","text":"Sets whether or not the menu has an exit button.  By default, paginated menus\nhave an exit button.\n\nIf a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination\nwas previously a different value, then the Exit button status is changed to\nfalse.  It must be explicitly re-enabled afterwards.\n\nIf a non-paginated menu has an exit button, then at most 9 items will be\ndisplayed."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:button","text":"True to enable the button, false to remove it."},{"tag":"return","text":"True if allowed; false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"bool","name":"button","decl":"bool button","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CanPanelDrawFlags":{"symbol":{"name":"CanPanelDrawFlags","docStart":39344,"docEnd":39645,"docs":{"brief":"Returns whether or not the given drawing flags are supported by\nthe menu style.","tags":[{"tag":"","text":"Returns whether or not the given drawing flags are supported by\nthe menu style."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"True if item is drawable, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"style","decl":"int style","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetVoteResultCallback":{"symbol":{"name":"SetVoteResultCallback","docStart":33468,"docEnd":33729,"docs":{"brief":"Sets an advanced vote handling callback.  If this callback is set,\nMenuAction_VoteEnd will not be called.","tags":[{"tag":"","text":"Sets an advanced vote handling callback.  If this callback is set,\nMenuAction_VoteEnd will not be called."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:callback","text":"Callback function."},{"tag":"error","text":"Invalid Handle or callback."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"VoteHandler","name":"callback","decl":"VoteHandler callback","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"SetMenuOptionFlags":{"symbol":{"name":"SetMenuOptionFlags","docStart":30158,"docEnd":30552,"docs":{"brief":"Sets a menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set.\nSee SetMenuExitButton() for information on Exit buttons.\nSee SetMenuExitBackButton() for information on Exit Back buttons.","tags":[{"tag":"","text":"Sets a menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set.\nSee SetMenuExitButton() for information on Exit buttons.\nSee SetMenuExitBackButton() for information on Exit Back buttons."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:flags","text":"A new bitstring of MENUFLAG bits."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"RemoveMenuItem":{"symbol":{"name":"RemoveMenuItem","docStart":22201,"docEnd":22456,"docs":{"brief":"Removes an item from the menu.","tags":[{"tag":"","text":"Removes an item from the menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"position","decl":"int position","default":null}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}},"CreateMenu":{"symbol":{"name":"CreateMenu","docStart":19406,"docEnd":19858,"docs":{"brief":"Creates a new, empty menu using the default style.","tags":[{"tag":"","text":"Creates a new, empty menu using the default style."},{"tag":"param:handler","text":"Function which will receive menu actions."},{"tag":"param:actions","text":"Optionally set which actions to receive.  Select,\nCancel, and End will always be received regardless\nof whether they are set or not.  They are also\nthe only default actions."},{"tag":"return","text":"A new menu Handle."}]},"kind":"native","returnType":"Menu","arguments":[{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"MenuAction","name":"actions","decl":"MenuAction actions","default":"MenuAction_Select | MenuAction_Cancel | MenuAction_End"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}}},"methodmaps":{"Panel":{"symbol":{"name":"Panel","docStart":7391,"docEnd":7523,"docs":{"brief":"Panels are used for drawing raw menus without any extra helper functions.\nHandles must be closed via delete or CloseHandle().","tags":[{"tag":"","text":"Panels are used for drawing raw menus without any extra helper functions.\nHandles must be closed via delete or CloseHandle()."}]},"parent":"Handle","methods":[{"name":"Panel","docStart":7555,"docEnd":7669,"docs":{"brief":"Constructor for a new Panel.","tags":[{"tag":"","text":"Constructor for a new Panel."},{"tag":"param:hStyle","text":"MenuStyle Handle, or null to use the default style."}]},"kind":"native","returnType":"Panel","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"null"}]},{"name":"SetTitle","docStart":7719,"docEnd":7884,"docs":{"brief":"Sets the panel's title.","tags":[{"tag":"","text":"Sets the panel's title."},{"tag":"param:text","text":"Text to set as the title."},{"tag":"param:onlyIfEmpty","text":"If true, the title will only be set if no title is set."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"bool","name":"onlyIfEmpty","decl":"bool onlyIfEmpty","default":"false"}]},{"name":"DrawItem","docStart":7963,"docEnd":8400,"docs":{"brief":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned.","tags":[{"tag":"","text":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned."},{"tag":"param:text","text":"Display text to use.  If not a raw line,\nthe style may automatically add color markup.\nNo numbering or newlines are needed."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"A slot position, or 0 if item was a rawline or could not be drawn."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"DrawText","docStart":8482,"docEnd":8700,"docs":{"brief":"Draws a raw line of text on a panel, without any markup other than a\nnewline.","tags":[{"tag":"","text":"Draws a raw line of text on a panel, without any markup other than a\nnewline."},{"tag":"param:text","text":"Display text to use."},{"tag":"return","text":"True on success, false if raw lines are not supported."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null}]},{"name":"CanDrawFlags","docStart":8755,"docEnd":8964,"docs":{"brief":"Returns whether or not the given drawing flags are supported by\nthe menu style.","tags":[{"tag":"","text":"Returns whether or not the given drawing flags are supported by\nthe menu style."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"True if item is drawable, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"style","decl":"int style","default":null}]},{"name":"SetKeys","docStart":9015,"docEnd":9409,"docs":{"brief":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing).","tags":[{"tag":"","text":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing)."},{"tag":"param:keys","text":"An integer where each bit N allows key\nN+1 to be selected.  If no keys are selectable,\nthen key 0 (bit 9) is automatically set."},{"tag":"return","text":"True if supported, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"keys","decl":"int keys","default":null}]},{"name":"Send","docStart":9454,"docEnd":10069,"docs":{"brief":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have null for a menu, and the client as param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called.","tags":[{"tag":"","text":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have null for a menu, and the client as param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called."},{"tag":"param:client","text":"A client to draw to."},{"tag":"param:handler","text":"The MenuHandler function to catch actions with."},{"tag":"param:time","text":"Time to hold the menu for."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"int","name":"time","decl":"int time","default":null}]}],"properties":[{"name":"TextRemaining","docStart":10144,"docEnd":10385,"docs":{"brief":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning).","tags":[{"tag":"","text":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning)."}]},"type":"int","getter":true,"setter":false},{"name":"CurrentKey","docStart":10449,"docEnd":10556,"docs":{"brief":"Returns or sets the current key position, starting at 1. This cannot be\nused to traverse backwards.","tags":[{"tag":"","text":"Returns or sets the current key position, starting at 1. This cannot be\nused to traverse backwards."}]},"type":"int","getter":true,"setter":true},{"name":"Style","docStart":10648,"docEnd":10724,"docs":{"brief":"Returns the panel's style. Style handles are global and cannot be closed.","tags":[{"tag":"","text":"Returns the panel's style. Style handles are global and cannot be closed."}]},"type":"Handle","getter":true,"setter":false}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Menu":{"symbol":{"name":"Menu","docStart":10786,"docEnd":10842,"docs":{"brief":"A menu is a helper object for managing in-game menus.","tags":[{"tag":"","text":"A menu is a helper object for managing in-game menus."}]},"parent":"Handle","methods":[{"name":"Menu","docStart":10873,"docEnd":11277,"docs":{"brief":"Creates a new, empty menu using the default style.","tags":[{"tag":"","text":"Creates a new, empty menu using the default style."},{"tag":"param:handler","text":"Function which will receive menu actions."},{"tag":"param:actions","text":"Optionally set which actions to receive.  Select,\nCancel, and End will always be received regardless\nof whether they are set or not.  They are also\nthe only default actions."}]},"kind":"native","returnType":"Menu","arguments":[{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"MenuAction","name":"actions","decl":"MenuAction actions","default":"MenuAction_Select | MenuAction_Cancel | MenuAction_End"}]},{"name":"Display","docStart":11366,"docEnd":11617,"docs":{"brief":"Displays a menu to a client.","tags":[{"tag":"","text":"Displays a menu to a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"DisplayAt","docStart":11674,"docEnd":12021,"docs":{"brief":"Displays a menu to a client, starting from the given item.","tags":[{"tag":"","text":"Displays a menu to a client, starting from the given item."},{"tag":"param:client","text":"Client index."},{"tag":"param:first_item","text":"First item to begin drawing from."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"first_item","decl":"int first_item","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"AddItem","docStart":12096,"docEnd":12515,"docs":{"brief":"Appends a new item to the end of a menu.","tags":[{"tag":"","text":"Appends a new item to the end of a menu."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Item limit reached."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"InsertItem","docStart":12619,"docEnd":13193,"docs":{"brief":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward.","tags":[{"tag":"","text":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"RemoveItem","docStart":13346,"docEnd":13547,"docs":{"brief":"Removes an item from the menu.","tags":[{"tag":"","text":"Removes an item from the menu."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null}]},{"name":"RemoveAllItems","docStart":13599,"docEnd":13632,"docs":{"brief":"Removes all items from a menu.","tags":[{"tag":"","text":"Removes all items from a menu."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GetItem","docStart":13676,"docEnd":14233,"docs":{"brief":"Retrieves information about a menu item.","tags":[{"tag":"","text":"Retrieves information about a menu item."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:infoBuf","text":"Info buffer."},{"tag":"param:infoBufLen","text":"Maximum length of the info buffer."},{"tag":"param:style","text":"By-reference variable to store drawing flags."},{"tag":"param:dispBuf","text":"Display buffer."},{"tag":"param:dispBufLen","text":"Maximum length of the display buffer."},{"tag":"param:client","text":"Client index. Must be specified if menu is per-client random shuffled, -1 to ignore."},{"tag":"return","text":"True on success, false if position is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null},{"type":"char[]","name":"infoBuf","decl":"char[] infoBuf","default":null},{"type":"int","name":"infoBufLen","decl":"int infoBufLen","default":null},{"type":"int&","name":"style","decl":"int& style","default":"0"},{"type":"char[]","name":"dispBuf","decl":"char[] dispBuf","default":"\"\""},{"type":"int","name":"dispBufLen","decl":"int dispBufLen","default":"0"},{"type":"int","name":"client","decl":"int client","default":"0"}]},{"name":"ShufflePerClient","docStart":14390,"docEnd":14614,"docs":{"brief":"Generates a per-client random mapping for the current vote options.","tags":[{"tag":"","text":"Generates a per-client random mapping for the current vote options."},{"tag":"param:start","text":"Menu item index to start randomizing from."},{"tag":"param:stop","text":"Menu item index to stop randomizing at. -1 = infinite"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"start","decl":"int start","default":"0"},{"type":"int","name":"stop","decl":"int stop","default":"-1"}]},{"name":"SetClientMapping","docStart":14684,"docEnd":14874,"docs":{"brief":"Fills the client vote option mapping with user supplied values.","tags":[{"tag":"","text":"Fills the client vote option mapping with user supplied values."},{"tag":"param:client","text":"Client index."},{"tag":"param:array","text":"Integer array with mapping."},{"tag":"param:length","text":"Length of array."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int[]","name":"array","decl":"int[] array","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},{"name":"SetTitle","docStart":14955,"docEnd":15113,"docs":{"brief":"Sets the menu's default title/instruction message.","tags":[{"tag":"","text":"Sets the menu's default title/instruction message."},{"tag":"param:fmt","text":"Message string format"},{"tag":"param:...","text":"Message string arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"GetTitle","docStart":15176,"docEnd":15375,"docs":{"brief":"Returns the text of a menu's title.","tags":[{"tag":"","text":"Returns the text of a menu's title."},{"tag":"param:buffer","text":"Buffer to store title."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"Number of bytes written."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"ToPanel","docStart":15441,"docEnd":15600,"docs":{"brief":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle().","tags":[{"tag":"","text":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle()."},{"tag":"return","text":"A new MenuPanel Handle."}]},"kind":"native","returnType":"Panel","arguments":[]},{"name":"Cancel","docStart":15638,"docEnd":16002,"docs":{"brief":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled.","tags":[{"tag":"","text":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"DisplayVote","docStart":16038,"docEnd":16780,"docs":{"brief":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled.","tags":[{"tag":"","text":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled."},{"tag":"param:clients","text":"Array of clients to broadcast to."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a\nvote session in progress."},{"tag":"error","text":"A vote is already in progress."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"DisplayVoteToAll","docStart":16873,"docEnd":17197,"docs":{"brief":"Sends a vote menu to all clients.  See VoteMenu() for more information.","tags":[{"tag":"","text":"Sends a vote menu to all clients.  See VoteMenu() for more information."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a\nvote session in progress."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]}],"properties":[{"name":"Pagination","docStart":17525,"docEnd":17717,"docs":{"brief":"Get or set the menu's pagination.\n\nIf pagination is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed. It can be re-applied if desired.","tags":[{"tag":"","text":"Get or set the menu's pagination.\n\nIf pagination is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed. It can be re-applied if desired."}]},"type":"int","getter":true,"setter":true},{"name":"OptionFlags","docStart":17811,"docEnd":17932,"docs":{"brief":"Get or set the menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set.","tags":[{"tag":"","text":"Get or set the menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set."}]},"type":"int","getter":true,"setter":true},{"name":"ExitButton","docStart":18027,"docEnd":18125,"docs":{"brief":"Returns whether or not the menu has an exit button. By default, menus\nhave an exit button.","tags":[{"tag":"","text":"Returns whether or not the menu has an exit button. By default, menus\nhave an exit button."}]},"type":"bool","getter":true,"setter":true},{"name":"ExitBackButton","docStart":18221,"docEnd":18482,"docs":{"brief":"Controls whether or not the menu has an \"exit back\" button. By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack.","tags":[{"tag":"","text":"Controls whether or not the menu has an \"exit back\" button. By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack."}]},"type":"bool","getter":true,"setter":true},{"name":"NoVoteButton","docStart":18582,"docEnd":18700,"docs":{"brief":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button.","tags":[{"tag":"","text":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button."}]},"type":"bool","getter":false,"setter":true},{"name":"VoteResultCallback","docStart":18774,"docEnd":18886,"docs":{"brief":"Sets an advanced vote handling callback. If this callback is set,\nMenuAction_VoteEnd will not be called.","tags":[{"tag":"","text":"Sets an advanced vote handling callback. If this callback is set,\nMenuAction_VoteEnd will not be called."}]},"type":"VoteHandler","getter":false,"setter":true},{"name":"ItemCount","docStart":18982,"docEnd":19023,"docs":{"brief":"Returns the number of items in a menu.","tags":[{"tag":"","text":"Returns the number of items in a menu."}]},"type":"int","getter":true,"setter":false},{"name":"Style","docStart":19083,"docEnd":19152,"docs":{"brief":"Returns the menu style. The Handle is global and cannot be closed.","tags":[{"tag":"","text":"Returns the menu style. The Handle is global and cannot be closed."}]},"type":"Handle","getter":true,"setter":false},{"name":"Selection","docStart":19211,"docEnd":19344,"docs":{"brief":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback.","tags":[{"tag":"","text":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}}},"enumstructs":{},"constants":{"MenuEnd_VotingDone":{"symbol":{"name":"MenuEnd_VotingDone","docStart":6298,"docEnd":6321,"docs":{"brief":"Voting finished","tags":[{"tag":"","text":"Voting finished"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VoteCancel_NoVotes":{"symbol":{"name":"VoteCancel_NoVotes","docStart":6091,"docEnd":6130,"docs":{"brief":"Vote did not receive any votes.","tags":[{"tag":"","text":"Vote did not receive any votes."}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VoteCancel_Generic":{"symbol":{"name":"VoteCancel_Generic","docStart":6017,"docEnd":6056,"docs":{"brief":"Vote was generically cancelled.","tags":[{"tag":"","text":"Vote was generically cancelled."}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuCancel_NoDisplay":{"symbol":{"name":"MenuCancel_NoDisplay","docStart":5700,"docEnd":5749,"docs":{"brief":"Menu could not be displayed to the client","tags":[{"tag":"","text":"Menu could not be displayed to the client"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuEnd_Cancelled":{"symbol":{"name":"MenuEnd_Cancelled","docStart":6419,"docEnd":6464,"docs":{"brief":"Menu was cancelled (reason in param2)","tags":[{"tag":"","text":"Menu was cancelled (reason in param2)"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuCancel_ExitBack":{"symbol":{"name":"MenuCancel_ExitBack","docStart":5841,"docEnd":5896,"docs":{"brief":"Client selected \"exit back\" on a paginated menu","tags":[{"tag":"","text":"Client selected \"exit back\" on a paginated menu"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuEnd_Selected":{"symbol":{"name":"MenuEnd_Selected","docStart":6233,"docEnd":6263,"docs":{"brief":"Menu item was selected","tags":[{"tag":"","text":"Menu item was selected"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuEnd_Exit":{"symbol":{"name":"MenuEnd_Exit","docStart":6499,"docEnd":6541,"docs":{"brief":"Menu was cleanly exited via \"exit\"","tags":[{"tag":"","text":"Menu was cleanly exited via \"exit\""}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuCancel_Timeout":{"symbol":{"name":"MenuCancel_Timeout","docStart":5784,"docEnd":5806,"docs":{"brief":"Menu timed out","tags":[{"tag":"","text":"Menu timed out"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuEnd_VotingCancelled":{"symbol":{"name":"MenuEnd_VotingCancelled","docStart":6356,"docEnd":6384,"docs":{"brief":"Voting was cancelled","tags":[{"tag":"","text":"Voting was cancelled"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuCancel_Disconnected":{"symbol":{"name":"MenuCancel_Disconnected","docStart":5477,"docEnd":5515,"docs":{"brief":"Client dropped from the server","tags":[{"tag":"","text":"Client dropped from the server"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuCancel_Interrupted":{"symbol":{"name":"MenuCancel_Interrupted","docStart":5550,"docEnd":5598,"docs":{"brief":"Client was interrupted with another menu","tags":[{"tag":"","text":"Client was interrupted with another menu"}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuCancel_Exit":{"symbol":{"name":"MenuCancel_Exit","docStart":5633,"docEnd":5665,"docs":{"brief":"Client exited via \"exit\"","tags":[{"tag":"","text":"Client exited via \"exit\""}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuEnd_ExitBack":{"symbol":{"name":"MenuEnd_ExitBack","docStart":6576,"docEnd":6618,"docs":{"brief":"Menu was cleanly exited via \"back\"","tags":[{"tag":"","text":"Menu was cleanly exited via \"back\""}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"defines":{"MENUFLAG_BUTTON_NOVOTE":{"symbol":{"name":"MENUFLAG_BUTTON_NOVOTE","docStart":4922,"docEnd":4967,"docs":{"brief":"Menu has a \"No Vote\" button at slot 1","tags":[{"tag":"","text":"Menu has a \"No Vote\" button at slot 1"}]},"value":"(1<<3)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_DISABLED":{"symbol":{"name":"ITEMDRAW_DISABLED","docStart":4090,"docEnd":4130,"docs":{"brief":"Item is drawn but not selectable","tags":[{"tag":"","text":"Item is drawn but not selectable"}]},"value":"(1<<0)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MENUFLAG_NO_SOUND":{"symbol":{"name":"MENUFLAG_NO_SOUND","docStart":4832,"docEnd":4876,"docs":{"brief":"Menu will not have any select sounds","tags":[{"tag":"","text":"Menu will not have any select sounds"}]},"value":"(1<<2)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_DEFAULT":{"symbol":{"name":"ITEMDRAW_DEFAULT","docStart":4007,"docEnd":4044,"docs":{"brief":"Item should be drawn normally","tags":[{"tag":"","text":"Item should be drawn normally"}]},"value":"(0)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_RAWLINE":{"symbol":{"name":"ITEMDRAW_RAWLINE","docStart":4176,"docEnd":4225,"docs":{"brief":"Item should be a raw line, without a slot","tags":[{"tag":"","text":"Item should be a raw line, without a slot"}]},"value":"(1<<1)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOTEINFO_CLIENT_ITEM":{"symbol":{"name":"VOTEINFO_CLIENT_ITEM","docStart":5081,"docEnd":5129,"docs":{"brief":"Item the client selected, or -1 for none","tags":[{"tag":"","text":"Item the client selected, or -1 for none"}]},"value":"1"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_SPACER":{"symbol":{"name":"ITEMDRAW_SPACER","docStart":4348,"docEnd":4401,"docs":{"brief":"Item should be drawn as a spacer, if possible","tags":[{"tag":"","text":"Item should be drawn as a spacer, if possible"}]},"value":"(1<<3)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MENU_ACTIONS_DEFAULT":{"symbol":{"name":"MENU_ACTIONS_DEFAULT","docStart":0,"docEnd":0,"docs":null,"value":"MenuAction_Select|MenuAction_Cancel|MenuAction_End"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010}},"_menus_included":{"symbol":{"name":"_menus_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010}},"VOTEFLAG_NO_REVOTES":{"symbol":{"name":"VOTEFLAG_NO_REVOTES","docStart":5323,"docEnd":5364,"docs":{"brief":"Players cannot change their votes","tags":[{"tag":"","text":"Players cannot change their votes"}]},"value":"(1<<0)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_NOTEXT":{"symbol":{"name":"ITEMDRAW_NOTEXT","docStart":4271,"docEnd":4302,"docs":{"brief":"No text should be drawn","tags":[{"tag":"","text":"No text should be drawn"}]},"value":"(1<<2)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOTEINFO_CLIENT_INDEX":{"symbol":{"name":"VOTEINFO_CLIENT_INDEX","docStart":5015,"docEnd":5035,"docs":{"brief":"Client index","tags":[{"tag":"","text":"Client index"}]},"value":"0"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOTEINFO_ITEM_INDEX":{"symbol":{"name":"VOTEINFO_ITEM_INDEX","docStart":5175,"docEnd":5193,"docs":{"brief":"Item index","tags":[{"tag":"","text":"Item index"}]},"value":"0"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VOTEINFO_ITEM_VOTES":{"symbol":{"name":"VOTEINFO_ITEM_VOTES","docStart":5239,"docEnd":5275,"docs":{"brief":"Number of votes for the item","tags":[{"tag":"","text":"Number of votes for the item"}]},"value":"1"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MENU_ACTIONS_ALL":{"symbol":{"name":"MENU_ACTIONS_ALL","docStart":0,"docEnd":0,"docs":null,"value":"view_as<MenuAction>(0xFFFFFFFF)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"4346e963e5534786eaf63f6e549b40f1f7bfe9c4","count":5732,"time":1446207994}},"MENUFLAG_BUTTON_EXITBACK":{"symbol":{"name":"MENUFLAG_BUTTON_EXITBACK","docStart":4748,"docEnd":4786,"docs":{"brief":"Menu has an \"exit back\" button","tags":[{"tag":"","text":"Menu has an \"exit back\" button"}]},"value":"(1<<1)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MENU_TIME_FOREVER":{"symbol":{"name":"MENU_TIME_FOREVER","docStart":3907,"docEnd":3959,"docs":{"brief":"Menu should be displayed as long as possible","tags":[{"tag":"","text":"Menu should be displayed as long as possible"}]},"value":"0"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MENUFLAG_BUTTON_EXIT":{"symbol":{"name":"MENUFLAG_BUTTON_EXIT","docStart":4646,"docEnd":4702,"docs":{"brief":"Menu has an \"exit\" button (default if paginated)","tags":[{"tag":"","text":"Menu has an \"exit\" button (default if paginated)"}]},"value":"(1<<0)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_CONTROL":{"symbol":{"name":"ITEMDRAW_CONTROL","docStart":4553,"docEnd":4598,"docs":{"brief":"Item is control text (back/next/exit)","tags":[{"tag":"","text":"Item is control text (back/next/exit)"}]},"value":"(1<<4)"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ITEMDRAW_IGNORE":{"symbol":{"name":"ITEMDRAW_IGNORE","docStart":4447,"docEnd":4507,"docs":{"brief":"Item should be completely ignored (rawline + notext)","tags":[{"tag":"","text":"Item should be completely ignored (rawline + notext)"}]},"value":"((1<<1)|(1<<2))"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MENU_NO_PAGINATION":{"symbol":{"name":"MENU_NO_PAGINATION","docStart":3810,"docEnd":3861,"docs":{"brief":"Menu should not be paginated (10 items max)","tags":[{"tag":"","text":"Menu should not be paginated (10 items max)"}]},"value":"0"},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"MenuAction":{"symbol":{"name":"MenuAction","docStart":1969,"docEnd":2028,"docs":{"brief":"Different actions for the menu \"pump\" callback","tags":[{"tag":"","text":"Different actions for the menu \"pump\" callback"}]},"entries":[{"name":"MenuAction_Start","docStart":2083,"docEnd":2131,"docs":{"brief":"A menu has been started (nothing passed)","tags":[{"tag":"","text":"A menu has been started (nothing passed)"}]},"value":"1 << 0"},{"name":"MenuAction_Display","docStart":2166,"docEnd":2246,"docs":{"brief":"A menu is about to be displayed (param1=client, param2=MenuPanel Handle)","tags":[{"tag":"","text":"A menu is about to be displayed (param1=client, param2=MenuPanel Handle)"}]},"value":"1 << 1"},{"name":"MenuAction_Select","docStart":2281,"docEnd":2338,"docs":{"brief":"An item was selected (param1=client, param2=item)","tags":[{"tag":"","text":"An item was selected (param1=client, param2=item)"}]},"value":"1 << 2"},{"name":"MenuAction_Cancel","docStart":2373,"docEnd":2434,"docs":{"brief":"The menu was cancelled (param1=client, param2=reason)","tags":[{"tag":"","text":"The menu was cancelled (param1=client, param2=reason)"}]},"value":"1 << 3"},{"name":"MenuAction_End","docStart":0,"docEnd":0,"docs":null,"value":"1 << 4"},{"name":"MenuAction_VoteEnd","docStart":2469,"docEnd":2714,"docs":{"brief":"A menu display has fully ended.\nparam1 is the MenuEnd reason, and if it's MenuEnd_Cancelled, then\nparam2 is the MenuCancel reason from MenuAction_Cancel.","tags":[{"tag":"","text":"A menu display has fully ended.\nparam1 is the MenuEnd reason, and if it's MenuEnd_Cancelled, then\nparam2 is the MenuCancel reason from MenuAction_Cancel."}]},"value":"1 << 5"},{"name":"MenuAction_VoteStart","docStart":2749,"docEnd":2933,"docs":{"brief":"(VOTE ONLY): A vote sequence has succeeded (param1=chosen item)\nThis is not called if SetVoteResultCallback has been used on the menu.","tags":[{"tag":"","text":"(VOTE ONLY): A vote sequence has succeeded (param1=chosen item)\nThis is not called if SetVoteResultCallback has been used on the menu."}]},"value":"1 << 6"},{"name":"MenuAction_VoteCancel","docStart":3068,"docEnd":3139,"docs":{"brief":"(VOTE ONLY): A vote sequence has been cancelled (param1=reason)","tags":[{"tag":"","text":"(VOTE ONLY): A vote sequence has been cancelled (param1=reason)"}]},"value":"1 << 7"},{"name":"MenuAction_DrawItem","docStart":3174,"docEnd":3255,"docs":{"brief":"An item is being drawn; return the new style (param1=client, param2=item)","tags":[{"tag":"","text":"An item is being drawn; return the new style (param1=client, param2=item)"}]},"value":"1 << 8"},{"name":"MenuAction_DisplayItem","docStart":0,"docEnd":0,"docs":null,"value":"1 << 9"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuStyle":{"symbol":{"name":"MenuStyle","docStart":1651,"docEnd":1700,"docs":{"brief":"Low-level drawing style of the menu.","tags":[{"tag":"","text":"Low-level drawing style of the menu."}]},"entries":[{"name":"MenuStyle_Default","docStart":1750,"docEnd":1794,"docs":{"brief":"The \"default\" menu style for the mod","tags":[{"tag":"","text":"The \"default\" menu style for the mod"}]},"value":"0"},{"name":"MenuStyle_Valve","docStart":1825,"docEnd":1878,"docs":{"brief":"The Valve provided menu style (Used on HL2DM)","tags":[{"tag":"","text":"The Valve provided menu style (Used on HL2DM)"}]},"value":"1"},{"name":"MenuStyle_Radio","docStart":1909,"docEnd":1961,"docs":{"brief":"The simpler menu style commonly used on CS:S","tags":[{"tag":"","text":"The simpler menu style commonly used on CS:S"}]},"value":"2"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MenuSource":{"symbol":{"name":"MenuSource","docStart":6626,"docEnd":6664,"docs":{"brief":"Describes a menu's source","tags":[{"tag":"","text":"Describes a menu's source"}]},"entries":[{"name":"MenuSource_None","docStart":6719,"docEnd":6753,"docs":{"brief":"No menu is being displayed","tags":[{"tag":"","text":"No menu is being displayed"}]},"value":"0"},{"name":"MenuSource_External","docStart":6788,"docEnd":6809,"docs":{"brief":"External menu","tags":[{"tag":"","text":"External menu"}]},"value":"1"},{"name":"MenuSource_Normal","docStart":6844,"docEnd":6883,"docs":{"brief":"A basic menu is being displayed","tags":[{"tag":"","text":"A basic menu is being displayed"}]},"value":"2"},{"name":"MenuSource_RawPanel","docStart":6918,"docEnd":6975,"docs":{"brief":"A display is active, but it is not tied to a menu","tags":[{"tag":"","text":"A display is active, but it is not tied to a menu"}]},"value":"3"}]},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"VoteHandler":{"symbol":{"name":"VoteHandler","docStart":32605,"docEnd":33104,"docs":{"brief":"Callback for when a vote has ended and results are available.","tags":[{"tag":"","text":"Callback for when a vote has ended and results are available."},{"tag":"param:menu","text":"The menu being voted on."},{"tag":"param:num_votes","text":"Number of votes tallied in total."},{"tag":"param:num_clients","text":"Number of clients who could vote."},{"tag":"param:client_info","text":"Array of clients.  Use VOTEINFO_CLIENT_ defines."},{"tag":"param:num_items","text":"Number of unique items that were selected."},{"tag":"param:item_info","text":"Array of items, sorted by count.  Use VOTEINFO_ITEM\ndefines."}]},"types":[{"docStart":33131,"docEnd":33143,"docs":{"brief":"old style","tags":[{"tag":"","text":"old style"}]},"type":"function void(Menu menu, int num_votes, int num_clients, const int client_info[][2], int num_items, const int item_info[][2])","parsedSignature":{"returnType":"void","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"int","name":"num_votes","decl":"int num_votes","default":null},{"type":"int","name":"num_clients","decl":"int num_clients","default":null},{"type":"const int","name":"client_info[][2]","decl":"const int client_info[][2]","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"const int","name":"item_info[][2]","decl":"const int item_info[][2]","default":null}]}},{"docStart":33299,"docEnd":33311,"docs":{"brief":"new style","tags":[{"tag":"","text":"new style"}]},"type":"function void(Menu menu, int num_votes, int num_clients, const int[][] client_info, int num_items, const int[][] item_info)","parsedSignature":{"returnType":"void","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"int","name":"num_votes","decl":"int num_votes","default":null},{"type":"int","name":"num_clients","decl":"int num_clients","default":null},{"type":"const int[][]","name":"client_info","decl":"const int[][] client_info","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"const int[][]","name":"item_info","decl":"const int[][] item_info","default":null}]}}]},"created":{"hash":"844fad263ae5a78a064467c80c60b653f22add2b","count":5106,"time":1418763980},"last_updated":{"hash":"6f21138489c22216256852fdf505ca498fc29772","count":6610,"time":1596771060}}},"typedefs":{"VoteHandler":{"symbol":{"name":"VoteHandler","docStart":29816,"docEnd":30286,"docs":{"brief":"Callback for when a vote has ended and results are available.","tags":[{"tag":"","text":"Callback for when a vote has ended and results are available."},{"tag":"param:menu","text":"The menu being voted on."},{"tag":"param:num_votes","text":"Number of votes tallied in total."},{"tag":"param:num_clients","text":"Number of clients who could vote."},{"tag":"param:client_info","text":"Array of clients.  Use VOTEINFO_CLIENT_ defines."},{"tag":"param:num_items","text":"Number of unique items that were selected."},{"tag":"param:item_info","text":"Array of items, sorted by count.  Use VOTEINFO_ITEM\ndefines."}]},"type":"function void(Menu menu, int num_votes, int num_clients, const int client_info[][2], int num_items, const int item_info[][2])","parsedSignature":{"returnType":"void","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"int","name":"num_votes","decl":"int num_votes","default":null},{"type":"int","name":"num_clients","decl":"int num_clients","default":null},{"type":"const int","name":"client_info[][2]","decl":"const int client_info[][2]","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"const int","name":"item_info[][2]","decl":"const int item_info[][2]","default":null}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010}},"MenuHandler":{"symbol":{"name":"MenuHandler","docStart":6983,"docEnd":7295,"docs":{"brief":"Called when a menu action is completed.","tags":[{"tag":"","text":"Called when a menu action is completed."},{"tag":"param:menu","text":"The menu being acted upon."},{"tag":"param:action","text":"The action of the menu."},{"tag":"param:param1","text":"First action parameter (usually the client)."},{"tag":"param:param2","text":"Second action parameter (usually the item)."}]},"type":"function int(Menu menu, MenuAction action, int param1, int param2)","parsedSignature":{"returnType":"int","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"MenuAction","name":"action","decl":"MenuAction action","default":null},{"type":"int","name":"param1","decl":"int param1","default":null},{"type":"int","name":"param2","decl":"int param2","default":null}]}},"created":{"hash":"722a23c818ccc7ec50f40303e1b00707c938e3bd","count":5086,"time":1418504010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"usermessages":{"functions":{"StartMessage":{"symbol":{"name":"StartMessage","docStart":3682,"docEnd":4374,"docs":{"brief":"Starts a usermessage (network message).","tags":[{"tag":"","text":"Starts a usermessage (network message)."},{"tag":"note","text":"Only one message can be active at a time."},{"tag":"note","text":"It is illegal to send any message while a non-intercept hook is in progress."},{"tag":"param:msgname","text":"Message name to start."},{"tag":"param:clients","text":"Array containing player indexes to broadcast to."},{"tag":"param:numClients","text":"Number of players in the array."},{"tag":"param:flags","text":"Optional flags to set."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."},{"tag":"error","text":"Invalid message name, unable to start a message, invalid client,\nor client not connected."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"msgname","decl":"const char[] msgname","default":null},{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UserMessageToBfRead":{"symbol":{"name":"UserMessageToBfRead","docStart":2801,"docEnd":2877,"docs":{"brief":"Make sure to only call this on readable buffers (eg from a message hook).","tags":[{"tag":"","text":"Make sure to only call this on readable buffers (eg from a message hook)."}]},"kind":"stock","returnType":"BfRead","arguments":[{"type":"Handle","name":"msg","decl":"Handle msg","default":null}]},"created":{"hash":"2cfe54f34bda5d948394636e3afd619b3b35d346","count":5021,"time":1415581010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UserMessageToBfWrite":{"symbol":{"name":"UserMessageToBfWrite","docStart":2568,"docEnd":2642,"docs":{"brief":"Make sure to only call this on writable buffers (eg from StartMessage).","tags":[{"tag":"","text":"Make sure to only call this on writable buffers (eg from StartMessage)."}]},"kind":"stock","returnType":"BfWrite","arguments":[{"type":"Handle","name":"msg","decl":"Handle msg","default":null}]},"created":{"hash":"2cfe54f34bda5d948394636e3afd619b3b35d346","count":5021,"time":1415581010},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UnhookUserMessage":{"symbol":{"name":"UnhookUserMessage","docStart":7814,"docEnd":8083,"docs":{"brief":"Removes one usermessage hook.","tags":[{"tag":"","text":"Removes one usermessage hook."},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:hook","text":"Function used for the hook."},{"tag":"param:intercept","text":"Specifies whether the hook was an intercept hook or not."},{"tag":"error","text":"Invalid message index."}]},"kind":"native","returnType":"void","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"MsgHook","name":"hook","decl":"MsgHook hook","default":null},{"type":"bool","name":"intercept","decl":"bool intercept","default":"false"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetUserMessageType":{"symbol":{"name":"GetUserMessageType","docStart":2218,"docEnd":2358,"docs":{"brief":"Returns usermessage serialization type used for the current engine","tags":[{"tag":"","text":"Returns usermessage serialization type used for the current engine"},{"tag":"return","text":"The supported usermessage type."}]},"kind":"native","returnType":"UserMessageType","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StartMessageEx":{"symbol":{"name":"StartMessageEx","docStart":4479,"docEnd":5172,"docs":{"brief":"Starts a usermessage (network message).","tags":[{"tag":"","text":"Starts a usermessage (network message)."},{"tag":"note","text":"Only one message can be active at a time."},{"tag":"note","text":"It is illegal to send any message while a non-intercept hook is in progress."},{"tag":"param:msg","text":"Message index to start."},{"tag":"param:clients","text":"Array containing player indexes to broadcast to."},{"tag":"param:numClients","text":"Number of players in the array."},{"tag":"param:flags","text":"Optional flags to set."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."},{"tag":"error","text":"Invalid message name, unable to start a message, invalid client,\nor client not connected."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"UserMsg","name":"msg","decl":"UserMsg msg","default":null},{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StartMessageAll":{"symbol":{"name":"StartMessageAll","docStart":8171,"docEnd":8532,"docs":{"brief":"Starts a usermessage (network message) that broadcasts to all clients.","tags":[{"tag":"","text":"Starts a usermessage (network message) that broadcasts to all clients."},{"tag":"note","text":"See StartMessage or StartMessageEx()."},{"tag":"param:msgname","text":"Message name to start."},{"tag":"param:flags","text":"Optional flags to set."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"msgname","decl":"const char[] msgname","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StartMessageOne":{"symbol":{"name":"StartMessageOne","docStart":8833,"docEnd":9230,"docs":{"brief":"Starts a simpler usermessage (network message) for one client.","tags":[{"tag":"","text":"Starts a simpler usermessage (network message) for one client."},{"tag":"note","text":"See StartMessage or StartMessageEx()."},{"tag":"param:msgname","text":"Message name to start."},{"tag":"param:client","text":"Client to send to."},{"tag":"param:flags","text":"Optional flags to set."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"msgname","decl":"const char[] msgname","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetUserMessageName":{"symbol":{"name":"GetUserMessageName","docStart":3309,"docEnd":3602,"docs":{"brief":"Retrieves the name of a message by ID.","tags":[{"tag":"","text":"Retrieves the name of a message by ID."},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:msg","text":"Buffer to store the name of the message."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"True if message index is valid, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"char[]","name":"msg","decl":"char[] msg","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HookUserMessage":{"symbol":{"name":"HookUserMessage","docStart":7234,"docEnd":7693,"docs":{"brief":"Hooks a user message.","tags":[{"tag":"","text":"Hooks a user message."},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:hook","text":"Function to use as a hook."},{"tag":"param:intercept","text":"If intercept is true, message will be fully intercepted,\nallowing the user to block the message.  Otherwise,\nthe hook is normal and ignores the return value."},{"tag":"param:post","text":"Notification function."},{"tag":"error","text":"Invalid message index."}]},"kind":"native","returnType":"void","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"MsgHook","name":"hook","decl":"MsgHook hook","default":null},{"type":"bool","name":"intercept","decl":"bool intercept","default":"false"},{"type":"MsgPostHook","name":"post","decl":"MsgPostHook post","default":"INVALID_FUNCTION"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EndMessage":{"symbol":{"name":"EndMessage","docStart":5270,"docEnd":5340,"docs":{"brief":"Ends a previously started user message (network message).","tags":[{"tag":"","text":"Ends a previously started user message (network message)."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetUserMessageId":{"symbol":{"name":"GetUserMessageId","docStart":3034,"docEnd":3253,"docs":{"brief":"Returns the ID of a given message, or -1 on failure.","tags":[{"tag":"","text":"Returns the ID of a given message, or -1 on failure."},{"tag":"param:msg","text":"String containing message name (case sensitive)."},{"tag":"return","text":"A message index, or INVALID_MESSAGE_ID on failure."}]},"kind":"native","returnType":"UserMsg","arguments":[{"type":"const char[]","name":"msg","decl":"const char[] msg","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UserMessageToProtobuf":{"symbol":{"name":"UserMessageToProtobuf","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"Protobuf","arguments":[{"type":"Handle","name":"msg","decl":"Handle msg","default":null}]},"created":{"hash":"6b714dafe39d2af9b0a49c3e751f427e51943910","count":5004,"time":1415571556},"last_updated":{"hash":"6b714dafe39d2af9b0a49c3e751f427e51943910","count":5004,"time":1415571556}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"USERMSG_RELIABLE":{"symbol":{"name":"USERMSG_RELIABLE","docStart":1925,"docEnd":1975,"docs":{"brief":"Message will be set on the reliable stream","tags":[{"tag":"","text":"Message will be set on the reliable stream"}]},"value":"(1<<2)"},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"USERMSG_INITMSG":{"symbol":{"name":"USERMSG_INITMSG","docStart":2019,"docEnd":2070,"docs":{"brief":"Message will be considered to be an initmsg","tags":[{"tag":"","text":"Message will be considered to be an initmsg"}]},"value":"(1<<3)"},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"USERMSG_PASSTHRU_ALL":{"symbol":{"name":"USERMSG_PASSTHRU_ALL","docStart":898,"docEnd":968,"docs":{"brief":"Message will pass through other SourceMM plugins AND SourceMod","tags":[{"tag":"","text":"Message will pass through other SourceMM plugins AND SourceMod"}]},"value":"(1<<1)"},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636}},"USERMSG_BLOCKHOOKS":{"symbol":{"name":"USERMSG_BLOCKHOOKS","docStart":2114,"docEnd":2186,"docs":{"brief":"Prevents the message from triggering SourceMod and Metamod hooks","tags":[{"tag":"","text":"Prevents the message from triggering SourceMod and Metamod hooks"}]},"value":"(1<<7)"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_eventsmsgs_included":{"symbol":{"name":"_eventsmsgs_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636}},"USERMSG_PASSTHRU":{"symbol":{"name":"USERMSG_PASSTHRU","docStart":803,"docEnd":859,"docs":{"brief":"Message will pass through other SourceMM plugins","tags":[{"tag":"","text":"Message will pass through other SourceMM plugins"}]},"value":"(1<<0)"},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636}}},"enums":{"UserMsg":{"symbol":{"name":"UserMsg","docStart":1645,"docEnd":1680,"docs":{"brief":"UserMsg helper values.","tags":[{"tag":"","text":"UserMsg helper values."}]},"entries":[{"name":"INVALID_MESSAGE_ID","docStart":0,"docEnd":0,"docs":null,"value":"-1"}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UserMessageType":{"symbol":{"name":"UserMessageType","docStart":1731,"docEnd":1781,"docs":{"brief":"UserMsg message serialization formats","tags":[{"tag":"","text":"UserMsg message serialization formats"}]},"entries":[{"name":"UM_BitBuf","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"UM_Protobuf","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"MsgHook":{"symbol":{"name":"MsgHook","docStart":5371,"docEnd":5421,"docs":{"brief":"Hook function types for user messages.","tags":[{"tag":"","text":"Hook function types for user messages."}]},"types":[{"docStart":5444,"docEnd":6105,"docs":{"brief":"Called when a bit buffer based usermessage is hooked","tags":[{"tag":"","text":"Called when a bit buffer based usermessage is hooked"},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:msg","text":"Handle to the input bit buffer."},{"tag":"param:players","text":"Array containing player indexes."},{"tag":"param:playersNum","text":"Number of players in the array."},{"tag":"param:reliable","text":"True if message is reliable, false otherwise."},{"tag":"param:init","text":"True if message is an initmsg, false otherwise."},{"tag":"return","text":"Ignored for normal hooks.  For intercept hooks, Plugin_Handled\nblocks the message from being sent, and Plugin_Continue\nresumes normal functionality."}]},"type":"function Action(UserMsg msg_id, BfRead msg, const int[] players, int playersNum, bool reliable, bool init)","parsedSignature":{"returnType":"Action","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"BfRead","name":"msg","decl":"BfRead msg","default":null},{"type":"const int[]","name":"players","decl":"const int[] players","default":null},{"type":"int","name":"playersNum","decl":"int playersNum","default":null},{"type":"bool","name":"reliable","decl":"bool reliable","default":null},{"type":"bool","name":"init","decl":"bool init","default":null}]}},{"docStart":6219,"docEnd":6876,"docs":{"brief":"Called when a protobuf based usermessage is hooked","tags":[{"tag":"","text":"Called when a protobuf based usermessage is hooked"},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:msg","text":"Handle to the input protobuf."},{"tag":"param:players","text":"Array containing player indexes."},{"tag":"param:playersNum","text":"Number of players in the array."},{"tag":"param:reliable","text":"True if message is reliable, false otherwise."},{"tag":"param:init","text":"True if message is an initmsg, false otherwise."},{"tag":"return","text":"Ignored for normal hooks.  For intercept hooks, Plugin_Handled\nblocks the message from being sent, and Plugin_Continue\nresumes normal functionality."}]},"type":"function Action(UserMsg msg_id, Protobuf msg, const int[] players, int playersNum, bool reliable, bool init)","parsedSignature":{"returnType":"Action","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"Protobuf","name":"msg","decl":"Protobuf msg","default":null},{"type":"const int[]","name":"players","decl":"const int[] players","default":null},{"type":"int","name":"playersNum","decl":"int playersNum","default":null},{"type":"bool","name":"reliable","decl":"bool reliable","default":null},{"type":"bool","name":"init","decl":"bool init","default":null}]}}]},"created":{"hash":"2516654d2ecfab336a141846e49e89f4e184aab8","count":5172,"time":1421350821},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"MsgPostHook":{"symbol":{"name":"MsgPostHook","docStart":6997,"docEnd":7164,"docs":{"brief":"Called when a message hook has completed.","tags":[{"tag":"","text":"Called when a message hook has completed."},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:sent","text":"True if message was sent, false if blocked."}]},"type":"function void(UserMsg msg_id, bool sent)","parsedSignature":{"returnType":"void","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"bool","name":"sent","decl":"bool sent","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MsgHook":{"symbol":{"name":"MsgHook","docStart":5056,"docEnd":5623,"docs":{"brief":"Called when a message is hooked","tags":[{"tag":"","text":"Called when a message is hooked"},{"tag":"param:msg_id","text":"Message index."},{"tag":"param:msg","text":"Handle to the input bit buffer or protobuf."},{"tag":"param:players","text":"Array containing player indexes."},{"tag":"param:playersNum","text":"Number of players in the array."},{"tag":"param:reliable","text":"True if message is reliable, false otherwise."},{"tag":"param:init","text":"True if message is an initmsg, false otherwise."},{"tag":"return","text":"Ignored for normal hooks.  For intercept hooks, Plugin_Handled\nblocks the message from being sent, and Plugin_Continue\nresumes normal functionality."}]},"type":"function Action(UserMsg msg_id, Handle msg, const int[] players, int playersNum, bool reliable, bool init)","parsedSignature":{"returnType":"Action","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id","default":null},{"type":"Handle","name":"msg","decl":"Handle msg","default":null},{"type":"const int[]","name":"players","decl":"const int[] players","default":null},{"type":"int","name":"playersNum","decl":"int playersNum","default":null},{"type":"bool","name":"reliable","decl":"bool reliable","default":null},{"type":"bool","name":"init","decl":"bool init","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"8dbcfde31412ce5d2ae5b01e780344e81962ccf7","count":5171,"time":1421350374}}}},"commandfilters":{"functions":{"ProcessTargetString":{"symbol":{"name":"ProcessTargetString","docStart":2901,"docEnd":4138,"docs":{"brief":"Processes a generic command target string, and resolves it to a list\nof clients or one client, based on filtering rules and a pattern.\n\nNote that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(),\nas that file is guaranteed to contain all of the translatable phrases that\nProcessTargetString() will return.","tags":[{"tag":"","text":"Processes a generic command target string, and resolves it to a list\nof clients or one client, based on filtering rules and a pattern.\n\nNote that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(),\nas that file is guaranteed to contain all of the translatable phrases that\nProcessTargetString() will return."},{"tag":"param:pattern","text":"Pattern to find clients against."},{"tag":"param:admin","text":"Admin performing the action, or 0 if the server."},{"tag":"param:targets","text":"Array to hold targets."},{"tag":"param:max_targets","text":"Maximum size of the targets array."},{"tag":"param:filter_flags","text":"Filter flags."},{"tag":"param:target_name","text":"Buffer to store the target name."},{"tag":"param:tn_maxlength","text":"Maximum length of the target name buffer."},{"tag":"param:tn_is_ml","text":"OUTPUT: Will be true if the target name buffer is an ML phrase,\nfalse if it is a normal string."},{"tag":"return","text":"If a multi-target pattern was used, the number of clients found\nis returned.  If a single-target pattern was used, 1 is returned\nif one valid client is found.  Otherwise, a COMMAND_TARGET reason\nfor failure is returned."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"int","name":"admin","decl":"int admin","default":null},{"type":"int[]","name":"targets","decl":"int[] targets","default":null},{"type":"int","name":"max_targets","decl":"int max_targets","default":null},{"type":"int","name":"filter_flags","decl":"int filter_flags","default":null},{"type":"char[]","name":"target_name","decl":"char[] target_name","default":null},{"type":"int","name":"tn_maxlength","decl":"int tn_maxlength","default":null},{"type":"bool&","name":"tn_is_ml","decl":"bool& tn_is_ml","default":null}]},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddMultiTargetFilter":{"symbol":{"name":"AddMultiTargetFilter","docStart":6001,"docEnd":6333,"docs":{"brief":"Adds a multi-target filter function for ProcessTargetString().","tags":[{"tag":"","text":"Adds a multi-target filter function for ProcessTargetString()."},{"tag":"param:pattern","text":"Pattern to match (case sensitive)."},{"tag":"param:filter","text":"Filter function."},{"tag":"param:phrase","text":"Descriptive phrase to display on successful match."},{"tag":"param:phraseIsML","text":"True if phrase is multi-lingual, false otherwise."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"MultiTargetFilter","name":"filter","decl":"MultiTargetFilter filter","default":null},{"type":"const char[]","name":"phrase","decl":"const char[] phrase","default":null},{"type":"bool","name":"phraseIsML","decl":"bool phraseIsML","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReplyToTargetError":{"symbol":{"name":"ReplyToTargetError","docStart":4390,"docEnd":4667,"docs":{"brief":"Replies to a client with a given message describing a targetting\nfailure reason.\n\nNote: The translation phrases are found in common.phrases.txt.","tags":[{"tag":"","text":"Replies to a client with a given message describing a targetting\nfailure reason.\n\nNote: The translation phrases are found in common.phrases.txt."},{"tag":"param:client","text":"Client index, or 0 for server."},{"tag":"param:reason","text":"COMMAND_TARGET reason."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"reason","decl":"int reason","default":null}]},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveMultiTargetFilter":{"symbol":{"name":"RemoveMultiTargetFilter","docStart":6492,"docEnd":6677,"docs":{"brief":"Removes a multi-target filter function from ProcessTargetString().","tags":[{"tag":"","text":"Removes a multi-target filter function from ProcessTargetString()."},{"tag":"param:pattern","text":"Pattern to match (case sensitive)."},{"tag":"param:filter","text":"Filter function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"MultiTargetFilter","name":"filter","decl":"MultiTargetFilter filter","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"COMMAND_TARGET_EMPTY_FILTER":{"symbol":{"name":"COMMAND_TARGET_EMPTY_FILTER","docStart":2676,"docEnd":2728,"docs":{"brief":"A multi-filter (such as @all) had no targets","tags":[{"tag":"","text":"A multi-filter (such as @all) had no targets"}]},"value":"-5"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_NOT_HUMAN":{"symbol":{"name":"COMMAND_TARGET_NOT_HUMAN","docStart":2778,"docEnd":2806,"docs":{"brief":"Target was not human","tags":[{"tag":"","text":"Target was not human"}]},"value":"-6"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_FILTER_ALIVE":{"symbol":{"name":"COMMAND_FILTER_ALIVE","docStart":1745,"docEnd":1777,"docs":{"brief":"Only allow alive players","tags":[{"tag":"","text":"Only allow alive players"}]},"value":"(1<<0)"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_commandfilters_included":{"symbol":{"name":"_commandfilters_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190}},"COMMAND_FILTER_NO_MULTI":{"symbol":{"name":"COMMAND_FILTER_NO_MULTI","docStart":2077,"docEnd":2122,"docs":{"brief":"Do not allow multiple target patterns","tags":[{"tag":"","text":"Do not allow multiple target patterns"}]},"value":"(1<<4)"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_FILTER_NO_IMMUNITY":{"symbol":{"name":"COMMAND_FILTER_NO_IMMUNITY","docStart":1998,"docEnd":2027,"docs":{"brief":"Ignore immunity rules","tags":[{"tag":"","text":"Ignore immunity rules"}]},"value":"(1<<3)"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_NOT_DEAD":{"symbol":{"name":"COMMAND_TARGET_NOT_DEAD","docStart":2426,"docEnd":2459,"docs":{"brief":"Single client is not dead","tags":[{"tag":"","text":"Single client is not dead"}]},"value":"-2"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_NOT_ALIVE":{"symbol":{"name":"COMMAND_TARGET_NOT_ALIVE","docStart":2342,"docEnd":2376,"docs":{"brief":"Single client is not alive","tags":[{"tag":"","text":"Single client is not alive"}]},"value":"-1"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_FILTER_NO_BOTS":{"symbol":{"name":"COMMAND_FILTER_NO_BOTS","docStart":2172,"docEnd":2213,"docs":{"brief":"Do not allow bots to be targetted","tags":[{"tag":"","text":"Do not allow bots to be targetted"}]},"value":"(1<<5)"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_FILTER_DEAD":{"symbol":{"name":"COMMAND_FILTER_DEAD","docStart":1827,"docEnd":1859,"docs":{"brief":"Only filter dead players","tags":[{"tag":"","text":"Only filter dead players"}]},"value":"(1<<1)"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_AMBIGUOUS":{"symbol":{"name":"COMMAND_TARGET_AMBIGUOUS","docStart":2856,"docEnd":2897,"docs":{"brief":"Partial name had too many targets","tags":[{"tag":"","text":"Partial name had too many targets"}]},"value":"-7"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_IMMUNE":{"symbol":{"name":"COMMAND_TARGET_IMMUNE","docStart":2595,"docEnd":2626,"docs":{"brief":"Single client is immune","tags":[{"tag":"","text":"Single client is immune"}]},"value":"-4"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_FILTER_CONNECTED":{"symbol":{"name":"COMMAND_FILTER_CONNECTED","docStart":1909,"docEnd":1948,"docs":{"brief":"Allow players not fully in-game","tags":[{"tag":"","text":"Allow players not fully in-game"}]},"value":"(1<<2)"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_NONE":{"symbol":{"name":"COMMAND_TARGET_NONE","docStart":2265,"docEnd":2292,"docs":{"brief":"No target was found","tags":[{"tag":"","text":"No target was found"}]},"value":"0"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"COMMAND_TARGET_NOT_IN_GAME":{"symbol":{"name":"COMMAND_TARGET_NOT_IN_GAME","docStart":2509,"docEnd":2545,"docs":{"brief":"Single client is not in game","tags":[{"tag":"","text":"Single client is not in game"}]},"value":"-3"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MAX_TARGET_LENGTH":{"symbol":{"name":"MAX_TARGET_LENGTH","docStart":0,"docEnd":0,"docs":null,"value":"64"},"created":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190},"last_updated":{"hash":"02e8977ea003413553cbe20ba4cd6498aa3912a6","count":1622,"time":1192997190}}},"enums":{},"typesets":{"MultiTargetFilter":{"symbol":{"name":"MultiTargetFilter","docStart":5608,"docEnd":5850,"docs":{"brief":"Adds clients to a multi-target filter.","tags":[{"tag":"","text":"Adds clients to a multi-target filter."},{"tag":"param:pattern","text":"Pattern name."},{"tag":"param:clients","text":"Array to fill with unique, valid client indexes."},{"tag":"return","text":"True if pattern was recognized, false otherwise."}]},"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function bool(const char[] pattern, Handle clients)","parsedSignature":{"returnType":"bool","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"Handle","name":"clients","decl":"Handle clients","default":null}]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function bool(const char[] pattern, ArrayList clients)","parsedSignature":{"returnType":"bool","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"ArrayList","name":"clients","decl":"ArrayList clients","default":null}]}}]},"created":{"hash":"45fb26d28262c0d3a2fea46bc6ce557ec730f471","count":6381,"time":1549229246},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"MultiTargetFilter":{"symbol":{"name":"MultiTargetFilter","docStart":5353,"docEnd":5595,"docs":{"brief":"Adds clients to a multi-target filter.","tags":[{"tag":"","text":"Adds clients to a multi-target filter."},{"tag":"param:pattern","text":"Pattern name."},{"tag":"param:clients","text":"Array to fill with unique, valid client indexes."},{"tag":"return","text":"True if pattern was recognized, false otherwise."}]},"type":"function bool(const char[] pattern, Handle clients)","parsedSignature":{"returnType":"bool","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"Handle","name":"clients","decl":"Handle clients","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}}}},"sdkhooks":{"functions":{"SDKUnhook":{"symbol":{"name":"SDKUnhook","docStart":13065,"docEnd":13221,"docs":{"brief":"Unhooks an entity","tags":[{"tag":"","text":"Unhooks an entity"},{"tag":"param:entity","text":"Entity index"},{"tag":"param:type","text":"Type of function to unhook"},{"tag":"param:callback","text":"Callback function to unhook"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"SDKHookType","name":"type","decl":"SDKHookType type","default":null},{"type":"SDKHookCB","name":"callback","decl":"SDKHookCB callback","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"OnEntityCreated":{"symbol":{"name":"OnEntityCreated","docStart":11357,"docEnd":11468,"docs":{"brief":"When an entity is created","tags":[{"tag":"","text":"When an entity is created"},{"tag":"param:entity","text":"Entity index"},{"tag":"param:classname","text":"Class name"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"1534f8749b2fc6318251cbe4cd9593eaf3ce9e08","count":6496,"time":1581212140}},"OnLevelInit":{"symbol":{"name":"OnLevelInit","docStart":12232,"docEnd":12446,"docs":{"brief":"When the level is initialized","tags":[{"tag":"","text":"When the level is initialized"},{"tag":"param:mapName","text":"Name of the map"},{"tag":"param:mapEntities","text":"Entities of the map"},{"tag":"return","text":"Plugin_Changed if mapEntities has been edited, else no change."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"const char[]","name":"mapName","decl":"const char[] mapName","default":null},{"type":"char[2097152]","name":"mapEntities","decl":"char mapEntities[2097152]","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"SDKHook":{"symbol":{"name":"SDKHook","docStart":12525,"docEnd":12701,"docs":{"brief":"Hooks an entity","tags":[{"tag":"","text":"Hooks an entity"},{"tag":"param:entity","text":"Entity index"},{"tag":"param:type","text":"Type of function to hook"},{"tag":"param:callback","text":"Function to call when hook is called"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"SDKHookType","name":"type","decl":"SDKHookType type","default":null},{"type":"SDKHookCB","name":"callback","decl":"SDKHookCB callback","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"SDKHooks_DropWeapon":{"symbol":{"name":"SDKHooks_DropWeapon","docStart":14040,"docEnd":14432,"docs":{"brief":"Forces a client to drop the specified weapon","tags":[{"tag":"","text":"Forces a client to drop the specified weapon"},{"tag":"param:client","text":"Client index."},{"tag":"param:weapon","text":"Weapon entity index."},{"tag":"param:vecTarget","text":"Location to toss weapon to, or NULL_VECTOR for default."},{"tag":"param:vecVelocity","text":"Velocity at which to toss weapon, or NULL_VECTOR for default."},{"tag":"error","text":"Invalid client or weapon entity, weapon not owned by client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"const float[3]","name":"vecTarget","decl":"const float vecTarget[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"vecVelocity","decl":"const float vecVelocity[3]","default":"NULL_VECTOR"}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"OnEntitySpawned":{"symbol":{"name":"OnEntitySpawned","docStart":11536,"docEnd":11750,"docs":{"brief":"When an entity is spawned","tags":[{"tag":"","text":"When an entity is spawned"},{"tag":"param:entity","text":"Entity index"},{"tag":"param:classname","text":"Class name"},{"tag":"note","text":"Check for support at runtime using GetFeatureStatus on SDKHook_OnEntitySpawned capability."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null}]},"created":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"OnGetGameDescription":{"symbol":{"name":"OnGetGameDescription","docStart":11962,"docEnd":12174,"docs":{"brief":"When the game description is retrieved","tags":[{"tag":"","text":"When the game description is retrieved"},{"tag":"note","text":"Not supported on ep2v."},{"tag":"param:gameDesc","text":"Game description"},{"tag":"return","text":"Plugin_Changed if gameDesc has been edited, else no change."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"char[64]","name":"gameDesc","decl":"char gameDesc[64]","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"OnEntityDestroyed":{"symbol":{"name":"OnEntityDestroyed","docStart":11818,"docEnd":11916,"docs":{"brief":"When an entity is destroyed","tags":[{"tag":"","text":"When an entity is destroyed"},{"tag":"param:entity","text":"Entity index or edict reference."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"SDKHooks_TakeDamage":{"symbol":{"name":"SDKHooks_TakeDamage","docStart":13296,"docEnd":13820,"docs":{"brief":"Applies damage to an entity","tags":[{"tag":"","text":"Applies damage to an entity"},{"tag":"note","text":"Force application is dependent on game and damage type(s)"},{"tag":"param:entity","text":"Entity index taking damage"},{"tag":"param:inflictor","text":"Inflictor entity index"},{"tag":"param:attacker","text":"Attacker entity index"},{"tag":"param:damage","text":"Amount of damage"},{"tag":"param:damageType","text":"Bitfield of damage types"},{"tag":"param:weapon","text":"Weapon index (orangebox and later) or -1 for unspecified"},{"tag":"param:damageForce","text":"Velocity of damage force"},{"tag":"param:damagePosition","text":"Origin of damage"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"inflictor","decl":"int inflictor","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"damageType","decl":"int damageType","default":"0"},{"type":"int","name":"weapon","decl":"int weapon","default":"-1"},{"type":"const float[3]","name":"damageForce","decl":"const float damageForce[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"damagePosition","decl":"const float damagePosition[3]","default":"NULL_VECTOR"}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}},"SDKHookEx":{"symbol":{"name":"SDKHookEx","docStart":12774,"docEnd":12990,"docs":{"brief":"Hooks an entity","tags":[{"tag":"","text":"Hooks an entity"},{"tag":"param:entity","text":"Entity index"},{"tag":"param:type","text":"Type of function to hook"},{"tag":"param:callback","text":"Function to call when hook is called"},{"tag":"return","text":"Hook Successful"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"SDKHookType","name":"type","decl":"SDKHookType type","default":null},{"type":"SDKHookCB","name":"callback","decl":"SDKHookCB callback","default":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"7bab9cc344757418421d8c21ec2c0d53b9af49e2","count":6609,"time":1596769267}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"DMG_PARALYZE":{"symbol":{"name":"DMG_PARALYZE","docStart":3550,"docEnd":3586,"docs":{"brief":"slows affected creature down","tags":[{"tag":"","text":"slows affected creature down"}]},"value":"(1 << 15)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_BUCKSHOT":{"symbol":{"name":"DMG_BUCKSHOT","docStart":4902,"docEnd":4957,"docs":{"brief":"not quite a bullet. Little, rounder, different.","tags":[{"tag":"","text":"not quite a bullet. Little, rounder, different."}]},"value":"(1 << 29)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_CRIT":{"symbol":{"name":"DMG_CRIT","docStart":5037,"docEnd":5068,"docs":{"brief":"TF2 crits and minicrits","tags":[{"tag":"","text":"TF2 crits and minicrits"}]},"value":"DMG_ACID"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_ALWAYSGIB":{"symbol":{"name":"DMG_ALWAYSGIB","docStart":3351,"docEnd":3436,"docs":{"brief":"with this bit OR'd in, any damage type can be made to gib victims upon death.","tags":[{"tag":"","text":"with this bit OR'd in, any damage type can be made to gib victims upon death."}]},"value":"(1 << 13)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_POISON":{"symbol":{"name":"DMG_POISON","docStart":3714,"docEnd":3776,"docs":{"brief":"blood poisoning - heals over time like drowning damage","tags":[{"tag":"","text":"blood poisoning - heals over time like drowning damage"}]},"value":"(1 << 17)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_SONIC":{"symbol":{"name":"DMG_SONIC","docStart":2970,"docEnd":2999,"docs":{"brief":"sound pulse shockwave","tags":[{"tag":"","text":"sound pulse shockwave"}]},"value":"(1 << 9)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_USEDISTANCEMOD":{"symbol":{"name":"DMG_USEDISTANCEMOD","docStart":5518,"docEnd":5543,"docs":{"brief":"Do damage falloff","tags":[{"tag":"","text":"Do damage falloff"}]},"value":"DMG_SLOWBURN"},"created":{"hash":"8c61fdc99da4689436087d52d6670c26efb401a4","count":6243,"time":1516975614},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_ACID":{"symbol":{"name":"DMG_ACID","docStart":3974,"docEnd":4011,"docs":{"brief":"toxic chemicals or acid burns","tags":[{"tag":"","text":"toxic chemicals or acid burns"}]},"value":"(1 << 20)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_ENERGYBEAM":{"symbol":{"name":"DMG_ENERGYBEAM","docStart":3048,"docEnd":3088,"docs":{"brief":"laser or other high energy beam","tags":[{"tag":"","text":"laser or other high energy beam"}]},"value":"(1 << 10)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_REMOVENORAGDOLL":{"symbol":{"name":"DMG_REMOVENORAGDOLL","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 22)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788}},"DMG_DROWN":{"symbol":{"name":"DMG_DROWN","docStart":3485,"docEnd":3501,"docs":{"brief":"Drowning","tags":[{"tag":"","text":"Drowning"}]},"value":"(1 << 14)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_SLOWBURN":{"symbol":{"name":"DMG_SLOWBURN","docStart":4060,"docEnd":4078,"docs":{"brief":"in an oven","tags":[{"tag":"","text":"in an oven"}]},"value":"(1 << 21)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_DROWNRECOVER":{"symbol":{"name":"DMG_DROWNRECOVER","docStart":3900,"docEnd":3925,"docs":{"brief":"drowning recovery","tags":[{"tag":"","text":"drowning recovery"}]},"value":"(1 << 19)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_RADIATION":{"symbol":{"name":"DMG_RADIATION","docStart":3825,"docEnd":3851,"docs":{"brief":"radiation exposure","tags":[{"tag":"","text":"radiation exposure"}]},"value":"(1 << 18)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_NOCLOSEDISTANCEMOD":{"symbol":{"name":"DMG_NOCLOSEDISTANCEMOD","docStart":5273,"docEnd":5314,"docs":{"brief":"Don't do damage falloff too close","tags":[{"tag":"","text":"Don't do damage falloff too close"}]},"value":"DMG_POISON"},"created":{"hash":"8c61fdc99da4689436087d52d6670c26efb401a4","count":6243,"time":1516975614},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_DISSOLVE":{"symbol":{"name":"DMG_DISSOLVE","docStart":4665,"docEnd":4684,"docs":{"brief":"Dissolving!","tags":[{"tag":"","text":"Dissolving!"}]},"value":"(1 << 26)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_SLASH":{"symbol":{"name":"DMG_SLASH","docStart":2452,"docEnd":2480,"docs":{"brief":"cut, clawed, stabbed","tags":[{"tag":"","text":"cut, clawed, stabbed"}]},"value":"(1 << 2)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_BULLET":{"symbol":{"name":"DMG_BULLET","docStart":2391,"docEnd":2403,"docs":{"brief":"shot","tags":[{"tag":"","text":"shot"}]},"value":"(1 << 1)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_NEVERGIB":{"symbol":{"name":"DMG_NEVERGIB","docStart":3218,"docEnd":3302,"docs":{"brief":"with this bit OR'd in, no damage type will be able to gib victims upon death","tags":[{"tag":"","text":"with this bit OR'd in, no damage type will be able to gib victims upon death"}]},"value":"(1 << 12)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_DIRECT":{"symbol":{"name":"DMG_DIRECT","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 28)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788}},"DMG_BLAST":{"symbol":{"name":"DMG_BLAST","docStart":2739,"docEnd":2769,"docs":{"brief":"explosive blast damage","tags":[{"tag":"","text":"explosive blast damage"}]},"value":"(1 << 6)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_BLAST_SURFACE":{"symbol":{"name":"DMG_BLAST_SURFACE","docStart":4733,"docEnd":4807,"docs":{"brief":"A blast on the surface of water that cannot harm things underwater","tags":[{"tag":"","text":"A blast on the surface of water that cannot harm things underwater"}]},"value":"(1 << 27)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_PHYSGUN":{"symbol":{"name":"DMG_PHYSGUN","docStart":4404,"docEnd":4462,"docs":{"brief":"Hit by manipulator. Usually doesn't do any damage.","tags":[{"tag":"","text":"Hit by manipulator. Usually doesn't do any damage."}]},"value":"(1 << 23)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_FALL":{"symbol":{"name":"DMG_FALL","docStart":2670,"docEnd":2690,"docs":{"brief":"fell too far","tags":[{"tag":"","text":"fell too far"}]},"value":"(1 << 5)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_GENERIC":{"symbol":{"name":"DMG_GENERIC","docStart":1745,"docEnd":1776,"docs":{"brief":"generic damage was done","tags":[{"tag":"","text":"generic damage was done"}]},"value":"0"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_PLASMA":{"symbol":{"name":"DMG_PLASMA","docStart":4511,"docEnd":4535,"docs":{"brief":"Shot by Cremator","tags":[{"tag":"","text":"Shot by Cremator"}]},"value":"(1 << 24)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_USE_HITLOCATIONS":{"symbol":{"name":"DMG_USE_HITLOCATIONS","docStart":5738,"docEnd":5806,"docs":{"brief":"Do hit location damage (Like the sniperrifle and ambassador)","tags":[{"tag":"","text":"Do hit location damage (Like the sniperrifle and ambassador)"}]},"value":"DMG_AIRBOAT"},"created":{"hash":"8c61fdc99da4689436087d52d6670c26efb401a4","count":6243,"time":1516975614},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_SHOCK":{"symbol":{"name":"DMG_SHOCK","docStart":2899,"docEnd":2921,"docs":{"brief":"electric shock","tags":[{"tag":"","text":"electric shock"}]},"value":"(1 << 8)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_RADIUS_MAX":{"symbol":{"name":"DMG_RADIUS_MAX","docStart":5154,"docEnd":5179,"docs":{"brief":"No damage falloff","tags":[{"tag":"","text":"No damage falloff"}]},"value":"DMG_ENERGYBEAM"},"created":{"hash":"8c61fdc99da4689436087d52d6670c26efb401a4","count":6243,"time":1516975614},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_VEHICLE":{"symbol":{"name":"DMG_VEHICLE","docStart":2597,"docEnd":2621,"docs":{"brief":"hit by a vehicle","tags":[{"tag":"","text":"hit by a vehicle"}]},"value":"(1 << 4)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_IGNITE":{"symbol":{"name":"DMG_IGNITE","docStart":5625,"docEnd":5646,"docs":{"brief":"Ignite victim","tags":[{"tag":"","text":"Ignite victim"}]},"value":"DMG_PLASMA"},"created":{"hash":"8c61fdc99da4689436087d52d6670c26efb401a4","count":6243,"time":1516975614},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_HALF_FALLOFF":{"symbol":{"name":"DMG_HALF_FALLOFF","docStart":5402,"docEnd":5428,"docs":{"brief":"50% damage falloff","tags":[{"tag":"","text":"50% damage falloff"}]},"value":"DMG_RADIATION"},"created":{"hash":"8c61fdc99da4689436087d52d6670c26efb401a4","count":6243,"time":1516975614},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_sdkhooks_included":{"symbol":{"name":"_sdkhooks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788}},"DMG_PREVENT_PHYSICS_FORCE":{"symbol":{"name":"DMG_PREVENT_PHYSICS_FORCE","docStart":3137,"docEnd":3169,"docs":{"brief":"Prevent a physics force","tags":[{"tag":"","text":"Prevent a physics force"}]},"value":"(1 << 11)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_AIRBOAT":{"symbol":{"name":"DMG_AIRBOAT","docStart":4584,"docEnd":4616,"docs":{"brief":"Hit by the airboat's gun","tags":[{"tag":"","text":"Hit by the airboat's gun"}]},"value":"(1 << 25)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_BURN":{"symbol":{"name":"DMG_BURN","docStart":2529,"docEnd":2548,"docs":{"brief":"heat burned","tags":[{"tag":"","text":"heat burned"}]},"value":"(1 << 3)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_CLUB":{"symbol":{"name":"DMG_CLUB","docStart":2818,"docEnd":2850,"docs":{"brief":"crowbar, punch, headbutt","tags":[{"tag":"","text":"crowbar, punch, headbutt"}]},"value":"(1 << 7)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DMG_CRUSH":{"symbol":{"name":"DMG_CRUSH","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 0)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788}},"DMG_NERVEGAS":{"symbol":{"name":"DMG_NERVEGAS","docStart":3635,"docEnd":3665,"docs":{"brief":"nerve toxins, very bad","tags":[{"tag":"","text":"nerve toxins, very bad"}]},"value":"(1 << 16)"},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"SDKHookType":{"symbol":{"name":"SDKHookType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"SDKHook_EndTouch","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_FireBulletsPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_OnTakeDamage","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_OnTakeDamagePost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_PreThink","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_PostThink","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_SetTransmit","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_Spawn","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_StartTouch","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_Think","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_Touch","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_TraceAttack","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_TraceAttackPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponCanSwitchTo","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponCanUse","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponDrop","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponEquip","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponSwitch","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_ShouldCollide","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_PreThinkPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_PostThinkPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_ThinkPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_EndTouchPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_GroundEntChangedPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_SpawnPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_StartTouchPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_TouchPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_VPhysicsUpdate","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_VPhysicsUpdatePost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponCanSwitchToPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponCanUsePost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponDropPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponEquipPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_WeaponSwitchPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_Use","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_UsePost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_Reload","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_ReloadPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_GetMaxHealth","docStart":6719,"docEnd":6741,"docs":{"brief":"ep2v and later","tags":[{"tag":"","text":"ep2v and later"}]},"value":null},{"name":"SDKHook_Blocked","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_BlockedPost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_OnTakeDamageAlive","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_OnTakeDamageAlivePost","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"SDKHook_CanBeAutobalanced","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UseType":{"symbol":{"name":"UseType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Use_Off","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Use_On","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Use_Set","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Use_Toggle","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788}}},"typesets":{"SDKHookCB":{"symbol":{"name":"SDKHookCB","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":8050,"docEnd":8085,"docs":{"brief":"PreThink/Post\nPostThink/Post","tags":[{"tag":"","text":"PreThink/Post\nPostThink/Post"}]},"type":"function void(int client)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]}},{"docStart":8117,"docEnd":8125,"docs":{"brief":"Spawn","tags":[{"tag":"","text":"Spawn"}]},"type":"function Action(int entity)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]}},{"docStart":8159,"docEnd":8231,"docs":{"brief":"GroundEntChanged\nSpawnPost\nThink/Post\nVPhysicsUpdate/Post","tags":[{"tag":"","text":"GroundEntChanged\nSpawnPost\nThink/Post\nVPhysicsUpdate/Post"}]},"type":"function void(int entity)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]}},{"docStart":8263,"docEnd":8311,"docs":{"brief":"EndTouch\nStartTouch\nTouch\nBlocked","tags":[{"tag":"","text":"EndTouch\nStartTouch\nTouch\nBlocked"}]},"type":"function Action(int entity, int other)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"other","decl":"int other","default":null}]}},{"docStart":8356,"docEnd":8404,"docs":{"brief":"EndTouchPost\nStartTouchPost\nTouchPost","tags":[{"tag":"","text":"EndTouchPost\nStartTouchPost\nTouchPost"}]},"type":"function void(int entity, int other)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"other","decl":"int other","default":null}]}},{"docStart":8447,"docEnd":8461,"docs":{"brief":"SetTransmit","tags":[{"tag":"","text":"SetTransmit"}]},"type":"function Action(int entity, int client)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"client","decl":"int client","default":null}]}},{"docStart":8507,"docEnd":8592,"docs":{"brief":"WeaponCanSwitchTo\nWeaponCanUse\nWeaponDrop\nWeaponEquip\nWeaponSwitch","tags":[{"tag":"","text":"WeaponCanSwitchTo\nWeaponCanUse\nWeaponDrop\nWeaponEquip\nWeaponSwitch"}]},"type":"function Action(int client, int weapon)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null}]}},{"docStart":8638,"docEnd":8743,"docs":{"brief":"WeaponCanSwitchToPost\nWeaponCanUsePost\nWeaponDropPost\nWeaponEquipPost\nWeaponSwitchPost","tags":[{"tag":"","text":"WeaponCanSwitchToPost\nWeaponCanUsePost\nWeaponDropPost\nWeaponEquipPost\nWeaponSwitchPost"}]},"type":"function void(int client, int weapon)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null}]}},{"docStart":8787,"docEnd":8819,"docs":{"brief":"GetMaxHealth (ep2v and later)","tags":[{"tag":"","text":"GetMaxHealth (ep2v and later)"}]},"type":"function Action(int entity, int& maxhealth)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int&","name":"maxhealth","decl":"int& maxhealth","default":null}]}},{"docStart":8869,"docEnd":8924,"docs":{"brief":"OnTakeDamage\nOnTakeDamageAlive\nSDKHooks 1.0+","tags":[{"tag":"","text":"OnTakeDamage\nOnTakeDamageAlive\nSDKHooks 1.0+"}]},"type":"function Action(int victim, int& attacker, int& inflictor, float& damage, int& damagetype)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int&","name":"attacker","decl":"int& attacker","default":null},{"type":"int&","name":"inflictor","decl":"int& inflictor","default":null},{"type":"float&","name":"damage","decl":"float& damage","default":null},{"type":"int&","name":"damagetype","decl":"int& damagetype","default":null}]}},{"docStart":9021,"docEnd":9220,"docs":{"brief":"OnTakeDamage\nOnTakeDamageAlive\nNote: The weapon parameter is not used by all games and damage sources.\nNote: Force application is dependent on game and damage type(s)\nSDKHooks 2.0+","tags":[{"tag":"","text":"OnTakeDamage\nOnTakeDamageAlive\nNote: The weapon parameter is not used by all games and damage sources.\nNote: Force application is dependent on game and damage type(s)\nSDKHooks 2.0+"}]},"type":"function Action(int victim, int& attacker, int& inflictor, float& damage, int& damagetype, int& weapon, float damageForce[3], float damagePosition[3])","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int&","name":"attacker","decl":"int& attacker","default":null},{"type":"int&","name":"inflictor","decl":"int& inflictor","default":null},{"type":"float&","name":"damage","decl":"float& damage","default":null},{"type":"int&","name":"damagetype","decl":"int& damagetype","default":null},{"type":"int&","name":"weapon","decl":"int& weapon","default":null},{"type":"float","name":"damageForce[3]","decl":"float damageForce[3]","default":null},{"type":"float","name":"damagePosition[3]","decl":"float damagePosition[3]","default":null}]}},{"docStart":9377,"docEnd":9750,"docs":{"brief":"OnTakeDamage\nOnTakeDamageAlive\nNote: The weapon parameter is not used by all games and damage sources.\nNote: Force application is dependent on game and damage type(s)\nSDKHooks 2.1+  (can check for support at runtime using GetFeatureStatus on SDKHook_DmgCustomInOTD capability.\nDON'T attempt to access 'damagecustom' var if feature status != available","tags":[{"tag":"","text":"OnTakeDamage\nOnTakeDamageAlive\nNote: The weapon parameter is not used by all games and damage sources.\nNote: Force application is dependent on game and damage type(s)\nSDKHooks 2.1+  (can check for support at runtime using GetFeatureStatus on SDKHook_DmgCustomInOTD capability.\nDON'T attempt to access 'damagecustom' var if feature status != available"}]},"type":"function Action(int victim, int& attacker, int& inflictor, float& damage, int& damagetype, int& weapon, float damageForce[3], float damagePosition[3], int damagecustom)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int&","name":"attacker","decl":"int& attacker","default":null},{"type":"int&","name":"inflictor","decl":"int& inflictor","default":null},{"type":"float&","name":"damage","decl":"float& damage","default":null},{"type":"int&","name":"damagetype","decl":"int& damagetype","default":null},{"type":"int&","name":"weapon","decl":"int& weapon","default":null},{"type":"float","name":"damageForce[3]","decl":"float damageForce[3]","default":null},{"type":"float","name":"damagePosition[3]","decl":"float damagePosition[3]","default":null},{"type":"int","name":"damagecustom","decl":"int damagecustom","default":null}]}},{"docStart":9927,"docEnd":9972,"docs":{"brief":"OnTakeDamagePost\nOnTakeDamageAlivePost","tags":[{"tag":"","text":"OnTakeDamagePost\nOnTakeDamageAlivePost"}]},"type":"function void(int victim, int attacker, int inflictor, float damage, int damagetype)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"int","name":"inflictor","decl":"int inflictor","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"damagetype","decl":"int damagetype","default":null}]}},{"docStart":10063,"docEnd":10108,"docs":{"brief":"OnTakeDamagePost\nOnTakeDamageAlivePost","tags":[{"tag":"","text":"OnTakeDamagePost\nOnTakeDamageAlivePost"}]},"type":"function void(int victim, int attacker, int inflictor, float damage, int damagetype, int weapon, const float damageForce[3], const float damagePosition[3])","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"int","name":"inflictor","decl":"int inflictor","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"damagetype","decl":"int damagetype","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"const float","name":"damageForce[3]","decl":"const float damageForce[3]","default":null},{"type":"const float","name":"damagePosition[3]","decl":"const float damagePosition[3]","default":null}]}},{"docStart":10270,"docEnd":10315,"docs":{"brief":"OnTakeDamagePost\nOnTakeDamageAlivePost","tags":[{"tag":"","text":"OnTakeDamagePost\nOnTakeDamageAlivePost"}]},"type":"function void(int victim, int attacker, int inflictor, float damage, int damagetype, int weapon, const float damageForce[3], const float damagePosition[3], int damagecustom)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"int","name":"inflictor","decl":"int inflictor","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"damagetype","decl":"int damagetype","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"const float","name":"damageForce[3]","decl":"const float damageForce[3]","default":null},{"type":"const float","name":"damagePosition[3]","decl":"const float damagePosition[3]","default":null},{"type":"int","name":"damagecustom","decl":"int damagecustom","default":null}]}},{"docStart":10497,"docEnd":10515,"docs":{"brief":"FireBulletsPost","tags":[{"tag":"","text":"FireBulletsPost"}]},"type":"function void(int client, int shots, const char[] weaponname)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"shots","decl":"int shots","default":null},{"type":"const char[]","name":"weaponname","decl":"const char[] weaponname","default":null}]}},{"docStart":10583,"docEnd":10597,"docs":{"brief":"TraceAttack","tags":[{"tag":"","text":"TraceAttack"}]},"type":"function Action(int victim, int& attacker, int& inflictor, float& damage, int& damagetype, int& ammotype, int hitbox, int hitgroup)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int&","name":"attacker","decl":"int& attacker","default":null},{"type":"int&","name":"inflictor","decl":"int& inflictor","default":null},{"type":"float&","name":"damage","decl":"float& damage","default":null},{"type":"int&","name":"damagetype","decl":"int& damagetype","default":null},{"type":"int&","name":"ammotype","decl":"int& ammotype","default":null},{"type":"int","name":"hitbox","decl":"int hitbox","default":null},{"type":"int","name":"hitgroup","decl":"int hitgroup","default":null}]}},{"docStart":10735,"docEnd":10753,"docs":{"brief":"TraceAttackPost","tags":[{"tag":"","text":"TraceAttackPost"}]},"type":"function void(int victim, int attacker, int inflictor, float damage, int damagetype, int ammotype, int hitbox, int hitgroup)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"int","name":"inflictor","decl":"int inflictor","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"damagetype","decl":"int damagetype","default":null},{"type":"int","name":"ammotype","decl":"int ammotype","default":null},{"type":"int","name":"hitbox","decl":"int hitbox","default":null},{"type":"int","name":"hitgroup","decl":"int hitgroup","default":null}]}},{"docStart":10884,"docEnd":10900,"docs":{"brief":"ShouldCollide","tags":[{"tag":"","text":"ShouldCollide"}]},"type":"function bool(int entity, int collisiongroup, int contentsmask, bool originalResult)","parsedSignature":{"returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"collisiongroup","decl":"int collisiongroup","default":null},{"type":"int","name":"contentsmask","decl":"int contentsmask","default":null},{"type":"bool","name":"originalResult","decl":"bool originalResult","default":null}]}},{"docStart":10991,"docEnd":10997,"docs":{"brief":"Use","tags":[{"tag":"","text":"Use"}]},"type":"function Action(int entity, int activator, int caller, UseType type, float value)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"activator","decl":"int activator","default":null},{"type":"int","name":"caller","decl":"int caller","default":null},{"type":"UseType","name":"type","decl":"UseType type","default":null},{"type":"float","name":"value","decl":"float value","default":null}]}},{"docStart":11085,"docEnd":11095,"docs":{"brief":"UsePost","tags":[{"tag":"","text":"UsePost"}]},"type":"function void(int entity, int activator, int caller, UseType type, float value)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"activator","decl":"int activator","default":null},{"type":"int","name":"caller","decl":"int caller","default":null},{"type":"UseType","name":"type","decl":"UseType type","default":null},{"type":"float","name":"value","decl":"float value","default":null}]}},{"docStart":11181,"docEnd":11190,"docs":{"brief":"Reload","tags":[{"tag":"","text":"Reload"}]},"type":"function Action(int weapon)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"weapon","decl":"int weapon","default":null}]}},{"docStart":11224,"docEnd":11238,"docs":{"brief":"Reload post","tags":[{"tag":"","text":"Reload post"}]},"type":"function void(int weapon, bool bSuccessful)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"bool","name":"bSuccessful","decl":"bool bSuccessful","default":null}]}},{"docStart":11288,"docEnd":11308,"docs":{"brief":"CanBeAutobalanced","tags":[{"tag":"","text":"CanBeAutobalanced"}]},"type":"function bool(int client, bool origRet)","parsedSignature":{"returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"origRet","decl":"bool origRet","default":null}]}}]},"created":{"hash":"a9e252314d7fedb2f7206099296967aad97136e2","count":5074,"time":1418202788},"last_updated":{"hash":"1534f8749b2fc6318251cbe4cd9593eaf3ce9e08","count":6496,"time":1581212140}}},"typedefs":{}},"functions":{"functions":{"Call_PushCell":{"symbol":{"name":"Call_PushCell","docStart":13907,"docEnd":14130,"docs":{"brief":"Pushes a cell onto the current call.","tags":[{"tag":"","text":"Pushes a cell onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Cell value to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushArray":{"symbol":{"name":"Call_PushArray","docStart":15041,"docEnd":15389,"docs":{"brief":"Pushes an array onto the current call.","tags":[{"tag":"","text":"Pushes an array onto the current call."},{"tag":"note","text":"Changes to array are not copied back to caller. Use PushArrayEx() to do this."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Array to push."},{"tag":"param:size","text":"Size of array."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"const any[]","name":"value","decl":"const any[] value","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushNullString":{"symbol":{"name":"Call_PushNullString","docStart":17263,"docEnd":17472,"docs":{"brief":"Pushes the NULL_STRING onto the current call.","tags":[{"tag":"","text":"Pushes the NULL_STRING onto the current call."},{"tag":"see","text":"IsNullString"},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"de42dfc783c79bec8b29f0a2b329c0ee1d34fe2e","count":6086,"time":1493960191},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"IsNativeParamNullString":{"symbol":{"name":"IsNativeParamNullString","docStart":24064,"docEnd":24253,"docs":{"brief":"Check if the native parameter is the NULL_STRING.","tags":[{"tag":"","text":"Check if the native parameter is the NULL_STRING."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"True if NULL_STRING, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},"created":{"hash":"b67da15b5b3e773b9e59fb29db1c45e520f736b2","count":6060,"time":1488566823},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushNullVector":{"symbol":{"name":"Call_PushNullVector","docStart":15935,"docEnd":16144,"docs":{"brief":"Pushes the NULL_VECTOR onto the current call.","tags":[{"tag":"","text":"Pushes the NULL_VECTOR onto the current call."},{"tag":"see","text":"IsNullVector"},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"de42dfc783c79bec8b29f0a2b329c0ee1d34fe2e","count":6086,"time":1493960191},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_StartForward":{"symbol":{"name":"Call_StartForward","docStart":13085,"docEnd":13376,"docs":{"brief":"Starts a call to functions in a forward's call list.","tags":[{"tag":"","text":"Starts a call to functions in a forward's call list."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:fwd","text":"Handle to global or private forward."},{"tag":"error","text":"Invalid or corrupt forward handle or called before another call has completed."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushCellRef":{"symbol":{"name":"Call_PushCellRef","docStart":14173,"docEnd":14413,"docs":{"brief":"Pushes a cell by reference onto the current call.","tags":[{"tag":"","text":"Pushes a cell by reference onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Cell reference to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any&","name":"value","decl":"any& value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetNativeStringLength":{"symbol":{"name":"GetNativeStringLength","docStart":19588,"docEnd":20105,"docs":{"brief":"Retrieves the string length from a native parameter string.  This is useful for\nfetching the entire string using dynamic arrays.","tags":[{"tag":"","text":"Retrieves the string length from a native parameter string.  This is useful for\nfetching the entire string using dynamic arrays."},{"tag":"note","text":"If this function succeeds, Get/SetNativeString will also succeed."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:length","text":"Stores the length of the string."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"int&","name":"length","decl":"int& length","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushStringEx":{"symbol":{"name":"Call_PushStringEx","docStart":16549,"docEnd":17175,"docs":{"brief":"Pushes a string onto the current call.","tags":[{"tag":"","text":"Pushes a string onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"String to push."},{"tag":"param:length","text":"Length of string buffer."},{"tag":"param:szflags","text":"Flags determining how string should be handled.\nSee SM_PARAM_STRING_* constants for details.\nThe default (0) is to push ASCII."},{"tag":"param:cpflags","text":"Whether or not changes should be copied back to the input array.\nSee SM_PARAM_* constants for details."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"length","decl":"int length","default":null},{"type":"int","name":"szflags","decl":"int szflags","default":null},{"type":"int","name":"cpflags","decl":"int cpflags","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushFloat":{"symbol":{"name":"Call_PushFloat","docStart":14460,"docEnd":14694,"docs":{"brief":"Pushes a float onto the current call.","tags":[{"tag":"","text":"Pushes a float onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Floating point value to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetNativeArray":{"symbol":{"name":"GetNativeArray","docStart":22851,"docEnd":23259,"docs":{"brief":"Gets an array from a native parameter (always by reference).","tags":[{"tag":"","text":"Gets an array from a native parameter (always by reference)."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:local","text":"Local array to copy into."},{"tag":"param:size","text":"Maximum size of local array."},{"tag":"return","text":"SP_ERROR_NONE on success, anything else on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"any[]","name":"local","decl":"any[] local","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_StartFunction":{"symbol":{"name":"Call_StartFunction","docStart":13424,"docEnd":13840,"docs":{"brief":"Starts a call to a function.","tags":[{"tag":"","text":"Starts a call to a function."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to call."},{"tag":"error","text":"Invalid or corrupt plugin handle, invalid function, or called before another call has completed."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"Function","name":"func","decl":"Function func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_Cancel":{"symbol":{"name":"Call_Cancel","docStart":17907,"docEnd":18101,"docs":{"brief":"Cancels a call to a function or forward's call list.","tags":[{"tag":"","text":"Cancels a call to a function or forward's call list."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"SetNativeString":{"symbol":{"name":"SetNativeString","docStart":20786,"docEnd":21409,"docs":{"brief":"Sets a string in a native parameter.","tags":[{"tag":"","text":"Sets a string in a native parameter."},{"tag":"note","text":"Output conditions are undefined on failure."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:source","text":"Source string to use."},{"tag":"param:maxlength","text":"Maximum number of bytes to write."},{"tag":"param:utf8","text":"If false, string will not be written\nwith UTF8 safety."},{"tag":"param:bytes","text":"Optionally store the number of bytes written."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"const char[]","name":"source","decl":"const char[] source","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"utf8","decl":"bool utf8","default":"true"},{"type":"int&","name":"bytes","decl":"int& bytes","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"CreateNative":{"symbol":{"name":"CreateNative","docStart":18858,"docEnd":19220,"docs":{"brief":"Creates a dynamic native.  This should only be called in AskPluginLoad(), or\nelse you risk not having your native shared with other plugins.","tags":[{"tag":"","text":"Creates a dynamic native.  This should only be called in AskPluginLoad(), or\nelse you risk not having your native shared with other plugins."},{"tag":"param:name","text":"Name of the dynamic native; must be unique among\nall other registered dynamic natives."},{"tag":"param:func","text":"Function to use as the dynamic native."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"NativeCall","name":"func","decl":"NativeCall func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"CreateForward":{"symbol":{"name":"CreateForward","docStart":10273,"docEnd":10729,"docs":{"brief":"Creates a private forward.","tags":[{"tag":"","text":"Creates a private forward."},{"tag":"note","text":"No functions are automatically added. Use AddToForward() to do this."},{"tag":"note","text":"Private forwards can be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new private forward."},{"tag":"error","text":"More than 32 parameter types passed."}]},"kind":"native","returnType":"PrivateForward","arguments":[{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"664b35255994f4d15b945945f850900fbe1f3a08","count":6484,"time":1578860588}},"RemoveAllFromForward":{"symbol":{"name":"RemoveAllFromForward","docStart":12475,"docEnd":13020,"docs":{"brief":"Removes all instances of a plugin from a private forward's call list.","tags":[{"tag":"","text":"Removes all instances of a plugin from a private forward's call list."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:fwd","text":"Handle to private forward."},{"tag":"param:plugin","text":"Handle of the plugin to remove instances of.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"return","text":"Number of functions removed from forward."},{"tag":"error","text":"Invalid or corrupt private forward handle or invalid or corrupt plugin handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"SetNativeCellRef":{"symbol":{"name":"SetNativeCellRef","docStart":22497,"docEnd":22794,"docs":{"brief":"Sets a cell from a native parameter, by reference.","tags":[{"tag":"","text":"Sets a cell from a native parameter, by reference."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:value","text":"Cell value at the parameter number to set by reference."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"FormatNativeString":{"symbol":{"name":"FormatNativeString","docStart":24306,"docEnd":25143,"docs":{"brief":"Formats a string using parameters from a native.","tags":[{"tag":"","text":"Formats a string using parameters from a native."},{"tag":"note","text":"All parameter indexes start at 1."},{"tag":"note","text":"If the input and output buffers overlap, the contents\nof the output buffer at the end is undefined."},{"tag":"param:out_param","text":"Output parameter number to write to.  If 0, out_string is used."},{"tag":"param:fmt_param","text":"Format parameter number.  If 0, fmt_string is used."},{"tag":"param:vararg_param","text":"First variable parameter number."},{"tag":"param:out_len","text":"Output string buffer maximum length (always required)."},{"tag":"param:written","text":"Optionally stores the number of bytes written."},{"tag":"param:out_string","text":"Output string buffer to use if out_param is not used."},{"tag":"param:fmt_string","text":"Format string to use if fmt_param is not used."},{"tag":"return","text":"SP_ERROR_NONE on success, anything else on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"out_param","decl":"int out_param","default":null},{"type":"int","name":"fmt_param","decl":"int fmt_param","default":null},{"type":"int","name":"vararg_param","decl":"int vararg_param","default":null},{"type":"int","name":"out_len","decl":"int out_len","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"},{"type":"char[]","name":"out_string","decl":"char[] out_string","default":"\"\""},{"type":"const char[]","name":"fmt_string","decl":"const char[] fmt_string","default":"\"\""}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushFloatRef":{"symbol":{"name":"Call_PushFloatRef","docStart":14740,"docEnd":14991,"docs":{"brief":"Pushes a float by reference onto the current call.","tags":[{"tag":"","text":"Pushes a float by reference onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Floating point reference to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"float&","name":"value","decl":"float& value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetNativeFunction":{"symbol":{"name":"GetNativeFunction","docStart":21824,"docEnd":22124,"docs":{"brief":"Gets a function pointer from a native parameter.","tags":[{"tag":"","text":"Gets a function pointer from a native parameter."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"Function pointer at the given parameter number."},{"tag":"error","text":"Invalid parameter number, or calling from a non-native function."}]},"kind":"native","returnType":"Function","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetFunctionByName":{"symbol":{"name":"GetFunctionByName","docStart":9096,"docEnd":9482,"docs":{"brief":"Gets a function id from a function name.","tags":[{"tag":"","text":"Gets a function id from a function name."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to search in the calling plugin."},{"tag":"param:name","text":"Name of the function."},{"tag":"return","text":"Function id or INVALID_FUNCTION if not found."},{"tag":"error","text":"Invalid or corrupt plugin handle."}]},"kind":"native","returnType":"Function","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"CreateGlobalForward":{"symbol":{"name":"CreateGlobalForward","docStart":9556,"docEnd":10177,"docs":{"brief":"Creates a global forward.","tags":[{"tag":"","text":"Creates a global forward."},{"tag":"note","text":"The name used to create the forward is used as its public function in all target plugins."},{"tag":"note","text":"This is ideal for global, static forwards that are never changed."},{"tag":"note","text":"Global forwards cannot be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:name","text":"Name of public function to use in forward."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new global forward."},{"tag":"error","text":"More than 32 parameter types passed."}]},"kind":"native","returnType":"GlobalForward","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"664b35255994f4d15b945945f850900fbe1f3a08","count":6484,"time":1578860588}},"GetNativeString":{"symbol":{"name":"GetNativeString","docStart":20168,"docEnd":20698,"docs":{"brief":"Retrieves a string from a native parameter.","tags":[{"tag":"","text":"Retrieves a string from a native parameter."},{"tag":"note","text":"Output conditions are undefined on failure."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:buffer","text":"Buffer to store the string in."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"param:bytes","text":"Optionally store the number of bytes written."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"bytes","decl":"int& bytes","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetNativeCell":{"symbol":{"name":"GetNativeCell","docStart":21519,"docEnd":21782,"docs":{"brief":"Gets a cell from a native parameter.","tags":[{"tag":"","text":"Gets a cell from a native parameter."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"Cell value at the parameter number."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_PushString":{"symbol":{"name":"Call_PushString","docStart":16184,"docEnd":16495,"docs":{"brief":"Pushes a string onto the current call.","tags":[{"tag":"","text":"Pushes a string onto the current call."},{"tag":"note","text":"Changes to string are not copied back to caller. Use PushStringEx() to do this."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"String to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"RequestFrame":{"symbol":{"name":"RequestFrame","docStart":25561,"docEnd":25755,"docs":{"brief":"Creates a single use Next Frame hook.","tags":[{"tag":"","text":"Creates a single use Next Frame hook."},{"tag":"param:Function","text":"Function to call on the next frame."},{"tag":"param:data","text":"Value to be passed on the invocation of the Function."}]},"kind":"native","returnType":"void","arguments":[{"type":"RequestFrameCallback","name":"Function","decl":"RequestFrameCallback Function","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"207584818f7b6b0c973ec680a2956af3d24ab5f7","count":6439,"time":1567458022}},"Call_PushArrayEx":{"symbol":{"name":"Call_PushArrayEx","docStart":15451,"docEnd":15864,"docs":{"brief":"Pushes an array onto the current call.","tags":[{"tag":"","text":"Pushes an array onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Array to push."},{"tag":"param:size","text":"Size of array."},{"tag":"param:cpflags","text":"Whether or not changes should be copied back to the input array.\nSee SP_PARAM_* constants for details."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[]","name":"value","decl":"any[] value","default":null},{"type":"int","name":"size","decl":"int size","default":null},{"type":"int","name":"cpflags","decl":"int cpflags","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"SetNativeArray":{"symbol":{"name":"SetNativeArray","docStart":23325,"docEnd":23750,"docs":{"brief":"Copies a local array into a native parameter array (always by reference).","tags":[{"tag":"","text":"Copies a local array into a native parameter array (always by reference)."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:local","text":"Local array to copy from."},{"tag":"param:size","text":"Size of the local array to copy."},{"tag":"return","text":"SP_ERROR_NONE on success, anything else on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"const any[]","name":"local","decl":"const any[] local","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetForwardFunctionCount":{"symbol":{"name":"GetForwardFunctionCount","docStart":10801,"docEnd":11072,"docs":{"brief":"Returns the number of functions in a global or private forward's call list.","tags":[{"tag":"","text":"Returns the number of functions in a global or private forward's call list."},{"tag":"param:fwd","text":"Handle to global or private forward."},{"tag":"return","text":"Number of functions in forward."},{"tag":"error","text":"Invalid or corrupt forward handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"GetNativeCellRef":{"symbol":{"name":"GetNativeCellRef","docStart":22175,"docEnd":22452,"docs":{"brief":"Gets a cell from a native parameter, by reference.","tags":[{"tag":"","text":"Gets a cell from a native parameter, by reference."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"Cell value at the parameter number."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"RemoveFromForward":{"symbol":{"name":"RemoveFromForward","docStart":11757,"docEnd":12397,"docs":{"brief":"Removes a function from a private forward's call list.","tags":[{"tag":"","text":"Removes a function from a private forward's call list."},{"tag":"note","text":"Only removes one instance."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:fwd","text":"Handle to private forward."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to remove from forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"Function","name":"func","decl":"Function func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"Call_Finish":{"symbol":{"name":"Call_Finish","docStart":17512,"docEnd":17863,"docs":{"brief":"Completes a call to a function or forward's call list.","tags":[{"tag":"","text":"Completes a call to a function or forward's call list."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:result","text":"Return value of function or forward's call list."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"int","arguments":[{"type":"any&","name":"result","decl":"any& result","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"ThrowNativeError":{"symbol":{"name":"ThrowNativeError","docStart":19287,"docEnd":19516,"docs":{"brief":"Throws an error in the calling plugin of a native, instead of your own plugin.","tags":[{"tag":"","text":"Throws an error in the calling plugin of a native, instead of your own plugin."},{"tag":"param:error","text":"Error code to use."},{"tag":"param:fmt","text":"Error message format."},{"tag":"param:...","text":"Format arguments."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"error","decl":"int error","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"IsNativeParamNullVector":{"symbol":{"name":"IsNativeParamNullVector","docStart":23822,"docEnd":24011,"docs":{"brief":"Check if the native parameter is the NULL_VECTOR.","tags":[{"tag":"","text":"Check if the native parameter is the NULL_VECTOR."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"True if NULL_VECTOR, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},"created":{"hash":"b67da15b5b3e773b9e59fb29db1c45e520f736b2","count":6060,"time":1488566823},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}},"AddToForward":{"symbol":{"name":"AddToForward","docStart":11125,"docEnd":11684,"docs":{"brief":"Adds a function to a private forward's call list.","tags":[{"tag":"","text":"Adds a function to a private forward's call list."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:fwd","text":"Handle to private forward."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to add to forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"Function","name":"func","decl":"Function func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}}},"methodmaps":{"GlobalForward":{"symbol":{"name":"GlobalForward","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"GlobalForward","docStart":5871,"docEnd":6513,"docs":{"brief":"Creates a global forward.","tags":[{"tag":"","text":"Creates a global forward."},{"tag":"note","text":"The name used to create the forward is used as its public function in all target plugins."},{"tag":"note","text":"This is ideal for global, static forwards that are never changed."},{"tag":"note","text":"Global forwards cannot be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:name","text":"Name of public function to use in forward."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new global forward."},{"tag":"error","text":"More than 32 parameter types passed."}]},"kind":"native","returnType":"GlobalForward","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]}],"properties":[{"name":"FunctionCount","docStart":6598,"docEnd":6676,"docs":{"brief":"Returns the number of functions in a global or private forward's call list.","tags":[{"tag":"","text":"Returns the number of functions in a global or private forward's call list."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662},"last_updated":{"hash":"664b35255994f4d15b945945f850900fbe1f3a08","count":6484,"time":1578860588}},"PrivateForward":{"symbol":{"name":"PrivateForward","docStart":0,"docEnd":0,"docs":null,"parent":"GlobalForward","methods":[{"name":"PrivateForward","docStart":6788,"docEnd":7243,"docs":{"brief":"Creates a private forward.","tags":[{"tag":"","text":"Creates a private forward."},{"tag":"note","text":"No functions are automatically added. Use AddToForward() to do this."},{"tag":"note","text":"Private forwards can be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new private forward."},{"tag":"error","text":"More than 32 parameter types passed."}]},"kind":"native","returnType":"PrivateForward","arguments":[{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]},{"name":"AddFunction","docStart":7310,"docEnd":7815,"docs":{"brief":"Adds a function to a private forward's call list.","tags":[{"tag":"","text":"Adds a function to a private forward's call list."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to add to forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"Function","name":"func","decl":"Function func","default":null}]},{"name":"RemoveFunction","docStart":7884,"docEnd":8471,"docs":{"brief":"Removes a function from a private forward's call list.","tags":[{"tag":"","text":"Removes a function from a private forward's call list."},{"tag":"note","text":"Only removes one instance."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to remove from forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"Function","name":"func","decl":"Function func","default":null}]},{"name":"RemoveAllFunctions","docStart":8543,"docEnd":9033,"docs":{"brief":"Removes all instances of a plugin from a private forward's call list.","tags":[{"tag":"","text":"Removes all instances of a plugin from a private forward's call list."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:plugin","text":"Handle of the plugin to remove instances of.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"return","text":"Number of functions removed from forward."},{"tag":"error","text":"Invalid or corrupt private forward handle or invalid or corrupt plugin handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null}]}],"properties":[]},"created":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662},"last_updated":{"hash":"664b35255994f4d15b945945f850900fbe1f3a08","count":6484,"time":1578860588}}},"enumstructs":{},"constants":{},"defines":{"SP_ERROR_NOT_RUNNABLE":{"symbol":{"name":"SP_ERROR_NOT_RUNNABLE","docStart":5681,"docEnd":5723,"docs":{"brief":"Function or plugin is not runnable","tags":[{"tag":"","text":"Function or plugin is not runnable"}]},"value":"24"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_INVALID_ADDRESS":{"symbol":{"name":"SP_ERROR_INVALID_ADDRESS","docStart":4057,"docEnd":4095,"docs":{"brief":"A memory address was not valid","tags":[{"tag":"","text":"A memory address was not valid"}]},"value":"5"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_PARAMS_MAX":{"symbol":{"name":"SP_ERROR_PARAMS_MAX","docStart":5507,"docEnd":5551,"docs":{"brief":"Maximum number of parameters reached","tags":[{"tag":"","text":"Maximum number of parameters reached"}]},"value":"22"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_FILE_FORMAT":{"symbol":{"name":"SP_ERROR_FILE_FORMAT","docStart":3721,"docEnd":3753,"docs":{"brief":"File format unrecognized","tags":[{"tag":"","text":"File format unrecognized"}]},"value":"1"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_PARAM":{"symbol":{"name":"SP_ERROR_PARAM","docStart":3968,"docEnd":4011,"docs":{"brief":"Invalid parameter or parameter type","tags":[{"tag":"","text":"Invalid parameter or parameter type"}]},"value":"4"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_STACKLEAK":{"symbol":{"name":"SP_ERROR_STACKLEAK","docStart":5081,"docEnd":5125,"docs":{"brief":"A native leaked an item on the stack","tags":[{"tag":"","text":"A native leaked an item on the stack"}]},"value":"17"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_STACKMIN":{"symbol":{"name":"SP_ERROR_STACKMIN","docStart":4662,"docEnd":4705,"docs":{"brief":"Stack went beyond its minimum value","tags":[{"tag":"","text":"Stack went beyond its minimum value"}]},"value":"12"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SM_PARAM_COPYBACK":{"symbol":{"name":"SM_PARAM_COPYBACK","docStart":3224,"docEnd":3271,"docs":{"brief":"Copy an array/reference back after call","tags":[{"tag":"","text":"Copy an array/reference back after call"}]},"value":"(1<<0)"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_MEMACCESS":{"symbol":{"name":"SP_ERROR_MEMACCESS","docStart":4587,"docEnd":4616,"docs":{"brief":"Invalid memory access","tags":[{"tag":"","text":"Invalid memory access"}]},"value":"11"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_NATIVE":{"symbol":{"name":"SP_ERROR_NATIVE","docStart":5597,"docEnd":5635,"docs":{"brief":"Error originates from a native","tags":[{"tag":"","text":"Error originates from a native"}]},"value":"23"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_NONE":{"symbol":{"name":"SP_ERROR_NONE","docStart":3650,"docEnd":3675,"docs":{"brief":"No error occurred","tags":[{"tag":"","text":"No error occurred"}]},"value":"0"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_INVALID_INSTRUCTION":{"symbol":{"name":"SP_ERROR_INVALID_INSTRUCTION","docStart":4498,"docEnd":4541,"docs":{"brief":"Invalid instruction was encountered","tags":[{"tag":"","text":"Invalid instruction was encountered"}]},"value":"10"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_HEAPLEAK":{"symbol":{"name":"SP_ERROR_HEAPLEAK","docStart":5171,"docEnd":5214,"docs":{"brief":"A native leaked an item on the heap","tags":[{"tag":"","text":"A native leaked an item on the heap"}]},"value":"18"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_NOT_FOUND":{"symbol":{"name":"SP_ERROR_NOT_FOUND","docStart":4141,"docEnd":4185,"docs":{"brief":"The object in question was not found","tags":[{"tag":"","text":"The object in question was not found"}]},"value":"6"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_INVALID_NATIVE":{"symbol":{"name":"SP_ERROR_INVALID_NATIVE","docStart":5424,"docEnd":5461,"docs":{"brief":"Native was pending or invalid","tags":[{"tag":"","text":"Native was pending or invalid"}]},"value":"21"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SM_PARAM_STRING_COPY":{"symbol":{"name":"SM_PARAM_STRING_COPY","docStart":3403,"docEnd":3450,"docs":{"brief":"String should be copied into the plugin","tags":[{"tag":"","text":"String should be copied into the plugin"}]},"value":"(1<<1)"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SM_PARAM_STRING_BINARY":{"symbol":{"name":"SM_PARAM_STRING_BINARY","docStart":3496,"docEnd":3539,"docs":{"brief":"Treat the string as a binary string","tags":[{"tag":"","text":"Treat the string as a binary string"}]},"value":"(1<<2)"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_INSTRUCTION_PARAM":{"symbol":{"name":"SP_ERROR_INSTRUCTION_PARAM","docStart":4991,"docEnd":5035,"docs":{"brief":"Instruction had an invalid parameter","tags":[{"tag":"","text":"Instruction had an invalid parameter"}]},"value":"16"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_TRACKER_BOUNDS":{"symbol":{"name":"SP_ERROR_TRACKER_BOUNDS","docStart":5340,"docEnd":5378,"docs":{"brief":"Tracker stack is out of bounds","tags":[{"tag":"","text":"Tracker stack is out of bounds"}]},"value":"20"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_functions_included":{"symbol":{"name":"_functions_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}},"SP_PARAMFLAG_BYREF":{"symbol":{"name":"SP_PARAMFLAG_BYREF","docStart":1679,"docEnd":1705,"docs":{"brief":"Internal use only.","tags":[{"tag":"","text":"Internal use only."}]},"value":"(1<<0)"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_ABORTED":{"symbol":{"name":"SP_ERROR_ABORTED","docStart":5769,"docEnd":5802,"docs":{"brief":"Function call was aborted","tags":[{"tag":"","text":"Function call was aborted"}]},"value":"25"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_DECOMPRESSOR":{"symbol":{"name":"SP_ERROR_DECOMPRESSOR","docStart":3799,"docEnd":3835,"docs":{"brief":"A decompressor was not found","tags":[{"tag":"","text":"A decompressor was not found"}]},"value":"2"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SM_PARAM_STRING_UTF8":{"symbol":{"name":"SM_PARAM_STRING_UTF8","docStart":3319,"docEnd":3357,"docs":{"brief":"String should be UTF-8 handled","tags":[{"tag":"","text":"String should be UTF-8 handled"}]},"value":"(1<<0)"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_ARRAY_TOO_BIG":{"symbol":{"name":"SP_ERROR_ARRAY_TOO_BIG","docStart":5260,"docEnd":5294,"docs":{"brief":"A dynamic array is too big","tags":[{"tag":"","text":"A dynamic array is too big"}]},"value":"19"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_ARRAY_BOUNDS":{"symbol":{"name":"SP_ERROR_ARRAY_BOUNDS","docStart":4909,"docEnd":4945,"docs":{"brief":"Array index is out of bounds","tags":[{"tag":"","text":"Array index is out of bounds"}]},"value":"15"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_STACKLOW":{"symbol":{"name":"SP_ERROR_STACKLOW","docStart":4308,"docEnd":4350,"docs":{"brief":"Not enough space left on the stack","tags":[{"tag":"","text":"Not enough space left on the stack"}]},"value":"8"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_HEAPLOW":{"symbol":{"name":"SP_ERROR_HEAPLOW","docStart":3881,"docEnd":3922,"docs":{"brief":"Not enough space left on the heap","tags":[{"tag":"","text":"Not enough space left on the heap"}]},"value":"3"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_INDEX":{"symbol":{"name":"SP_ERROR_INDEX","docStart":4231,"docEnd":4262,"docs":{"brief":"Invalid index parameter","tags":[{"tag":"","text":"Invalid index parameter"}]},"value":"7"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_DIVIDE_BY_ZERO":{"symbol":{"name":"SP_ERROR_DIVIDE_BY_ZERO","docStart":4839,"docEnd":4863,"docs":{"brief":"Division by zero","tags":[{"tag":"","text":"Division by zero"}]},"value":"14"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_HEAPMIN":{"symbol":{"name":"SP_ERROR_HEAPMIN","docStart":4751,"docEnd":4793,"docs":{"brief":"Heap went beyond its minimum value","tags":[{"tag":"","text":"Heap went beyond its minimum value"}]},"value":"13"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SP_ERROR_NOTDEBUGGING":{"symbol":{"name":"SP_ERROR_NOTDEBUGGING","docStart":4396,"docEnd":4452,"docs":{"brief":"Debug mode was not on or debug section not found","tags":[{"tag":"","text":"Debug mode was not on or debug section not found"}]},"value":"9"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"ExecType":{"symbol":{"name":"ExecType","docStart":2611,"docEnd":2680,"docs":{"brief":"Defines how a forward iterates through plugin functions.","tags":[{"tag":"","text":"Defines how a forward iterates through plugin functions."}]},"entries":[{"name":"ET_Ignore","docStart":2721,"docEnd":2763,"docs":{"brief":"Ignore all return values, return 0","tags":[{"tag":"","text":"Ignore all return values, return 0"}]},"value":"0"},{"name":"ET_Single","docStart":2786,"docEnd":2838,"docs":{"brief":"Only return the last exec, ignore all others","tags":[{"tag":"","text":"Only return the last exec, ignore all others"}]},"value":"1"},{"name":"ET_Event","docStart":2861,"docEnd":2961,"docs":{"brief":"Acts as an event with the Actions defined in core.inc, no mid-Stops allowed, returns highest","tags":[{"tag":"","text":"Acts as an event with the Actions defined in core.inc, no mid-Stops allowed, returns highest"}]},"value":"2"},{"name":"ET_Hook","docStart":2984,"docEnd":3079,"docs":{"brief":"Acts as a hook with the Actions defined in core.inc, mid-Stops allowed, returns highest","tags":[{"tag":"","text":"Acts as a hook with the Actions defined in core.inc, mid-Stops allowed, returns highest"}]},"value":"3"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ParamType":{"symbol":{"name":"ParamType","docStart":1709,"docEnd":1793,"docs":{"brief":"Describes the various ways to pass parameters to functions or forwards.","tags":[{"tag":"","text":"Describes the various ways to pass parameters to functions or forwards."}]},"entries":[{"name":"Param_Any","docStart":1867,"docEnd":1902,"docs":{"brief":"Any data type can be pushed","tags":[{"tag":"","text":"Any data type can be pushed"}]},"value":"0"},{"name":"Param_Cell","docStart":1957,"docEnd":1995,"docs":{"brief":"Only basic cells can be pushed","tags":[{"tag":"","text":"Only basic cells can be pushed"}]},"value":"1 << 1"},{"name":"Param_Float","docStart":2050,"docEnd":2083,"docs":{"brief":"Only floats can be pushed","tags":[{"tag":"","text":"Only floats can be pushed"}]},"value":"2 << 1"},{"name":"Param_String","docStart":2138,"docEnd":2172,"docs":{"brief":"Only strings can be pushed","tags":[{"tag":"","text":"Only strings can be pushed"}]},"value":"3 << 1 | 1 << 0"},{"name":"Param_Array","docStart":2227,"docEnd":2260,"docs":{"brief":"Only arrays can be pushed","tags":[{"tag":"","text":"Only arrays can be pushed"}]},"value":"4 << 1 | 1 << 0"},{"name":"Param_VarArgs","docStart":2315,"docEnd":2400,"docs":{"brief":"Same as \"...\" in plugins, anything can be pushed, but it will always be byref","tags":[{"tag":"","text":"Same as \"...\" in plugins, anything can be pushed, but it will always be byref"}]},"value":"5 << 1"},{"name":"Param_CellByRef","docStart":2455,"docEnd":2501,"docs":{"brief":"Only a cell by reference can be pushed","tags":[{"tag":"","text":"Only a cell by reference can be pushed"}]},"value":"1 << 1 | 1 << 0"},{"name":"Param_FloatByRef","docStart":2556,"docEnd":2603,"docs":{"brief":"Only a float by reference can be pushed","tags":[{"tag":"","text":"Only a float by reference can be pushed"}]},"value":"2 << 1 | 1 << 0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"RequestFrameCallback":{"symbol":{"name":"RequestFrameCallback","docStart":25360,"docEnd":25474,"docs":{"brief":"Defines a RequestFrame Callback.","tags":[{"tag":"","text":"Defines a RequestFrame Callback."},{"tag":"param:data","text":"Data passed to the RequestFrame native."}]},"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void()","parsedSignature":{"returnType":"void","arguments":[]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function void(any data)","parsedSignature":{"returnType":"void","arguments":[{"type":"any","name":"data","decl":"any data","default":null}]}}]},"created":{"hash":"207584818f7b6b0c973ec680a2956af3d24ab5f7","count":6439,"time":1567458022},"last_updated":{"hash":"207584818f7b6b0c973ec680a2956af3d24ab5f7","count":6439,"time":1567458022}},"NativeCall":{"symbol":{"name":"NativeCall","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":18157,"docEnd":18453,"docs":{"brief":"Defines a native function.\n\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\n\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Handle of the calling plugin."},{"tag":"param:numParams","text":"Number of parameters passed to the native."},{"tag":"return","text":"Value for the native call to return."}]},"type":"function int(Handle plugin, int numParams)","parsedSignature":{"returnType":"int","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"int","name":"numParams","decl":"int numParams","default":null}]}},{"docStart":18505,"docEnd":18804,"docs":{"brief":"Defines a native function.\n\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\n\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Handle of the calling plugin."},{"tag":"param:numParams","text":"Number of parameters passed to the native."},{"tag":"return","text":"Value for the native call to return."}]},"type":"function any(Handle plugin, int numParams)","parsedSignature":{"returnType":"any","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"int","name":"numParams","decl":"int numParams","default":null}]}}]},"created":{"hash":"11abe77eed2adfaf4d28a7ddf57fde9e133c442a","count":6317,"time":1532580404},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}}},"typedefs":{"NativeCall":{"symbol":{"name":"NativeCall","docStart":13809,"docEnd":14083,"docs":{"brief":"Defines a native function.\n\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\n\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Handle of the calling plugin."},{"tag":"param:numParams","text":"Number of parameters passed to the native."},{"tag":"return","text":"Value for the native call to return."}]},"type":"function int(Handle plugin, int numParams)","parsedSignature":{"returnType":"int","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"int","name":"numParams","decl":"int numParams","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"41a9889cddc745f4d6cab72693dbf37be16f504c","count":6152,"time":1503696204}},"RequestFrameCallback":{"symbol":{"name":"RequestFrameCallback","docStart":25360,"docEnd":25474,"docs":{"brief":"Defines a RequestFrame Callback.","tags":[{"tag":"","text":"Defines a RequestFrame Callback."},{"tag":"param:data","text":"Data passed to the RequestFrame native."}]},"type":"function void(any data)","parsedSignature":{"returnType":"void","arguments":[{"type":"any","name":"data","decl":"any data","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4f3c3175e6f0a1046cd09089763b75c1148e0c78","count":6421,"time":1559164662}}}},"events":{"functions":{"GetEventName":{"symbol":{"name":"GetEventName","docStart":13011,"docEnd":13288,"docs":{"brief":"Retrieves the name of a game event.","tags":[{"tag":"","text":"Retrieves the name of a game event."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:name","text":"Buffer to store the name of the event."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateEvent":{"symbol":{"name":"CreateEvent","docStart":8316,"docEnd":8900,"docs":{"brief":"Creates a game event to be fired later.\n\nThe Handle should not be closed via CloseHandle().  It must be closed via\nevent.Fire() or event.Cancel().","tags":[{"tag":"","text":"Creates a game event to be fired later.\n\nThe Handle should not be closed via CloseHandle().  It must be closed via\nevent.Fire() or event.Cancel()."},{"tag":"param:name","text":"Name of event."},{"tag":"param:force","text":"If set to true, this forces the event to be created even if it's not being hooked.\nNote that this will not force it if the event doesn't exist at all."},{"tag":"return","text":"Handle to event. INVALID_HANDLE is returned if the event doesn't exist or isn't\nbeing hooked (unless force is true)."}]},"kind":"native","returnType":"Event","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"bool","name":"force","decl":"bool force","default":"false"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CancelCreatedEvent":{"symbol":{"name":"CancelCreatedEvent","docStart":9333,"docEnd":9513,"docs":{"brief":"Cancels a previously created game event that has not been fired.","tags":[{"tag":"","text":"Cancels a previously created game event that has not been fired."},{"tag":"param:event","text":"Handled to the event."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEventBool":{"symbol":{"name":"GetEventBool","docStart":9564,"docEnd":9922,"docs":{"brief":"Returns the boolean value of a game event's key.","tags":[{"tag":"","text":"Returns the boolean value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The boolean value of the specified event key."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"defValue","decl":"bool defValue","default":"false"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEventString":{"symbol":{"name":"GetEventString","docStart":12135,"docEnd":12560,"docs":{"brief":"Retrieves the string value of a game event's key.","tags":[{"tag":"","text":"Retrieves the string value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"Buffer to store the value of the specified event key."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue","default":"\"\""}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEventBroadcast":{"symbol":{"name":"SetEventBroadcast","docStart":13361,"docEnd":13719,"docs":{"brief":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks.","tags":[{"tag":"","text":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks."},{"tag":"param:event","text":"Handle to an event from an event hook."},{"tag":"param:dontBroadcast","text":"True to disable broadcasting, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HookEvent":{"symbol":{"name":"HookEvent","docStart":6975,"docEnd":7286,"docs":{"brief":"Creates a hook for when a game event is fired.","tags":[{"tag":"","text":"Creates a hook for when a game event is fired."},{"tag":"param:name","text":"Name of event."},{"tag":"param:callback","text":"An EventHook function pointer."},{"tag":"param:mode","text":"Optional EventHookMode determining the type of hook."},{"tag":"error","text":"Invalid event name or invalid callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"EventHook","name":"callback","decl":"EventHook callback","default":null},{"type":"EventHookMode","name":"mode","decl":"EventHookMode mode","default":"EventHookMode_Post"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEventInt":{"symbol":{"name":"GetEventInt","docStart":10329,"docEnd":10687,"docs":{"brief":"Returns the integer value of a game event's key.","tags":[{"tag":"","text":"Returns the integer value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The integer value of the specified event key."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"defValue","decl":"int defValue","default":"0"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEventInt":{"symbol":{"name":"SetEventInt","docStart":10764,"docEnd":11266,"docs":{"brief":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable).","tags":[{"tag":"","text":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable)."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New integer value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEventFloat":{"symbol":{"name":"SetEventFloat","docStart":11796,"docEnd":12058,"docs":{"brief":"Sets the floating point value of a game event's key.","tags":[{"tag":"","text":"Sets the floating point value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New floating point value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEventString":{"symbol":{"name":"SetEventString","docStart":12680,"docEnd":12926,"docs":{"brief":"Sets the string value of a game event's key.","tags":[{"tag":"","text":"Sets the string value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New string value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEventBool":{"symbol":{"name":"SetEventBool","docStart":10006,"docEnd":10254,"docs":{"brief":"Sets the boolean value of a game event's key.","tags":[{"tag":"","text":"Sets the boolean value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New boolean value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UnhookEvent":{"symbol":{"name":"UnhookEvent","docStart":7881,"docEnd":8208,"docs":{"brief":"Removes a hook for when a game event is fired.","tags":[{"tag":"","text":"Removes a hook for when a game event is fired."},{"tag":"param:name","text":"Name of event."},{"tag":"param:callback","text":"An EventHook function pointer."},{"tag":"param:mode","text":"Optional EventHookMode determining the type of hook."},{"tag":"error","text":"Invalid callback function or no active hook for specified event."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"EventHook","name":"callback","decl":"EventHook callback","default":null},{"type":"EventHookMode","name":"mode","decl":"EventHookMode mode","default":"EventHookMode_Post"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HookEventEx":{"symbol":{"name":"HookEventEx","docStart":7392,"docEnd":7773,"docs":{"brief":"Creates a hook for when a game event is fired.","tags":[{"tag":"","text":"Creates a hook for when a game event is fired."},{"tag":"param:name","text":"Name of event."},{"tag":"param:callback","text":"An EventHook function pointer."},{"tag":"param:mode","text":"Optional EventHookMode determining the type of hook."},{"tag":"return","text":"True if event exists and was hooked successfully, false otherwise."},{"tag":"error","text":"Invalid callback function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"EventHook","name":"callback","decl":"EventHook callback","default":null},{"type":"EventHookMode","name":"mode","decl":"EventHookMode mode","default":"EventHookMode_Post"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEventFloat":{"symbol":{"name":"GetEventFloat","docStart":11339,"docEnd":11711,"docs":{"brief":"Returns the floating point value of a game event's key.","tags":[{"tag":"","text":"Returns the floating point value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The floating point value of the specified event key."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"defValue","decl":"float defValue","default":"0.000000"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FireEvent":{"symbol":{"name":"FireEvent","docStart":8968,"docEnd":9265,"docs":{"brief":"Fires a game event.\n\nThis function closes the event Handle after completing.","tags":[{"tag":"","text":"Fires a game event.\n\nThis function closes the event Handle after completing."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:dontBroadcast","text":"Optional boolean that determines if event should be broadcast to clients."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event","default":null},{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast","default":"false"}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"Event":{"symbol":{"name":"Event","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"Fire","docStart":3276,"docEnd":3469,"docs":{"brief":"Fires a game event.\n\nThis function closes the event Handle after completing.","tags":[{"tag":"","text":"Fires a game event.\n\nThis function closes the event Handle after completing."},{"tag":"param:dontBroadcast","text":"Optional boolean that determines if event should be broadcast to clients."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast","default":"false"}]},{"name":"FireToClient","docStart":3528,"docEnd":3719,"docs":{"brief":"Fires a game event to only the specified client.\n\nUnlike Fire, this function DOES NOT close the event Handle.","tags":[{"tag":"","text":"Fires a game event to only the specified client.\n\nUnlike Fire, this function DOES NOT close the event Handle."},{"tag":"param:client","text":"Index of client to receive the event.."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"Cancel","docStart":3771,"docEnd":3912,"docs":{"brief":"Cancels a previously created game event that has not been fired. This\nis necessary to avoid leaking memory when an event isn't fired.","tags":[{"tag":"","text":"Cancels a previously created game event that has not been fired. This\nis necessary to avoid leaking memory when an event isn't fired."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GetBool","docStart":3948,"docEnd":4199,"docs":{"brief":"Returns the boolean value of a game event's key.","tags":[{"tag":"","text":"Returns the boolean value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The boolean value of the specified event key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"defValue","decl":"bool defValue","default":"false"}]},{"name":"SetBool","docStart":4273,"docEnd":4414,"docs":{"brief":"Sets the boolean value of a game event's key.","tags":[{"tag":"","text":"Sets the boolean value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New boolean value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"GetInt","docStart":4479,"docEnd":4730,"docs":{"brief":"Returns the integer value of a game event's key.","tags":[{"tag":"","text":"Returns the integer value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The integer value of the specified event key."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"defValue","decl":"int defValue","default":"0"}]},{"name":"SetInt","docStart":4797,"docEnd":5197,"docs":{"brief":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable).","tags":[{"tag":"","text":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable)."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New integer value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"GetFloat","docStart":5260,"docEnd":5525,"docs":{"brief":"Returns the floating point value of a game event's key.","tags":[{"tag":"","text":"Returns the floating point value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The floating point value of the specified event key."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"defValue","decl":"float defValue","default":"0.000000"}]},{"name":"SetFloat","docStart":5600,"docEnd":5755,"docs":{"brief":"Sets the floating point value of a game event's key.","tags":[{"tag":"","text":"Sets the floating point value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New floating point value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"GetString","docStart":5822,"docEnd":6140,"docs":{"brief":"Retrieves the string value of a game event's key.","tags":[{"tag":"","text":"Retrieves the string value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"Buffer to store the value of the specified event key."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue","default":"\"\""}]},{"name":"SetString","docStart":6250,"docEnd":6389,"docs":{"brief":"Sets the string value of a game event's key.","tags":[{"tag":"","text":"Sets the string value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New string value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"GetName","docStart":6464,"docEnd":6629,"docs":{"brief":"Retrieves the name of a game event.","tags":[{"tag":"","text":"Retrieves the name of a game event."},{"tag":"param:name","text":"Buffer to store the name of the event."},{"tag":"param:maxlength","text":"Maximum length of string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"properties":[{"name":"BroadcastDisabled","docStart":6692,"docEnd":6862,"docs":{"brief":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks.","tags":[{"tag":"","text":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks."}]},"type":"bool","getter":true,"setter":true}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_events_included":{"symbol":{"name":"_events_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876}}},"enums":{"EventHookMode":{"symbol":{"name":"EventHookMode","docStart":1655,"docEnd":1726,"docs":{"brief":"Event hook modes determining how hooking should be handled","tags":[{"tag":"","text":"Event hook modes determining how hooking should be handled"}]},"entries":[{"name":"EventHookMode_Pre","docStart":1788,"docEnd":1836,"docs":{"brief":"Hook callback fired before event is fired */","tags":[{"tag":"","text":"Hook callback fired before event is fired */"}]},"value":null},{"name":"EventHookMode_Post","docStart":1875,"docEnd":1922,"docs":{"brief":"Hook callback fired after event is fired */","tags":[{"tag":"","text":"Hook callback fired after event is fired */"}]},"value":null},{"name":"EventHookMode_PostNoCopy","docStart":1961,"docEnd":2040,"docs":{"brief":"Hook callback fired after event is fired, but event data won't be copied */","tags":[{"tag":"","text":"Hook callback fired after event is fired, but event data won't be copied */"}]},"value":null}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"EventHook":{"symbol":{"name":"EventHook","docStart":2048,"docEnd":2092,"docs":{"brief":"Hook function types for events.","tags":[{"tag":"","text":"Hook function types for events."}]},"types":[{"docStart":2117,"docEnd":2701,"docs":{"brief":"Called when a game event is fired.","tags":[{"tag":"","text":"Called when a game event is fired."},{"tag":"param:event","text":"Handle to event. This could be INVALID_HANDLE if every plugin hooking\nthis event has set the hook mode EventHookMode_PostNoCopy."},{"tag":"param:name","text":"String containing the name of the event."},{"tag":"param:dontBroadcast","text":"True if event was not broadcast to clients, false otherwise.\nMay not correspond to the real value. Use the property BroadcastDisabled."},{"tag":"return","text":"Ignored for post hooks. Plugin_Handled will block event if hooked as pre."}]},"type":"function Action(Event event, const char[] name, bool dontBroadcast)","parsedSignature":{"returnType":"Action","arguments":[{"type":"Event","name":"event","decl":"Event event","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast","default":null}]}},{"docStart":2779,"docEnd":3168,"docs":{"brief":"Called when a game event is fired.","tags":[{"tag":"","text":"Called when a game event is fired."},{"tag":"param:event","text":"Handle to event. This could be INVALID_HANDLE if every plugin hooking\nthis event has set the hook mode EventHookMode_PostNoCopy."},{"tag":"param:name","text":"String containing the name of the event."},{"tag":"param:dontBroadcast","text":"True if event was not broadcast to clients, false otherwise."}]},"type":"function void(Event event, const char[] name, bool dontBroadcast)","parsedSignature":{"returnType":"void","arguments":[{"type":"Event","name":"event","decl":"Event event","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast","default":null}]}}]},"created":{"hash":"28eb663f9b75dbdac4da22ecc8bc2ac84782ad1c","count":5084,"time":1418503876},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{}},"version":{"functions":{},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"SOURCEMOD_VERSION":{"symbol":{"name":"SOURCEMOD_VERSION","docStart":2122,"docEnd":2180,"docs":{"brief":"SourceMod version string (major.minor.release-tag)","tags":[{"tag":"","text":"SourceMod version string (major.minor.release-tag)"}]},"value":"\"1.11.0-manual\""},"created":{"hash":"0d1746ba60ff07fe1e1d7fb59bffd3d9cdd83e59","count":573,"time":1172911907},"last_updated":{"hash":"d42c304a55f708d07edf0474ee5215a64f4ca975","count":6529,"time":1587999003}},"SOURCEMOD_V_MINOR":{"symbol":{"name":"SOURCEMOD_V_MINOR","docStart":1954,"docEnd":1985,"docs":{"brief":"SourceMod Minor version","tags":[{"tag":"","text":"SourceMod Minor version"}]},"value":"11"},"created":{"hash":"0d1746ba60ff07fe1e1d7fb59bffd3d9cdd83e59","count":573,"time":1172911907},"last_updated":{"hash":"d42c304a55f708d07edf0474ee5215a64f4ca975","count":6529,"time":1587999003}},"SOURCEMOD_V_TAG":{"symbol":{"name":"SOURCEMOD_V_TAG","docStart":0,"docEnd":0,"docs":null,"value":"\"manual\""},"created":{"hash":"bf76be5dfa8f72e1284c6d878a166d6bbe4e7f3d","count":3632,"time":1345941234},"last_updated":{"hash":"bf76be5dfa8f72e1284c6d878a166d6bbe4e7f3d","count":3632,"time":1345941234}},"SOURCEMOD_V_REV":{"symbol":{"name":"SOURCEMOD_V_REV","docStart":0,"docEnd":0,"docs":null,"value":"0"},"created":{"hash":"bf76be5dfa8f72e1284c6d878a166d6bbe4e7f3d","count":3632,"time":1345941234},"last_updated":{"hash":"bf76be5dfa8f72e1284c6d878a166d6bbe4e7f3d","count":3632,"time":1345941234}},"_version_included":{"symbol":{"name":"_version_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"0d1746ba60ff07fe1e1d7fb59bffd3d9cdd83e59","count":573,"time":1172911907},"last_updated":{"hash":"0d1746ba60ff07fe1e1d7fb59bffd3d9cdd83e59","count":573,"time":1172911907}},"SOURCEMOD_V_MAJOR":{"symbol":{"name":"SOURCEMOD_V_MAJOR","docStart":1872,"docEnd":1903,"docs":{"brief":"SourceMod Major version","tags":[{"tag":"","text":"SourceMod Major version"}]},"value":"1"},"created":{"hash":"0d1746ba60ff07fe1e1d7fb59bffd3d9cdd83e59","count":573,"time":1172911907},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCEMOD_V_RELEASE":{"symbol":{"name":"SOURCEMOD_V_RELEASE","docStart":2036,"docEnd":2069,"docs":{"brief":"SourceMod Release version","tags":[{"tag":"","text":"SourceMod Release version"}]},"value":"0"},"created":{"hash":"0d1746ba60ff07fe1e1d7fb59bffd3d9cdd83e59","count":573,"time":1172911907},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCEMOD_V_CSET":{"symbol":{"name":"SOURCEMOD_V_CSET","docStart":0,"docEnd":0,"docs":null,"value":"\"0\""},"created":{"hash":"bf76be5dfa8f72e1284c6d878a166d6bbe4e7f3d","count":3632,"time":1345941234},"last_updated":{"hash":"bf76be5dfa8f72e1284c6d878a166d6bbe4e7f3d","count":3632,"time":1345941234}}},"enums":{},"typesets":{},"typedefs":{}},"adt_trie":{"functions":{"CreateTrieSnapshot":{"symbol":{"name":"CreateTrieSnapshot","docStart":11598,"docEnd":11936,"docs":{"brief":"Creates a snapshot of all keys in the map. If the map is changed after this\ncall, the changes are not reflected in the snapshot. Keys are not sorted.","tags":[{"tag":"","text":"Creates a snapshot of all keys in the map. If the map is changed after this\ncall, the changes are not reflected in the snapshot. Keys are not sorted."},{"tag":"param:map","text":"Map Handle."},{"tag":"return","text":"New Map Snapshot Handle, which must be closed via CloseHandle()."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null}]},"created":{"hash":"b261dde8586f97d9e0ad3e0102adc95c7b278039","count":4097,"time":1377796142},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"SetTrieArray":{"symbol":{"name":"SetTrieArray","docStart":8163,"docEnd":8616,"docs":{"brief":"Sets an array value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets an array value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Array to store."},{"tag":"param:num_items","text":"Number of items in the array."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const any[]","name":"array","decl":"const any[] array","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"GetTrieValue":{"symbol":{"name":"GetTrieValue","docStart":9230,"docEnd":9592,"docs":{"brief":"Retrieves a value in a Map.","tags":[{"tag":"","text":"Retrieves a value in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Variable to store value."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas an array or string (not a value)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any&","name":"value","decl":"any& value","default":null}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"GetTrieString":{"symbol":{"name":"GetTrieString","docStart":10281,"docEnd":10793,"docs":{"brief":"Retrieves a string in a Map.","tags":[{"tag":"","text":"Retrieves a string in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Buffer to store value."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:size","text":"Optional parameter to store the number of bytes written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or array (not a string)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"SetTrieString":{"symbol":{"name":"SetTrieString","docStart":8730,"docEnd":9129,"docs":{"brief":"Sets a string value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a string value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"String to store."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"TrieSnapshotLength":{"symbol":{"name":"TrieSnapshotLength","docStart":11987,"docEnd":12303,"docs":{"brief":"Returns the number of keys in a map snapshot. Note that this may be\ndifferent from the size of the map, since the map can change after the\nsnapshot of its keys was taken.","tags":[{"tag":"","text":"Returns the number of keys in a map snapshot. Note that this may be\ndifferent from the size of the map, since the map can change after the\nsnapshot of its keys was taken."},{"tag":"param:snapshot","text":"Map snapshot."},{"tag":"return","text":"Number of keys."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"snapshot","decl":"Handle snapshot","default":null}]},"created":{"hash":"b261dde8586f97d9e0ad3e0102adc95c7b278039","count":4097,"time":1377796142},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"GetTrieSize":{"symbol":{"name":"GetTrieSize","docStart":11363,"docEnd":11557,"docs":{"brief":"Retrieves the number of elements in a map.","tags":[{"tag":"","text":"Retrieves the number of elements in a map."},{"tag":"param:map","text":"Map Handle."},{"tag":"return","text":"Number of elements in the trie."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null}]},"created":{"hash":"4e1fb49096026238036464b72aee7127eda7bf70","count":1830,"time":1199340686},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"SetTrieValue":{"symbol":{"name":"SetTrieValue","docStart":7664,"docEnd":8072,"docs":{"brief":"Sets a value in a hash map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a value in a hash map, either inserting a new entry or replacing an old one."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"CreateTrie":{"symbol":{"name":"CreateTrie","docStart":6978,"docEnd":7628,"docs":{"brief":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n).","tags":[{"tag":"","text":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n)."},{"tag":"return","text":"New Map Handle, which must be freed via CloseHandle()."}]},"kind":"native","returnType":"StringMap","arguments":[]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"GetTrieSnapshotKey":{"symbol":{"name":"GetTrieSnapshotKey","docStart":12781,"docEnd":13164,"docs":{"brief":"Retrieves the key string of a given key in a map snapshot.","tags":[{"tag":"","text":"Retrieves the key string of a given key in a map snapshot."},{"tag":"param:snapshot","text":"Map snapshot."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum buffer length."},{"tag":"return","text":"Number of bytes written to the buffer."},{"tag":"error","text":"Invalid Handle or index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"snapshot","decl":"Handle snapshot","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"b261dde8586f97d9e0ad3e0102adc95c7b278039","count":4097,"time":1377796142},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"RemoveFromTrie":{"symbol":{"name":"RemoveFromTrie","docStart":10896,"docEnd":11135,"docs":{"brief":"Removes a key entry from a Map.","tags":[{"tag":"","text":"Removes a key entry from a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True on success, false if the value was never set."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"ClearTrie":{"symbol":{"name":"ClearTrie","docStart":11198,"docEnd":11323,"docs":{"brief":"Clears all entries from a Map.","tags":[{"tag":"","text":"Clears all entries from a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"GetTrieArray":{"symbol":{"name":"GetTrieArray","docStart":9665,"docEnd":10180,"docs":{"brief":"Retrieves an array in a Map.","tags":[{"tag":"","text":"Retrieves an array in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Buffer to store array."},{"tag":"param:max_size","text":"Maximum size of array buffer."},{"tag":"param:size","text":"Optional parameter to store the number of elements written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or string (not an array)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any[]","name":"array","decl":"any[] array","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"TrieSnapshotKeyBufferSize":{"symbol":{"name":"TrieSnapshotKeyBufferSize","docStart":12356,"docEnd":12710,"docs":{"brief":"Returns the buffer size required to store a given key. That is, it returns\nthe length of the key plus one.","tags":[{"tag":"","text":"Returns the buffer size required to store a given key. That is, it returns\nthe length of the key plus one."},{"tag":"param:snapshot","text":"Map snapshot."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"return","text":"Buffer size required to store the key string."},{"tag":"error","text":"Invalid Handle or index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"snapshot","decl":"Handle snapshot","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"b261dde8586f97d9e0ad3e0102adc95c7b278039","count":4097,"time":1377796142},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}}},"methodmaps":{"StringMap":{"symbol":{"name":"StringMap","docStart":1659,"docEnd":1698,"docs":{"brief":"Object-oriented wrapper for maps.","tags":[{"tag":"","text":"Object-oriented wrapper for maps."}]},"parent":"Handle","methods":[{"name":"StringMap","docStart":1734,"docEnd":2366,"docs":{"brief":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n).\n\nThe StringMap must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n).\n\nThe StringMap must be freed via delete or CloseHandle()."}]},"kind":"native","returnType":"StringMap","arguments":[]},{"name":"Clone","docStart":2400,"docEnd":2759,"docs":{"brief":"Clones a string map, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should be\nclosed when no longer needed with delete or CloseHandle().","tags":[{"tag":"","text":"Clones a string map, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should be\nclosed when no longer needed with delete or CloseHandle()."},{"tag":"return","text":"New handle to the cloned string map"}]},"kind":"native","returnType":"StringMap","arguments":[]},{"name":"SetValue","docStart":2799,"docEnd":3112,"docs":{"brief":"Sets a value in a hash map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a value in a hash map, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"SetArray","docStart":3196,"docEnd":3552,"docs":{"brief":"Sets an array value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets an array value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Array to store."},{"tag":"param:num_items","text":"Number of items in the array."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const any[]","name":"array","decl":"const any[] array","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"SetString","docStart":3659,"docEnd":3963,"docs":{"brief":"Sets a string value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a string value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"String to store."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"GetValue","docStart":4057,"docEnd":4324,"docs":{"brief":"Retrieves a value in a Map.","tags":[{"tag":"","text":"Retrieves a value in a Map."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Variable to store value."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas an array or string (not a value)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any&","name":"value","decl":"any& value","default":null}]},{"name":"GetArray","docStart":4390,"docEnd":4841,"docs":{"brief":"Retrieves an array in a Map.","tags":[{"tag":"","text":"Retrieves an array in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Buffer to store array."},{"tag":"param:max_size","text":"Maximum size of array buffer."},{"tag":"param:size","text":"Optional parameter to store the number of elements written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or string (not an array)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any[]","name":"array","decl":"any[] array","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"GetString","docStart":4935,"docEnd":5348,"docs":{"brief":"Retrieves a string in a Map.","tags":[{"tag":"","text":"Retrieves a string in a Map."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Buffer to store value."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:size","text":"Optional parameter to store the number of bytes written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or array (not a string)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"Remove","docStart":5444,"docEnd":5592,"docs":{"brief":"Removes a key entry from a Map.","tags":[{"tag":"","text":"Removes a key entry from a Map."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True on success, false if the value was never set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"Clear","docStart":5644,"docEnd":5677,"docs":{"brief":"Clears all entries from a Map.","tags":[{"tag":"","text":"Clears all entries from a Map."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Snapshot","docStart":5712,"docEnd":5774,"docs":{"brief":"Create a snapshot of the map's keys. See StringMapSnapshot.","tags":[{"tag":"","text":"Create a snapshot of the map's keys. See StringMapSnapshot."}]},"kind":"native","returnType":"StringMapSnapshot","arguments":[]}],"properties":[{"name":"Size","docStart":5825,"docEnd":5870,"docs":{"brief":"Retrieves the number of elements in a map.","tags":[{"tag":"","text":"Retrieves the number of elements in a map."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"6ba4bcb9551e826360e6154feac2d3961ea8d342","count":4987,"time":1415497408},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}},"StringMapSnapshot":{"symbol":{"name":"StringMapSnapshot","docStart":5928,"docEnd":6110,"docs":{"brief":"A StringMapSnapshot is created via StringMap.Snapshot(). It captures the\nkeys on a map so they can be read. Snapshots must be freed with delete or\nCloseHandle().","tags":[{"tag":"","text":"A StringMapSnapshot is created via StringMap.Snapshot(). It captures the\nkeys on a map so they can be read. Snapshots must be freed with delete or\nCloseHandle()."}]},"parent":"Handle","methods":[{"name":"KeyBufferSize","docStart":6261,"docEnd":6542,"docs":{"brief":"Returns the buffer size required to store a given key. That is, it\nreturns the length of the key plus one.","tags":[{"tag":"","text":"Returns the buffer size required to store a given key. That is, it\nreturns the length of the key plus one."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"return","text":"Buffer size required to store the key string."},{"tag":"error","text":"Index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetKey","docStart":6593,"docEnd":6901,"docs":{"brief":"Retrieves the key string of a given key in a map snapshot.","tags":[{"tag":"","text":"Retrieves the key string of a given key in a map snapshot."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum buffer length."},{"tag":"return","text":"Number of bytes written to the buffer."},{"tag":"error","text":"Index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"properties":[{"name":"Length","docStart":6154,"docEnd":6204,"docs":{"brief":"Returns the number of keys in the map snapshot.","tags":[{"tag":"","text":"Returns the number of keys in the map snapshot."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"6ba4bcb9551e826360e6154feac2d3961ea8d342","count":4987,"time":1415497408},"last_updated":{"hash":"5fa25e70ad8365c269cee8520cc926a749fa30c6","count":6598,"time":1594782683}}},"enumstructs":{},"constants":{},"defines":{"_adt_trie_included":{"symbol":{"name":"_adt_trie_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677},"last_updated":{"hash":"d3a22aeff7ee463357795a8105f98c7a0ca07fc1","count":1780,"time":1197263677}}},"enums":{},"typesets":{},"typedefs":{}},"timers":{"functions":{"OnMapTimeLeftChanged":{"symbol":{"name":"OnMapTimeLeftChanged","docStart":6821,"docEnd":7442,"docs":{"brief":"Notification that the map's time left has changed via a change in the time\nlimit or a change in the game rules (such as mp_restartgame).  This is useful\nfor plugins trying to create timers based on the time left in the map.\n\nCalling ExtendMapTimeLimit() from here, without proper precaution, will\ncause infinite recursion.\n\nIf the operation is not supported, this will never be called.\n\nIf the server has not yet processed any frames (i.e. no players have joined\nthe map yet), then this will be called once the server begins ticking, even\nif there is no time limit set.","tags":[{"tag":"","text":"Notification that the map's time left has changed via a change in the time\nlimit or a change in the game rules (such as mp_restartgame).  This is useful\nfor plugins trying to create timers based on the time left in the map.\n\nCalling ExtendMapTimeLimit() from here, without proper precaution, will\ncause infinite recursion.\n\nIf the operation is not supported, this will never be called.\n\nIf the server has not yet processed any frames (i.e. no players have joined\nthe map yet), then this will be called once the server begins ticking, even\nif there is no time limit set."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateTimer":{"symbol":{"name":"CreateTimer","docStart":3200,"docEnd":3828,"docs":{"brief":"Creates a basic timer.  Calling CloseHandle() on a timer will end the timer.","tags":[{"tag":"","text":"Creates a basic timer.  Calling CloseHandle() on a timer will end the timer."},{"tag":"param:interval","text":"Interval from the current game time to execute the given function."},{"tag":"param:func","text":"Function to execute once the given interval has elapsed."},{"tag":"param:data","text":"Handle or value to pass through to the timer callback function."},{"tag":"param:flags","text":"Flags to set (such as repeatability or auto-Handle closing)."},{"tag":"return","text":"Handle to the timer object.  You do not need to call CloseHandle().\nIf the timer could not be created, INVALID_HANDLE will be returned."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"float","name":"interval","decl":"float interval","default":null},{"type":"Timer","name":"func","decl":"Timer func","default":null},{"type":"any","name":"data","decl":"any data","default":"INVALID_HANDLE"},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateDataTimer":{"symbol":{"name":"CreateDataTimer","docStart":7921,"docEnd":8624,"docs":{"brief":"Creates a timer associated with a new datapack, and returns the datapack.","tags":[{"tag":"","text":"Creates a timer associated with a new datapack, and returns the datapack."},{"tag":"note","text":"The datapack is automatically freed when the timer ends."},{"tag":"note","text":"The position of the datapack is not reset or changed for the timer function."},{"tag":"param:interval","text":"Interval from the current game time to execute the given function."},{"tag":"param:func","text":"Function to execute once the given interval has elapsed."},{"tag":"param:datapack","text":"The newly created datapack is passed though this by-reference\nparameter to the timer callback function."},{"tag":"param:flags","text":"Timer flags."},{"tag":"return","text":"Handle to the timer object.  You do not need to call CloseHandle()."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"float","name":"interval","decl":"float interval","default":null},{"type":"Timer","name":"func","decl":"Timer func","default":null},{"type":"Handle&","name":"datapack","decl":"Handle &datapack","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"a1ed47be87240b5cf7949a5a7bb24a3b384cdc87","count":6505,"time":1582761259}},"ExtendMapTimeLimit":{"symbol":{"name":"ExtendMapTimeLimit","docStart":6162,"docEnd":6549,"docs":{"brief":"Extends the map time limit in a way that will notify all plugins.","tags":[{"tag":"","text":"Extends the map time limit in a way that will notify all plugins."},{"tag":"param:time","text":"Number of seconds to extend map time limit by.\nThe number can be negative to decrease the time limit.\nIf 0, the map will be set to have no time limit."},{"tag":"return","text":"True on success, false if operation is not supported."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"time","decl":"int time","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsServerProcessing":{"symbol":{"name":"IsServerProcessing","docStart":7484,"docEnd":7882,"docs":{"brief":"Returns whether or not the server is processing frames or not.\n\nThe server does not process frames until at least one client joins the game.\nIf server hibernation is disabled, once the first player has joined, even if that player\nleaves, the server's timers and entities will continue to work.","tags":[{"tag":"","text":"Returns whether or not the server is processing frames or not.\n\nThe server does not process frames until at least one client joins the game.\nIf server hibernation is disabled, once the first player has joined, even if that player\nleaves, the server's timers and entities will continue to work."},{"tag":"return","text":"True if the server is ticking, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"a1ed47be87240b5cf7949a5a7bb24a3b384cdc87","count":6505,"time":1582761259}},"GetTickedTime":{"symbol":{"name":"GetTickedTime","docStart":4711,"docEnd":5159,"docs":{"brief":"Returns the simulated game time.\n\nThis time is internally maintained by SourceMod and is based on the game\ntick count and tick rate.  Unlike GetGameTime(), it will increment past\nmap changes and while no players are connected.  Unlike GetEngineTime(),\nit will not increment based on the system clock (i.e. it is still bound\nto the ticking process).","tags":[{"tag":"","text":"Returns the simulated game time.\n\nThis time is internally maintained by SourceMod and is based on the game\ntick count and tick rate.  Unlike GetGameTime(), it will increment past\nmap changes and while no players are connected.  Unlike GetEngineTime(),\nit will not increment based on the system clock (i.e. it is still bound\nto the ticking process)."},{"tag":"return","text":"Time based on the game tick count."}]},"kind":"native","returnType":"float","arguments":[]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMapTimeLeft":{"symbol":{"name":"GetMapTimeLeft","docStart":5194,"docEnd":5646,"docs":{"brief":"Returns an estimate of the time left before the map ends.  If the server\nhas not processed any frames yet (i.e. no players have joined the map yet),\nthen the time left returned will always be infinite.","tags":[{"tag":"","text":"Returns an estimate of the time left before the map ends.  If the server\nhas not processed any frames yet (i.e. no players have joined the map yet),\nthen the time left returned will always be infinite."},{"tag":"param:timeleft","text":"Variable to store the time, in seconds.  If the\nvalue is less than 0, the time limit is infinite."},{"tag":"return","text":"True if the operation is supported, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"timeleft","decl":"int& timeleft","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMapTimeLimit":{"symbol":{"name":"GetMapTimeLimit","docStart":5694,"docEnd":6117,"docs":{"brief":"Retrieves the current map time limit.  If the server has not processed any\nframes yet (i.e. no players have joined the map yet), then the time limit\nreturned will always be 0.","tags":[{"tag":"","text":"Retrieves the current map time limit.  If the server has not processed any\nframes yet (i.e. no players have joined the map yet), then the time limit\nreturned will always be 0."},{"tag":"param:time","text":"Set to the number of total seconds in the map time\nlimit, or 0 if there is no time limit set."},{"tag":"return","text":"True on success, false if operation is not supported."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"time","decl":"int& time","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetTickInterval":{"symbol":{"name":"GetTickInterval","docStart":6596,"docEnd":6784,"docs":{"brief":"Returns the number of seconds in between game server ticks.\n\nNote: A tick, in this context, is a frame.","tags":[{"tag":"","text":"Returns the number of seconds in between game server ticks.\n\nNote: A tick, in this context, is a frame."},{"tag":"return","text":"Number of seconds in between ticks."}]},"kind":"native","returnType":"float","arguments":[]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"KillTimer":{"symbol":{"name":"KillTimer","docStart":3926,"docEnd":4320,"docs":{"brief":"Kills a timer.  Use this instead of CloseHandle() if you need more options.","tags":[{"tag":"","text":"Kills a timer.  Use this instead of CloseHandle() if you need more options."},{"tag":"param:timer","text":"Timer Handle to kill."},{"tag":"param:autoClose","text":"If autoClose is true, the data that was passed to CreateTimer() will\nbe closed as a handle if TIMER_DATA_HNDL_CLOSE was not specified."},{"tag":"error","text":"Invalid handles will cause a run time error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"timer","decl":"Handle timer","default":null},{"type":"bool","name":"autoClose","decl":"bool autoClose","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TriggerTimer":{"symbol":{"name":"TriggerTimer","docStart":4384,"docEnd":4648,"docs":{"brief":"Manually triggers a timer so its function will be called.","tags":[{"tag":"","text":"Manually triggers a timer so its function will be called."},{"tag":"param:timer","text":"Timer Handle to trigger."},{"tag":"param:reset","text":"If reset is true, the elapsed time counter is reset\nso the full interval must pass again."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"timer","decl":"Handle timer","default":null},{"type":"bool","name":"reset","decl":"bool reset","default":"false"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_timers_included":{"symbol":{"name":"_timers_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"TIMER_HNDL_CLOSE":{"symbol":{"name":"TIMER_HNDL_CLOSE","docStart":1894,"docEnd":1938,"docs":{"brief":"Deprecated define, replaced by below","tags":[{"tag":"","text":"Deprecated define, replaced by below"}]},"value":"(1<<9)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TIMER_REPEAT":{"symbol":{"name":"TIMER_REPEAT","docStart":1704,"docEnd":1758,"docs":{"brief":"Timer will repeat until it returns Plugin_Stop","tags":[{"tag":"","text":"Timer will repeat until it returns Plugin_Stop"}]},"value":"(1<<0)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TIMER_FLAG_NO_MAPCHANGE":{"symbol":{"name":"TIMER_FLAG_NO_MAPCHANGE","docStart":1804,"docEnd":1848,"docs":{"brief":"Timer will not carry over mapchanges","tags":[{"tag":"","text":"Timer will not carry over mapchanges"}]},"value":"(1<<1)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TIMER_DATA_HNDL_CLOSE":{"symbol":{"name":"TIMER_DATA_HNDL_CLOSE","docStart":1984,"docEnd":2061,"docs":{"brief":"Timer will automatically call CloseHandle() on its data when finished","tags":[{"tag":"","text":"Timer will automatically call CloseHandle() on its data when finished"}]},"value":"(1<<9)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{},"typesets":{"Timer":{"symbol":{"name":"Timer","docStart":2065,"docEnd":2141,"docs":{"brief":"Any of the following prototypes will work for a timed function.","tags":[{"tag":"","text":"Any of the following prototypes will work for a timed function."}]},"types":[{"docStart":2162,"docEnd":2489,"docs":{"brief":"Called when the timer interval has elapsed.","tags":[{"tag":"","text":"Called when the timer interval has elapsed."},{"tag":"param:timer","text":"Handle to the timer object."},{"tag":"param:hndl","text":"Handle passed to CreateTimer() when timer was created."},{"tag":"return","text":"Plugin_Stop to stop a repeating timer, any other value for\ndefault behavior."}]},"type":"function Action(Handle timer, Handle hndl)","parsedSignature":{"returnType":"Action","arguments":[{"type":"Handle","name":"timer","decl":"Handle timer","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]}},{"docStart":2540,"docEnd":2865,"docs":{"brief":"Called when the timer interval has elapsed.","tags":[{"tag":"","text":"Called when the timer interval has elapsed."},{"tag":"param:timer","text":"Handle to the timer object."},{"tag":"param:data","text":"Data passed to CreateTimer() when timer was created."},{"tag":"return","text":"Plugin_Stop to stop a repeating timer, any other value for\ndefault behavior."}]},"type":"function Action(Handle timer, any data)","parsedSignature":{"returnType":"Action","arguments":[{"type":"Handle","name":"timer","decl":"Handle timer","default":null},{"type":"any","name":"data","decl":"any data","default":null}]}},{"docStart":2913,"docEnd":3159,"docs":{"brief":"Called when the timer interval has elapsed.","tags":[{"tag":"","text":"Called when the timer interval has elapsed."},{"tag":"param:timer","text":"Handle to the timer object."},{"tag":"return","text":"Plugin_Stop to stop a repeating timer, any other value for\ndefault behavior."}]},"type":"function Action(Handle timer)","parsedSignature":{"returnType":"Action","arguments":[{"type":"Handle","name":"timer","decl":"Handle timer","default":null}]}}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{}},"regex":{"functions":{"CompileRegex":{"symbol":{"name":"CompileRegex","docStart":8460,"docEnd":9076,"docs":{"brief":"Precompile a regular expression.  Use this if you intend on using the\nsame expression multiple times.  Pass the regex handle returned here to\nMatchRegex to check for matches.","tags":[{"tag":"","text":"Precompile a regular expression.  Use this if you intend on using the\nsame expression multiple times.  Pass the regex handle returned here to\nMatchRegex to check for matches."},{"tag":"param:pattern","text":"The regular expression pattern."},{"tag":"param:flags","text":"General flags for the regular expression."},{"tag":"param:error","text":"Error message encountered, if applicable."},{"tag":"param:maxLen","text":"Maximum string length of the error buffer."},{"tag":"param:errcode","text":"Regex type error code encountered, if applicable."},{"tag":"return","text":"Valid regex handle on success, INVALID_HANDLE on failure."}]},"kind":"native","returnType":"Regex","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"char[]","name":"error","decl":"char[] error","default":"\"\""},{"type":"int","name":"maxLen","decl":"int maxLen","default":"0"},{"type":"RegexError&","name":"errcode","decl":"RegexError& errcode","default":"REGEX_ERROR_NONE"}]},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"fb9b284bcf8fdc2dd3a15f38c16eb424ec3183d9","count":6433,"time":1564595326}},"GetRegexSubString":{"symbol":{"name":"GetRegexSubString","docStart":9823,"docEnd":10474,"docs":{"brief":"Returns a matched substring from a regex handle.\nSubstring ids start at 0 and end at captures-1, where captures is the number returned\nby MatchRegex.","tags":[{"tag":"","text":"Returns a matched substring from a regex handle.\nSubstring ids start at 0 and end at captures-1, where captures is the number returned\nby MatchRegex."},{"tag":"param:regex","text":"The regex handle to extract data from."},{"tag":"param:str_id","text":"The index of the expression to get - starts at 0, and ends at captures - 1."},{"tag":"param:buffer","text":"The buffer to set to the matching substring."},{"tag":"param:maxlen","text":"The maximum string length of the buffer."},{"tag":"return","text":"True if a substring was found, False on fail/error"},{"tag":"note","text":"str_id = 0 is the full captured string, anything else is the capture group index.\n"}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"regex","decl":"Handle regex","default":null},{"type":"int","name":"str_id","decl":"int str_id","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"ded38676059e7fc4ff99816e75f4c227775932d7","count":6504,"time":1582761124}},"SimpleRegexMatch":{"symbol":{"name":"SimpleRegexMatch","docStart":10563,"docEnd":11208,"docs":{"brief":"Matches a string against a regular expression pattern.","tags":[{"tag":"","text":"Matches a string against a regular expression pattern."},{"tag":"note","text":"If you intend on using the same regular expression pattern\nmultiple times, consider using CompileRegex and MatchRegex\ninstead of making this function reparse the expression each time."},{"tag":"param:str","text":"The string to check."},{"tag":"param:pattern","text":"The regular expression pattern."},{"tag":"param:flags","text":"General flags for the regular expression."},{"tag":"param:error","text":"Error message, if applicable."},{"tag":"param:maxLen","text":"Maximum length of the error buffer."},{"tag":"return","text":"Number of substrings found or -1 on failure."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"char[]","name":"error","decl":"char[] error","default":"\"\""},{"type":"int","name":"maxLen","decl":"int maxLen","default":"0"}]},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"ded38676059e7fc4ff99816e75f4c227775932d7","count":6504,"time":1582761124}},"MatchRegex":{"symbol":{"name":"MatchRegex","docStart":9218,"docEnd":9711,"docs":{"brief":"Matches a string against a pre-compiled regular expression pattern.","tags":[{"tag":"","text":"Matches a string against a pre-compiled regular expression pattern."},{"tag":"param:regex","text":"Regex Handle from CompileRegex()"},{"tag":"param:str","text":"The string to check."},{"tag":"param:ret","text":"Error code, if applicable."},{"tag":"param:offset","text":"Offset in the string to start searching from."},{"tag":"return","text":"Number of captures found or -1 on failure."},{"tag":"note","text":"Use the regex handle passed to this function to extract\nmatches with GetRegexSubString()."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"regex","decl":"Handle regex","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"RegexError&","name":"ret","decl":"RegexError& ret","default":"REGEX_ERROR_NONE"},{"type":"int","name":"offset","decl":"int offset","default":"0"}]},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"ded38676059e7fc4ff99816e75f4c227775932d7","count":6504,"time":1582761124}},"__ext_regex_SetNTVOptional":{"symbol":{"name":"__ext_regex_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"7e3b1c395bad82ccfd01c296a417002e063a3537","count":6323,"time":1533582661},"last_updated":{"hash":"7e3b1c395bad82ccfd01c296a417002e063a3537","count":6323,"time":1533582661}}},"methodmaps":{"Regex":{"symbol":{"name":"Regex","docStart":5141,"docEnd":5232,"docs":{"brief":"Regular expression objects are used to match or decompose strings based on\npatterns.","tags":[{"tag":"","text":"Regular expression objects are used to match or decompose strings based on\npatterns."}]},"parent":"Handle","methods":[{"name":"Regex","docStart":5264,"docEnd":5640,"docs":{"brief":"Compile a regular expression.","tags":[{"tag":"","text":"Compile a regular expression."},{"tag":"param:pattern","text":"The regular expression pattern."},{"tag":"param:flags","text":"General flags for the regular expression."},{"tag":"param:error","text":"Error message encountered, if applicable."},{"tag":"param:maxLen","text":"Maximum string length of the error buffer."},{"tag":"param:errcode","text":"Regex type error code encountered, if applicable."}]},"kind":"native","returnType":"Regex","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"char[]","name":"error","decl":"char[] error","default":"\"\""},{"type":"int","name":"maxLen","decl":"int maxLen","default":"0"},{"type":"RegexError&","name":"errcode","decl":"RegexError& errcode","default":"REGEX_ERROR_NONE"}]},{"name":"Match","docStart":5778,"docEnd":6251,"docs":{"brief":"Matches a string against a pre-compiled regular expression pattern.","tags":[{"tag":"","text":"Matches a string against a pre-compiled regular expression pattern."},{"tag":"param:str","text":"The string to check."},{"tag":"param:ret","text":"Error code, if applicable."},{"tag":"param:offset","text":"Offset in the string to start searching from. MatchOffset returns the offset of the match."},{"tag":"return","text":"Number of captures found or -1 on failure."},{"tag":"note","text":"Use the regex handle passed to this function to extract\nmatches with GetSubString()."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"RegexError&","name":"ret","decl":"RegexError& ret","default":"REGEX_ERROR_NONE"},{"type":"int","name":"offset","decl":"int offset","default":"0"}]},{"name":"MatchAll","docStart":6353,"docEnd":6682,"docs":{"brief":"Gets all matches from a string against a pre-compiled regular expression pattern.","tags":[{"tag":"","text":"Gets all matches from a string against a pre-compiled regular expression pattern."},{"tag":"param:str","text":"The string to check."},{"tag":"param:ret","text":"Error code, if applicable."},{"tag":"return","text":"Number of matches found or -1 on failure."},{"tag":"note","text":"Use GetSubString() and loop from 0 -> totalmatches - 1."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"RegexError&","name":"ret","decl":"RegexError& ret","default":"REGEX_ERROR_NONE"}]},{"name":"GetSubString","docStart":6771,"docEnd":7534,"docs":{"brief":"Returns a matched substring from a regex handle.\n\nSubstring ids start at 0 and end at captures-1, where captures is the\nnumber returned by Regex.Match or Regex.CaptureCount.","tags":[{"tag":"","text":"Returns a matched substring from a regex handle.\n\nSubstring ids start at 0 and end at captures-1, where captures is the\nnumber returned by Regex.Match or Regex.CaptureCount."},{"tag":"param:str_id","text":"The index of the expression to get - starts at 0, and ends at captures - 1."},{"tag":"param:buffer","text":"The buffer to set to the matching substring."},{"tag":"param:maxlen","text":"The maximum string length of the buffer."},{"tag":"param:match","text":"Match to get the captures for - starts at 0, and ends at MatchCount() -1"},{"tag":"return","text":"True if a substring was found, False on fail/error"},{"tag":"note","text":"str_id = 0 is the full captured string, anything else is the capture group index.\nif Regex.Match is used match can only be 0"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"str_id","decl":"int str_id","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int","name":"match","decl":"int match","default":"0"}]},{"name":"MatchCount","docStart":7628,"docEnd":7788,"docs":{"brief":"Returns number of matches\n\nWhen using Match this is always 1 or 0 (unless an error occured)","tags":[{"tag":"","text":"Returns number of matches\n\nWhen using Match this is always 1 or 0 (unless an error occured)"},{"tag":"return","text":"Total number of matches found."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"CaptureCount","docStart":7827,"docEnd":8143,"docs":{"brief":"Returns number of captures for a match","tags":[{"tag":"","text":"Returns number of captures for a match"},{"tag":"param:match","text":"Match to get the number of captures for. Match starts at 0, and ends at MatchCount() -1"},{"tag":"return","text":"Number of captures in the match."},{"tag":"note","text":"Use GetSubString() and loop from 1 -> captures -1 for str_id to get all captures"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"match","decl":"int match","default":"0"}]},{"name":"MatchOffset","docStart":8197,"docEnd":8404,"docs":{"brief":"Returns the string offset of a match.","tags":[{"tag":"","text":"Returns the string offset of a match."},{"tag":"param:match","text":"Match to get the offset of. Match starts at 0, and ends at MatchCount() -1"},{"tag":"return","text":"Offset of the match in the string."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"match","decl":"int match","default":"0"}]}],"properties":[]},"created":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577},"last_updated":{"hash":"fb9b284bcf8fdc2dd3a15f38c16eb424ec3183d9","count":6433,"time":1564595326}}},"enumstructs":{},"constants":{},"defines":{"PCRE_DOTALL":{"symbol":{"name":"PCRE_DOTALL","docStart":2089,"docEnd":2178,"docs":{"brief":"Single line (affects . so that it matches any character, even new line characters).","tags":[{"tag":"","text":"Single line (affects . so that it matches any character, even new line characters)."}]},"value":"0x00000004"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577}},"_regex_included":{"symbol":{"name":"_regex_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496}},"PCRE_EXTENDED":{"symbol":{"name":"PCRE_EXTENDED","docStart":2223,"docEnd":2282,"docs":{"brief":"Pattern extension (ignore whitespace and # comments).","tags":[{"tag":"","text":"Pattern extension (ignore whitespace and # comments)."}]},"value":"0x00000008"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577}},"PCRE_UCP":{"symbol":{"name":"PCRE_UCP","docStart":2850,"docEnd":2897,"docs":{"brief":"Use Unicode properties for \\ed, \\ew, etc.","tags":[{"tag":"","text":"Use Unicode properties for \\ed, \\ew, etc."}]},"value":"0x20000000"},"created":{"hash":"4e7a9cf30b8a004a1653267aaef690ef625f9fd7","count":3835,"time":1363534744},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PCRE_DOLLAR_ENDONLY":{"symbol":{"name":"PCRE_DOLLAR_ENDONLY","docStart":2402,"docEnd":2438,"docs":{"brief":"$ not to match newline at end.","tags":[{"tag":"","text":"$ not to match newline at end."}]},"value":"0x00000020"},"created":{"hash":"4e7a9cf30b8a004a1653267aaef690ef625f9fd7","count":3835,"time":1363534744},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PCRE_UTF8":{"symbol":{"name":"PCRE_UTF8","docStart":2654,"docEnd":2675,"docs":{"brief":"Use UTF-8 Chars","tags":[{"tag":"","text":"Use UTF-8 Chars"}]},"value":"0x00000800"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PCRE_NO_UTF8_CHECK":{"symbol":{"name":"PCRE_NO_UTF8_CHECK","docStart":2720,"docEnd":2805,"docs":{"brief":"Do not check the pattern for UTF-8 validity (only relevant if PCRE_UTF8 is set)","tags":[{"tag":"","text":"Do not check the pattern for UTF-8 validity (only relevant if PCRE_UTF8 is set)"}]},"value":"0x00002000"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PCRE_ANCHORED":{"symbol":{"name":"PCRE_ANCHORED","docStart":2327,"docEnd":2357,"docs":{"brief":"Force pattern anchoring.","tags":[{"tag":"","text":"Force pattern anchoring."}]},"value":"0x00000010"},"created":{"hash":"4e7a9cf30b8a004a1653267aaef690ef625f9fd7","count":3835,"time":1363534744},"last_updated":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577}},"PCRE_NOTEMPTY":{"symbol":{"name":"PCRE_NOTEMPTY","docStart":2566,"docEnd":2609,"docs":{"brief":"An empty string is not a valid match.","tags":[{"tag":"","text":"An empty string is not a valid match."}]},"value":"0x00000400"},"created":{"hash":"4e7a9cf30b8a004a1653267aaef690ef625f9fd7","count":3835,"time":1363534744},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PCRE_MULTILINE":{"symbol":{"name":"PCRE_MULTILINE","docStart":1917,"docEnd":2044,"docs":{"brief":"Multilines (affects ^ and $ so that they match the start/end of a line rather than matching the start/end of the string).","tags":[{"tag":"","text":"Multilines (affects ^ and $ so that they match the start/end of a line rather than matching the start/end of the string)."}]},"value":"0x00000002"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577}},"PCRE_CASELESS":{"symbol":{"name":"PCRE_CASELESS","docStart":1855,"docEnd":1872,"docs":{"brief":"Ignore Case","tags":[{"tag":"","text":"Ignore Case"}]},"value":"0x00000001"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577}},"PCRE_UNGREEDY":{"symbol":{"name":"PCRE_UNGREEDY","docStart":2483,"docEnd":2521,"docs":{"brief":"Invert greediness of quantifiers","tags":[{"tag":"","text":"Invert greediness of quantifiers"}]},"value":"0x00000200"},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"RegexError":{"symbol":{"name":"RegexError","docStart":2903,"docEnd":2945,"docs":{"brief":"Regex expression error codes.","tags":[{"tag":"","text":"Regex expression error codes."}]},"entries":[{"name":"REGEX_ERROR_NONE","docStart":3004,"docEnd":3018,"docs":{"brief":"No error","tags":[{"tag":"","text":"No error"}]},"value":"0"},{"name":"REGEX_ERROR_ASSERT","docStart":3059,"docEnd":3081,"docs":{"brief":"internal error ?","tags":[{"tag":"","text":"internal error ?"}]},"value":"1"},{"name":"REGEX_ERROR_BADBR","docStart":3120,"docEnd":3153,"docs":{"brief":"invalid repeat counts in {}","tags":[{"tag":"","text":"invalid repeat counts in {}"}]},"value":null},{"name":"REGEX_ERROR_BADPAT","docStart":3192,"docEnd":3211,"docs":{"brief":"pattern error","tags":[{"tag":"","text":"pattern error"}]},"value":null},{"name":"REGEX_ERROR_BADRPT","docStart":3250,"docEnd":3269,"docs":{"brief":"? * + invalid","tags":[{"tag":"","text":"? * + invalid"}]},"value":null},{"name":"REGEX_ERROR_EBRACE","docStart":3308,"docEnd":3327,"docs":{"brief":"unbalanced {}","tags":[{"tag":"","text":"unbalanced {}"}]},"value":null},{"name":"REGEX_ERROR_EBRACK","docStart":3366,"docEnd":3385,"docs":{"brief":"unbalanced []","tags":[{"tag":"","text":"unbalanced []"}]},"value":null},{"name":"REGEX_ERROR_ECOLLATE","docStart":3424,"docEnd":3460,"docs":{"brief":"collation error - not relevant","tags":[{"tag":"","text":"collation error - not relevant"}]},"value":null},{"name":"REGEX_ERROR_ECTYPE","docStart":3499,"docEnd":3514,"docs":{"brief":"bad class","tags":[{"tag":"","text":"bad class"}]},"value":null},{"name":"REGEX_ERROR_EESCAPE","docStart":3553,"docEnd":3578,"docs":{"brief":"bad escape sequence","tags":[{"tag":"","text":"bad escape sequence"}]},"value":null},{"name":"REGEX_ERROR_EMPTY","docStart":3617,"docEnd":3639,"docs":{"brief":"empty expression","tags":[{"tag":"","text":"empty expression"}]},"value":null},{"name":"REGEX_ERROR_EPAREN","docStart":3678,"docEnd":3697,"docs":{"brief":"unbalanced ()","tags":[{"tag":"","text":"unbalanced ()"}]},"value":null},{"name":"REGEX_ERROR_ERANGE","docStart":3736,"docEnd":3761,"docs":{"brief":"bad range inside []","tags":[{"tag":"","text":"bad range inside []"}]},"value":null},{"name":"REGEX_ERROR_ESIZE","docStart":3800,"docEnd":3824,"docs":{"brief":"expression too big","tags":[{"tag":"","text":"expression too big"}]},"value":null},{"name":"REGEX_ERROR_ESPACE","docStart":3863,"docEnd":3889,"docs":{"brief":"failed to get memory","tags":[{"tag":"","text":"failed to get memory"}]},"value":null},{"name":"REGEX_ERROR_ESUBREG","docStart":3928,"docEnd":3952,"docs":{"brief":"bad back reference","tags":[{"tag":"","text":"bad back reference"}]},"value":null},{"name":"REGEX_ERROR_INVARG","docStart":3991,"docEnd":4009,"docs":{"brief":"bad argument","tags":[{"tag":"","text":"bad argument"}]},"value":null},{"name":"REGEX_ERROR_NOMATCH","docStart":4050,"docEnd":4074,"docs":{"brief":"No match was found","tags":[{"tag":"","text":"No match was found"}]},"value":"-1"},{"name":"REGEX_ERROR_NULL","docStart":0,"docEnd":0,"docs":null,"value":"-2"},{"name":"REGEX_ERROR_BADOPTION","docStart":0,"docEnd":0,"docs":null,"value":"-3"},{"name":"REGEX_ERROR_BADMAGIC","docStart":0,"docEnd":0,"docs":null,"value":"-4"},{"name":"REGEX_ERROR_UNKNOWN_OPCODE","docStart":0,"docEnd":0,"docs":null,"value":"-5"},{"name":"REGEX_ERROR_NOMEMORY","docStart":0,"docEnd":0,"docs":null,"value":"-6"},{"name":"REGEX_ERROR_NOSUBSTRING","docStart":0,"docEnd":0,"docs":null,"value":"-7"},{"name":"REGEX_ERROR_MATCHLIMIT","docStart":0,"docEnd":0,"docs":null,"value":"-8"},{"name":"REGEX_ERROR_CALLOUT","docStart":4324,"docEnd":4355,"docs":{"brief":"Never used by PCRE itself","tags":[{"tag":"","text":"Never used by PCRE itself"}]},"value":"-9"},{"name":"REGEX_ERROR_BADUTF8","docStart":0,"docEnd":0,"docs":null,"value":"-10"},{"name":"REGEX_ERROR_BADUTF8_OFFSET","docStart":0,"docEnd":0,"docs":null,"value":"-11"},{"name":"REGEX_ERROR_PARTIAL","docStart":0,"docEnd":0,"docs":null,"value":"-12"},{"name":"REGEX_ERROR_BADPARTIAL","docStart":0,"docEnd":0,"docs":null,"value":"-13"},{"name":"REGEX_ERROR_INTERNAL","docStart":0,"docEnd":0,"docs":null,"value":"-14"},{"name":"REGEX_ERROR_BADCOUNT","docStart":0,"docEnd":0,"docs":null,"value":"-15"},{"name":"REGEX_ERROR_DFA_UITEM","docStart":0,"docEnd":0,"docs":null,"value":"-16"},{"name":"REGEX_ERROR_DFA_UCOND","docStart":0,"docEnd":0,"docs":null,"value":"-17"},{"name":"REGEX_ERROR_DFA_UMLIMIT","docStart":0,"docEnd":0,"docs":null,"value":"-18"},{"name":"REGEX_ERROR_DFA_WSSIZE","docStart":0,"docEnd":0,"docs":null,"value":"-19"},{"name":"REGEX_ERROR_DFA_RECURSE","docStart":0,"docEnd":0,"docs":null,"value":"-20"},{"name":"REGEX_ERROR_RECURSIONLIMIT","docStart":0,"docEnd":0,"docs":null,"value":"-21"},{"name":"REGEX_ERROR_NULLWSLIMIT","docStart":4776,"docEnd":4805,"docs":{"brief":"No longer actually used","tags":[{"tag":"","text":"No longer actually used"}]},"value":"-22"},{"name":"REGEX_ERROR_BADNEWLINE","docStart":0,"docEnd":0,"docs":null,"value":"-23"},{"name":"REGEX_ERROR_BADOFFSET","docStart":0,"docEnd":0,"docs":null,"value":"-24"},{"name":"REGEX_ERROR_SHORTUTF8","docStart":0,"docEnd":0,"docs":null,"value":"-25"},{"name":"REGEX_ERROR_RECURSELOOP","docStart":0,"docEnd":0,"docs":null,"value":"-26"},{"name":"REGEX_ERROR_JIT_STACKLIMIT","docStart":0,"docEnd":0,"docs":null,"value":"-27"},{"name":"REGEX_ERROR_BADMODE","docStart":0,"docEnd":0,"docs":null,"value":"-28"},{"name":"REGEX_ERROR_BADENDIANNESS","docStart":0,"docEnd":0,"docs":null,"value":"-29"},{"name":"REGEX_ERROR_DFA_BADRESTART","docStart":0,"docEnd":0,"docs":null,"value":"-30"},{"name":"REGEX_ERROR_JIT_BADOPTION","docStart":0,"docEnd":0,"docs":null,"value":"-31"},{"name":"REGEX_ERROR_BADLENGTH","docStart":0,"docEnd":0,"docs":null,"value":"-32"}]},"created":{"hash":"2f41af814ef5d08b7afa3a0d98787c53ab23544b","count":1843,"time":1200002496},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"tf2":{"functions":{"__ext_tf2_SetNTVOptional":{"symbol":{"name":"__ext_tf2_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"b1b0484daea0d106b323afa485f225ca666a8e37","count":2977,"time":1273529895},"last_updated":{"hash":"b1b0484daea0d106b323afa485f225ca666a8e37","count":2977,"time":1273529895}},"TF2_IsHolidayActive":{"symbol":{"name":"TF2_IsHolidayActive","docStart":19675,"docEnd":19856,"docs":{"brief":"Returns whether or not a holiday is active","tags":[{"tag":"","text":"Returns whether or not a holiday is active"},{"tag":"param:holiday","text":"Holiday being checked."},{"tag":"return","text":"Boolean of whether or not the holiday is active."}]},"kind":"native","returnType":"bool","arguments":[{"type":"TFHoliday","name":"holiday","decl":"TFHoliday holiday","default":null}]},"created":{"hash":"5efb5068cd61c6c5814474ffd6f8a112259ace85","count":4317,"time":1396927031},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_CalcIsAttackCritical":{"symbol":{"name":"TF2_CalcIsAttackCritical","docStart":18087,"docEnd":18839,"docs":{"brief":"Called on weapon fire to decide if the current shot should be critical.\nReturn Plugin_Continue to let the original calculation or return a higher\naction to override the decision with the value of 'result'","tags":[{"tag":"","text":"Called on weapon fire to decide if the current shot should be critical.\nReturn Plugin_Continue to let the original calculation or return a higher\naction to override the decision with the value of 'result'"},{"tag":"note","text":"Since critical shots are also calculated client side any changes made with\nthis will not show for the shooter. Projectile weapons such as the rocketlauncher\nand demoman weapons will show a critical bullet but no critical sound effect.\nBullet hits should appear as expected."},{"tag":"param:client","text":"Client Index."},{"tag":"param:weapon","text":"Weapon entity Index."},{"tag":"param:weaponname","text":"Classname of the weapon."},{"tag":"param:result","text":"Buffer param for the result of the decision."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"char[]","name":"weaponname","decl":"char[] weaponname","default":null},{"type":"bool&","name":"result","decl":"bool& result","default":null}]},"created":{"hash":"ec69b34cbb53093ef51015a96cda07c8fb09a1bb","count":1980,"time":1207802957},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnGetHoliday":{"symbol":{"name":"TF2_OnGetHoliday","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"Action","arguments":[{"type":"TFHoliday&","name":"holiday","decl":"TFHoliday& holiday","default":null}]},"created":{"hash":"e4832f0d0875f07387219af7614597281c09fa05","count":3057,"time":1277761694},"last_updated":{"hash":"ee42f09b8d8933acf1eb5151d1961a93a3d10844","count":3427,"time":1319843260}},"TF2_IgnitePlayer":{"symbol":{"name":"TF2_IgnitePlayer","docStart":13770,"docEnd":14088,"docs":{"brief":"Sets a client on fire.","tags":[{"tag":"","text":"Sets a client on fire."},{"tag":"note","text":"Fire duration is capped to 10 seconds."},{"tag":"param:client","text":"Player's index."},{"tag":"param:attacker","text":"Attacker's index."},{"tag":"param:duration","text":"Duration of fire (in seconds)."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"float","name":"duration","decl":"float duration","default":"10.000000"}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_DisguisePlayer":{"symbol":{"name":"TF2_DisguisePlayer","docStart":15867,"docEnd":16441,"docs":{"brief":"Disguises a client to the given model and team. Only has an effect on spies.\n\nNote: This only starts the disguise process and a delay occurs before the spy is fully disguised","tags":[{"tag":"","text":"Disguises a client to the given model and team. Only has an effect on spies.\n\nNote: This only starts the disguise process and a delay occurs before the spy is fully disguised"},{"tag":"param:client","text":"Player's index."},{"tag":"param:team","text":"Team to disguise the player as (only TFTeam_Red and TFTeam_Blue have an effect)"},{"tag":"param:classType","text":"TFClassType class to disguise the player as"},{"tag":"param:target","text":"Specific target player to disguise as (0 for any)"},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFTeam","name":"team","decl":"TFTeam team","default":null},{"type":"TFClassType","name":"classType","decl":"TFClassType classType","default":null},{"type":"int","name":"target","decl":"int target","default":"0"}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_AddCondition":{"symbol":{"name":"TF2_AddCondition","docStart":14618,"docEnd":15102,"docs":{"brief":"Adds a condition to a player","tags":[{"tag":"","text":"Adds a condition to a player"},{"tag":"param:client","text":"Player's index."},{"tag":"param:condition","text":"Integer identifier of condition to apply."},{"tag":"param:duration","text":"Duration of condition (does not apply to all conditions).\nPass TFCondDuration_Infinite to apply until manually removed."},{"tag":"param:inflictor","text":"Condition inflictor's index (0 for no inflictor)."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFCond","name":"condition","decl":"TFCond condition","default":null},{"type":"float","name":"duration","decl":"float duration","default":"TFCondDuration_Infinite"},{"type":"int","name":"inflictor","decl":"int inflictor","default":"0"}]},"created":{"hash":"a72daff4acdfedf2083284526533e9041414f52e","count":2940,"time":1268926505},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_StunPlayer":{"symbol":{"name":"TF2_StunPlayer","docStart":16811,"docEnd":17166,"docs":{"brief":"Stuns a client","tags":[{"tag":"","text":"Stuns a client"},{"tag":"param:client","text":"Player's index."},{"tag":"param:duration","text":"Duration of stun."},{"tag":"param:slowdown","text":"Slowdown percent (as decimal, 0.00-1.00)\nIgnored if TF_STUNFLAG_SLOWDOWN is not set."},{"tag":"param:stunflags","text":"Stun flags."},{"tag":"param:attacker","text":"Attacker's index (0 is allowed for world)."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"duration","decl":"float duration","default":null},{"type":"float","name":"slowdown","decl":"float slowdown","default":"0.000000"},{"type":"int","name":"stunflags","decl":"int stunflags","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":"0"}]},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_RemoveCondition":{"symbol":{"name":"TF2_RemoveCondition","docStart":15224,"docEnd":15469,"docs":{"brief":"Removes a condition from a player","tags":[{"tag":"","text":"Removes a condition from a player"},{"tag":"param:client","text":"Player's index."},{"tag":"param:condition","text":"Integer identifier of condition to remove."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFCond","name":"condition","decl":"TFCond condition","default":null}]},"created":{"hash":"a72daff4acdfedf2083284526533e9041414f52e","count":2940,"time":1268926505},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_SetPlayerInvuln":{"symbol":{"name":"TF2_SetPlayerInvuln","docStart":1947,"docEnd":2196,"docs":{"brief":"Set's a Clients invulnrability status (ubercharge effect)","tags":[{"tag":"","text":"Set's a Clients invulnrability status (ubercharge effect)"},{"tag":"param:client","text":"Player's index."},{"tag":"param:enabled","text":"Enable/Disable invulnrability."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"ac256a6c2419e0d2ac532b3b73e855ff107b6022","count":2019,"time":1208601324}},"TF2_SetPlayerPowerPlay":{"symbol":{"name":"TF2_SetPlayerPowerPlay","docStart":15537,"docEnd":15800,"docs":{"brief":"Enables/disables PowerPlay mode on a player.","tags":[{"tag":"","text":"Enables/disables PowerPlay mode on a player."},{"tag":"param:client","text":"Player's index."},{"tag":"param:enabled","text":"Whether to enable or disable PowerPlay on player."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},"created":{"hash":"a72daff4acdfedf2083284526533e9041414f52e","count":2940,"time":1268926505},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_GetResourceEntity":{"symbol":{"name":"TF2_GetResourceEntity","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"0c7696da65379a3661af0afad3f4047293e5b032","count":3817,"time":1363456236}},"TF2_RemovePlayerDisguise":{"symbol":{"name":"TF2_RemovePlayerDisguise","docStart":16540,"docEnd":16756,"docs":{"brief":"Removes the current disguise from a client. Only has an effect on spies.","tags":[{"tag":"","text":"Removes the current disguise from a client. Only has an effect on spies."},{"tag":"param:client","text":"Player's index."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_RespawnPlayer":{"symbol":{"name":"TF2_RespawnPlayer","docStart":14170,"docEnd":14331,"docs":{"brief":"Respawns a client","tags":[{"tag":"","text":"Respawns a client"},{"tag":"param:client","text":"Player's index."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_MakeBleed":{"symbol":{"name":"TF2_MakeBleed","docStart":17278,"docEnd":17475,"docs":{"brief":"Induces the bleed effect on a client","tags":[{"tag":"","text":"Induces the bleed effect on a client"},{"tag":"param:client","text":"Player's index."},{"tag":"param:attacker","text":"Attacker's index."},{"tag":"param:duration","text":"Duration of bleeding (in seconds)."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"float","name":"duration","decl":"float duration","default":null}]},"created":{"hash":"488de0014e946533ede4f4e5dbccd6b6142f4082","count":3097,"time":1280156768},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_RegeneratePlayer":{"symbol":{"name":"TF2_RegeneratePlayer","docStart":14379,"docEnd":14567,"docs":{"brief":"Regenerates a client's health and ammunition","tags":[{"tag":"","text":"Regenerates a client's health and ammunition"},{"tag":"param:client","text":"Player's index."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"a72daff4acdfedf2083284526533e9041414f52e","count":2940,"time":1268926505},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnIsHolidayActive":{"symbol":{"name":"TF2_OnIsHolidayActive","docStart":19143,"docEnd":19599,"docs":{"brief":"Called at various times when the game checks to see if the given holiday is active.\nReturn Plugin_Continue to let the original calculation or return a higher\naction to override the decision with the value of 'result'","tags":[{"tag":"","text":"Called at various times when the game checks to see if the given holiday is active.\nReturn Plugin_Continue to let the original calculation or return a higher\naction to override the decision with the value of 'result'"},{"tag":"param:holiday","text":"Holiday being checked."},{"tag":"param:result","text":"Buffer param for the result of the decision."},{"tag":"return","text":"Plugin_Continue for original calculation, higher value to use 'result'."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"TFHoliday","name":"holiday","decl":"TFHoliday holiday","default":null},{"type":"bool&","name":"result","decl":"bool& result","default":null}]},"created":{"hash":"ee42f09b8d8933acf1eb5151d1961a93a3d10844","count":3427,"time":1319843260},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_RemoveWearable":{"symbol":{"name":"TF2_RemoveWearable","docStart":20149,"docEnd":20469,"docs":{"brief":"Removes an econ wearable (hat, misc, etc) from a player.\nThis also deletes the wearable entity.","tags":[{"tag":"","text":"Removes an econ wearable (hat, misc, etc) from a player.\nThis also deletes the wearable entity."},{"tag":"param:client","text":"Client index."},{"tag":"param:wearable","text":"Index of the wearable entity."},{"tag":"error","text":"Invalid client index, client not in game, invalid wearable entity, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"wearable","decl":"int wearable","default":null}]},"created":{"hash":"4a400d95694bcce0db5061e40c11b48c65cb2fb8","count":4710,"time":1406683887},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnWaitingForPlayersStart":{"symbol":{"name":"TF2_OnWaitingForPlayersStart","docStart":21086,"docEnd":21164,"docs":{"brief":"Called when the server enters the Waiting for Players round state","tags":[{"tag":"","text":"Called when the server enters the Waiting for Players round state"}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"c9eaca0e56e5601b12b84e9c0488a8fb3aa582ff","count":3152,"time":1290142726},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_GetClass":{"symbol":{"name":"TF2_GetClass","docStart":17840,"docEnd":18025,"docs":{"brief":"Finds the TFClassType for a given class name.","tags":[{"tag":"","text":"Finds the TFClassType for a given class name."},{"tag":"param:classname","text":"A classname string such as \"sniper\" or \"demoman\""},{"tag":"return","text":"A TFClassType constant."}]},"kind":"native","returnType":"TFClassType","arguments":[{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_IsPlayerInDuel":{"symbol":{"name":"TF2_IsPlayerInDuel","docStart":19913,"docEnd":20100,"docs":{"brief":"Returns whether or not a client (Player) is in a duel.","tags":[{"tag":"","text":"Returns whether or not a client (Player) is in a duel."},{"tag":"param:client","text":"Client Index."},{"tag":"return","text":"Boolean of whether or not the client/player is dueling."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"7627bf80b98eec71c10eef755ad1c50bf3f83e79","count":3148,"time":1289174732},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnWaitingForPlayersEnd":{"symbol":{"name":"TF2_OnWaitingForPlayersEnd","docStart":21214,"docEnd":21291,"docs":{"brief":"Called when the server exits the Waiting for Players round state","tags":[{"tag":"","text":"Called when the server exits the Waiting for Players round state"}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"c9eaca0e56e5601b12b84e9c0488a8fb3aa582ff","count":3152,"time":1290142726},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnConditionAdded":{"symbol":{"name":"TF2_OnConditionAdded","docStart":20532,"docEnd":20734,"docs":{"brief":"Called after a condition is added to a player","tags":[{"tag":"","text":"Called after a condition is added to a player"},{"tag":"param:client","text":"Index of the client to which the condition is being added."},{"tag":"param:condition","text":"Condition that is being added."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFCond","name":"condition","decl":"TFCond condition","default":null}]},"created":{"hash":"33aebeb727fec0d9f030ed8e894a44c02b0ea8c8","count":3234,"time":1302323635},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnConditionRemoved":{"symbol":{"name":"TF2_OnConditionRemoved","docStart":20804,"docEnd":21014,"docs":{"brief":"Called after a condition is removed from a player","tags":[{"tag":"","text":"Called after a condition is removed from a player"},{"tag":"param:client","text":"Index of the client to which the condition is being removed."},{"tag":"param:condition","text":"Condition that is being removed."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFCond","name":"condition","decl":"TFCond condition","default":null}]},"created":{"hash":"33aebeb727fec0d9f030ed8e894a44c02b0ea8c8","count":3234,"time":1302323635},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TF2_OnPlayerTeleport":{"symbol":{"name":"TF2_OnPlayerTeleport","docStart":21339,"docEnd":21963,"docs":{"brief":"Called when a player attempts to use a teleporter to decide if the player should be allowed to teleport.\nReturn Plugin_Continue to let the original calculation or return a higher\naction to override the decision with the value of 'result'","tags":[{"tag":"","text":"Called when a player attempts to use a teleporter to decide if the player should be allowed to teleport.\nReturn Plugin_Continue to let the original calculation or return a higher\naction to override the decision with the value of 'result'"},{"tag":"param:client","text":"Client index."},{"tag":"param:teleporter","text":"Teleporter entity index."},{"tag":"param:result","text":"Buffer param for the result of the decision.\nThis is prepopulated with the game's original decision to let a player teleport."},{"tag":"return","text":"Plugin_Continue for original calculation, higher value to use 'result'."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"teleporter","decl":"int teleporter","default":null},{"type":"bool&","name":"result","decl":"bool& result","default":null}]},"created":{"hash":"3d25938dd79fd5e21fe223968e24cff3f26be549","count":3534,"time":1338164086},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"TF_STUNFLAG_LIMITMOVEMENT":{"symbol":{"name":"TF_STUNFLAG_LIMITMOVEMENT","docStart":1840,"docEnd":1881,"docs":{"brief":"disable forward/backward movement","tags":[{"tag":"","text":"disable forward/backward movement"}]},"value":"(1 << 2)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAGS_BIGBONK":{"symbol":{"name":"TF_STUNFLAGS_BIGBONK","docStart":0,"docEnd":0,"docs":null,"value":"TF_STUNFLAG_CHEERSOUND|TF_STUNFLAG_BONKSTUCK"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_STUNFLAG_GHOSTEFFECT":{"symbol":{"name":"TF_STUNFLAG_GHOSTEFFECT","docStart":2154,"docEnd":2177,"docs":{"brief":"ghost particles","tags":[{"tag":"","text":"ghost particles"}]},"value":"(1 << 7)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAG_CHEERSOUND":{"symbol":{"name":"TF_STUNFLAG_CHEERSOUND","docStart":1931,"docEnd":1953,"docs":{"brief":"cheering sound","tags":[{"tag":"","text":"cheering sound"}]},"value":"(1 << 3)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAGS_LOSERSTATE":{"symbol":{"name":"TF_STUNFLAGS_LOSERSTATE","docStart":0,"docEnd":0,"docs":null,"value":"TF_STUNFLAG_SLOWDOWN|TF_STUNFLAG_NOSOUNDOREFFECT|TF_STUNFLAG_THIRDPERSON"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"_tf2_included":{"symbol":{"name":"_tf2_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634}},"TF_STUNFLAGS_GHOSTSCARE":{"symbol":{"name":"TF_STUNFLAGS_GHOSTSCARE","docStart":0,"docEnd":0,"docs":null,"value":"TF_STUNFLAG_GHOSTEFFECT|TF_STUNFLAG_THIRDPERSON"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_STUNFLAG_THIRDPERSON":{"symbol":{"name":"TF_STUNFLAG_THIRDPERSON","docStart":2081,"docEnd":2104,"docs":{"brief":"panic animation","tags":[{"tag":"","text":"panic animation"}]},"value":"(1 << 6)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAGS_NORMALBONK":{"symbol":{"name":"TF_STUNFLAGS_NORMALBONK","docStart":0,"docEnd":0,"docs":null,"value":"TF_STUNFLAG_BONKSTUCK"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_STUNFLAG_BONKSTUCK":{"symbol":{"name":"TF_STUNFLAG_BONKSTUCK","docStart":1765,"docEnd":1790,"docs":{"brief":"bonk sound, stuck","tags":[{"tag":"","text":"bonk sound, stuck"}]},"value":"(1 << 1)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAGS_SMALLBONK":{"symbol":{"name":"TF_STUNFLAGS_SMALLBONK","docStart":0,"docEnd":0,"docs":null,"value":"TF_STUNFLAG_THIRDPERSON|TF_STUNFLAG_SLOWDOWN"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_STUNFLAG_SLOWDOWN":{"symbol":{"name":"TF_STUNFLAG_SLOWDOWN","docStart":1680,"docEnd":1715,"docs":{"brief":"activates slowdown modifier","tags":[{"tag":"","text":"activates slowdown modifier"}]},"value":"(1 << 0)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAG_NOSOUNDOREFFECT":{"symbol":{"name":"TF_STUNFLAG_NOSOUNDOREFFECT","docStart":2003,"docEnd":2031,"docs":{"brief":"no sound or particle","tags":[{"tag":"","text":"no sound or particle"}]},"value":"(1 << 5)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TF_STUNFLAG_SOUND":{"symbol":{"name":"TF_STUNFLAG_SOUND","docStart":2227,"docEnd":2240,"docs":{"brief":"sound","tags":[{"tag":"","text":"sound"}]},"value":"(1 << 8)"},"created":{"hash":"8f6f8819373fe70ac6965f96cd43e2b0e6bf8da6","count":6194,"time":1509105819},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"TFObjectMode":{"symbol":{"name":"TFObjectMode","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFObjectMode_None","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"TFObjectMode_Entrance","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"TFObjectMode_Exit","docStart":0,"docEnd":0,"docs":null,"value":"1"}]},"created":{"hash":"4ab3b15efd06e75860ef96bad5b26501c850d0de","count":3094,"time":1279934615},"last_updated":{"hash":"4ab3b15efd06e75860ef96bad5b26501c850d0de","count":3094,"time":1279934615}},"TFHoliday":{"symbol":{"name":"TFHoliday","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFHoliday_Invalid","docStart":0,"docEnd":0,"docs":null,"value":"-1"}]},"created":{"hash":"e4832f0d0875f07387219af7614597281c09fa05","count":3057,"time":1277761694},"last_updated":{"hash":"09060c265fde3532ef70f00fed6ee33b9da342b5","count":5068,"time":1418174484}},"TFCond":{"symbol":{"name":"TFCond","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFCond_Slowed","docStart":3014,"docEnd":3074,"docs":{"brief":"0: Revving Minigun, Sniper Rifle. Gives zoomed/revved pose","tags":[{"tag":"","text":"0: Revving Minigun, Sniper Rifle. Gives zoomed/revved pose"}]},"value":"0"},{"name":"TFCond_Zoomed","docStart":3092,"docEnd":3117,"docs":{"brief":"1: Sniper Rifle zooming","tags":[{"tag":"","text":"1: Sniper Rifle zooming"}]},"value":null},{"name":"TFCond_Disguising","docStart":3139,"docEnd":3158,"docs":{"brief":"2: Disguise smoke","tags":[{"tag":"","text":"2: Disguise smoke"}]},"value":null},{"name":"TFCond_Disguised","docStart":3179,"docEnd":3192,"docs":{"brief":"3: Disguise","tags":[{"tag":"","text":"3: Disguise"}]},"value":null},{"name":"TFCond_Cloaked","docStart":3211,"docEnd":3228,"docs":{"brief":"4: Cloak effect","tags":[{"tag":"","text":"4: Cloak effect"}]},"value":null},{"name":"TFCond_Ubercharged","docStart":3251,"docEnd":3324,"docs":{"brief":"5: Invulnerability, removed when being healed or by another Uber effect","tags":[{"tag":"","text":"5: Invulnerability, removed when being healed or by another Uber effect"}]},"value":null},{"name":"TFCond_TeleportedGlow","docStart":3350,"docEnd":3376,"docs":{"brief":"6: Teleport trail effect","tags":[{"tag":"","text":"6: Teleport trail effect"}]},"value":null},{"name":"TFCond_Taunting","docStart":3396,"docEnd":3447,"docs":{"brief":"7: Used for taunting, can remove to stop taunting","tags":[{"tag":"","text":"7: Used for taunting, can remove to stop taunting"}]},"value":null},{"name":"TFCond_UberchargeFading","docStart":3475,"docEnd":3513,"docs":{"brief":"8: Invulnerability expiration effect","tags":[{"tag":"","text":"8: Invulnerability expiration effect"}]},"value":null},{"name":"TFCond_Unknown1","docStart":3533,"docEnd":3536,"docs":{"brief":"9","tags":[{"tag":"","text":"9"}]},"value":null},{"name":"TFCond_CloakFlicker","docStart":3564,"docEnd":3592,"docs":{"brief":"9: Cloak flickering effect","tags":[{"tag":"","text":"9: Cloak flickering effect"}]},"value":"9"},{"name":"TFCond_Teleporting","docStart":3615,"docEnd":3664,"docs":{"brief":"10: Used for teleporting, does nothing applying","tags":[{"tag":"","text":"10: Used for teleporting, does nothing applying"}]},"value":null},{"name":"TFCond_Kritzkrieged","docStart":3688,"docEnd":3754,"docs":{"brief":"11: Crit boost, removed when being healed or another Uber effect","tags":[{"tag":"","text":"11: Crit boost, removed when being healed or another Uber effect"}]},"value":null},{"name":"TFCond_Unknown2","docStart":3774,"docEnd":3778,"docs":{"brief":"12","tags":[{"tag":"","text":"12"}]},"value":null},{"name":"TFCond_TmpDamageBonus","docStart":3809,"docEnd":3871,"docs":{"brief":"12: Temporary damage buff, something along with attribute 19","tags":[{"tag":"","text":"12: Temporary damage buff, something along with attribute 19"}]},"value":"12"},{"name":"TFCond_DeadRingered","docStart":3895,"docEnd":3952,"docs":{"brief":"13: Dead Ringer damage resistance, gives TFCond_Cloaked","tags":[{"tag":"","text":"13: Dead Ringer damage resistance, gives TFCond_Cloaked"}]},"value":null},{"name":"TFCond_Bonked","docStart":3970,"docEnd":4001,"docs":{"brief":"14: Bonk! Atomic Punch effect","tags":[{"tag":"","text":"14: Bonk! Atomic Punch effect"}]},"value":null},{"name":"TFCond_Dazed","docStart":4018,"docEnd":4070,"docs":{"brief":"15: Slow effect, can remove to remove stun effects","tags":[{"tag":"","text":"15: Slow effect, can remove to remove stun effects"}]},"value":null},{"name":"TFCond_Buffed","docStart":4088,"docEnd":4132,"docs":{"brief":"16: Buff Banner mini-crits, icon, and glow","tags":[{"tag":"","text":"16: Buff Banner mini-crits, icon, and glow"}]},"value":null},{"name":"TFCond_Charging","docStart":4152,"docEnd":4187,"docs":{"brief":"17: Forced forward, charge effect","tags":[{"tag":"","text":"17: Forced forward, charge effect"}]},"value":null},{"name":"TFCond_DemoBuff","docStart":4207,"docEnd":4231,"docs":{"brief":"18: Eyelander eye glow","tags":[{"tag":"","text":"18: Eyelander eye glow"}]},"value":null},{"name":"TFCond_CritCola","docStart":4251,"docEnd":4273,"docs":{"brief":"19: Mini-crit effect","tags":[{"tag":"","text":"19: Mini-crit effect"}]},"value":null},{"name":"TFCond_InHealRadius","docStart":4297,"docEnd":4350,"docs":{"brief":"20: Ring effect, rings disappear after a taunt ends","tags":[{"tag":"","text":"20: Ring effect, rings disappear after a taunt ends"}]},"value":null},{"name":"TFCond_Healing","docStart":4369,"docEnd":4414,"docs":{"brief":"21: Used for healing, does nothing applying","tags":[{"tag":"","text":"21: Used for healing, does nothing applying"}]},"value":null},{"name":"TFCond_OnFire","docStart":4432,"docEnd":4493,"docs":{"brief":"22: Ignite sound and vocals, can remove to remove afterburn","tags":[{"tag":"","text":"22: Ignite sound and vocals, can remove to remove afterburn"}]},"value":null},{"name":"TFCond_Overhealed","docStart":4515,"docEnd":4561,"docs":{"brief":"23: Used for overheal, does nothing applying","tags":[{"tag":"","text":"23: Used for overheal, does nothing applying"}]},"value":null},{"name":"TFCond_Jarated","docStart":4580,"docEnd":4599,"docs":{"brief":"24: Jarate effect","tags":[{"tag":"","text":"24: Jarate effect"}]},"value":null},{"name":"TFCond_Bleeding","docStart":4619,"docEnd":4637,"docs":{"brief":"25: Bleed effect","tags":[{"tag":"","text":"25: Bleed effect"}]},"value":null},{"name":"TFCond_DefenseBuffed","docStart":4662,"docEnd":4712,"docs":{"brief":"26: Battalion's Backup's defense, icon, and glow","tags":[{"tag":"","text":"26: Battalion's Backup's defense, icon, and glow"}]},"value":null},{"name":"TFCond_Milked","docStart":4730,"docEnd":4751,"docs":{"brief":"27: Mad Milk effect","tags":[{"tag":"","text":"27: Mad Milk effect"}]},"value":null},{"name":"TFCond_MegaHeal","docStart":4771,"docEnd":4841,"docs":{"brief":"28: Quick-Fix Ubercharge's knockback/stun immunity and visual effect","tags":[{"tag":"","text":"28: Quick-Fix Ubercharge's knockback/stun immunity and visual effect"}]},"value":null},{"name":"TFCond_RegenBuffed","docStart":4864,"docEnd":4922,"docs":{"brief":"29: Concheror's speed boost, heal on hit, icon, and glow","tags":[{"tag":"","text":"29: Concheror's speed boost, heal on hit, icon, and glow"}]},"value":null},{"name":"TFCond_MarkedForDeath","docStart":4948,"docEnd":4988,"docs":{"brief":"30: Fan o' War marked-for-death effect","tags":[{"tag":"","text":"30: Fan o' War marked-for-death effect"}]},"value":null},{"name":"TFCond_NoHealingDamageBuff","docStart":5019,"docEnd":5086,"docs":{"brief":"31: Mini-crits, blocks healing, glow, no weapon mini-crit effects","tags":[{"tag":"","text":"31: Mini-crits, blocks healing, glow, no weapon mini-crit effects"}]},"value":null},{"name":"TFCond_SpeedBuffAlly","docStart":5111,"docEnd":5148,"docs":{"brief":"32: Disciplinary Action speed boost","tags":[{"tag":"","text":"32: Disciplinary Action speed boost"}]},"value":null},{"name":"TFCond_HalloweenCritCandy","docStart":5178,"docEnd":5212,"docs":{"brief":"33: Halloween pumpkin crit-boost","tags":[{"tag":"","text":"33: Halloween pumpkin crit-boost"}]},"value":null},{"name":"TFCond_CritCanteen","docStart":5235,"docEnd":5284,"docs":{"brief":"34: Crit-boost and doubles Sentry Gun fire-rate","tags":[{"tag":"","text":"34: Crit-boost and doubles Sentry Gun fire-rate"}]},"value":null},{"name":"TFCond_CritDemoCharge","docStart":5310,"docEnd":5378,"docs":{"brief":"35: Crit glow, adds TFCond_Charging when charge meter is below 75%","tags":[{"tag":"","text":"35: Crit glow, adds TFCond_Charging when charge meter is below 75%"}]},"value":null},{"name":"TFCond_CritHype","docStart":5398,"docEnd":5433,"docs":{"brief":"36: Soda Popper multi-jump effect","tags":[{"tag":"","text":"36: Soda Popper multi-jump effect"}]},"value":null},{"name":"TFCond_CritOnFirstBlood","docStart":5461,"docEnd":5495,"docs":{"brief":"37: Arena first blood crit-boost","tags":[{"tag":"","text":"37: Arena first blood crit-boost"}]},"value":null},{"name":"TFCond_CritOnWin","docStart":5516,"docEnd":5573,"docs":{"brief":"38: End-of-round crit-boost (May not remove correctly?)","tags":[{"tag":"","text":"38: End-of-round crit-boost (May not remove correctly?)"}]},"value":null},{"name":"TFCond_CritOnFlagCapture","docStart":5602,"docEnd":5639,"docs":{"brief":"39: Intelligence capture crit-boost","tags":[{"tag":"","text":"39: Intelligence capture crit-boost"}]},"value":null},{"name":"TFCond_CritOnKill","docStart":5661,"docEnd":5703,"docs":{"brief":"40: Crit-boost from crit-on-kill weapons","tags":[{"tag":"","text":"40: Crit-boost from crit-on-kill weapons"}]},"value":null},{"name":"TFCond_RestrictToMelee","docStart":5730,"docEnd":5772,"docs":{"brief":"41: Prevents switching once melee is out","tags":[{"tag":"","text":"41: Prevents switching once melee is out"}]},"value":null},{"name":"TFCond_DefenseBuffNoCritBlock","docStart":5806,"docEnd":5888,"docs":{"brief":"42: MvM Bomb Carrier defense buff (TFCond_DefenseBuffed without crit resistance)","tags":[{"tag":"","text":"42: MvM Bomb Carrier defense buff (TFCond_DefenseBuffed without crit resistance)"}]},"value":null},{"name":"TFCond_Reprogrammed","docStart":5912,"docEnd":5937,"docs":{"brief":"43: No longer functions","tags":[{"tag":"","text":"43: No longer functions"}]},"value":null},{"name":"TFCond_CritMmmph","docStart":5958,"docEnd":5989,"docs":{"brief":"44: Phlogistinator crit-boost","tags":[{"tag":"","text":"44: Phlogistinator crit-boost"}]},"value":null},{"name":"TFCond_DefenseBuffMmmph","docStart":6017,"docEnd":6054,"docs":{"brief":"45: Old Phlogistinator defense buff","tags":[{"tag":"","text":"45: Old Phlogistinator defense buff"}]},"value":null},{"name":"TFCond_FocusBuff","docStart":6075,"docEnd":6135,"docs":{"brief":"46: Hitman's Heatmaker no-unscope and faster Sniper charge","tags":[{"tag":"","text":"46: Hitman's Heatmaker no-unscope and faster Sniper charge"}]},"value":null},{"name":"TFCond_DisguiseRemoved","docStart":6162,"docEnd":6197,"docs":{"brief":"47: Enforcer damage bonus removed","tags":[{"tag":"","text":"47: Enforcer damage bonus removed"}]},"value":null},{"name":"TFCond_MarkedForDeathSilent","docStart":6229,"docEnd":6272,"docs":{"brief":"48: Marked-for-death without sound effect","tags":[{"tag":"","text":"48: Marked-for-death without sound effect"}]},"value":null},{"name":"TFCond_DisguisedAsDispenser","docStart":6304,"docEnd":6387,"docs":{"brief":"49: Dispenser disguise when crouching, max movement speed, sentries ignore player","tags":[{"tag":"","text":"49: Dispenser disguise when crouching, max movement speed, sentries ignore player"}]},"value":null},{"name":"TFCond_Sapped","docStart":6405,"docEnd":6439,"docs":{"brief":"50: Sapper sparkle effect in MvM","tags":[{"tag":"","text":"50: Sapper sparkle effect in MvM"}]},"value":null},{"name":"TFCond_UberchargedHidden","docStart":6468,"docEnd":6516,"docs":{"brief":"51: Out-of-bounds robot invulnerability effect","tags":[{"tag":"","text":"51: Out-of-bounds robot invulnerability effect"}]},"value":null},{"name":"TFCond_UberchargedCanteen","docStart":6546,"docEnd":6607,"docs":{"brief":"52: Invulnerability effect and Sentry Gun damage resistance","tags":[{"tag":"","text":"52: Invulnerability effect and Sentry Gun damage resistance"}]},"value":null},{"name":"TFCond_HalloweenBombHead","docStart":6636,"docEnd":6677,"docs":{"brief":"53: Bomb head effect (does not explode)","tags":[{"tag":"","text":"53: Bomb head effect (does not explode)"}]},"value":null},{"name":"TFCond_HalloweenThriller","docStart":6706,"docEnd":6736,"docs":{"brief":"54: Forced Thriller taunting","tags":[{"tag":"","text":"54: Forced Thriller taunting"}]},"value":null},{"name":"TFCond_RadiusHealOnDamage","docStart":6766,"docEnd":6898,"docs":{"brief":"55: Radius healing, adds TFCond_InHealRadius, TFCond_Healing. Removed when a taunt ends, but this condition stays but does nothing","tags":[{"tag":"","text":"55: Radius healing, adds TFCond_InHealRadius, TFCond_Healing. Removed when a taunt ends, but this condition stays but does nothing"}]},"value":null},{"name":"TFCond_CritOnDamage","docStart":6922,"docEnd":6952,"docs":{"brief":"56: Miscellaneous crit-boost","tags":[{"tag":"","text":"56: Miscellaneous crit-boost"}]},"value":null},{"name":"TFCond_UberchargedOnTakeDamage","docStart":6987,"docEnd":7022,"docs":{"brief":"57: Miscellaneous invulnerability","tags":[{"tag":"","text":"57: Miscellaneous invulnerability"}]},"value":null},{"name":"TFCond_UberBulletResist","docStart":7050,"docEnd":7089,"docs":{"brief":"58: Vaccinator Uber bullet resistance","tags":[{"tag":"","text":"58: Vaccinator Uber bullet resistance"}]},"value":null},{"name":"TFCond_UberBlastResist","docStart":7116,"docEnd":7154,"docs":{"brief":"59: Vaccinator Uber blast resistance","tags":[{"tag":"","text":"59: Vaccinator Uber blast resistance"}]},"value":null},{"name":"TFCond_UberFireResist","docStart":7180,"docEnd":7217,"docs":{"brief":"60: Vaccinator Uber fire resistance","tags":[{"tag":"","text":"60: Vaccinator Uber fire resistance"}]},"value":null},{"name":"TFCond_SmallBulletResist","docStart":7246,"docEnd":7288,"docs":{"brief":"61: Vaccinator healing bullet resistance","tags":[{"tag":"","text":"61: Vaccinator healing bullet resistance"}]},"value":null},{"name":"TFCond_SmallBlastResist","docStart":7316,"docEnd":7357,"docs":{"brief":"62: Vaccinator healing blast resistance","tags":[{"tag":"","text":"62: Vaccinator healing blast resistance"}]},"value":null},{"name":"TFCond_SmallFireResist","docStart":7384,"docEnd":7424,"docs":{"brief":"63: Vaccinator healing fire resistance","tags":[{"tag":"","text":"63: Vaccinator healing fire resistance"}]},"value":null},{"name":"TFCond_Stealthed","docStart":7445,"docEnd":7476,"docs":{"brief":"64: Cloaked until next attack","tags":[{"tag":"","text":"64: Cloaked until next attack"}]},"value":null},{"name":"TFCond_MedigunDebuff","docStart":7501,"docEnd":7514,"docs":{"brief":"65: Unknown","tags":[{"tag":"","text":"65: Unknown"}]},"value":null},{"name":"TFCond_StealthedUserBuffFade","docStart":7547,"docEnd":7617,"docs":{"brief":"66: Cloaked, will appear for a few seconds on attack and cloak again","tags":[{"tag":"","text":"66: Cloaked, will appear for a few seconds on attack and cloak again"}]},"value":null},{"name":"TFCond_BulletImmune","docStart":7641,"docEnd":7667,"docs":{"brief":"67: Full bullet immunity","tags":[{"tag":"","text":"67: Full bullet immunity"}]},"value":null},{"name":"TFCond_BlastImmune","docStart":7690,"docEnd":7715,"docs":{"brief":"68: Full blast immunity","tags":[{"tag":"","text":"68: Full blast immunity"}]},"value":null},{"name":"TFCond_FireImmune","docStart":7737,"docEnd":7761,"docs":{"brief":"69: Full fire immunity","tags":[{"tag":"","text":"69: Full fire immunity"}]},"value":null},{"name":"TFCond_PreventDeath","docStart":7785,"docEnd":7841,"docs":{"brief":"70: Survive to 1 health, then the condition is removed","tags":[{"tag":"","text":"70: Survive to 1 health, then the condition is removed"}]},"value":null},{"name":"TFCond_MVMBotRadiowave","docStart":7868,"docEnd":7909,"docs":{"brief":"71: Stuns bots and applies radio effect","tags":[{"tag":"","text":"71: Stuns bots and applies radio effect"}]},"value":null},{"name":"TFCond_HalloweenSpeedBoost","docStart":7940,"docEnd":8009,"docs":{"brief":"72: Speed boost, non-melee fire rate and reload, infinite air jumps","tags":[{"tag":"","text":"72: Speed boost, non-melee fire rate and reload, infinite air jumps"}]},"value":null},{"name":"TFCond_HalloweenQuickHeal","docStart":8039,"docEnd":8119,"docs":{"brief":"73: Healing effect, adds TFCond_Healing along with TFCond_MegaHeal temporarily","tags":[{"tag":"","text":"73: Healing effect, adds TFCond_Healing along with TFCond_MegaHeal temporarily"}]},"value":null},{"name":"TFCond_HalloweenGiant","docStart":8145,"docEnd":8230,"docs":{"brief":"74: Double size, x10 max health increase, ammo regeneration, and forced thirdperson","tags":[{"tag":"","text":"74: Double size, x10 max health increase, ammo regeneration, and forced thirdperson"}]},"value":null},{"name":"TFCond_HalloweenTiny","docStart":8255,"docEnd":8294,"docs":{"brief":"75: Half size and increased head size","tags":[{"tag":"","text":"75: Half size and increased head size"}]},"value":null},{"name":"TFCond_HalloweenInHell","docStart":8321,"docEnd":8381,"docs":{"brief":"76: Applies TFCond_HalloweenGhostMode when the player dies","tags":[{"tag":"","text":"76: Applies TFCond_HalloweenGhostMode when the player dies"}]},"value":null},{"name":"TFCond_HalloweenGhostMode","docStart":8411,"docEnd":8461,"docs":{"brief":"77: Becomes a ghost unable to attack but can fly","tags":[{"tag":"","text":"77: Becomes a ghost unable to attack but can fly"}]},"value":null},{"name":"TFCond_MiniCritOnKill","docStart":8487,"docEnd":8510,"docs":{"brief":"78: Mini-crits effect","tags":[{"tag":"","text":"78: Mini-crits effect"}]},"value":null},{"name":"TFCond_DodgeChance","docStart":8533,"docEnd":8537,"docs":{"brief":"79","tags":[{"tag":"","text":"79"}]},"value":null},{"name":"TFCond_ObscuredSmoke","docStart":8567,"docEnd":8602,"docs":{"brief":"79: 75% chance to dodge an attack","tags":[{"tag":"","text":"79: 75% chance to dodge an attack"}]},"value":"79"},{"name":"TFCond_Parachute","docStart":8623,"docEnd":8679,"docs":{"brief":"80: Parachute effect, removed when touching the ground","tags":[{"tag":"","text":"80: Parachute effect, removed when touching the ground"}]},"value":null},{"name":"TFCond_BlastJumping","docStart":8703,"docEnd":8732,"docs":{"brief":"81: Player is blast jumping","tags":[{"tag":"","text":"81: Player is blast jumping"}]},"value":null},{"name":"TFCond_HalloweenKart","docStart":8757,"docEnd":8798,"docs":{"brief":"82: Player forced into a Halloween kart","tags":[{"tag":"","text":"82: Player forced into a Halloween kart"}]},"value":null},{"name":"TFCond_HalloweenKartDash","docStart":8827,"docEnd":8911,"docs":{"brief":"83: Forced forward if in TFCond_HalloweenKart, zoom in effect, and dash animations","tags":[{"tag":"","text":"83: Forced forward if in TFCond_HalloweenKart, zoom in effect, and dash animations"}]},"value":null},{"name":"TFCond_BalloonHead","docStart":8934,"docEnd":8968,"docs":{"brief":"84: Big head and lowered gravity","tags":[{"tag":"","text":"84: Big head and lowered gravity"}]},"value":null},{"name":"TFCond_MeleeOnly","docStart":8989,"docEnd":9065,"docs":{"brief":"85: Forced melee, along with TFCond_SpeedBuffAlly and TFCond_HalloweenTiny","tags":[{"tag":"","text":"85: Forced melee, along with TFCond_SpeedBuffAlly and TFCond_HalloweenTiny"}]},"value":null},{"name":"TFCond_SwimmingCurse","docStart":9090,"docEnd":9131,"docs":{"brief":"86: Swim in the air with Jarate overlay","tags":[{"tag":"","text":"86: Swim in the air with Jarate overlay"}]},"value":null},{"name":"TFCond_HalloweenKartNoTurn","docStart":9162,"docEnd":9166,"docs":{"brief":"87","tags":[{"tag":"","text":"87"}]},"value":null},{"name":"TFCond_FreezeInput","docStart":9194,"docEnd":9235,"docs":{"brief":"87: Prevents player from using controls","tags":[{"tag":"","text":"87: Prevents player from using controls"}]},"value":"87"},{"name":"TFCond_HalloweenKartCage","docStart":9264,"docEnd":9345,"docs":{"brief":"88: Puts a cage around the player if in TFCond_HalloweenKart, otherwise crashes","tags":[{"tag":"","text":"88: Puts a cage around the player if in TFCond_HalloweenKart, otherwise crashes"}]},"value":null},{"name":"TFCond_HasRune","docStart":9364,"docEnd":9383,"docs":{"brief":"89: Has a powerup","tags":[{"tag":"","text":"89: Has a powerup"}]},"value":null},{"name":"TFCond_RuneStrength","docStart":9407,"docEnd":9448,"docs":{"brief":"90: Double damage and no damage falloff","tags":[{"tag":"","text":"90: Double damage and no damage falloff"}]},"value":null},{"name":"TFCond_RuneHaste","docStart":9469,"docEnd":9556,"docs":{"brief":"91: Double fire rate, reload speed, clip and ammo size, and 30% faster movement speed","tags":[{"tag":"","text":"91: Double fire rate, reload speed, clip and ammo size, and 30% faster movement speed"}]},"value":null},{"name":"TFCond_RuneRegen","docStart":9577,"docEnd":9612,"docs":{"brief":"92: Regen ammo, health, and metal","tags":[{"tag":"","text":"92: Regen ammo, health, and metal"}]},"value":null},{"name":"TFCond_RuneResist","docStart":9634,"docEnd":9678,"docs":{"brief":"93: Takes 1/2 damage and critical immunity","tags":[{"tag":"","text":"93: Takes 1/2 damage and critical immunity"}]},"value":null},{"name":"TFCond_RuneVampire","docStart":9701,"docEnd":9778,"docs":{"brief":"94: Takes 3/4 damage, gain health on damage, and 40% increase in max health","tags":[{"tag":"","text":"94: Takes 3/4 damage, gain health on damage, and 40% increase in max health"}]},"value":null},{"name":"TFCond_RuneWarlock","docStart":9801,"docEnd":9895,"docs":{"brief":"95: Attacker takes damage and knockback on hitting the player and 50% increase in max health","tags":[{"tag":"","text":"95: Attacker takes damage and knockback on hitting the player and 50% increase in max health"}]},"value":null},{"name":"TFCond_RunePrecision","docStart":9920,"docEnd":10060,"docs":{"brief":"96: Less bullet spread, no damage falloff, 250% faster projectiles, and double damage, faster charge, and faster re-zoom for Sniper Rifles","tags":[{"tag":"","text":"96: Less bullet spread, no damage falloff, 250% faster projectiles, and double damage, faster charge, and faster re-zoom for Sniper Rifles"}]},"value":null},{"name":"TFCond_RuneAgility","docStart":10083,"docEnd":10175,"docs":{"brief":"97: Increased movement speed, grappling hook speed, jump height, and instant weapon switch","tags":[{"tag":"","text":"97: Increased movement speed, grappling hook speed, jump height, and instant weapon switch"}]},"value":null},{"name":"TFCond_GrapplingHook","docStart":10200,"docEnd":10283,"docs":{"brief":"98: Used when a player fires their grappling hook, no effect applying or removing","tags":[{"tag":"","text":"98: Used when a player fires their grappling hook, no effect applying or removing"}]},"value":null},{"name":"TFCond_GrapplingHookSafeFall","docStart":10316,"docEnd":10406,"docs":{"brief":"99: Used when a player is pulled by their grappling hook, no effect applying or removing","tags":[{"tag":"","text":"99: Used when a player is pulled by their grappling hook, no effect applying or removing"}]},"value":null},{"name":"TFCond_GrapplingHookLatched","docStart":10438,"docEnd":10515,"docs":{"brief":"100: Used when a player latches onto a wall, no effect applying or removing","tags":[{"tag":"","text":"100: Used when a player latches onto a wall, no effect applying or removing"}]},"value":null},{"name":"TFCond_GrapplingHookBleeding","docStart":10548,"docEnd":10609,"docs":{"brief":"101: Used when a player is hit by attacker's grappling hook","tags":[{"tag":"","text":"101: Used when a player is hit by attacker's grappling hook"}]},"value":null},{"name":"TFCond_AfterburnImmune","docStart":10636,"docEnd":10672,"docs":{"brief":"102: Deadringer afterburn immunity","tags":[{"tag":"","text":"102: Deadringer afterburn immunity"}]},"value":null},{"name":"TFCond_RuneKnockout","docStart":10696,"docEnd":10854,"docs":{"brief":"103: Melee and grappling hook only, increased max health, knockback immunity, x4 more damage against buildings, and knockbacks a powerup off a victim on hit","tags":[{"tag":"","text":"103: Melee and grappling hook only, increased max health, knockback immunity, x4 more damage against buildings, and knockbacks a powerup off a victim on hit"}]},"value":null},{"name":"TFCond_RuneImbalance","docStart":10879,"docEnd":10932,"docs":{"brief":"104: Prevents gaining a crit-boost or Uber powerups","tags":[{"tag":"","text":"104: Prevents gaining a crit-boost or Uber powerups"}]},"value":null},{"name":"TFCond_CritRuneTemp","docStart":10956,"docEnd":10980,"docs":{"brief":"105: Crit-boost effect","tags":[{"tag":"","text":"105: Crit-boost effect"}]},"value":null},{"name":"TFCond_PasstimeInterception","docStart":11012,"docEnd":11062,"docs":{"brief":"106: Used when a player intercepts the Jack/Ball","tags":[{"tag":"","text":"106: Used when a player intercepts the Jack/Ball"}]},"value":null},{"name":"TFCond_SwimmingNoEffects","docStart":11091,"docEnd":11147,"docs":{"brief":"107: Swimming in the air without animations or overlay","tags":[{"tag":"","text":"107: Swimming in the air without animations or overlay"}]},"value":null},{"name":"TFCond_EyeaductUnderworld","docStart":11177,"docEnd":11257,"docs":{"brief":"108: Refills max health, short Uber, escaped the underworld message on removal","tags":[{"tag":"","text":"108: Refills max health, short Uber, escaped the underworld message on removal"}]},"value":null},{"name":"TFCond_KingRune","docStart":11277,"docEnd":11332,"docs":{"brief":"109: Increased max health and applies TFCond_KingAura","tags":[{"tag":"","text":"109: Increased max health and applies TFCond_KingAura"}]},"value":null},{"name":"TFCond_PlagueRune","docStart":11354,"docEnd":11445,"docs":{"brief":"110: Radius health kit stealing, increased max health, TFCond_Plague on touching a victim","tags":[{"tag":"","text":"110: Radius health kit stealing, increased max health, TFCond_Plague on touching a victim"}]},"value":null},{"name":"TFCond_SupernovaRune","docStart":11470,"docEnd":11559,"docs":{"brief":"111: Charge meter passively increasing, when charged activiated causes radius Bonk stun","tags":[{"tag":"","text":"111: Charge meter passively increasing, when charged activiated causes radius Bonk stun"}]},"value":null},{"name":"TFCond_Plague","docStart":11577,"docEnd":11649,"docs":{"brief":"112: Plague sound effect and message, blocks King powerup health regen","tags":[{"tag":"","text":"112: Plague sound effect and message, blocks King powerup health regen"}]},"value":null},{"name":"TFCond_KingAura","docStart":11669,"docEnd":11750,"docs":{"brief":"113: Increased fire rate, reload speed, and health regen to players in a radius","tags":[{"tag":"","text":"113: Increased fire rate, reload speed, and health regen to players in a radius"}]},"value":null},{"name":"TFCond_SpawnOutline","docStart":11774,"docEnd":11840,"docs":{"brief":"114: Outline and health meter of teammates (and disguised spies)","tags":[{"tag":"","text":"114: Outline and health meter of teammates (and disguised spies)"}]},"value":null},{"name":"TFCond_KnockedIntoAir","docStart":11866,"docEnd":11905,"docs":{"brief":"115: Used when a player is airblasted","tags":[{"tag":"","text":"115: Used when a player is airblasted"}]},"value":null},{"name":"TFCond_CompetitiveWinner","docStart":11934,"docEnd":11948,"docs":{"brief":"116: Unknown","tags":[{"tag":"","text":"116: Unknown"}]},"value":null},{"name":"TFCond_CompetitiveLoser","docStart":11976,"docEnd":11990,"docs":{"brief":"117: Unknown","tags":[{"tag":"","text":"117: Unknown"}]},"value":null},{"name":"TFCond_NoTaunting_DEPRECATED","docStart":12023,"docEnd":12028,"docs":{"brief":"118","tags":[{"tag":"","text":"118"}]},"value":null},{"name":"TFCond_HealingDebuff","docStart":12059,"docEnd":12107,"docs":{"brief":"118: Healing debuff from Medics and dispensers","tags":[{"tag":"","text":"118: Healing debuff from Medics and dispensers"}]},"value":"118"},{"name":"TFCond_PasstimePenaltyDebuff","docStart":12140,"docEnd":12170,"docs":{"brief":"119: Marked-for-death effect","tags":[{"tag":"","text":"119: Marked-for-death effect"}]},"value":null},{"name":"TFCond_GrappledToPlayer","docStart":12198,"docEnd":12254,"docs":{"brief":"120: Prevents taunting and some Grappling Hook actions","tags":[{"tag":"","text":"120: Prevents taunting and some Grappling Hook actions"}]},"value":null},{"name":"TFCond_GrappledByPlayer","docStart":12282,"docEnd":12296,"docs":{"brief":"121: Unknown","tags":[{"tag":"","text":"121: Unknown"}]},"value":null},{"name":"TFCond_ParachuteDeployed","docStart":12325,"docEnd":12373,"docs":{"brief":"122: Parachute deployed, prevents reopening it","tags":[{"tag":"","text":"122: Parachute deployed, prevents reopening it"}]},"value":null},{"name":"TFCond_Gas","docStart":12388,"docEnd":12412,"docs":{"brief":"123: Gas Passer effect","tags":[{"tag":"","text":"123: Gas Passer effect"}]},"value":null},{"name":"TFCond_BurningPyro","docStart":12435,"docEnd":12474,"docs":{"brief":"124: Dragon's Fury afterburn on Pyros","tags":[{"tag":"","text":"124: Dragon's Fury afterburn on Pyros"}]},"value":null},{"name":"TFCond_RocketPack","docStart":12496,"docEnd":12554,"docs":{"brief":"125: Thermal Thruster launched effects, prevents reusing","tags":[{"tag":"","text":"125: Thermal Thruster launched effects, prevents reusing"}]},"value":null},{"name":"TFCond_LostFooting","docStart":12577,"docEnd":12604,"docs":{"brief":"126: Less ground friction","tags":[{"tag":"","text":"126: Less ground friction"}]},"value":null},{"name":"TFCond_AirCurrent","docStart":12626,"docEnd":12665,"docs":{"brief":"127: Reduced air control and friction","tags":[{"tag":"","text":"127: Reduced air control and friction"}]},"value":null},{"name":"TFCond_HalloweenHellHeal","docStart":12694,"docEnd":12744,"docs":{"brief":"128: Used when a player gets teleported to hell","tags":[{"tag":"","text":"128: Used when a player gets teleported to hell"}]},"value":null},{"name":"TFCond_PowerupModeDominant","docStart":12774,"docEnd":12817,"docs":{"brief":"129: Reduces effects of certain powerups","tags":[{"tag":"","text":"129: Reduces effects of certain powerups"}]},"value":null}]},"created":{"hash":"a72daff4acdfedf2083284526533e9041414f52e","count":2940,"time":1268926505},"last_updated":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}},"TFObjectType":{"symbol":{"name":"TFObjectType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFObject_CartDispenser","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"TFObject_Dispenser","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"TFObject_Teleporter","docStart":0,"docEnd":0,"docs":null,"value":"1"},{"name":"TFObject_Sentry","docStart":0,"docEnd":0,"docs":null,"value":"2"},{"name":"TFObject_Sapper","docStart":0,"docEnd":0,"docs":null,"value":"3"}]},"created":{"hash":"4ab3b15efd06e75860ef96bad5b26501c850d0de","count":3094,"time":1279934615},"last_updated":{"hash":"4ab3b15efd06e75860ef96bad5b26501c850d0de","count":3094,"time":1279934615}},"TFTeam":{"symbol":{"name":"TFTeam","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFTeam_Unassigned","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"TFTeam_Spectator","docStart":0,"docEnd":0,"docs":null,"value":"1"},{"name":"TFTeam_Red","docStart":0,"docEnd":0,"docs":null,"value":"2"},{"name":"TFTeam_Blue","docStart":0,"docEnd":0,"docs":null,"value":"3"}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634}},"TFClassType":{"symbol":{"name":"TFClassType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFClass_Unknown","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"TFClass_Scout","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Sniper","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Soldier","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_DemoMan","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Medic","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Heavy","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Pyro","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Spy","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFClass_Engineer","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634}}},"typesets":{},"typedefs":{}},"eventsmsgs":{"functions":{"BfWriteChar":{"symbol":{"name":"BfWriteChar","docStart":2532,"docEnd":2737,"docs":{"brief":"Writes a byte to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a byte to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:chr","text":"Character to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteVecCoord":{"symbol":{"name":"BfWriteVecCoord","docStart":5094,"docEnd":5329,"docs":{"brief":"Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D vector of coordinates to a writable bitbuffer (bf_write)."},{"tag":"param:bif","text":"bf_write handle to write to."},{"tag":"param:coord","text":"Coordinate array to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"coord","decl":"float coord[3]","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteString":{"symbol":{"name":"BfWriteString","docStart":3913,"docEnd":4124,"docs":{"brief":"Writes a string to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a string to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:string","text":"Text string to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"const char[]","name":"string","decl":"const char[] string","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"StartMessageAll":{"symbol":{"name":"StartMessageAll","docStart":5932,"docEnd":6202,"docs":{"brief":"Starts a usermessage (network message) that broadcasts to all clients.","tags":[{"tag":"","text":"Starts a usermessage (network message) that broadcasts to all clients."},{"tag":"param:msg","text":"Message index to start."},{"tag":"param:flags","text":"Optional flags to set."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"UserMsg","name":"msg","decl":"UserMsg msg","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteWord":{"symbol":{"name":"BfWriteWord","docStart":3065,"docEnd":3319,"docs":{"brief":"Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 16bit unsigned integer to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Integer to write (value will be written as 16bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteAngles":{"symbol":{"name":"BfWriteAngles","docStart":5655,"docEnd":5877,"docs":{"brief":"Writes a 3D angle vector to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D angle vector to a writable bitbuffer (bf_write)."},{"tag":"param:bif","text":"bf_write handle to write to."},{"tag":"param:angles","text":"Angle vector to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"angles","decl":"float angles[3]","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"StartMessage":{"symbol":{"name":"StartMessage","docStart":1414,"docEnd":1788,"docs":{"brief":"Starts a usermessage (network message).","tags":[{"tag":"","text":"Starts a usermessage (network message)."},{"tag":"note","text":"Only one message can be active at a time."},{"tag":"param:msg","text":"Message index to start."},{"tag":"param:clients","text":"Array containing player indexes to broadcast to."},{"tag":"param:numClients","text":"Number of players in the array."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"UserMsg","name":"msg","decl":"UserMsg msg","default":null},{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteAngle":{"symbol":{"name":"BfWriteAngle","docStart":4509,"docEnd":4769,"docs":{"brief":"Writes a bit angle to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a bit angle to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:angle","text":"Angle to write."},{"tag":"param:numBits","text":"Optional number of bits to use."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float","name":"angle","decl":"float angle","default":null},{"type":"int","name":"numBits","decl":"int numBits","default":"8"}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteCoord":{"symbol":{"name":"BfWriteCoord","docStart":4830,"docEnd":5044,"docs":{"brief":"Writes a coordinate to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a coordinate to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:coord","text":"Coordinate to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float","name":"coord","decl":"float coord","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteVecNormal":{"symbol":{"name":"BfWriteVecNormal","docStart":5385,"docEnd":5600,"docs":{"brief":"Writes a 3D normal vector to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D normal vector to a writable bitbuffer (bf_write)."},{"tag":"param:bif","text":"bf_write handle to write to."},{"tag":"param:vec","text":"Vector to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteFloat":{"symbol":{"name":"BfWriteFloat","docStart":3646,"docEnd":3865,"docs":{"brief":"Writes a floating point number to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a floating point number to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Number to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float","name":"num","decl":"float num","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"EndMessage":{"symbol":{"name":"EndMessage","docStart":1864,"docEnd":1952,"docs":{"brief":"Ends a previously started user message (network message).\n","tags":[{"tag":"","text":"Ends a previously started user message (network message).\n"}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"StartMessageOne":{"symbol":{"name":"StartMessageOne","docStart":6504,"docEnd":6804,"docs":{"brief":"Starts a simpler usermessage (network message) for one client.","tags":[{"tag":"","text":"Starts a simpler usermessage (network message) for one client."},{"tag":"param:msg","text":"Message index to start."},{"tag":"param:client","text":"Client to send to."},{"tag":"param:flags","text":"Optional flags to set."},{"tag":"return","text":"A handle to a bf_write bit packing structure, or\nINVALID_HANDLE on failure."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"UserMsg","name":"msg","decl":"UserMsg msg","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteEntity":{"symbol":{"name":"BfWriteEntity","docStart":4185,"docEnd":4466,"docs":{"brief":"Writes an entity to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes an entity to a writable bitbuffer (bf_write)."},{"tag":"note","text":"This is a wrapper around BfWriteShort()."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:ent","text":"Entity index to write."},{"tag":"error","text":"Invalid or incorrect Handle, or invalid entity."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"ent","decl":"int ent","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteBool":{"symbol":{"name":"BfWriteBool","docStart":1978,"docEnd":2210,"docs":{"brief":"Writes a single bit to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a single bit to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:bit","text":"Bit to write (true for 1, false for 0)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"bool","name":"bit","decl":"bool bit","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteNum":{"symbol":{"name":"BfWriteNum","docStart":3360,"docEnd":3606,"docs":{"brief":"Writes a normal integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a normal integer to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Integer to write (value will be written as 32bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteShort":{"symbol":{"name":"BfWriteShort","docStart":2778,"docEnd":3023,"docs":{"brief":"Writes a 16bit integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 16bit integer to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Integer to write (value will be written as 16bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"BfWriteByte":{"symbol":{"name":"BfWriteByte","docStart":2257,"docEnd":2490,"docs":{"brief":"Writes a byte to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a byte to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:byte","text":"Byte to write (value will be written as 8bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"byte","decl":"int byte","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"GetUserMessageId":{"symbol":{"name":"GetUserMessageId","docStart":1155,"docEnd":1356,"docs":{"brief":"Returns the ID of a given message, or -1 on failure.","tags":[{"tag":"","text":"Returns the ID of a given message, or -1 on failure."},{"tag":"param:msg","text":"String containing message name (case sensitive)."},{"tag":"return","text":"A message index, or INVALID_MESSAGE_ID on failure."}]},"kind":"native","returnType":"UserMsg","arguments":[{"type":"const char[]","name":"msg","decl":"const char[] msg","default":null}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"USERMSG_PASSTHRU_ALL":{"symbol":{"name":"USERMSG_PASSTHRU_ALL","docStart":898,"docEnd":968,"docs":{"brief":"Message will pass through other SourceMM plugins AND SourceMod","tags":[{"tag":"","text":"Message will pass through other SourceMM plugins AND SourceMod"}]},"value":"(1<<1)"},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"_eventsmsgs_included":{"symbol":{"name":"_eventsmsgs_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}},"USERMSG_PASSTHRU":{"symbol":{"name":"USERMSG_PASSTHRU","docStart":803,"docEnd":859,"docs":{"brief":"Message will pass through other SourceMM plugins","tags":[{"tag":"","text":"Message will pass through other SourceMM plugins"}]},"value":"(1<<0)"},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}}},"enums":{"UserMsg":{"symbol":{"name":"UserMsg","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"INVALID_MESSAGE_ID","docStart":0,"docEnd":0,"docs":null,"value":"-1"}]},"created":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358},"last_updated":{"hash":"7a8152aba371f18907933535dc9e5e7807dd071f","count":494,"time":1171475358}}},"typesets":{},"typedefs":{}},"geoip":{"functions":{"GeoipCode3":{"symbol":{"name":"GeoipCode3","docStart":2089,"docEnd":2377,"docs":{"brief":"Gets the three character country code from an IP address. (USA, CAN, etc)","tags":[{"tag":"","text":"Gets the three character country code from an IP address. (USA, CAN, etc)"},{"tag":"param:ip","text":"Ip to determine the country code."},{"tag":"param:ccode","text":"Destination string buffer to store the code."},{"tag":"return","text":"True on success, false if no country found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"char[4]","name":"ccode","decl":"char ccode[4]","default":null}]},"created":{"hash":"2ac8a6597f7c7bd34a8e191f5b357d638815cdc4","count":321,"time":1169173736},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GeoipCountry":{"symbol":{"name":"GeoipCountry","docStart":2438,"docEnd":2789,"docs":{"brief":"Gets the full country name. (max length of output string is 45)","tags":[{"tag":"","text":"Gets the full country name. (max length of output string is 45)"},{"tag":"param:ip","text":"Ip to determine the country code."},{"tag":"param:name","text":"Destination string buffer to store the country name."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"return","text":"True on success, false if no country found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"2ac8a6597f7c7bd34a8e191f5b357d638815cdc4","count":321,"time":1169173736},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"__ext_geoip_SetNTVOptional":{"symbol":{"name":"__ext_geoip_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"e08b4cdf1e167a9d3ad5c2cd455f069d350882b4","count":1574,"time":1192422476},"last_updated":{"hash":"e08b4cdf1e167a9d3ad5c2cd455f069d350882b4","count":1574,"time":1192422476}},"Geoip_Country":{"symbol":{"name":"Geoip_Country","docStart":760,"docEnd":1033,"docs":{"brief":"Gets the full country name. (max length of output string is 45)","tags":[{"tag":"","text":"Gets the full country name. (max length of output string is 45)"},{"tag":"param:ip","text":"Ip to determine the country code."},{"tag":"param:ccode","text":"Destination string buffer to store the country name."},{"tag":"param:len","text":"Maximum length of output string buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"len","decl":"int len","default":"45"}]},"created":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384},"last_updated":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384}},"Geoip_Code2":{"symbol":{"name":"Geoip_Code2","docStart":206,"docEnd":420,"docs":{"brief":"Gets the two character country code from an IP address. (US, CA, etc)","tags":[{"tag":"","text":"Gets the two character country code from an IP address. (US, CA, etc)"},{"tag":"param:ip","text":"Ip to determine the country code."},{"tag":"param:ccode","text":"Destination string buffer to store the code."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"char[3]","name":"ccode","decl":"char ccode[3]","default":null}]},"created":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384},"last_updated":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384}},"Geoip_Code3":{"symbol":{"name":"Geoip_Code3","docStart":481,"docEnd":699,"docs":{"brief":"Gets the three character country code from an IP address. (USA, CAN, etc)","tags":[{"tag":"","text":"Gets the three character country code from an IP address. (USA, CAN, etc)"},{"tag":"param:ip","text":"Ip to determine the country code."},{"tag":"param:ccode","text":"Destination string buffer to store the code."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"char[4]","name":"ccode","decl":"char ccode[4]","default":null}]},"created":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384},"last_updated":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384}},"GeoipCode2":{"symbol":{"name":"GeoipCode2","docStart":1744,"docEnd":2028,"docs":{"brief":"Gets the two character country code from an IP address. (US, CA, etc)","tags":[{"tag":"","text":"Gets the two character country code from an IP address. (US, CA, etc)"},{"tag":"param:ip","text":"Ip to determine the country code."},{"tag":"param:ccode","text":"Destination string buffer to store the code."},{"tag":"return","text":"True on success, false if no country found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"char[3]","name":"ccode","decl":"char ccode[3]","default":null}]},"created":{"hash":"2ac8a6597f7c7bd34a8e191f5b357d638815cdc4","count":321,"time":1169173736},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_geoip_included":{"symbol":{"name":"_geoip_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384},"last_updated":{"hash":"91fc277fb9ad0557f7dacf1b940bfa2d0f43d434","count":320,"time":1169173384}}},"enums":{},"typesets":{},"typedefs":{}},"structs":{"functions":{"SetStructVector":{"symbol":{"name":"SetStructVector","docStart":3363,"docEnd":3583,"docs":{"brief":"Sets a Vector value in a struct.","tags":[{"tag":"","text":"Sets a Vector value in a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to set."},{"tag":"param:vec","text":"Value to set."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"GetStructInt":{"symbol":{"name":"GetStructInt","docStart":1868,"docEnd":2087,"docs":{"brief":"Retrieves an integer value from a struct.","tags":[{"tag":"","text":"Retrieves an integer value from a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to retrieve."},{"tag":"return","text":"Integer value."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"GetStructFloat":{"symbol":{"name":"GetStructFloat","docStart":2444,"docEnd":2658,"docs":{"brief":"Retrieves a float value from a struct.","tags":[{"tag":"","text":"Retrieves a float value from a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to retrieve."},{"tag":"return","text":"Float value."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"GetStructString":{"symbol":{"name":"GetStructString","docStart":3663,"docEnd":3955,"docs":{"brief":"Retrieves a string from a struct.","tags":[{"tag":"","text":"Retrieves a string from a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to retrieve."},{"tag":"param:value","text":"Buffer for the retrieved string."},{"tag":"param:maxlen","text":"Max length of the buffer"},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"SetStructEnt":{"symbol":{"name":"SetStructEnt","docStart":4636,"docEnd":4873,"docs":{"brief":"Sets an entity handle value in a struct.","tags":[{"tag":"","text":"Sets an entity handle value in a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to set."},{"tag":"param:entity","text":"Entity index to set."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"GetWeaponStruct":{"symbol":{"name":"GetWeaponStruct","docStart":4944,"docEnd":5204,"docs":{"brief":"Retrieves a struct handle to a FileWeaponInfo_t for the given weapon name.\nThis handle needs to be closed when you have finished using it.","tags":[{"tag":"","text":"Retrieves a struct handle to a FileWeaponInfo_t for the given weapon name.\nThis handle needs to be closed when you have finished using it."},{"tag":"param:weapon","text":"Weapon name to retrieve."},{"tag":"return","text":"Struct handle or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"weapon","decl":"const char[] weapon","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"SetStructInt":{"symbol":{"name":"SetStructInt","docStart":2150,"docEnd":2374,"docs":{"brief":"Sets an integer value in a struct.","tags":[{"tag":"","text":"Sets an integer value in a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to set."},{"tag":"param:value","text":"Value to set."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"GetStructEnt":{"symbol":{"name":"GetStructEnt","docStart":4355,"docEnd":4573,"docs":{"brief":"Retrieves an entity handle from a struct.","tags":[{"tag":"","text":"Retrieves an entity handle from a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to retrieve."},{"tag":"return","text":"Entity index."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"SetStructString":{"symbol":{"name":"SetStructString","docStart":4051,"docEnd":4273,"docs":{"brief":"Sets a string value in a struct.","tags":[{"tag":"","text":"Sets a string value in a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to set."},{"tag":"param:value","text":"Value to set."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"GetStructVector":{"symbol":{"name":"GetStructVector","docStart":3028,"docEnd":3283,"docs":{"brief":"Retrieves an integer value from a struct.","tags":[{"tag":"","text":"Retrieves an integer value from a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to retrieve."},{"tag":"param:vec","text":"Buffer for the retrieved vector."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}},"SetStructFloat":{"symbol":{"name":"SetStructFloat","docStart":2729,"docEnd":2950,"docs":{"brief":"Sets a float value in a struct.","tags":[{"tag":"","text":"Sets a float value in a struct."},{"tag":"param:strct","text":"Struct Handle."},{"tag":"param:member","text":"Member name to set."},{"tag":"param:value","text":"Value to set."},{"tag":"error","text":"Undefined member, or member type mismatch."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"strct","decl":"Handle strct","default":null},{"type":"const char[]","name":"member","decl":"const char[] member","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_structs_included":{"symbol":{"name":"_structs_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742},"last_updated":{"hash":"5687a7ba909276225ae9906d8802a2b695d6d5f0","count":2309,"time":1221708742}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_entoutput":{"functions":{"HookEntityOutput":{"symbol":{"name":"HookEntityOutput","docStart":2384,"docEnd":2655,"docs":{"brief":"Add an entity output hook on a entity classname","tags":[{"tag":"","text":"Add an entity output hook on a entity classname"},{"tag":"param:classname","text":"The classname to hook."},{"tag":"param:output","text":"The output name to hook."},{"tag":"param:callback","text":"An EntityOutput function pointer."},{"tag":"error","text":"Entity Outputs disabled."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null},{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"EntityOutput","name":"callback","decl":"EntityOutput callback","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UnhookEntityOutput":{"symbol":{"name":"UnhookEntityOutput","docStart":2758,"docEnd":3083,"docs":{"brief":"Remove an entity output hook.","tags":[{"tag":"","text":"Remove an entity output hook."},{"tag":"param:classname","text":"The classname to hook."},{"tag":"param:output","text":"The output name to hook."},{"tag":"param:callback","text":"An EntityOutput function pointer."},{"tag":"return","text":"True on success, false if no valid hook was found."},{"tag":"error","text":"Entity Outputs disabled."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null},{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"EntityOutput","name":"callback","decl":"EntityOutput callback","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HookSingleEntityOutput":{"symbol":{"name":"HookSingleEntityOutput","docStart":3188,"docEnd":3575,"docs":{"brief":"Add an entity output hook on a single entity instance","tags":[{"tag":"","text":"Add an entity output hook on a single entity instance"},{"tag":"param:entity","text":"The entity on which to add a hook."},{"tag":"param:output","text":"The output name to hook."},{"tag":"param:callback","text":"An EntityOutput function pointer."},{"tag":"param:once","text":"Only fire this hook once and then remove itself."},{"tag":"error","text":"Entity Outputs disabled or Invalid Entity index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"EntityOutput","name":"callback","decl":"EntityOutput callback","default":null},{"type":"bool","name":"once","decl":"bool once","default":"false"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FireEntityOutput":{"symbol":{"name":"FireEntityOutput","docStart":4164,"docEnd":4638,"docs":{"brief":"Fire a named output on an entity.\n\nAfter completion (successful or not), the current global variant is re-initialized.","tags":[{"tag":"","text":"Fire a named output on an entity.\n\nAfter completion (successful or not), the current global variant is re-initialized."},{"tag":"param:caller","text":"Entity index from where the output is fired."},{"tag":"param:output","text":"Output name."},{"tag":"param:activator","text":"Entity index which initiated the sequence of actions (-1 for a NULL entity)."},{"tag":"param:delay","text":"Delay before firing the output."},{"tag":"error","text":"Invalid entity index or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"caller","decl":"int caller","default":null},{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"int","name":"activator","decl":"int activator","default":"-1"},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UnhookSingleEntityOutput":{"symbol":{"name":"UnhookSingleEntityOutput","docStart":3689,"docEnd":4065,"docs":{"brief":"Remove a single entity output hook.","tags":[{"tag":"","text":"Remove a single entity output hook."},{"tag":"param:entity","text":"The entity on which to remove the hook."},{"tag":"param:output","text":"The output name to hook."},{"tag":"param:callback","text":"An EntityOutput function pointer."},{"tag":"return","text":"True on success, false if no valid hook was found."},{"tag":"error","text":"Entity Outputs disabled or Invalid Entity index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"EntityOutput","name":"callback","decl":"EntityOutput callback","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_entoutput_included":{"symbol":{"name":"_sdktools_entoutput_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}},"enums":{},"typesets":{"EntityOutput":{"symbol":{"name":"EntityOutput","docStart":1661,"docEnd":2191,"docs":{"brief":"Called when an entity output is fired.","tags":[{"tag":"","text":"Called when an entity output is fired."},{"tag":"param:output","text":"Name of the output that fired."},{"tag":"param:caller","text":"Entity index of the caller."},{"tag":"param:activator","text":"Entity index of the activator."},{"tag":"param:delay","text":"Delay in seconds? before the event gets fired."},{"tag":"return","text":"Anything other than Plugin_Continue will supress this event,\nreturning Plugin_Continue will allow it to propagate the results\nof this output to any entity inputs."}]},"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void(const char[] output, int caller, int activator, float delay)","parsedSignature":{"returnType":"void","arguments":[{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"int","name":"caller","decl":"int caller","default":null},{"type":"int","name":"activator","decl":"int activator","default":null},{"type":"float","name":"delay","decl":"float delay","default":null}]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function Action(const char[] output, int caller, int activator, float delay)","parsedSignature":{"returnType":"Action","arguments":[{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"int","name":"caller","decl":"int caller","default":null},{"type":"int","name":"activator","decl":"int activator","default":null},{"type":"float","name":"delay","decl":"float delay","default":null}]}}]},"created":{"hash":"4cba1925fda346a167f1e20742613cd8a1dad7a1","count":5823,"time":1451494317},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"EntityOutput":{"symbol":{"name":"EntityOutput","docStart":1663,"docEnd":1948,"docs":{"brief":"Called when an entity output is fired.","tags":[{"tag":"","text":"Called when an entity output is fired."},{"tag":"param:output","text":"Name of the output that fired."},{"tag":"param:caller","text":"Entity index of the caller."},{"tag":"param:activator","text":"Entity index of the activator."},{"tag":"param:delay","text":"Delay in seconds? before the event gets fired."}]},"type":"function void(const char[] output, int caller, int activator, float delay)","parsedSignature":{"returnType":"void","arguments":[{"type":"const char[]","name":"output","decl":"const char[] output","default":null},{"type":"int","name":"caller","decl":"int caller","default":null},{"type":"int","name":"activator","decl":"int activator","default":null},{"type":"float","name":"delay","decl":"float delay","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}}},"vector":{"functions":{"SubtractVectors":{"symbol":{"name":"SubtractVectors","docStart":4443,"docEnd":4705,"docs":{"brief":"Subtracts a vector from another vector.  It is safe to use either input\nbuffer as an output buffer.","tags":[{"tag":"","text":"Subtracts a vector from another vector.  It is safe to use either input\nbuffer as an output buffer."},{"tag":"param:vec1","text":"First vector."},{"tag":"param:vec2","text":"Second vector to subtract from first."},{"tag":"param:result","text":"Result buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"vec1","decl":"const float vec1[3]","default":null},{"type":"const float[3]","name":"vec2","decl":"const float vec2[3]","default":null},{"type":"float[3]","name":"result","decl":"float result[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MakeVectorFromPoints":{"symbol":{"name":"MakeVectorFromPoints","docStart":5301,"docEnd":5535,"docs":{"brief":"Builds a vector from two points by subtracting the points.","tags":[{"tag":"","text":"Builds a vector from two points by subtracting the points."},{"tag":"param:pt1","text":"First point (to be subtracted from the second)."},{"tag":"param:pt2","text":"Second point."},{"tag":"param:output","text":"Output vector buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pt1","decl":"const float pt1[3]","default":null},{"type":"const float[3]","name":"pt2","decl":"const float pt2[3]","default":null},{"type":"float[3]","name":"output","decl":"float output[3]","default":null}]},"created":{"hash":"78d6d2b6e235ece95b2c4e90937df24534bbdb6f","count":1156,"time":1185229532},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetVectorVectors":{"symbol":{"name":"GetVectorVectors","docStart":3742,"docEnd":3951,"docs":{"brief":"Returns direction vectors from a vector.","tags":[{"tag":"","text":"Returns direction vectors from a vector."},{"tag":"param:vec","text":"Vector."},{"tag":"param:right","text":"Right vector buffer or NULL_VECTOR."},{"tag":"param:up","text":"Up vector buffer or NULL_VECTOR."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"float[3]","name":"right","decl":"float right[3]","default":null},{"type":"float[3]","name":"up","decl":"float up[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetVectorCrossProduct":{"symbol":{"name":"GetVectorCrossProduct","docStart":2562,"docEnd":2801,"docs":{"brief":"Computes the cross product of two vectors.  Any input array can be the same\nas the output array.","tags":[{"tag":"","text":"Computes the cross product of two vectors.  Any input array can be the same\nas the output array."},{"tag":"param:vec1","text":"First vector."},{"tag":"param:vec2","text":"Second vector."},{"tag":"param:result","text":"Resultant vector."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec1","decl":"const float vec1[3]","default":null},{"type":"const float[3]","name":"vec2","decl":"const float vec2[3]","default":null},{"type":"float[3]","name":"result","decl":"float result[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"NegateVector":{"symbol":{"name":"NegateVector","docStart":5123,"docEnd":5192,"docs":{"brief":"Negatives a vector.","tags":[{"tag":"","text":"Negatives a vector."},{"tag":"param:vec","text":"Vector."}]},"kind":"stock","returnType":"void","arguments":[{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ScaleVector":{"symbol":{"name":"ScaleVector","docStart":4901,"docEnd":5005,"docs":{"brief":"Scales a vector.","tags":[{"tag":"","text":"Scales a vector."},{"tag":"param:vec","text":"Vector."},{"tag":"param:scale","text":"Scale value."}]},"kind":"stock","returnType":"void","arguments":[{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"float","name":"scale","decl":"float scale","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetVectorDotProduct":{"symbol":{"name":"GetVectorDotProduct","docStart":2286,"docEnd":2481,"docs":{"brief":"Calculates the dot product of two vectors.","tags":[{"tag":"","text":"Calculates the dot product of two vectors."},{"tag":"param:vec1","text":"First vector."},{"tag":"param:vec2","text":"Second vector."},{"tag":"return","text":"Dot product of the two vectors."}]},"kind":"native","returnType":"float","arguments":[{"type":"const float[3]","name":"vec1","decl":"const float vec1[3]","default":null},{"type":"const float[3]","name":"vec2","decl":"const float vec2[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"NormalizeVector":{"symbol":{"name":"NormalizeVector","docStart":2900,"docEnd":3107,"docs":{"brief":"Normalizes a vector.  The input array can be the same as the output array.","tags":[{"tag":"","text":"Normalizes a vector.  The input array can be the same as the output array."},{"tag":"param:vec","text":"Vector."},{"tag":"param:result","text":"Resultant vector."},{"tag":"return","text":"Vector length."}]},"kind":"native","returnType":"float","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"float[3]","name":"result","decl":"float result[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetVectorDistance":{"symbol":{"name":"GetVectorDistance","docStart":1924,"docEnd":2187,"docs":{"brief":"Calculates the distance between two vectors.","tags":[{"tag":"","text":"Calculates the distance between two vectors."},{"tag":"param:vec1","text":"First vector."},{"tag":"param:vec2","text":"Second vector."},{"tag":"param:squared","text":"If true, the result will be squared (for optimization)."},{"tag":"return","text":"Vector distance."}]},"kind":"native","returnType":"float","arguments":[{"type":"const float[3]","name":"vec1","decl":"const float vec1[3]","default":null},{"type":"const float[3]","name":"vec2","decl":"const float vec2[3]","default":null},{"type":"bool","name":"squared","decl":"bool squared","default":"false"}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetVectorAngles":{"symbol":{"name":"GetVectorAngles","docStart":3554,"docEnd":3672,"docs":{"brief":"Returns angles from a vector.","tags":[{"tag":"","text":"Returns angles from a vector."},{"tag":"param:vec","text":"Vector."},{"tag":"param:angle","text":"Angle buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"float[3]","name":"angle","decl":"float angle[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetVectorLength":{"symbol":{"name":"GetVectorLength","docStart":1637,"docEnd":1849,"docs":{"brief":"Calculates a vector's length.","tags":[{"tag":"","text":"Calculates a vector's length."},{"tag":"param:vec","text":"Vector."},{"tag":"param:squared","text":"If true, the result will be squared (for optimization)."},{"tag":"return","text":"Vector length (magnitude)."}]},"kind":"native","returnType":"float","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"bool","name":"squared","decl":"bool squared","default":"false"}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAngleVectors":{"symbol":{"name":"GetAngleVectors","docStart":3179,"docEnd":3455,"docs":{"brief":"Returns vectors in the direction of an angle.","tags":[{"tag":"","text":"Returns vectors in the direction of an angle."},{"tag":"param:angle","text":"Angle."},{"tag":"param:fwd","text":"Forward vector buffer or NULL_VECTOR."},{"tag":"param:right","text":"Right vector buffer or NULL_VECTOR."},{"tag":"param:up","text":"Up vector buffer or NULL_VECTOR."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"angle","decl":"const float angle[3]","default":null},{"type":"float[3]","name":"fwd","decl":"float fwd[3]","default":null},{"type":"float[3]","name":"right","decl":"float right[3]","default":null},{"type":"float[3]","name":"up","decl":"float up[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddVectors":{"symbol":{"name":"AddVectors","docStart":4035,"docEnd":4252,"docs":{"brief":"Adds two vectors.  It is safe to use either input buffer as an output\nbuffer.","tags":[{"tag":"","text":"Adds two vectors.  It is safe to use either input buffer as an output\nbuffer."},{"tag":"param:vec1","text":"First vector."},{"tag":"param:vec2","text":"Second vector."},{"tag":"param:result","text":"Result buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"vec1","decl":"const float vec1[3]","default":null},{"type":"const float[3]","name":"vec2","decl":"const float vec2[3]","default":null},{"type":"float[3]","name":"result","decl":"float result[3]","default":null}]},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_vector_included":{"symbol":{"name":"_vector_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990},"last_updated":{"hash":"c1190fe89d4d0978e6118de2a80645f122d8d203","count":1070,"time":1183915990}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_stringtables":{"functions":{"GetStringTableMaxStrings":{"symbol":{"name":"GetStringTableMaxStrings","docStart":2567,"docEnd":2823,"docs":{"brief":"Returns the maximum number of strings that are allowed in a given string table.","tags":[{"tag":"","text":"Returns the maximum number of strings that are allowed in a given string table."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"return","text":"Maximum number of strings allowed."},{"tag":"error","text":"Invalid string table index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetStringTableName":{"symbol":{"name":"GetStringTableName","docStart":2879,"docEnd":3239,"docs":{"brief":"Retrieves the name of a string table.","tags":[{"tag":"","text":"Retrieves the name of a string table."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:name","text":"Buffer to store the name of the string table."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."},{"tag":"error","text":"Invalid string table index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddToStringTable":{"symbol":{"name":"AddToStringTable","docStart":5684,"docEnd":6137,"docs":{"brief":"Adds a string to a given string table.","tags":[{"tag":"","text":"Adds a string to a given string table."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:str","text":"String to add."},{"tag":"param:userdata","text":"An optional user data string."},{"tag":"param:length","text":"Length of user data string. This should include the null terminator.\nIf set to -1, then user data will be not be altered if the specified string\nalready exists in the string table."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"const char[]","name":"userdata","decl":"const char[] userdata","default":"\"\""},{"type":"int","name":"length","decl":"int length","default":"-1"}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"25462071df58307f41dca5890c33480c7e263572","count":6526,"time":1586883099}},"FindStringIndex":{"symbol":{"name":"FindStringIndex","docStart":3317,"docEnd":3614,"docs":{"brief":"Searches for the index of a given string in a string table.","tags":[{"tag":"","text":"Searches for the index of a given string in a string table."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:str","text":"String to find."},{"tag":"return","text":"String index if found, INVALID_STRING_INDEX otherwise."},{"tag":"error","text":"Invalid string table index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetStringTableData":{"symbol":{"name":"SetStringTableData","docStart":5199,"docEnd":5583,"docs":{"brief":"Sets the user data associated with a given string index.","tags":[{"tag":"","text":"Sets the user data associated with a given string index."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:stringidx","text":"A string index."},{"tag":"param:userdata","text":"User data string that will be set."},{"tag":"param:length","text":"Length of user data string. This should include the null terminator."},{"tag":"error","text":"Invalid string table index or string index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"int","name":"stringidx","decl":"int stringidx","default":null},{"type":"const char[]","name":"userdata","decl":"const char[] userdata","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"25462071df58307f41dca5890c33480c7e263572","count":6526,"time":1586883099}},"LockStringTables":{"symbol":{"name":"LockStringTables","docStart":6245,"docEnd":6534,"docs":{"brief":"Locks or unlocks the network string tables.","tags":[{"tag":"","text":"Locks or unlocks the network string tables."},{"tag":"param:lock","text":"Determines whether network string tables should be locked.\nTrue means the tables should be locked for writing; false means unlocked."},{"tag":"return","text":"Previous lock state."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"lock","decl":"bool lock","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"25462071df58307f41dca5890c33480c7e263572","count":6526,"time":1586883099}},"AddFileToDownloadTable":{"symbol":{"name":"AddFileToDownloadTable","docStart":5226,"docEnd":5444,"docs":{"brief":"Adds a file to the downloadables network string table.\nThis forces a client to download the file if they do not already have it.","tags":[{"tag":"","text":"Adds a file to the downloadables network string table.\nThis forces a client to download the file if they do not already have it."},{"tag":"param:filename","text":"File that will be added to downloadables table."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"filename","decl":"const char[] filename","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457}},"AddFileToDownloadsTable":{"symbol":{"name":"AddFileToDownloadsTable","docStart":6580,"docEnd":6802,"docs":{"brief":"Adds a file to the downloadables network string table.\nThis forces a client to download the file if they do not already have it.","tags":[{"tag":"","text":"Adds a file to the downloadables network string table.\nThis forces a client to download the file if they do not already have it."},{"tag":"param:filename","text":"File that will be added to downloadables table."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"filename","decl":"const char[] filename","default":null}]},"created":{"hash":"662e5673f7dbb0b80328c667276abd48d11cbd93","count":1116,"time":1184485695},"last_updated":{"hash":"25462071df58307f41dca5890c33480c7e263572","count":6526,"time":1586883099}},"GetNumStringTables":{"symbol":{"name":"GetNumStringTables","docStart":2071,"docEnd":2216,"docs":{"brief":"Returns the number of string tables that currently exist.","tags":[{"tag":"","text":"Returns the number of string tables that currently exist."},{"tag":"return","text":"Number of string tables that currently exist."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReadStringTable":{"symbol":{"name":"ReadStringTable","docStart":3679,"docEnd":4103,"docs":{"brief":"Retrieves the string at a given index of a string table.","tags":[{"tag":"","text":"Retrieves the string at a given index of a string table."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:stringidx","text":"A string index."},{"tag":"param:str","text":"Buffer to store the string value."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."},{"tag":"error","text":"Invalid string table index or string index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"int","name":"stringidx","decl":"int stringidx","default":null},{"type":"char[]","name":"str","decl":"char[] str","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetStringTableData":{"symbol":{"name":"GetStringTableData","docStart":4597,"docEnd":5102,"docs":{"brief":"Retrieves the user data associated with a given string index.","tags":[{"tag":"","text":"Retrieves the user data associated with a given string index."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:stringidx","text":"A string index."},{"tag":"param:userdata","text":"Buffer to store the user data. This will be set to \"\" if there is no user data"},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (binary safe, includes the null terminator)."},{"tag":"error","text":"Invalid string table index or string index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"int","name":"stringidx","decl":"int stringidx","default":null},{"type":"char[]","name":"userdata","decl":"char[] userdata","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"25462071df58307f41dca5890c33480c7e263572","count":6526,"time":1586883099}},"GetStringTableDataLength":{"symbol":{"name":"GetStringTableDataLength","docStart":4192,"docEnd":4526,"docs":{"brief":"Returns the length of the user data associated with a given string index.","tags":[{"tag":"","text":"Returns the length of the user data associated with a given string index."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"param:stringidx","text":"A string index."},{"tag":"return","text":"Length of user data. This will be 0 if there is no user data."},{"tag":"error","text":"Invalid string table index or string index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null},{"type":"int","name":"stringidx","decl":"int stringidx","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindStringTable":{"symbol":{"name":"FindStringTable","docStart":1824,"docEnd":2019,"docs":{"brief":"Searches for a string table.","tags":[{"tag":"","text":"Searches for a string table."},{"tag":"param:name","text":"Name of string table to find."},{"tag":"return","text":"A string table index number if found, INVALID_STRING_TABLE otherwise."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetStringTableNumStrings":{"symbol":{"name":"GetStringTableNumStrings","docStart":2254,"docEnd":2511,"docs":{"brief":"Returns the number of strings that currently exist in a given string table.","tags":[{"tag":"","text":"Returns the number of strings that currently exist in a given string table."},{"tag":"param:tableidx","text":"A string table index."},{"tag":"return","text":"Number of strings that currently exist."},{"tag":"error","text":"Invalid string table index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"tableidx","decl":"int tableidx","default":null}]},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_stringtables_included":{"symbol":{"name":"_sdktools_stringtables_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457}},"INVALID_STRING_TABLE":{"symbol":{"name":"INVALID_STRING_TABLE","docStart":1703,"docEnd":1740,"docs":{"brief":"An invalid string table index","tags":[{"tag":"","text":"An invalid string table index"}]},"value":"-1"},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"INVALID_STRING_INDEX":{"symbol":{"name":"INVALID_STRING_INDEX","docStart":1778,"docEnd":1820,"docs":{"brief":"An invalid string index in a table","tags":[{"tag":"","text":"An invalid string index in a table"}]},"value":"-1"},"created":{"hash":"a55ebc0c969051f30815592da3718c3fb11f53be","count":1115,"time":1184485457},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{},"typesets":{},"typedefs":{}},"adminmenu":{"functions":{"OnAdminMenuCreated":{"symbol":{"name":"OnAdminMenuCreated","docStart":2319,"docEnd":2501,"docs":{"brief":"Called when the admin menu is created and 3rd party plugins can grab\nthe Handle or add categories.","tags":[{"tag":"","text":"Called when the admin menu is created and 3rd party plugins can grab\nthe Handle or add categories."},{"tag":"param:topmenu","text":"Handle to the admin menu's TopMenu."}]},"kind":"forward","returnType":"void","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null}]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnAdminMenuReady":{"symbol":{"name":"OnAdminMenuReady","docStart":2555,"docEnd":2690,"docs":{"brief":"Called when the admin menu is ready to have items added.","tags":[{"tag":"","text":"Called when the admin menu is ready to have items added."},{"tag":"param:topmenu","text":"Handle to the admin menu's TopMenu."}]},"kind":"forward","returnType":"void","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null}]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminTopMenu":{"symbol":{"name":"GetAdminTopMenu","docStart":2742,"docEnd":2926,"docs":{"brief":"Retrieves the Handle to the admin top menu.","tags":[{"tag":"","text":"Retrieves the Handle to the admin top menu."},{"tag":"return","text":"Handle to the admin menu's TopMenu,\nor INVALID_HANDLE if not created yet."}]},"kind":"native","returnType":"TopMenu","arguments":[]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddTargetsToMenu":{"symbol":{"name":"AddTargetsToMenu","docStart":2965,"docEnd":3398,"docs":{"brief":"Adds targets to an admin menu.\n\nEach client is displayed as: name (userid)\nEach item contains the userid as a string for its info.","tags":[{"tag":"","text":"Adds targets to an admin menu.\n\nEach client is displayed as: name (userid)\nEach item contains the userid as a string for its info."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:source_client","text":"Source client, or 0 to ignore immunity."},{"tag":"param:in_game_only","text":"True to only select in-game players."},{"tag":"param:alive_only","text":"True to only select alive players."},{"tag":"return","text":"Number of clients added."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"source_client","decl":"int source_client","default":null},{"type":"bool","name":"in_game_only","decl":"bool in_game_only","default":"true"},{"type":"bool","name":"alive_only","decl":"bool alive_only","default":"false"}]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RedisplayAdminMenu":{"symbol":{"name":"RedisplayAdminMenu","docStart":3998,"docEnd":4260,"docs":{"brief":"Re-displays the admin menu to a client after selecting an item.\nAuto-aborts if the Handle is invalid.","tags":[{"tag":"","text":"Re-displays the admin menu to a client after selecting an item.\nAuto-aborts if the Handle is invalid."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"__pl_adminmenu_SetNTVOptional":{"symbol":{"name":"__pl_adminmenu_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365}},"AddTargetsToMenu2":{"symbol":{"name":"AddTargetsToMenu2","docStart":3538,"docEnd":3920,"docs":{"brief":"Adds targets to an admin menu.\n\nEach client is displayed as: name (userid)\nEach item contains the userid as a string for its info.","tags":[{"tag":"","text":"Adds targets to an admin menu.\n\nEach client is displayed as: name (userid)\nEach item contains the userid as a string for its info."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:source_client","text":"Source client, or 0 to ignore immunity."},{"tag":"param:flags","text":"COMMAND_FILTER flags from commandfilters.inc."},{"tag":"return","text":"Number of clients added."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"source_client","decl":"int source_client","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"ADMINMENU_VOTINGCOMMANDS":{"symbol":{"name":"ADMINMENU_VOTINGCOMMANDS","docStart":0,"docEnd":0,"docs":null,"value":"\"VotingCommands\""},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365}},"ADMINMENU_PLAYERCOMMANDS":{"symbol":{"name":"ADMINMENU_PLAYERCOMMANDS","docStart":0,"docEnd":0,"docs":null,"value":"\"PlayerCommands\""},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365}},"ADMINMENU_SERVERCOMMANDS":{"symbol":{"name":"ADMINMENU_SERVERCOMMANDS","docStart":0,"docEnd":0,"docs":null,"value":"\"ServerCommands\""},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365}},"_adminmenu_included":{"symbol":{"name":"_adminmenu_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365},"last_updated":{"hash":"3b0785cae06ad488c410c90304edd55020456ea6","count":2905,"time":1263457365}}},"enums":{},"typesets":{},"typedefs":{}},"dbi":{"functions":{"SQL_BindParamString":{"symbol":{"name":"SQL_BindParamString","docStart":38307,"docEnd":38950,"docs":{"brief":"Binds a parameter in a prepared statement to a given string value.","tags":[{"tag":"","text":"Binds a parameter in a prepared statement to a given string value."},{"tag":"param:statement","text":"A statement (prepared query) Handle."},{"tag":"param:param","text":"The parameter index (starting from 0)."},{"tag":"param:value","text":"The string to bind."},{"tag":"param:copy","text":"Whether or not SourceMod should copy the value\nlocally if necessary.  If the string contents\nwon't change before calling SQL_Execute(), this\ncan be set to false for optimization."},{"tag":"error","text":"Invalid statement Handle or parameter index, or\nSQL error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"statement","decl":"Handle statement","default":null},{"type":"int","name":"param","decl":"int param","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"copy","decl":"bool copy","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_EscapeString":{"symbol":{"name":"SQL_EscapeString","docStart":25877,"docEnd":27032,"docs":{"brief":"Escapes a database string for literal insertion.  This is not needed\nfor binding strings in prepared statements.\n\nGenerally, database strings are inserted into queries enclosed in\nsingle quotes (').  If user input has a single quote in it, the\nquote needs to be escaped.  This function ensures that any unsafe\ncharacters are safely escaped according to the database engine and\nthe database's character set.\n\nNOTE: SourceMod only guarantees properly escaped strings when the query\nencloses the string in ''. While drivers tend to allow \" instead, the string\nmay be not be escaped (for example, on SQLite)!","tags":[{"tag":"","text":"Escapes a database string for literal insertion.  This is not needed\nfor binding strings in prepared statements.\n\nGenerally, database strings are inserted into queries enclosed in\nsingle quotes (').  If user input has a single quote in it, the\nquote needs to be escaped.  This function ensures that any unsafe\ncharacters are safely escaped according to the database engine and\nthe database's character set.\n\nNOTE: SourceMod only guarantees properly escaped strings when the query\nencloses the string in ''. While drivers tend to allow \" instead, the string\nmay be not be escaped (for example, on SQLite)!"},{"tag":"param:database","text":"A database Handle."},{"tag":"param:string","text":"String to quote."},{"tag":"param:buffer","text":"Buffer to store quoted string in."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"param:written","text":"Optionally returns the number of bytes written."},{"tag":"return","text":"True on success, false if buffer is not big enough.\nThe buffer must be at least 2*strlen(string)+1."},{"tag":"error","text":"Invalid database or statement Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"string","decl":"const char[] string","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetAffectedRows":{"symbol":{"name":"SQL_GetAffectedRows","docStart":24842,"docEnd":25103,"docs":{"brief":"Returns the number of affected rows from the last query.","tags":[{"tag":"","text":"Returns the number of affected rows from the last query."},{"tag":"param:hndl","text":"A database OR statement Handle."},{"tag":"return","text":"Number of rows affected by the last query."},{"tag":"error","text":"Invalid database or statement Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FieldNameToNum":{"symbol":{"name":"SQL_FieldNameToNum","docStart":32336,"docEnd":32694,"docs":{"brief":"Retrieves a field index by name.","tags":[{"tag":"","text":"Retrieves a field index by name."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:name","text":"Name of the field (case sensitive)."},{"tag":"param:field","text":"Variable to store field index in."},{"tag":"return","text":"True if found, false if not found."},{"tag":"error","text":"Invalid query Handle or no current result set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"int&","name":"field","decl":"int& field","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_CreateTransaction":{"symbol":{"name":"SQL_CreateTransaction","docStart":43010,"docEnd":43231,"docs":{"brief":"Creates a new transaction object. A transaction object is a list of queries\nthat can be sent to the database thread and executed as a single transaction.","tags":[{"tag":"","text":"Creates a new transaction object. A transaction object is a list of queries\nthat can be sent to the database thread and executed as a single transaction."},{"tag":"return","text":"A transaction handle."}]},"kind":"native","returnType":"Transaction","arguments":[]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_IsSameConnection":{"symbol":{"name":"SQL_IsSameConnection","docStart":40944,"docEnd":41300,"docs":{"brief":"Tells whether two database handles both point to the same database\nconnection.","tags":[{"tag":"","text":"Tells whether two database handles both point to the same database\nconnection."},{"tag":"param:hndl1","text":"First database Handle."},{"tag":"param:hndl2","text":"Second database Handle."},{"tag":"return","text":"True if the Handles point to the same\nconnection, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl1","decl":"Handle hndl1","default":null},{"type":"Handle","name":"hndl2","decl":"Handle hndl2","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_CheckConfig":{"symbol":{"name":"SQL_CheckConfig","docStart":22527,"docEnd":22711,"docs":{"brief":"Returns if a named configuration is present in databases.cfg.","tags":[{"tag":"","text":"Returns if a named configuration is present in databases.cfg."},{"tag":"param:name","text":"Configuration name."},{"tag":"return","text":"True if it exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SQL_FetchFloat":{"symbol":{"name":"SQL_FetchFloat","docStart":34698,"docEnd":35353,"docs":{"brief":"Fetches a float from a field in the current row of a result set.\nIf the result is NULL, a value of 0.0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull().","tags":[{"tag":"","text":"Fetches a float from a field in the current row of a result set.\nIf the result is NULL, a value of 0.0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull()."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"param:result","text":"Optional variable to store the status of the return value."},{"tag":"return","text":"A float value."},{"tag":"error","text":"Invalid query Handle or field index, invalid\ntype conversion requested from the database,\nor no current result set."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"int","name":"field","decl":"int field","default":null},{"type":"DBResult&","name":"result","decl":"DBResult& result","default":"DBVal_Error"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetDriverProduct":{"symbol":{"name":"SQL_GetDriverProduct","docStart":23990,"docEnd":24330,"docs":{"brief":"Retrieves a driver's product string.\n\nExample: \"MySQL\", \"SQLite\"","tags":[{"tag":"","text":"Retrieves a driver's product string.\n\nExample: \"MySQL\", \"SQLite\""},{"tag":"param:driver","text":"Driver Handle, or INVALID_HANDLE for the default driver."},{"tag":"param:product","text":"Product string buffer."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"driver","decl":"Handle driver","default":null},{"type":"char[]","name":"product","decl":"char[] product","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetError":{"symbol":{"name":"SQL_GetError","docStart":25442,"docEnd":25804,"docs":{"brief":"Returns the error reported by the last query.","tags":[{"tag":"","text":"Returns the error reported by the last query."},{"tag":"param:hndl","text":"A database, query, OR statement Handle."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"True if there was an error, false otherwise."},{"tag":"error","text":"Invalid database, query, or statement Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_BindParamFloat":{"symbol":{"name":"SQL_BindParamFloat","docStart":37859,"docEnd":38228,"docs":{"brief":"Binds a parameter in a prepared statement to a given float value.","tags":[{"tag":"","text":"Binds a parameter in a prepared statement to a given float value."},{"tag":"param:statement","text":"A statement (prepared query) Handle."},{"tag":"param:param","text":"The parameter index (starting from 0)."},{"tag":"param:value","text":"The float number to bind."},{"tag":"error","text":"Invalid statement Handle or parameter index, or\nSQL error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"statement","decl":"Handle statement","default":null},{"type":"int","name":"param","decl":"int param","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetDriverIdent":{"symbol":{"name":"SQL_GetDriverIdent","docStart":23555,"docEnd":23909,"docs":{"brief":"Retrieves a driver's identification string.\n\nExample: \"mysql\", \"sqlite\"","tags":[{"tag":"","text":"Retrieves a driver's identification string.\n\nExample: \"mysql\", \"sqlite\""},{"tag":"param:driver","text":"Driver Handle, or INVALID_HANDLE for the default driver."},{"tag":"param:ident","text":"Identification string buffer."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"driver","decl":"Handle driver","default":null},{"type":"char[]","name":"ident","decl":"char[] ident","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_BindParamInt":{"symbol":{"name":"SQL_BindParamInt","docStart":37284,"docEnd":37765,"docs":{"brief":"Binds a parameter in a prepared statement to a given integer value.","tags":[{"tag":"","text":"Binds a parameter in a prepared statement to a given integer value."},{"tag":"param:statement","text":"A statement (prepared query) Handle."},{"tag":"param:param","text":"The parameter index (starting from 0)."},{"tag":"param:number","text":"The number to bind."},{"tag":"param:signed","text":"True to bind the number as signed, false to\nbind it as unsigned."},{"tag":"error","text":"Invalid statement Handle or parameter index, or\nSQL error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"statement","decl":"Handle statement","default":null},{"type":"int","name":"param","decl":"int param","default":null},{"type":"int","name":"number","decl":"int number","default":null},{"type":"bool","name":"signed","decl":"bool signed","default":"true"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetDriver":{"symbol":{"name":"SQL_GetDriver","docStart":22764,"docEnd":23138,"docs":{"brief":"Returns a driver Handle from a name string.\n\nIf the driver is not found, SourceMod will attempt\nto load an extension named dbi.<name>.ext.[dll|so].","tags":[{"tag":"","text":"Returns a driver Handle from a name string.\n\nIf the driver is not found, SourceMod will attempt\nto load an extension named dbi.<name>.ext.[dll|so]."},{"tag":"param:name","text":"Driver identification string, or an empty\nstring to return the default driver."},{"tag":"return","text":"Driver Handle, or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"DBDriver","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":"\"\""}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FetchRow":{"symbol":{"name":"SQL_FetchRow","docStart":32776,"docEnd":33206,"docs":{"brief":"Fetches a row from the current result set.  This must be\nsuccessfully called before any results are fetched.\n\nIf this function fails, SQL_MoreResults() can be used to\ntell if there was an error or the result set is finished.","tags":[{"tag":"","text":"Fetches a row from the current result set.  This must be\nsuccessfully called before any results are fetched.\n\nIf this function fails, SQL_MoreResults() can be used to\ntell if there was an error or the result set is finished."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"True if a row was fetched, false otherwise."},{"tag":"error","text":"Invalid query Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_SetCharset":{"symbol":{"name":"SQL_SetCharset","docStart":24415,"docEnd":24770,"docs":{"brief":"Sets the character set of the current connection.\nLike SET NAMES .. in mysql, but stays after connection problems.\n\nExample: \"utf8\", \"latin1\"","tags":[{"tag":"","text":"Sets the character set of the current connection.\nLike SET NAMES .. in mysql, but stays after connection problems.\n\nExample: \"utf8\", \"latin1\""},{"tag":"param:database","text":"Database Handle."},{"tag":"param:charset","text":"The character set string to change to."},{"tag":"return","text":"True, if character set was changed, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"charset","decl":"const char[] charset","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"bb25b03884fdf8e61f0c83c6311046fee95f0cba","count":6606,"time":1596450150}},"SQL_Rewind":{"symbol":{"name":"SQL_Rewind","docStart":33519,"docEnd":33770,"docs":{"brief":"Rewinds a result set back to the first result.","tags":[{"tag":"","text":"Rewinds a result set back to the first result."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid query Handle or no current result set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_DefConnect":{"symbol":{"name":"SQL_DefConnect","docStart":19136,"docEnd":19583,"docs":{"brief":"Creates a default SQL connection.","tags":[{"tag":"","text":"Creates a default SQL connection."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum length of the error buffer."},{"tag":"param:persistent","text":"True to re-use a previous persistent connection\nif possible, false otherwise."},{"tag":"return","text":"A database connection Handle, or INVALID_HANDLE on failure.\nOn failure the error buffer will be filled with a message."}]},"kind":"stock","returnType":"Database","arguments":[{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"persistent","decl":"bool persistent","default":"true"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SQL_AddQuery":{"symbol":{"name":"SQL_AddQuery","docStart":43280,"docEnd":43627,"docs":{"brief":"Adds a query to a transaction object.","tags":[{"tag":"","text":"Adds a query to a transaction object."},{"tag":"param:txn","text":"A transaction handle."},{"tag":"param:query","text":"Query string."},{"tag":"param:data","text":"Extra data value to pass to the final callback."},{"tag":"return","text":"The index of the query in the transaction's query list."},{"tag":"error","text":"Invalid transaction handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Transaction","name":"txn","decl":"Transaction txn","default":null},{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FetchString":{"symbol":{"name":"SQL_FetchString","docStart":33813,"docEnd":34580,"docs":{"brief":"Fetches a string from a field in the current row of a result set.\nIf the result is NULL, an empty string will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull().","tags":[{"tag":"","text":"Fetches a string from a field in the current row of a result set.\nIf the result is NULL, an empty string will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull()."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum size of the string buffer."},{"tag":"param:result","text":"Optional variable to store the status of the return value."},{"tag":"return","text":"Number of bytes written."},{"tag":"error","text":"Invalid query Handle or field index, invalid\ntype conversion requested from the database,\nor no current result set."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"int","name":"field","decl":"int field","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"DBResult&","name":"result","decl":"DBResult& result","default":"DBVal_Error"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_Query":{"symbol":{"name":"SQL_Query","docStart":28800,"docEnd":29398,"docs":{"brief":"Executes a simple query and returns a new query Handle for\nreceiving the results.","tags":[{"tag":"","text":"Executes a simple query and returns a new query Handle for\nreceiving the results."},{"tag":"param:database","text":"A database Handle."},{"tag":"param:query","text":"Query string."},{"tag":"param:len","text":"Optional parameter to specify the query length, in\nbytes.  This can be used to send binary queries that\nhave a premature terminator."},{"tag":"return","text":"A new Query Handle on success, INVALID_HANDLE\notherwise.  The Handle must be freed with CloseHandle()."},{"tag":"error","text":"Invalid database Handle."}]},"kind":"native","returnType":"DBResultSet","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"int","name":"len","decl":"int len","default":"-1"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetFieldCount":{"symbol":{"name":"SQL_GetFieldCount","docStart":31566,"docEnd":31810,"docs":{"brief":"Retrieves the number of fields in the last result set.","tags":[{"tag":"","text":"Retrieves the number of fields in the last result set."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"Number of fields in the current result set."},{"tag":"error","text":"Invalid query Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"eb54cbb4f5cf42a4c54656812c5a90cb61c2ce2d","count":870,"time":1180671773},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetRowCount":{"symbol":{"name":"SQL_GetRowCount","docStart":31279,"docEnd":31519,"docs":{"brief":"Retrieves the number of rows in the last result set.","tags":[{"tag":"","text":"Retrieves the number of rows in the last result set."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"Number of rows in the current result set."},{"tag":"error","text":"Invalid query Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_ConnectEx":{"symbol":{"name":"SQL_ConnectEx","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"driver","decl":"Handle driver","default":null},{"type":"const char[]","name":"host","decl":"const char[] host","default":null},{"type":"const char[]","name":"user","decl":"const char[] user","default":null},{"type":"const char[]","name":"pass","decl":"const char[] pass","default":null},{"type":"const char[]","name":"database","decl":"const char[] database","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"persistent","decl":"bool persistent","default":"true"},{"type":"int","name":"port","decl":"int port","default":"0"},{"type":"int","name":"maxTimeout","decl":"int maxTimeout","default":"0"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931}},"SQL_ExecuteTransaction":{"symbol":{"name":"SQL_ExecuteTransaction","docStart":43706,"docEnd":44294,"docs":{"brief":"Sends a transaction to the database thread. The transaction handle is\nautomatically closed. When the transaction completes, the optional\ncallback is invoked.","tags":[{"tag":"","text":"Sends a transaction to the database thread. The transaction handle is\nautomatically closed. When the transaction completes, the optional\ncallback is invoked."},{"tag":"param:db","text":"A database handle."},{"tag":"param:txn","text":"A transaction handle."},{"tag":"param:onSuccess","text":"An optional callback to receive a successful transaction."},{"tag":"param:onError","text":"An optional callback to receive an error message."},{"tag":"param:data","text":"An optional value to pass to callbacks."},{"tag":"param:prio","text":"Priority queue to use."},{"tag":"error","text":"An invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"db","decl":"Handle db","default":null},{"type":"Transaction","name":"txn","decl":"Transaction txn","default":null},{"type":"SQLTxnSuccess","name":"onSuccess","decl":"SQLTxnSuccess onSuccess","default":"INVALID_FUNCTION"},{"type":"SQLTxnFailure","name":"onError","decl":"SQLTxnFailure onError","default":"INVALID_FUNCTION"},{"type":"any","name":"data","decl":"any data","default":"0"},{"type":"DBPriority","name":"priority","decl":"DBPriority priority","default":"DBPrio_Normal"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQLite_UseDatabase":{"symbol":{"name":"SQLite_UseDatabase","docStart":20985,"docEnd":21771,"docs":{"brief":"Grabs a handle to an SQLite database, creating one if it does not exist.\n\nUnless there are extenuating circumstances, you should consider using \"sourcemod-local\" as the\ndatabase name.  This provides some unification between plugins on behalf of users.\n\nAs a precaution, you should always create some sort of unique prefix to your table names so\nthere are no conflicts, and you should never drop or modify tables that you do not own.","tags":[{"tag":"","text":"Grabs a handle to an SQLite database, creating one if it does not exist.\n\nUnless there are extenuating circumstances, you should consider using \"sourcemod-local\" as the\ndatabase name.  This provides some unification between plugins on behalf of users.\n\nAs a precaution, you should always create some sort of unique prefix to your table names so\nthere are no conflicts, and you should never drop or modify tables that you do not own."},{"tag":"param:database","text":"Database name."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum length of the error buffer."},{"tag":"return","text":"A database connection Handle, or INVALID_HANDLE on failure.\nOn failure the error buffer will be filled with a message."}]},"kind":"stock","returnType":"Database","arguments":[{"type":"const char[]","name":"database","decl":"const char[] database","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SQL_LockDatabase":{"symbol":{"name":"SQL_LockDatabase","docStart":39358,"docEnd":40036,"docs":{"brief":"Locks a database so threading operations will not interrupt.\n\nIf you are using a database Handle for both threading and non-threading,\nthis MUST be called before doing any set of non-threading DB operations.\nOtherwise you risk corrupting the database driver's memory or network\nconnection.\n\nLeaving a lock on a database and then executing a threaded query results\nin a dead lock! Make sure to call SQL_UnlockDatabase()!\n\nIf the lock cannot be acquired, the main thread will pause until the\nthreaded operation has concluded.","tags":[{"tag":"","text":"Locks a database so threading operations will not interrupt.\n\nIf you are using a database Handle for both threading and non-threading,\nthis MUST be called before doing any set of non-threading DB operations.\nOtherwise you risk corrupting the database driver's memory or network\nconnection.\n\nLeaving a lock on a database and then executing a threaded query results\nin a dead lock! Make sure to call SQL_UnlockDatabase()!\n\nIf the lock cannot be acquired, the main thread will pause until the\nthreaded operation has concluded."},{"tag":"param:database","text":"A database Handle."},{"tag":"error","text":"Invalid database Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_TConnect":{"symbol":{"name":"SQL_TConnect","docStart":41367,"docEnd":41957,"docs":{"brief":"Connects to a database via a thread.  This can be used instead of\nSQL_Connect() if you wish for non-blocking functionality.\n\nIt is not necessary to use this to use threaded queries.  However, if you\ndon't (or you mix threaded/non-threaded queries), you should see\nSQL_LockDatabase().","tags":[{"tag":"","text":"Connects to a database via a thread.  This can be used instead of\nSQL_Connect() if you wish for non-blocking functionality.\n\nIt is not necessary to use this to use threaded queries.  However, if you\ndon't (or you mix threaded/non-threaded queries), you should see\nSQL_LockDatabase()."},{"tag":"param:callback","text":"Callback; new Handle will be in hndl, owner is the driver.\nIf no driver was found, the owner is INVALID_HANDLE."},{"tag":"param:name","text":"Database name."},{"tag":"param:data","text":"Extra data value to pass to the callback."}]},"kind":"native","returnType":"void","arguments":[{"type":"SQLTCallback","name":"callback","decl":"SQLTCallback callback","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":"\"default\""},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FetchInt":{"symbol":{"name":"SQL_FetchInt","docStart":35442,"docEnd":36101,"docs":{"brief":"Fetches an integer from a field in the current row of a result set.\nIf the result is NULL, a value of 0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull().","tags":[{"tag":"","text":"Fetches an integer from a field in the current row of a result set.\nIf the result is NULL, a value of 0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull()."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"param:result","text":"Optional variable to store the status of the return value."},{"tag":"return","text":"An integer value."},{"tag":"error","text":"Invalid query Handle or field index, invalid\ntype conversion requested from the database,\nor no current result set."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"int","name":"field","decl":"int field","default":null},{"type":"DBResult&","name":"result","decl":"DBResult& result","default":"DBVal_Error"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_UnlockDatabase":{"symbol":{"name":"SQL_UnlockDatabase","docStart":40088,"docEnd":40255,"docs":{"brief":"Unlocks a database so threading operations may continue.","tags":[{"tag":"","text":"Unlocks a database so threading operations may continue."},{"tag":"param:database","text":"A database Handle."},{"tag":"error","text":"Invalid database Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_PrepareQuery":{"symbol":{"name":"SQL_PrepareQuery","docStart":29482,"docEnd":30237,"docs":{"brief":"Creates a new prepared statement query.  Prepared statements can\nbe executed any number of times.  They can also have placeholder\nparameters, similar to variables, which can be bound safely and\nsecurely (for example, you do not need to quote bound strings).\n\nStatement handles will work in any function that accepts a Query handle.","tags":[{"tag":"","text":"Creates a new prepared statement query.  Prepared statements can\nbe executed any number of times.  They can also have placeholder\nparameters, similar to variables, which can be bound safely and\nsecurely (for example, you do not need to quote bound strings).\n\nStatement handles will work in any function that accepts a Query handle."},{"tag":"param:database","text":"A database Handle."},{"tag":"param:query","text":"Query string."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum size of the error buffer."},{"tag":"return","text":"A new statement Handle on success, INVALID_HANDLE\notherwise.  The Handle must be freed with CloseHandle()."},{"tag":"error","text":"Invalid database Handle."}]},"kind":"native","returnType":"DBStatement","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_Execute":{"symbol":{"name":"SQL_Execute","docStart":39048,"docEnd":39310,"docs":{"brief":"Executes a prepared statement.  All parameters must be bound beforehand.","tags":[{"tag":"","text":"Executes a prepared statement.  All parameters must be bound beforehand."},{"tag":"param:statement","text":"A statement (prepared query) Handle."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid statement Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"statement","decl":"Handle statement","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_IsFieldNull":{"symbol":{"name":"SQL_IsFieldNull","docStart":36186,"docEnd":36627,"docs":{"brief":"Returns whether a field's data in the current row of a result set is\nNULL or not.  NULL is an SQL type which means \"no data.\"","tags":[{"tag":"","text":"Returns whether a field's data in the current row of a result set is\nNULL or not.  NULL is an SQL type which means \"no data.\""},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"return","text":"True if data is NULL, false otherwise."},{"tag":"error","text":"Invalid query Handle or field index, or no\ncurrent result set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"int","name":"field","decl":"int field","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_GetInsertId":{"symbol":{"name":"SQL_GetInsertId","docStart":25153,"docEnd":25396,"docs":{"brief":"Returns the last query's insertion id.","tags":[{"tag":"","text":"Returns the last query's insertion id."},{"tag":"param:hndl","text":"A database, query, OR statement Handle."},{"tag":"return","text":"Last query's insertion id."},{"tag":"error","text":"Invalid database, query, or statement Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FieldNumToName":{"symbol":{"name":"SQL_FieldNumToName","docStart":31859,"docEnd":32246,"docs":{"brief":"Retrieves the name of a field by index.","tags":[{"tag":"","text":"Retrieves the name of a field by index."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:field","text":"Field number (starting from 0)."},{"tag":"param:name","text":"Name buffer."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"error","text":"Invalid query Handle, invalid field index, or\nno current result set."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"int","name":"field","decl":"int field","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_HasResultSet":{"symbol":{"name":"SQL_HasResultSet","docStart":30877,"docEnd":31230,"docs":{"brief":"Returns whether or not a result set exists.  This will\nreturn true even if 0 results were returned, but false\non queries like UPDATE, INSERT, or DELETE.","tags":[{"tag":"","text":"Returns whether or not a result set exists.  This will\nreturn true even if 0 results were returned, but false\non queries like UPDATE, INSERT, or DELETE."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"True if there is a result set, false otherwise."},{"tag":"error","text":"Invalid query Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FetchMoreResults":{"symbol":{"name":"SQL_FetchMoreResults","docStart":30345,"docEnd":30824,"docs":{"brief":"Advances to the next set of results.\n\nIn some SQL implementations, multiple result sets can exist on one query.\nThis is possible in MySQL with simple queries when executing a CALL\nquery.  If this is the case, all result sets must be processed before\nanother query is made.","tags":[{"tag":"","text":"Advances to the next set of results.\n\nIn some SQL implementations, multiple result sets can exist on one query.\nThis is possible in MySQL with simple queries when executing a CALL\nquery.  If this is the case, all result sets must be processed before\nanother query is made."},{"tag":"param:query","text":"A query Handle."},{"tag":"return","text":"True if there was another result set, false otherwise."},{"tag":"error","text":"Invalid query Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FetchSize":{"symbol":{"name":"SQL_FetchSize","docStart":36686,"docEnd":37228,"docs":{"brief":"Returns the length of a field's data in the current row of a result\nset.  This only needs to be called for strings to determine how many\nbytes to use.  Note that the return value does not include the null\nterminator.","tags":[{"tag":"","text":"Returns the length of a field's data in the current row of a result\nset.  This only needs to be called for strings to determine how many\nbytes to use.  Note that the return value does not include the null\nterminator."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"return","text":"Number of bytes for the field's data size."},{"tag":"error","text":"Invalid query Handle or field index or no\ncurrent result set."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null},{"type":"int","name":"field","decl":"int field","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_ReadDriver":{"symbol":{"name":"SQL_ReadDriver","docStart":23196,"docEnd":23464,"docs":{"brief":"Reads the driver of an opened database.","tags":[{"tag":"","text":"Reads the driver of an opened database."},{"tag":"param:database","text":"Database Handle."},{"tag":"param:ident","text":"Option buffer to store the identification string."},{"tag":"param:ident_length","text":"Maximum length of the buffer."},{"tag":"return","text":"Driver Handle."}]},"kind":"native","returnType":"DBDriver","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"char[]","name":"ident","decl":"char[] ident","default":"\"\""},{"type":"int","name":"ident_length","decl":"int ident_length","default":"0"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FastQuery":{"symbol":{"name":"SQL_FastQuery","docStart":28181,"docEnd":28719,"docs":{"brief":"Executes a query and ignores the result set.","tags":[{"tag":"","text":"Executes a query and ignores the result set."},{"tag":"param:database","text":"A database Handle."},{"tag":"param:query","text":"Query string."},{"tag":"param:len","text":"Optional parameter to specify the query length, in\nbytes.  This can be used to send binary queries that\nhave a premature terminator."},{"tag":"return","text":"True if query succeeded, false otherwise.  Use\nSQL_GetError to find the last error."},{"tag":"error","text":"Invalid database Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"int","name":"len","decl":"int len","default":"-1"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_FormatQuery":{"symbol":{"name":"SQL_FormatQuery","docStart":27191,"docEnd":27692,"docs":{"brief":"Formats a string according to the SourceMod format rules (see documentation).\nAll format specifiers are escaped (see SQL_EscapeString) unless the '!' flag is used.","tags":[{"tag":"","text":"Formats a string according to the SourceMod format rules (see documentation).\nAll format specifiers are escaped (see SQL_EscapeString) unless the '!' flag is used."},{"tag":"param:database","text":"A database Handle."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"Number of cells written."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"700ec92a9a9cc10b52a426808641eb7aff270044","count":5856,"time":1455548716},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_TQuery":{"symbol":{"name":"SQL_TQuery","docStart":42052,"docEnd":42878,"docs":{"brief":"Executes a simple query via a thread.  The query Handle is passed through\nthe callback.\n\nThe database Handle returned through the callback is always a new Handle,\nand if necessary, SQL_IsSameConnection() should be used to test against\nother connections.\n\nThe query Handle returned through the callback is temporary and destroyed\nat the end of the callback.  If you need to hold onto it, use CloneHandle().","tags":[{"tag":"","text":"Executes a simple query via a thread.  The query Handle is passed through\nthe callback.\n\nThe database Handle returned through the callback is always a new Handle,\nand if necessary, SQL_IsSameConnection() should be used to test against\nother connections.\n\nThe query Handle returned through the callback is temporary and destroyed\nat the end of the callback.  If you need to hold onto it, use CloneHandle()."},{"tag":"param:database","text":"A database Handle."},{"tag":"param:callback","text":"Callback; database is in \"owner\" and the query Handle\nis passed in \"hndl\"."},{"tag":"param:query","text":"Query string."},{"tag":"param:data","text":"Extra data value to pass to the callback."},{"tag":"param:prio","text":"Priority queue to use."},{"tag":"error","text":"Invalid database Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"SQLTCallback","name":"callback","decl":"SQLTCallback callback","default":null},{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"any","name":"data","decl":"any data","default":"0"},{"type":"DBPriority","name":"prio","decl":"DBPriority prio","default":"DBPrio_Normal"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_MoreRows":{"symbol":{"name":"SQL_MoreRows","docStart":33251,"docEnd":33474,"docs":{"brief":"Returns if there are more rows.","tags":[{"tag":"","text":"Returns if there are more rows."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"True if there are more rows, false otherwise."},{"tag":"error","text":"Invalid query Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"query","decl":"Handle query","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQL_Connect":{"symbol":{"name":"SQL_Connect","docStart":18604,"docEnd":19033,"docs":{"brief":"Creates an SQL connection from a named configuration.","tags":[{"tag":"","text":"Creates an SQL connection from a named configuration."},{"tag":"param:confname","text":"Named configuration."},{"tag":"param:persistent","text":"True to re-use a previous persistent connection if\npossible, false otherwise."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum length of the error buffer."},{"tag":"return","text":"A database connection Handle, or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"Database","arguments":[{"type":"const char[]","name":"confname","decl":"const char[] confname","default":null},{"type":"bool","name":"persistent","decl":"bool persistent","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SQL_QuoteString":{"symbol":{"name":"SQL_QuoteString","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"database","decl":"Handle database","default":null},{"type":"const char[]","name":"string","decl":"const char[] string","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"70145dfd74b31bcecd2533760cce50fcde0e1a79","count":6302,"time":1531062366}},"SQL_ConnectCustom":{"symbol":{"name":"SQL_ConnectCustom","docStart":19738,"docEnd":20848,"docs":{"brief":"Connects to a database using key value pairs containing the database info.\nThe key/value pairs should match what would be in databases.cfg.\n\nI.e. \"driver\" should be \"default\" or a driver name (or omitted for\nthe default).  For SQLite, only the \"database\" parameter is needed in addition.\nFor drivers which require external connections, more of the parameters may be\nneeded.\n\nIn general it is discouraged to use this function.  Connections should go through\ndatabases.cfg for greatest flexibility on behalf of users.","tags":[{"tag":"","text":"Connects to a database using key value pairs containing the database info.\nThe key/value pairs should match what would be in databases.cfg.\n\nI.e. \"driver\" should be \"default\" or a driver name (or omitted for\nthe default).  For SQLite, only the \"database\" parameter is needed in addition.\nFor drivers which require external connections, more of the parameters may be\nneeded.\n\nIn general it is discouraged to use this function.  Connections should go through\ndatabases.cfg for greatest flexibility on behalf of users."},{"tag":"param:keyvalues","text":"Key/value pairs from a KeyValues handle, describing the connection."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum length of the error buffer."},{"tag":"param:persistent","text":"True to re-use a previous persistent connection if\npossible, false otherwise."},{"tag":"return","text":"A database connection Handle, or INVALID_HANDLE on failure.\nOn failure the error buffer will be filled with a message."},{"tag":"error","text":"Invalid KeyValues handle."}]},"kind":"native","returnType":"Database","arguments":[{"type":"Handle","name":"keyvalues","decl":"Handle keyvalues","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"persistent","decl":"bool persistent","default":null}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"DBDriver":{"symbol":{"name":"DBDriver","docStart":2409,"docEnd":2519,"docs":{"brief":"A Driver represents a database backend, currently MySQL or SQLite.\n\nDriver handles cannot be closed.","tags":[{"tag":"","text":"A Driver represents a database backend, currently MySQL or SQLite.\n\nDriver handles cannot be closed."}]},"parent":"Handle","methods":[{"name":"Find","docStart":2554,"docEnd":2859,"docs":{"brief":"Finds the driver associated with a name.\n\nSupported driver strings:\nmysql\nsqlite","tags":[{"tag":"","text":"Finds the driver associated with a name.\n\nSupported driver strings:\nmysql\nsqlite"},{"tag":"param:name","text":"Driver identification string, or an empty string\nto return the default driver."},{"tag":"return","text":"Driver handle, or null on failure."}]},"kind":"native","returnType":"DBDriver","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":"\"\""}]},{"name":"GetIdentifier","docStart":2926,"docEnd":3126,"docs":{"brief":"Retrieves a driver's identification string.\n\nExample: \"mysql\", \"sqlite\"","tags":[{"tag":"","text":"Retrieves a driver's identification string.\n\nExample: \"mysql\", \"sqlite\""},{"tag":"param:ident","text":"Identification string buffer."},{"tag":"param:maxlength","text":"Maximum length of the buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"ident","decl":"char[] ident","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetProduct","docStart":3196,"docEnd":3382,"docs":{"brief":"Retrieves a driver's product string.\n\nExample: \"MySQL\", \"SQLite\"","tags":[{"tag":"","text":"Retrieves a driver's product string.\n\nExample: \"MySQL\", \"SQLite\""},{"tag":"param:product","text":"Product string buffer."},{"tag":"param:maxlength","text":"Maximum length of the buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"product","decl":"char[] product","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"properties":[]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DBStatement":{"symbol":{"name":"DBStatement","docStart":11372,"docEnd":11553,"docs":{"brief":"A DBStatement is a pre-compiled SQL query that may be executed multiple\ntimes with different parameters. A DBStatement holds a reference to the\nDatabase that prepared it.","tags":[{"tag":"","text":"A DBStatement is a pre-compiled SQL query that may be executed multiple\ntimes with different parameters. A DBStatement holds a reference to the\nDatabase that prepared it."}]},"parent":"Handle","methods":[{"name":"BindInt","docStart":11591,"docEnd":11961,"docs":{"brief":"Binds a parameter in a prepared statement to a given integer value.","tags":[{"tag":"","text":"Binds a parameter in a prepared statement to a given integer value."},{"tag":"param:param","text":"The parameter index (starting from 0)."},{"tag":"param:number","text":"The number to bind."},{"tag":"param:signed","text":"True to bind the number as signed, false to\nbind it as unsigned."},{"tag":"error","text":"Invalid parameter index, or SQL error."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"int","name":"number","decl":"int number","default":null},{"type":"bool","name":"signed","decl":"bool signed","default":"true"}]},{"name":"BindFloat","docStart":12037,"docEnd":12293,"docs":{"brief":"Binds a parameter in a prepared statement to a given float value.","tags":[{"tag":"","text":"Binds a parameter in a prepared statement to a given float value."},{"tag":"param:param","text":"The parameter index (starting from 0)."},{"tag":"param:value","text":"The float number to bind."},{"tag":"error","text":"Invalid parameter index, or SQL error."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"BindString","docStart":12354,"docEnd":12888,"docs":{"brief":"Binds a parameter in a prepared statement to a given string value.","tags":[{"tag":"","text":"Binds a parameter in a prepared statement to a given string value."},{"tag":"param:param","text":"The parameter index (starting from 0)."},{"tag":"param:value","text":"The string to bind."},{"tag":"param:copy","text":"Whether or not SourceMod should copy the value\nlocally if necessary.  If the string contents\nwon't change before calling SQL_Execute(), this\ncan be set to false for optimization."},{"tag":"error","text":"Invalid parameter index, or SQL error."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"copy","decl":"bool copy","default":null}]}],"properties":[]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Database":{"symbol":{"name":"Database","docStart":14140,"docEnd":14275,"docs":{"brief":"A Database represents a live connection to a database, either over the\nwire, through a unix domain socket, or over an open file.","tags":[{"tag":"","text":"A Database represents a live connection to a database, either over the\nwire, through a unix domain socket, or over an open file."}]},"parent":"Handle","methods":[{"name":"Connect","docStart":14310,"docEnd":14593,"docs":{"brief":"Connects to a database asynchronously, so the game thread is not blocked.","tags":[{"tag":"","text":"Connects to a database asynchronously, so the game thread is not blocked."},{"tag":"param:callback","text":"Callback. If no driver was found, the owner is null."},{"tag":"param:name","text":"Database configuration name."},{"tag":"param:data","text":"Extra data value to pass to the callback."}]},"kind":"native","returnType":"void","arguments":[{"type":"SQLConnectCallback","name":"callback","decl":"SQLConnectCallback callback","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":"\"default\""},{"type":"any","name":"data","decl":"any data","default":"0"}]},{"name":"SetCharset","docStart":14818,"docEnd":15119,"docs":{"brief":"Sets the character set of the connection.\nLike SET NAMES .. in mysql, but stays after connection problems.\n\nExample: \"utf8\", \"latin1\"","tags":[{"tag":"","text":"Sets the character set of the connection.\nLike SET NAMES .. in mysql, but stays after connection problems.\n\nExample: \"utf8\", \"latin1\""},{"tag":"param:charset","text":"The character set string to change to."},{"tag":"return","text":"True, if character set was changed, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"charset","decl":"const char[] charset","default":null}]},{"name":"Escape","docStart":15179,"docEnd":16235,"docs":{"brief":"Escapes a database string for literal insertion.  This is not needed\nfor binding strings in prepared statements.\n\nGenerally, database strings are inserted into queries enclosed in\nsingle quotes (').  If user input has a single quote in it, the\nquote needs to be escaped.  This function ensures that any unsafe\ncharacters are safely escaped according to the database engine and\nthe database's character set.\n\nNOTE: SourceMod only guarantees properly escaped strings when the query\nencloses the string in ''. While drivers tend to allow \" instead, the string\nmay be not be escaped (for example, on SQLite)!","tags":[{"tag":"","text":"Escapes a database string for literal insertion.  This is not needed\nfor binding strings in prepared statements.\n\nGenerally, database strings are inserted into queries enclosed in\nsingle quotes (').  If user input has a single quote in it, the\nquote needs to be escaped.  This function ensures that any unsafe\ncharacters are safely escaped according to the database engine and\nthe database's character set.\n\nNOTE: SourceMod only guarantees properly escaped strings when the query\nencloses the string in ''. While drivers tend to allow \" instead, the string\nmay be not be escaped (for example, on SQLite)!"},{"tag":"param:string","text":"String to quote."},{"tag":"param:buffer","text":"Buffer to store quoted string in."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"param:written","text":"Optionally returns the number of bytes written."},{"tag":"return","text":"True on success, false if buffer is not big enough.\nThe buffer must be at least 2*strlen(string)+1."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"string","decl":"const char[] string","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"}]},{"name":"Format","docStart":16336,"docEnd":16790,"docs":{"brief":"Formats a string according to the SourceMod format rules (see documentation).\nAll format specifiers are escaped (see SQL_EscapeString) unless the '!' flag is used.","tags":[{"tag":"","text":"Formats a string according to the SourceMod format rules (see documentation).\nAll format specifiers are escaped (see SQL_EscapeString) unless the '!' flag is used."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"Number of cells written."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"IsSameConnection","docStart":16889,"docEnd":16962,"docs":{"brief":"Returns whether a database is the same connection as another database.","tags":[{"tag":"","text":"Returns whether a database is the same connection as another database."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Database","name":"other","decl":"Database other","default":null}]},{"name":"Query","docStart":17022,"docEnd":17612,"docs":{"brief":"Executes a query via a thread. The result handle is passed through the\ncallback.\n\nThe database handle returned through the callback is always a new Handle,\nand if necessary, IsSameConnection() should be used to test against other\nconnections.\n\nThe result handle returned through the callback is temporary and destroyed\nat the end of the callback.","tags":[{"tag":"","text":"Executes a query via a thread. The result handle is passed through the\ncallback.\n\nThe database handle returned through the callback is always a new Handle,\nand if necessary, IsSameConnection() should be used to test against other\nconnections.\n\nThe result handle returned through the callback is temporary and destroyed\nat the end of the callback."},{"tag":"param:callback","text":"Callback."},{"tag":"param:query","text":"Query string."},{"tag":"param:data","text":"Extra data value to pass to the callback."},{"tag":"param:prio","text":"Priority queue to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"SQLQueryCallback","name":"callback","decl":"SQLQueryCallback callback","default":null},{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"any","name":"data","decl":"any data","default":"0"},{"type":"DBPriority","name":"prio","decl":"DBPriority prio","default":"DBPrio_Normal"}]},{"name":"Execute","docStart":17793,"docEnd":18296,"docs":{"brief":"Sends a transaction to the database thread. The transaction handle is\nautomatically closed. When the transaction completes, the optional\ncallback is invoked.","tags":[{"tag":"","text":"Sends a transaction to the database thread. The transaction handle is\nautomatically closed. When the transaction completes, the optional\ncallback is invoked."},{"tag":"param:txn","text":"A transaction handle."},{"tag":"param:onSuccess","text":"An optional callback to receive a successful transaction."},{"tag":"param:onError","text":"An optional callback to receive an error message."},{"tag":"param:data","text":"An optional value to pass to callbacks."},{"tag":"param:prio","text":"Priority queue to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"Transaction","name":"txn","decl":"Transaction txn","default":null},{"type":"SQLTxnSuccess","name":"onSuccess","decl":"SQLTxnSuccess onSuccess","default":"INVALID_FUNCTION"},{"type":"SQLTxnFailure","name":"onError","decl":"SQLTxnFailure onError","default":"INVALID_FUNCTION"},{"type":"any","name":"data","decl":"any data","default":"0"},{"type":"DBPriority","name":"priority","decl":"DBPriority priority","default":"DBPrio_Normal"}]}],"properties":[{"name":"Driver","docStart":14705,"docEnd":14756,"docs":{"brief":"Returns the driver for this database connection.","tags":[{"tag":"","text":"Returns the driver for this database connection."}]},"type":"DBDriver","getter":true,"setter":false}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"bb25b03884fdf8e61f0c83c6311046fee95f0cba","count":6606,"time":1596450150}},"Transaction":{"symbol":{"name":"Transaction","docStart":10863,"docEnd":10967,"docs":{"brief":"A Transaction is a collection of SQL statements that must all execute\nsuccessfully or not at all.","tags":[{"tag":"","text":"A Transaction is a collection of SQL statements that must all execute\nsuccessfully or not at all."}]},"parent":"Handle","methods":[{"name":"Transaction","docStart":11005,"docEnd":11033,"docs":{"brief":"Create a new transaction.","tags":[{"tag":"","text":"Create a new transaction."}]},"kind":"native","returnType":"Transaction","arguments":[]},{"name":"AddQuery","docStart":11069,"docEnd":11302,"docs":{"brief":"Adds a query to the transaction.","tags":[{"tag":"","text":"Adds a query to the transaction."},{"tag":"param:query","text":"Query string."},{"tag":"param:data","text":"Extra data value to pass to the final callback."},{"tag":"return","text":"The index of the query in the transaction's query list."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"query","decl":"const char[] query","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]}],"properties":[]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DBResultSet":{"symbol":{"name":"DBResultSet","docStart":3454,"docEnd":3517,"docs":{"brief":"Represents a set of results returned from executing a query.","tags":[{"tag":"","text":"Represents a set of results returned from executing a query."}]},"parent":"Handle","methods":[{"name":"FetchMoreResults","docStart":3555,"docEnd":3942,"docs":{"brief":"Advances to the next set of results.\n\nIn some SQL implementations, multiple result sets can exist on one query.\nThis is possible in MySQL with simple queries when executing a CALL\nquery.  If this is the case, all result sets must be processed before\nanother query is made.","tags":[{"tag":"","text":"Advances to the next set of results.\n\nIn some SQL implementations, multiple result sets can exist on one query.\nThis is possible in MySQL with simple queries when executing a CALL\nquery.  If this is the case, all result sets must be processed before\nanother query is made."},{"tag":"return","text":"True if there was another result set, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"FieldNumToName","docStart":4859,"docEnd":5134,"docs":{"brief":"Retrieves the name of a field by index.","tags":[{"tag":"","text":"Retrieves the name of a field by index."},{"tag":"param:field","text":"Field number (starting from 0)."},{"tag":"param:name","text":"Name buffer."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"error","text":"Invalid field index, or no current result set."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"field","decl":"int field","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"FieldNameToNum","docStart":5215,"docEnd":5484,"docs":{"brief":"Retrieves a field index by name.","tags":[{"tag":"","text":"Retrieves a field index by name."},{"tag":"param:name","text":"Name of the field (case sensitive)."},{"tag":"param:field","text":"Variable to store field index in."},{"tag":"return","text":"True if found, false if not found."},{"tag":"error","text":"No current result set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"int&","name":"field","decl":"int& field","default":null}]},{"name":"FetchRow","docStart":5557,"docEnd":5874,"docs":{"brief":"Fetches a row from the current result set.  This must be\nsuccessfully called before any results are fetched.\n\nIf this function fails, _MoreResults can be used to\ntell if there was an error or the result set is finished.","tags":[{"tag":"","text":"Fetches a row from the current result set.  This must be\nsuccessfully called before any results are fetched.\n\nIf this function fails, _MoreResults can be used to\ntell if there was an error or the result set is finished."},{"tag":"return","text":"True if a row was fetched, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"Rewind","docStart":6083,"docEnd":6245,"docs":{"brief":"Rewinds a result set back to the first result.","tags":[{"tag":"","text":"Rewinds a result set back to the first result."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"No current result set."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"FetchString","docStart":6281,"docEnd":6944,"docs":{"brief":"Fetches a string from a field in the current row of a result set.\nIf the result is NULL, an empty string will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull().","tags":[{"tag":"","text":"Fetches a string from a field in the current row of a result set.\nIf the result is NULL, an empty string will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull()."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum size of the string buffer."},{"tag":"param:result","text":"Optional variable to store the status of the return value."},{"tag":"return","text":"Number of bytes written."},{"tag":"error","text":"Invalid field index, invalid type conversion requested\nfrom the database, or no current result set."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"field","decl":"int field","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"DBResult&","name":"result","decl":"DBResult& result","default":"DBVal_Error"}]},{"name":"FetchFloat","docStart":7053,"docEnd":7604,"docs":{"brief":"Fetches a float from a field in the current row of a result set.\nIf the result is NULL, a value of 0.0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull().","tags":[{"tag":"","text":"Fetches a float from a field in the current row of a result set.\nIf the result is NULL, a value of 0.0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull()."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"param:result","text":"Optional variable to store the status of the return value."},{"tag":"return","text":"A float value."},{"tag":"error","text":"Invalid field index, invalid type conversion requested\nfrom the database, or no current result set."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"field","decl":"int field","default":null},{"type":"DBResult&","name":"result","decl":"DBResult& result","default":"DBVal_Error"}]},{"name":"FetchInt","docStart":7684,"docEnd":8239,"docs":{"brief":"Fetches an integer from a field in the current row of a result set.\nIf the result is NULL, a value of 0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull().","tags":[{"tag":"","text":"Fetches an integer from a field in the current row of a result set.\nIf the result is NULL, a value of 0 will be returned.  A NULL\ncheck can be done with the result parameter, or SQL_IsFieldNull()."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"param:result","text":"Optional variable to store the status of the return value."},{"tag":"return","text":"An integer value."},{"tag":"error","text":"Invalid field index, invalid type conversion requested\nfrom the database, or no current result set."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"field","decl":"int field","default":null},{"type":"DBResult&","name":"result","decl":"DBResult& result","default":"DBVal_Error"}]},{"name":"IsFieldNull","docStart":8315,"docEnd":8651,"docs":{"brief":"Returns whether a field's data in the current row of a result set is\nNULL or not.  NULL is an SQL type which means \"no data.\"","tags":[{"tag":"","text":"Returns whether a field's data in the current row of a result set is\nNULL or not.  NULL is an SQL type which means \"no data.\""},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"return","text":"True if data is NULL, false otherwise."},{"tag":"error","text":"Invalid field index, or no current result set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"field","decl":"int field","default":null}]},{"name":"FetchSize","docStart":8701,"docEnd":9140,"docs":{"brief":"Returns the length of a field's data in the current row of a result\nset.  This only needs to be called for strings to determine how many\nbytes to use.  Note that the return value does not include the null\nterminator.","tags":[{"tag":"","text":"Returns the length of a field's data in the current row of a result\nset.  This only needs to be called for strings to determine how many\nbytes to use.  Note that the return value does not include the null\nterminator."},{"tag":"param:field","text":"The field index (starting from 0)."},{"tag":"return","text":"Number of bytes for the field's data size."},{"tag":"error","text":"Invalid field index or no current result set."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"field","decl":"int field","default":null}]}],"properties":[{"name":"HasResults","docStart":3988,"docEnd":4153,"docs":{"brief":"Returns whether or not a result set exists.  This will\nreturn true even if 0 results were returned, but false\non queries like UPDATE, INSERT, or DELETE.","tags":[{"tag":"","text":"Returns whether or not a result set exists.  This will\nreturn true even if 0 results were returned, but false\non queries like UPDATE, INSERT, or DELETE."}]},"type":"bool","getter":true,"setter":false},{"name":"RowCount","docStart":4215,"docEnd":4399,"docs":{"brief":"Retrieves the number of rows in the last result set.","tags":[{"tag":"","text":"Retrieves the number of rows in the last result set."},{"tag":"param:query","text":"A query (or statement) Handle."},{"tag":"return","text":"Number of rows in the current result set."}]},"type":"int","getter":true,"setter":false},{"name":"FieldCount","docStart":4458,"docEnd":4515,"docs":{"brief":"Retrieves the number of fields in the last result set.","tags":[{"tag":"","text":"Retrieves the number of fields in the last result set."}]},"type":"int","getter":true,"setter":false},{"name":"AffectedRows","docStart":4576,"docEnd":4666,"docs":{"brief":"Returns the number of affected rows from the query that generated this\nresult set.","tags":[{"tag":"","text":"Returns the number of affected rows from the query that generated this\nresult set."}]},"type":"int","getter":true,"setter":false},{"name":"InsertId","docStart":4729,"docEnd":4800,"docs":{"brief":"Returns the insert id from the query that generated this result set.","tags":[{"tag":"","text":"Returns the insert id from the query that generated this result set."}]},"type":"int","getter":true,"setter":false},{"name":"MoreRows","docStart":5912,"docEnd":6023,"docs":{"brief":"Returns if there are more rows.","tags":[{"tag":"","text":"Returns if there are more rows."},{"tag":"return","text":"True if there are more rows, false otherwise."}]},"type":"bool","getter":true,"setter":false}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_dbi_included":{"symbol":{"name":"_dbi_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029}}},"enums":{"DBResult":{"symbol":{"name":"DBResult","docStart":1649,"docEnd":1702,"docs":{"brief":"Describes a database field fetch status.","tags":[{"tag":"","text":"Describes a database field fetch status."}]},"entries":[{"name":"DBVal_Error","docStart":1747,"docEnd":1786,"docs":{"brief":"Column number/field is invalid.","tags":[{"tag":"","text":"Column number/field is invalid."}]},"value":"0"},{"name":"DBVal_TypeMismatch","docStart":1813,"docEnd":1866,"docs":{"brief":"You cannot retrieve this data with this type.","tags":[{"tag":"","text":"You cannot retrieve this data with this type."}]},"value":"1"},{"name":"DBVal_Null","docStart":1893,"docEnd":1925,"docs":{"brief":"Field has no data (NULL)","tags":[{"tag":"","text":"Field has no data (NULL)"}]},"value":"2"},{"name":"DBVal_Data","docStart":1952,"docEnd":1974,"docs":{"brief":"Field has data","tags":[{"tag":"","text":"Field has data"}]},"value":"3"}]},"created":{"hash":"e334e5f7e7b20c78692845c15d3d86dbebfdf7b0","count":869,"time":1180665029},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DBPriority":{"symbol":{"name":"DBPriority","docStart":2195,"docEnd":2233,"docs":{"brief":"Threading priority level.","tags":[{"tag":"","text":"Threading priority level."}]},"entries":[{"name":"DBPrio_High","docStart":2280,"docEnd":2302,"docs":{"brief":"High priority.","tags":[{"tag":"","text":"High priority."}]},"value":"0"},{"name":"DBPrio_Normal","docStart":2329,"docEnd":2353,"docs":{"brief":"Normal priority.","tags":[{"tag":"","text":"Normal priority."}]},"value":"1"},{"name":"DBPrio_Low","docStart":2380,"docEnd":2401,"docs":{"brief":"Low priority.","tags":[{"tag":"","text":"Low priority."}]},"value":"2"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DBBindType":{"symbol":{"name":"DBBindType","docStart":1982,"docEnd":2019,"docs":{"brief":"Describes binding types.","tags":[{"tag":"","text":"Describes binding types."}]},"entries":[{"name":"DBBind_Int","docStart":2066,"docEnd":2090,"docs":{"brief":"Bind an integer.","tags":[{"tag":"","text":"Bind an integer."}]},"value":"0"},{"name":"DBBind_Float","docStart":2117,"docEnd":2138,"docs":{"brief":"Bind a float.","tags":[{"tag":"","text":"Bind a float."}]},"value":"1"},{"name":"DBBind_String","docStart":2165,"docEnd":2187,"docs":{"brief":"Bind a string.","tags":[{"tag":"","text":"Bind a string."}]},"value":"2"}]},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"SQLTxnSuccess":{"symbol":{"name":"SQLTxnSuccess","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":9217,"docEnd":9652,"docs":{"brief":"Callback for a successful transaction.","tags":[{"tag":"","text":"Callback for a successful transaction."},{"tag":"param:db","text":"Database handle."},{"tag":"param:data","text":"Data value passed to SQL_ExecuteTransaction()."},{"tag":"param:numQueries","text":"Number of queries executed in the transaction."},{"tag":"param:results","text":"An array of Query handle results, one for each of numQueries. They are closed automatically."},{"tag":"param:queryData","text":"An array of each data value passed to SQL_AddQuery()."}]},"type":"function void(Database db, any data, int numQueries, Handle[] results, any[] queryData)","parsedSignature":{"returnType":"void","arguments":[{"type":"Database","name":"db","decl":"Database db","default":null},{"type":"any","name":"data","decl":"any data","default":null},{"type":"int","name":"numQueries","decl":"int numQueries","default":null},{"type":"Handle[]","name":"results","decl":"Handle[] results","default":null},{"type":"any[]","name":"queryData","decl":"any[] queryData","default":null}]}},{"docStart":9750,"docEnd":10184,"docs":{"brief":"Callback for a successful transaction.","tags":[{"tag":"","text":"Callback for a successful transaction."},{"tag":"param:db","text":"Database handle."},{"tag":"param:data","text":"Data value passed to SQL_ExecuteTransaction()."},{"tag":"param:numQueries","text":"Number of queries executed in the transaction."},{"tag":"param:results","text":"An array of DBResultSet results, one for each of numQueries. They are closed automatically."},{"tag":"param:queryData","text":"An array of each data value passed to SQL_AddQuery()."}]},"type":"function void(Database db, any data, int numQueries, DBResultSet[] results, any[] queryData)","parsedSignature":{"returnType":"void","arguments":[{"type":"Database","name":"db","decl":"Database db","default":null},{"type":"any","name":"data","decl":"any data","default":null},{"type":"int","name":"numQueries","decl":"int numQueries","default":null},{"type":"DBResultSet[]","name":"results","decl":"DBResultSet[] results","default":null},{"type":"any[]","name":"queryData","decl":"any[] queryData","default":null}]}}]},"created":{"hash":"a4b45aea9b1c9017fb4475c4dba4a64763201c3c","count":5712,"time":1444762259},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"SQLTxnFailure":{"symbol":{"name":"SQLTxnFailure","docStart":10289,"docEnd":10727,"docs":{"brief":"Callback for a failed transaction.","tags":[{"tag":"","text":"Callback for a failed transaction."},{"tag":"param:db","text":"Database handle."},{"tag":"param:data","text":"Data value passed to SQL_ExecuteTransaction()."},{"tag":"param:numQueries","text":"Number of queries executed in the transaction."},{"tag":"param:error","text":"Error message."},{"tag":"param:failIndex","text":"Index of the query that failed, or -1 if something else."},{"tag":"param:queryData","text":"An array of each data value passed to SQL_AddQuery()."}]},"type":"function void(Database db, any data, int numQueries, const char[] error, int failIndex, any[] queryData)","parsedSignature":{"returnType":"void","arguments":[{"type":"Database","name":"db","decl":"Database db","default":null},{"type":"any","name":"data","decl":"any data","default":null},{"type":"int","name":"numQueries","decl":"int numQueries","default":null},{"type":"const char[]","name":"error","decl":"const char[] error","default":null},{"type":"int","name":"failIndex","decl":"int failIndex","default":null},{"type":"any[]","name":"queryData","decl":"any[] queryData","default":null}]}},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SQLConnectCallback":{"symbol":{"name":"SQLConnectCallback","docStart":12971,"docEnd":13418,"docs":{"brief":"Callback for receiving asynchronous database connections.","tags":[{"tag":"","text":"Callback for receiving asynchronous database connections."},{"tag":"param:db","text":"Handle to the database connection."},{"tag":"param:error","text":"Error string if there was an error.  The error could be\nempty even if an error condition exists, so it is important\nto check the actual Handle value instead."},{"tag":"param:data","text":"Data passed in via the original threaded invocation."}]},"type":"function void(Database db, const char[] error, any data)","parsedSignature":{"returnType":"void","arguments":[{"type":"Database","name":"db","decl":"Database db","default":null},{"type":"const char[]","name":"error","decl":"const char[] error","default":null},{"type":"any","name":"data","decl":"any data","default":null}]}},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SQLTxnSuccess":{"symbol":{"name":"SQLTxnSuccess","docStart":9170,"docEnd":9599,"docs":{"brief":"Callback for a successful transaction.","tags":[{"tag":"","text":"Callback for a successful transaction."},{"tag":"param:db","text":"Database handle."},{"tag":"param:data","text":"Data value passed to SQL_ExecuteTransaction()."},{"tag":"param:numQueries","text":"Number of queries executed in the transaction."},{"tag":"param:results","text":"An array of Query handle results, one for each of numQueries. They are closed automatically."},{"tag":"param:queryData","text":"An array of each data value passed to SQL_AddQuery()."}]},"type":"function void(Database db, any data, int numQueries, Handle[] results, any[] queryData)","parsedSignature":{"returnType":"void","arguments":[{"type":"Database","name":"db","decl":"Database db","default":null},{"type":"any","name":"data","decl":"any data","default":null},{"type":"int","name":"numQueries","decl":"int numQueries","default":null},{"type":"Handle[]","name":"results","decl":"Handle[] results","default":null},{"type":"any[]","name":"queryData","decl":"any[] queryData","default":null}]}},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"8627fe1fa85fb157d0b7b3e10c1fa0a77e86054e","count":5702,"time":1443616694}},"SQLTCallback":{"symbol":{"name":"SQLTCallback","docStart":40309,"docEnd":40843,"docs":{"brief":"General callback for threaded SQL stuff.","tags":[{"tag":"","text":"General callback for threaded SQL stuff."},{"tag":"param:owner","text":"Parent object of the Handle (or INVALID_HANDLE if none)."},{"tag":"param:hndl","text":"Handle to the child object (or INVALID_HANDLE if none)."},{"tag":"param:error","text":"Error string if there was an error.  The error could be\nempty even if an error condition exists, so it is important\nto check the actual Handle value instead."},{"tag":"param:data","text":"Data passed in via the original threaded invocation."}]},"type":"function void(Handle owner, Handle hndl, const char[] error, any data)","parsedSignature":{"returnType":"void","arguments":[{"type":"Handle","name":"owner","decl":"Handle owner","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"const char[]","name":"error","decl":"const char[] error","default":null},{"type":"any","name":"data","decl":"any data","default":null}]}},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"c6f751bb67ddc7e10dffc30b88745d9706b34177","count":6460,"time":1572512030}},"SQLQueryCallback":{"symbol":{"name":"SQLQueryCallback","docStart":13511,"docEnd":14028,"docs":{"brief":"Callback for receiving asynchronous database query results.","tags":[{"tag":"","text":"Callback for receiving asynchronous database query results."},{"tag":"param:db","text":"Cloned handle to the database connection."},{"tag":"param:results","text":"Result object, or null on failure."},{"tag":"param:error","text":"Error string if there was an error.  The error could be\nempty even if an error condition exists, so it is important\nto check the actual results value instead."},{"tag":"param:data","text":"Data passed in via the original threaded invocation."}]},"type":"function void(Database db, DBResultSet results, const char[] error, any data)","parsedSignature":{"returnType":"void","arguments":[{"type":"Database","name":"db","decl":"Database db","default":null},{"type":"DBResultSet","name":"results","decl":"DBResultSet results","default":null},{"type":"const char[]","name":"error","decl":"const char[] error","default":null},{"type":"any","name":"data","decl":"any data","default":null}]}},"created":{"hash":"822501b8a1127a3acd72b3a5ec329d02606327c1","count":5154,"time":1420313931},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"string":{"functions":{"StringToInt":{"symbol":{"name":"StringToInt","docStart":7140,"docEnd":7369,"docs":{"brief":"Converts a string to an integer.","tags":[{"tag":"","text":"Converts a string to an integer."},{"tag":"param:str","text":"String to convert."},{"tag":"param:nBase","text":"Numerical base to use.  10 is default."},{"tag":"return","text":"Integer conversion of string, or 0 on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"int","name":"nBase","decl":"int nBase","default":"10"}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsCharSpace":{"symbol":{"name":"IsCharSpace","docStart":13481,"docEnd":13721,"docs":{"brief":"Returns whether a character is whitespace.","tags":[{"tag":"","text":"Returns whether a character is whitespace."},{"tag":"note","text":"Multi-byte characters will always return false."},{"tag":"param:chr","text":"Character to test."},{"tag":"return","text":"True if character is whitespace, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"strlen":{"symbol":{"name":"strlen","docStart":1899,"docEnd":2064,"docs":{"brief":"Calculates the length of a string.","tags":[{"tag":"","text":"Calculates the length of a string."},{"tag":"param:str","text":"String to check."},{"tag":"return","text":"Number of valid character bytes in the string."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TrimString":{"symbol":{"name":"TrimString","docStart":9959,"docEnd":10153,"docs":{"brief":"Removes whitespace characters from the beginning and end of a string.","tags":[{"tag":"","text":"Removes whitespace characters from the beginning and end of a string."},{"tag":"param:str","text":"The string to trim."},{"tag":"return","text":"Number of bytes written (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"str","decl":"char[] str","default":null}]},"created":{"hash":"307181de8d893b6b25c8eee006e910a680a21706","count":831,"time":1179805324},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VFormat":{"symbol":{"name":"VFormat","docStart":6409,"docEnd":7052,"docs":{"brief":"Formats a string according to the SourceMod format rules (see documentation).","tags":[{"tag":"","text":"Formats a string according to the SourceMod format rules (see documentation)."},{"tag":"note","text":"This is the same as Format(), except it grabs parameters from a\nparent parameter stack, rather than a local.  This is useful for\nimplementing your own variable argument functions."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:varpos","text":"Argument number which contains the '...' symbol.\nNote: Arguments start at 1."},{"tag":"return","text":"Number of bytes written."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"int","name":"varpos","decl":"int varpos","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReplaceStringEx":{"symbol":{"name":"ReplaceStringEx","docStart":11492,"docEnd":12407,"docs":{"brief":"Given a string, replaces the first occurrence of a search string with a\nreplacement string.","tags":[{"tag":"","text":"Given a string, replaces the first occurrence of a search string with a\nreplacement string."},{"tag":"param:text","text":"String to perform search and replacements on."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"param:search","text":"String to search for."},{"tag":"param:replace","text":"String to replace the search string with."},{"tag":"param:searchLen","text":"If higher than -1, its value will be used instead of\na strlen() call on the search parameter."},{"tag":"param:replaceLen","text":"If higher than -1, its value will be used instead of\na strlen() call on the replace parameter."},{"tag":"param:caseSensitive","text":"If true (default), search is case sensitive."},{"tag":"return","text":"Index into the buffer (relative to the start) from where\nthe last replacement ended, or -1 if no replacements were\nmade."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"text","decl":"char[] text","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"search","decl":"const char[] search","default":null},{"type":"const char[]","name":"replace","decl":"const char[] replace","default":null},{"type":"int","name":"searchLen","decl":"int searchLen","default":"-1"},{"type":"int","name":"replaceLen","decl":"int replaceLen","default":"-1"},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"0ef893583919ce87146881ca32cca3aa8a594abc","count":834,"time":1179867048},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ExplodeStringLumiStance":{"symbol":{"name":"ExplodeStringLumiStance","docStart":15829,"docEnd":16382,"docs":{"brief":"Breaks a string into pieces and stores each piece into an array of buffers.","tags":[{"tag":"","text":"Breaks a string into pieces and stores each piece into an array of buffers."},{"tag":"param:text","text":"The string to split."},{"tag":"param:split","text":"The string to use as a split delimiter."},{"tag":"param:buffers","text":"An array of string buffers (2D array)."},{"tag":"param:maxStrings","text":"Number of string buffers (first dimension size)."},{"tag":"param:maxStringLength","text":"Maximum length of each string buffer."},{"tag":"param:copyRemainder","text":"False (default) discard excess pieces, true to ignore\ndelimiters after last piece."},{"tag":"return","text":"Number of strings retrieved."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"const char[]","name":"split","decl":"const char[] split","default":null},{"type":"char[][]","name":"buffers","decl":"char[][] buffers","default":null},{"type":"int","name":"maxStrings","decl":"int maxStrings","default":null},{"type":"int","name":"maxStringLength","decl":"int maxStringLength","default":null},{"type":"bool","name":"copyRemainder","decl":"bool copyRemainder","default":"false"}]},"created":{"hash":"f7364111f2cffcdebb643c3f310cd423ff5164a5","count":3365,"time":1311561015},"last_updated":{"hash":"f7364111f2cffcdebb643c3f310cd423ff5164a5","count":3365,"time":1311561015}},"FindCharInString":{"symbol":{"name":"FindCharInString","docStart":15879,"docEnd":16299,"docs":{"brief":"Finds the first occurrence of a character in a string.","tags":[{"tag":"","text":"Finds the first occurrence of a character in a string."},{"tag":"param:str","text":"String."},{"tag":"param:c","text":"Character to search for."},{"tag":"param:reverse","text":"False (default) to search forward, true to search\nbackward."},{"tag":"return","text":"The index of the first occurrence of the character\nin the string, or -1 if the character was not found."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"char","name":"c","decl":"char c","default":null},{"type":"bool","name":"reverse","decl":"bool reverse","default":"false"}]},"created":{"hash":"2a11739e865882c4f1513891e556e169dc6d2e9b","count":2071,"time":1211605355},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FloatToString":{"symbol":{"name":"FloatToString","docStart":8680,"docEnd":8971,"docs":{"brief":"Converts a floating point number to a string.","tags":[{"tag":"","text":"Converts a floating point number to a string."},{"tag":"param:num","text":"Floating point number to convert."},{"tag":"param:str","text":"Buffer to store string in."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of cells written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"float","name":"num","decl":"float num","default":null},{"type":"char[]","name":"str","decl":"char[] str","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StrContains":{"symbol":{"name":"StrContains","docStart":2106,"docEnd":2584,"docs":{"brief":"Tests whether a string is found inside another string.","tags":[{"tag":"","text":"Tests whether a string is found inside another string."},{"tag":"param:str","text":"String to search in."},{"tag":"param:substr","text":"Substring to find inside the original string."},{"tag":"param:caseSensitive","text":"If true (default), search is case sensitive.\nIf false, search is case insensitive."},{"tag":"return","text":"-1 on failure (no match found). Any other value\nindicates a position in the string where the match starts."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"const char[]","name":"substr","decl":"const char[] substr","default":null},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsCharUpper":{"symbol":{"name":"IsCharUpper","docStart":14039,"docEnd":14289,"docs":{"brief":"Returns whether an alphabetic character is uppercase.","tags":[{"tag":"","text":"Returns whether an alphabetic character is uppercase."},{"tag":"note","text":"Multi-byte characters will always return false."},{"tag":"param:chr","text":"Character to test."},{"tag":"return","text":"True if character is uppercase, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ImplodeStrings":{"symbol":{"name":"ImplodeStrings","docStart":18389,"docEnd":18932,"docs":{"brief":"Joins an array of strings into one string, with a \"join\" string inserted in\nbetween each given string.  This function complements ExplodeString.","tags":[{"tag":"","text":"Joins an array of strings into one string, with a \"join\" string inserted in\nbetween each given string.  This function complements ExplodeString."},{"tag":"param:strings","text":"An array of strings."},{"tag":"param:numStrings","text":"Number of strings in the array."},{"tag":"param:join","text":"The join string to insert between each string."},{"tag":"param:buffer","text":"Output buffer to write the joined string to."},{"tag":"param:maxLength","text":"Maximum length of the output buffer."},{"tag":"return","text":"Number of bytes written to the output buffer."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[][]","name":"strings","decl":"const char[][] strings","default":null},{"type":"int","name":"numStrings","decl":"int numStrings","default":null},{"type":"const char[]","name":"join","decl":"const char[] join","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxLength","decl":"int maxLength","default":null}]},"created":{"hash":"5a50d8ca0af99f2aea5af7fc416179c8fe10a4a3","count":835,"time":1179874731},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"strncmp":{"symbol":{"name":"strncmp","docStart":3181,"docEnd":3662,"docs":{"brief":"Compares two strings parts lexographically.","tags":[{"tag":"","text":"Compares two strings parts lexographically."},{"tag":"param:str1","text":"First string (left)."},{"tag":"param:str2","text":"Second string (right)."},{"tag":"param:num","text":"Number of characters to compare."},{"tag":"param:caseSensitive","text":"If true (default), comparison is case sensitive.\nIf false, comparison is case insensitive."},{"tag":"return","text":"-1 if str1 < str2\n0 if str1 == str2\n1 if str1 > str2"}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str1","decl":"const char[] str1","default":null},{"type":"const char[]","name":"str2","decl":"const char[] str2","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"e42773b07dbae2b27356b3324e3b21bbfda4bd78","count":681,"time":1176308690},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StringToIntEx":{"symbol":{"name":"StringToIntEx","docStart":7430,"docEnd":7724,"docs":{"brief":"Converts a string to an integer with some more options.","tags":[{"tag":"","text":"Converts a string to an integer with some more options."},{"tag":"param:str","text":"String to convert."},{"tag":"param:result","text":"Variable to store the result in."},{"tag":"param:nBase","text":"Numerical base to use.  10 is default."},{"tag":"return","text":"Number of characters consumed."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"int&","name":"result","decl":"int& result","default":null},{"type":"int","name":"nBase","decl":"int nBase","default":"10"}]},"created":{"hash":"9a2fbe5f9fc17d4365edad44edf1cd7c7d5b167c","count":1073,"time":1183917635},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"strcmp":{"symbol":{"name":"strcmp","docStart":2677,"docEnd":3094,"docs":{"brief":"Compares two strings lexographically.","tags":[{"tag":"","text":"Compares two strings lexographically."},{"tag":"param:str1","text":"First string (left)."},{"tag":"param:str2","text":"Second string (right)."},{"tag":"param:caseSensitive","text":"If true (default), comparison is case sensitive.\nIf false, comparison is case insensitive."},{"tag":"return","text":"-1 if str1 < str2\n0 if str1 == str2\n1 if str1 > str2"}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str1","decl":"const char[] str1","default":null},{"type":"const char[]","name":"str2","decl":"const char[] str2","default":null},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"e42773b07dbae2b27356b3324e3b21bbfda4bd78","count":681,"time":1176308690},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StringToFloat":{"symbol":{"name":"StringToFloat","docStart":8129,"docEnd":8312,"docs":{"brief":"Converts a string to a floating point number.","tags":[{"tag":"","text":"Converts a string to a floating point number."},{"tag":"param:str","text":"String to convert to a float."},{"tag":"return","text":"Floating point result, or 0.0 on error."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StrCompare":{"symbol":{"name":"StrCompare","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"str1","decl":"const char[] str1","default":null},{"type":"const char[]","name":"str2","decl":"const char[] str2","default":null},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"StrBreak":{"symbol":{"name":"StrBreak","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"source","decl":"const char[] source","default":null},{"type":"char[]","name":"arg","decl":"char[] arg","default":null},{"type":"int","name":"argLen","decl":"int argLen","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"FormatEx":{"symbol":{"name":"FormatEx","docStart":5749,"docEnd":6323,"docs":{"brief":"Formats a string according to the SourceMod format rules (see documentation).","tags":[{"tag":"","text":"Formats a string according to the SourceMod format rules (see documentation)."},{"tag":"note","text":"This is the same as Format(), except none of the input buffers can\noverlap the same memory as the output buffer.  Since this security\ncheck is removed, it is slightly faster."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"Number of cells written."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IntToString":{"symbol":{"name":"IntToString","docStart":7800,"docEnd":8064,"docs":{"brief":"Converts an integer to a string.","tags":[{"tag":"","text":"Converts an integer to a string."},{"tag":"param:num","text":"Integer to convert."},{"tag":"param:str","text":"Buffer to store string in."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of cells written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"num","decl":"int num","default":null},{"type":"char[]","name":"str","decl":"char[] str","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCharBytes":{"symbol":{"name":"GetCharBytes","docStart":12573,"docEnd":12857,"docs":{"brief":"Returns the number of bytes a character is using.  This is\nfor multi-byte characters (UTF-8).  For normal ASCII characters,\nthis will return 1.","tags":[{"tag":"","text":"Returns the number of bytes a character is using.  This is\nfor multi-byte characters (UTF-8).  For normal ASCII characters,\nthis will return 1."},{"tag":"param:source","text":"Source input string."},{"tag":"return","text":"Number of bytes the current character uses."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"source","decl":"const char[] source","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CharToUpper":{"symbol":{"name":"CharToUpper","docStart":15186,"docEnd":15415,"docs":{"brief":"Converts a lowercase character to its uppercase counterpart.","tags":[{"tag":"","text":"Converts a lowercase character to its uppercase counterpart."},{"tag":"param:chr","text":"Character to convert."},{"tag":"return","text":"Uppercase character on success,\nno change on failure."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SplitString":{"symbol":{"name":"SplitString","docStart":10193,"docEnd":10775,"docs":{"brief":"Returns text in a string up until a certain character sequence is reached.","tags":[{"tag":"","text":"Returns text in a string up until a certain character sequence is reached."},{"tag":"param:source","text":"Source input string."},{"tag":"param:split","text":"A string which specifies a search point to break at."},{"tag":"param:part","text":"Buffer to store string part."},{"tag":"param:partLen","text":"Maximum length of the string part buffer."},{"tag":"return","text":"-1 if no match was found; otherwise, an index into source\nmarking the first index after the searched text.  The\nindex is always relative to the start of the input string."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"source","decl":"const char[] source","default":null},{"type":"const char[]","name":"split","decl":"const char[] split","default":null},{"type":"char[]","name":"part","decl":"char[] part","default":null},{"type":"int","name":"partLen","decl":"int partLen","default":null}]},"created":{"hash":"5a50d8ca0af99f2aea5af7fc416179c8fe10a4a3","count":835,"time":1179874731},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReplaceString":{"symbol":{"name":"ReplaceString","docStart":10871,"docEnd":11365,"docs":{"brief":"Given a string, replaces all occurrences of a search string with a\nreplacement string.","tags":[{"tag":"","text":"Given a string, replaces all occurrences of a search string with a\nreplacement string."},{"tag":"param:text","text":"String to perform search and replacements on."},{"tag":"param:maxlength","text":"Maximum length of the string buffer."},{"tag":"param:search","text":"String to search for."},{"tag":"param:replace","text":"String to replace the search string with."},{"tag":"param:caseSensitive","text":"If true (default), search is case sensitive."},{"tag":"return","text":"Number of replacements that were performed."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"text","decl":"char[] text","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"search","decl":"const char[] search","default":null},{"type":"const char[]","name":"replace","decl":"const char[] replace","default":null},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"0ef893583919ce87146881ca32cca3aa8a594abc","count":834,"time":1179867048},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ExplodeString":{"symbol":{"name":"ExplodeString","docStart":17131,"docEnd":17754,"docs":{"brief":"Breaks a string into pieces and stores each piece into an array of buffers.","tags":[{"tag":"","text":"Breaks a string into pieces and stores each piece into an array of buffers."},{"tag":"param:text","text":"The string to split."},{"tag":"param:split","text":"The string to use as a split delimiter."},{"tag":"param:buffers","text":"An array of string buffers (2D array)."},{"tag":"param:maxStrings","text":"Number of string buffers (first dimension size)."},{"tag":"param:maxStringLength","text":"Maximum length of each string buffer."},{"tag":"param:copyRemainder","text":"False (default) discard excess pieces, true to ignore\ndelimiters after last piece."},{"tag":"return","text":"Number of strings retrieved."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"const char[]","name":"split","decl":"const char[] split","default":null},{"type":"char[][]","name":"buffers","decl":"char[][] buffers","default":null},{"type":"int","name":"maxStrings","decl":"int maxStrings","default":null},{"type":"int","name":"maxStringLength","decl":"int maxStringLength","default":null},{"type":"bool","name":"copyRemainder","decl":"bool copyRemainder","default":"false"}]},"created":{"hash":"5a50d8ca0af99f2aea5af7fc416179c8fe10a4a3","count":835,"time":1179874731},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StrCopy":{"symbol":{"name":"StrCopy","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"char[]","name":"dest","decl":"char[] dest","default":null},{"type":"int","name":"destLen","decl":"int destLen","default":null},{"type":"const char[]","name":"source","decl":"const char[] source","default":null}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"IsCharLower":{"symbol":{"name":"IsCharLower","docStart":14328,"docEnd":14578,"docs":{"brief":"Returns whether an alphabetic character is lowercase.","tags":[{"tag":"","text":"Returns whether an alphabetic character is lowercase."},{"tag":"note","text":"Multi-byte characters will always return false."},{"tag":"param:chr","text":"Character to test."},{"tag":"return","text":"True if character is lowercase, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsCharNumeric":{"symbol":{"name":"IsCharNumeric","docStart":13206,"docEnd":13440,"docs":{"brief":"Returns whether a character is numeric.","tags":[{"tag":"","text":"Returns whether a character is numeric."},{"tag":"note","text":"Multi-byte characters will always return false."},{"tag":"param:chr","text":"Character to test."},{"tag":"return","text":"True if character is numeric, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StripQuotes":{"symbol":{"name":"StripQuotes","docStart":14617,"docEnd":15143,"docs":{"brief":"Strips a quote pair off a string if it exists.  That is, the following\nreplace rule is applied once:  ^\"(.*)\"$ -> ^\\1$\n\nNote that the leading and trailing quotes will only be removed if both\nexist.  Otherwise, the string is left unmodified.  This function should\nbe considered O(k) (all characters get shifted down).","tags":[{"tag":"","text":"Strips a quote pair off a string if it exists.  That is, the following\nreplace rule is applied once:  ^\"(.*)\"$ -> ^\\1$\n\nNote that the leading and trailing quotes will only be removed if both\nexist.  Otherwise, the string is left unmodified.  This function should\nbe considered O(k) (all characters get shifted down)."},{"tag":"param:text","text":"String to modify (in place)."},{"tag":"return","text":"True if string was modified, false if there was no\nset of quotes."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"text","decl":"char[] text","default":null}]},"created":{"hash":"d014010a9959e297aee1d7a1b5d584f82ae327c0","count":2005,"time":1208323629},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StringToFloatEx":{"symbol":{"name":"StringToFloatEx","docStart":8363,"docEnd":8614,"docs":{"brief":"Converts a string to a floating point number with some more options.","tags":[{"tag":"","text":"Converts a string to a floating point number with some more options."},{"tag":"param:str","text":"String to convert to a float."},{"tag":"param:result","text":"Variable to store result in."},{"tag":"return","text":"Number of characters consumed."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"float&","name":"result","decl":"float& result","default":null}]},"created":{"hash":"9a2fbe5f9fc17d4365edad44edf1cd7c7d5b167c","count":1073,"time":1183917635},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsCharAlpha":{"symbol":{"name":"IsCharAlpha","docStart":12908,"docEnd":13167,"docs":{"brief":"Returns whether a character is an ASCII alphabet character.","tags":[{"tag":"","text":"Returns whether a character is an ASCII alphabet character."},{"tag":"note","text":"Multi-byte characters will always return false."},{"tag":"param:chr","text":"Character to test."},{"tag":"return","text":"True if character is alphabetical, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BreakString":{"symbol":{"name":"BreakString","docStart":9040,"docEnd":9612,"docs":{"brief":"Finds the first \"argument\" in a string; either a set of space\nterminated characters, or a fully quoted string.  After the\nargument is found, whitespace is read until the next portion\nof the string is reached.  If nothing remains, -1 is returned.\nOtherwise, the index to the first character is returned.","tags":[{"tag":"","text":"Finds the first \"argument\" in a string; either a set of space\nterminated characters, or a fully quoted string.  After the\nargument is found, whitespace is read until the next portion\nof the string is reached.  If nothing remains, -1 is returned.\nOtherwise, the index to the first character is returned."},{"tag":"param:source","text":"Source input string."},{"tag":"param:arg","text":"Stores argument read from string."},{"tag":"param:argLen","text":"Maximum length of argument buffer."},{"tag":"return","text":"Index to next piece of string, or -1 if none."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"source","decl":"const char[] source","default":null},{"type":"char[]","name":"arg","decl":"char[] arg","default":null},{"type":"int","name":"argLen","decl":"int argLen","default":null}]},"created":{"hash":"307181de8d893b6b25c8eee006e910a680a21706","count":831,"time":1179805324},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Format":{"symbol":{"name":"Format","docStart":5298,"docEnd":5665,"docs":{"brief":"Formats a string according to the SourceMod format rules (see documentation).","tags":[{"tag":"","text":"Formats a string according to the SourceMod format rules (see documentation)."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"Number of cells written."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"strcopy":{"symbol":{"name":"strcopy","docStart":4540,"docEnd":4967,"docs":{"brief":"Copies one string to another string.","tags":[{"tag":"","text":"Copies one string to another string."},{"tag":"note","text":"If the destination buffer is too small to hold the source string, the\ndestination will be truncated."},{"tag":"param:dest","text":"Destination string buffer to copy to."},{"tag":"param:destLen","text":"Destination buffer length (includes null terminator)."},{"tag":"param:source","text":"Source string buffer to copy from."},{"tag":"return","text":"Number of cells written."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"dest","decl":"char[] dest","default":null},{"type":"int","name":"destLen","decl":"int destLen","default":null},{"type":"const char[]","name":"source","decl":"const char[] source","default":null}]},"created":{"hash":"4ecb7a985fc36649aa74646b7d4b59fd391bbabb","count":682,"time":1176322040},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StrCat":{"symbol":{"name":"StrCat","docStart":16654,"docEnd":16917,"docs":{"brief":"Concatenates one string onto another.","tags":[{"tag":"","text":"Concatenates one string onto another."},{"tag":"param:buffer","text":"String to append to."},{"tag":"param:maxlength","text":"Maximum length of entire buffer."},{"tag":"param:source","text":"Source string to concatenate."},{"tag":"return","text":"Number of bytes written."}]},"kind":"stock","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"source","decl":"const char[] source","default":null}]},"created":{"hash":"67a0cdf1c306952a28a25216cd0afde8d658bb13","count":750,"time":1178494545},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StrEqual":{"symbol":{"name":"StrEqual","docStart":4048,"docEnd":4395,"docs":{"brief":"Returns whether two strings are equal.","tags":[{"tag":"","text":"Returns whether two strings are equal."},{"tag":"param:str1","text":"First string (left)."},{"tag":"param:str2","text":"Second string (right)."},{"tag":"param:caseSensitive","text":"If true (default), comparison is case sensitive.\nIf false, comparison is case insensitive."},{"tag":"return","text":"True if equal, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"str1","decl":"const char[] str1","default":null},{"type":"const char[]","name":"str2","decl":"const char[] str2","default":null},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive","default":"true"}]},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsCharMB":{"symbol":{"name":"IsCharMB","docStart":13760,"docEnd":14004,"docs":{"brief":"Returns if a character is multi-byte or not.","tags":[{"tag":"","text":"Returns if a character is multi-byte or not."},{"tag":"param:chr","text":"Character to test."},{"tag":"return","text":"0 for a normal 7-bit ASCII character,\notherwise number of bytes in multi-byte character."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CharToLower":{"symbol":{"name":"CharToLower","docStart":15532,"docEnd":15762,"docs":{"brief":"Converts an uppercase character to its lowercase counterpart.","tags":[{"tag":"","text":"Converts an uppercase character to its lowercase counterpart."},{"tag":"param:chr","text":"Character to convert."},{"tag":"return","text":"Lowercase character on success,\nno change on failure."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"eb5b94ec4449fd7428d97b083b629c7c35cc4c30","count":749,"time":1178493174},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_string_included":{"symbol":{"name":"_string_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397},"last_updated":{"hash":"388c062c96c59c40b0a3eef45e32754b6d46acb1","count":234,"time":1167463397}}},"enums":{},"typesets":{},"typedefs":{}},"console":{"functions":{"GetCmdReplySource":{"symbol":{"name":"GetCmdReplySource","docStart":11535,"docEnd":11642,"docs":{"brief":"Returns the current reply source of a command.","tags":[{"tag":"","text":"Returns the current reply source of a command."},{"tag":"return","text":"ReplySource value."}]},"kind":"native","returnType":"ReplySource","arguments":[]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCmdArgs":{"symbol":{"name":"GetCmdArgs","docStart":18201,"docEnd":18442,"docs":{"brief":"Returns the number of arguments from the current console or server command.","tags":[{"tag":"","text":"Returns the number of arguments from the current console or server command."},{"tag":"note","text":"Unlike the HL2 engine call, this does not include the command itself."},{"tag":"return","text":"Number of arguments to the current command."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ShowActivityEx":{"symbol":{"name":"ShowActivityEx","docStart":13525,"docEnd":13898,"docs":{"brief":"Same as ShowActivity(), except the tag parameter is used instead of\n\"[SM] \" (note that you must supply any spacing).","tags":[{"tag":"","text":"Same as ShowActivity(), except the tag parameter is used instead of\n\"[SM] \" (note that you must supply any spacing)."},{"tag":"param:client","text":"Client index doing the action, or 0 for server."},{"tag":"param:tag","text":"Tag to display with."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"tag","decl":"const char[] tag","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCommandIterator":{"symbol":{"name":"GetCommandIterator","docStart":21784,"docEnd":21909,"docs":{"brief":"Gets a command iterator.  Must be freed with CloseHandle().","tags":[{"tag":"","text":"Gets a command iterator.  Must be freed with CloseHandle()."},{"tag":"return","text":"A new command iterator."}]},"kind":"native","returnType":"Handle","arguments":[]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"GetConVarBool":{"symbol":{"name":"GetConVarBool","docStart":4829,"docEnd":5051,"docs":{"brief":"Returns the boolean value of a console variable.","tags":[{"tag":"","text":"Returns the boolean value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The boolean value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"ShowActivity":{"symbol":{"name":"ShowActivity","docStart":12883,"docEnd":13452,"docs":{"brief":"Displays usage of an admin command to users depending on the\nsetting of the sm_show_activity cvar.\n\nThis version does not display a message to the originating client\nif used from chat triggers or menus.  If manual replies are used\nfor these cases, then this function will suffice.  Otherwise,\nShowActivity2() is slightly more useful.","tags":[{"tag":"","text":"Displays usage of an admin command to users depending on the\nsetting of the sm_show_activity cvar.\n\nThis version does not display a message to the originating client\nif used from chat triggers or menus.  If manual replies are used\nfor these cases, then this function will suffice.  Otherwise,\nShowActivity2() is slightly more useful."},{"tag":"param:client","text":"Client index doing the action, or 0 for server."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarFloat":{"symbol":{"name":"SetConVarFloat","docStart":6186,"docEnd":6419,"docs":{"brief":"Sets the floating point value of a console variable.","tags":[{"tag":"","text":"Sets the floating point value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New floating point value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"OnClientSayCommand":{"symbol":{"name":"OnClientSayCommand","docStart":31148,"docEnd":31533,"docs":{"brief":"Global listener for the chat commands.","tags":[{"tag":"","text":"Global listener for the chat commands."},{"tag":"param:client","text":"Client index."},{"tag":"param:command","text":"Command name."},{"tag":"param:sArgs","text":"Chat argument string."},{"tag":"return","text":"An Action value. Returning Plugin_Handled bypasses the game function call.\nReturning Plugin_Stop bypasses the post hook as well as the game function."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"const char[]","name":"sArgs","decl":"const char[] sArgs","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"GetCmdArgIntEx":{"symbol":{"name":"GetCmdArgIntEx","docStart":19417,"docEnd":19797,"docs":{"brief":"Retrieves a numeric command argument given its index, from the current\nconsole or server command. Returns false if the argument can not be\ncompletely parsed as an integer.","tags":[{"tag":"","text":"Retrieves a numeric command argument given its index, from the current\nconsole or server command. Returns false if the argument can not be\ncompletely parsed as an integer."},{"tag":"param:argnum","text":"Argument number to retrieve."},{"tag":"param:value","text":"Populated with the value of the command argument."},{"tag":"return","text":"Whether the argument was entirely a numeric value."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"argnum","decl":"int argnum","default":null},{"type":"int&","name":"value","decl":"int& value","default":null}]},"created":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"OnClientSayCommand_Post":{"symbol":{"name":"OnClientSayCommand_Post","docStart":31627,"docEnd":31812,"docs":{"brief":"Global post listener for the chat commands.","tags":[{"tag":"","text":"Global post listener for the chat commands."},{"tag":"param:client","text":"Client index."},{"tag":"param:command","text":"Command name."},{"tag":"param:sArgs","text":"Chat argument string."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"const char[]","name":"sArgs","decl":"const char[] sArgs","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"ServerCommandEx":{"symbol":{"name":"ServerCommandEx","docStart":6833,"docEnd":7422,"docs":{"brief":"Executes a server command as if it were on the server console (or RCON)\nand stores the printed text into buffer.\n\nWarning: This calls ServerExecute internally and may have issues if\ncertain commands are in the buffer, only use when you really need\nthe response.\nAlso, on L4D2 this will not print the command output to the server console.","tags":[{"tag":"","text":"Executes a server command as if it were on the server console (or RCON)\nand stores the printed text into buffer.\n\nWarning: This calls ServerExecute internally and may have issues if\ncertain commands are in the buffer, only use when you really need\nthe response.\nAlso, on L4D2 this will not print the command output to the server console."},{"tag":"param:buffer","text":"String to store command result into."},{"tag":"param:maxlen","text":"Length of buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FakeClientCommand":{"symbol":{"name":"FakeClientCommand","docStart":8334,"docEnd":8979,"docs":{"brief":"Executes a client command on the server without being networked.\n\nFakeClientCommand() overwrites the command tokenization buffer.  This can\ncause undesired effects because future calls to GetCmdArg* will return\ndata from the FakeClientCommand(), not the parent command.  If you are in\na hook where this matters (for example, a \"say\" hook), you should use\nFakeClientCommandEx() instead.","tags":[{"tag":"","text":"Executes a client command on the server without being networked.\n\nFakeClientCommand() overwrites the command tokenization buffer.  This can\ncause undesired effects because future calls to GetCmdArg* will return\ndata from the FakeClientCommand(), not the parent command.  If you are in\na hook where this matters (for example, a \"say\" hook), you should use\nFakeClientCommandEx() instead."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:fmt","text":"Format of the client command."},{"tag":"param:...","text":"Format parameters"},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FormatActivitySource":{"symbol":{"name":"FormatActivitySource","docStart":13991,"docEnd":14847,"docs":{"brief":"Given an originating client and a target client, returns the string\nthat describes the originating client according to the sm_show_activity cvar.\n\nFor example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer.","tags":[{"tag":"","text":"Given an originating client and a target client, returns the string\nthat describes the originating client according to the sm_show_activity cvar.\n\nFor example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer."},{"tag":"param:client","text":"Originating client; may be 0 for server console."},{"tag":"param:target","text":"Targeted client."},{"tag":"param:namebuf","text":"Name buffer."},{"tag":"param:maxlength","text":"Maximum size of the name buffer."},{"tag":"return","text":"True if activity should be shown.  False otherwise.  In either\ncase, the name buffer is filled.  The return value can be used\nto broadcast a \"safe\" name to all players regardless of the\nsm_show_activity filters."},{"tag":"error","text":"Invalid client index or client not connected."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"target","decl":"int target","default":null},{"type":"const char[]","name":"namebuf","decl":"const char[] namebuf","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddServerTag":{"symbol":{"name":"AddServerTag","docStart":27751,"docEnd":28081,"docs":{"brief":"Adds an informational string to the server's public \"tags\".\nThis string should be a short, unique identifier.\n\nNote: Tags are automatically removed when a plugin unloads.\nNote: Currently, this function does nothing because of bugs in the Valve master.","tags":[{"tag":"","text":"Adds an informational string to the server's public \"tags\".\nThis string should be a short, unique identifier.\n\nNote: Tags are automatically removed when a plugin unloads.\nNote: Currently, this function does nothing because of bugs in the Valve master."},{"tag":"param:tag","text":"Tag string to append."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"tag","decl":"const char[] tag","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"GetConVarFloat":{"symbol":{"name":"GetConVarFloat","docStart":5901,"docEnd":6137,"docs":{"brief":"Returns the floating point value of a console variable.","tags":[{"tag":"","text":"Returns the floating point value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The floating point value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"GetCmdArg":{"symbol":{"name":"GetCmdArg","docStart":18472,"docEnd":18885,"docs":{"brief":"Retrieves a command argument given its index, from the current console or\nserver command.","tags":[{"tag":"","text":"Retrieves a command argument given its index, from the current console or\nserver command."},{"tag":"note","text":"Argument indexes start at 1; 0 retrieves the command name."},{"tag":"param:argnum","text":"Argument number to retrieve."},{"tag":"param:buffer","text":"Buffer to use for storing the string."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"Length of string written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"argnum","decl":"int argnum","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReplyToCommand":{"symbol":{"name":"ReplyToCommand","docStart":11001,"docEnd":11460,"docs":{"brief":"Replies to a message in a command.\n\nA client index of 0 will use PrintToServer().\nIf the command was from the console, PrintToConsole() is used.\nIf the command was from chat, PrintToChat() is used.","tags":[{"tag":"","text":"Replies to a message in a command.\n\nA client index of 0 will use PrintToServer().\nIf the command was from the console, PrintToConsole() is used.\nIf the command was from chat, PrintToChat() is used."},{"tag":"param:client","text":"Client index, or 0 for server."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected or invalid."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ClientCommand":{"symbol":{"name":"ClientCommand","docStart":7904,"docEnd":8263,"docs":{"brief":"Executes a client command.  Note that this will not work on clients unless\nthey have cl_restrict_server_commands set to 0.","tags":[{"tag":"","text":"Executes a client command.  Note that this will not work on clients unless\nthey have cl_restrict_server_commands set to 0."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:fmt","text":"Format of the client command."},{"tag":"param:...","text":"Format parameters"},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FakeClientCommandKeyValues":{"symbol":{"name":"FakeClientCommandKeyValues","docStart":9578,"docEnd":9893,"docs":{"brief":"Executes a KeyValues client command on the server without being networked.","tags":[{"tag":"","text":"Executes a KeyValues client command on the server without being networked."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:kv","text":"KeyValues data to be sent."},{"tag":"error","text":"Invalid client index, client not connected,\nor unsupported on current game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"KeyValues","name":"kv","decl":"KeyValues kv","default":null}]},"created":{"hash":"c85cc5cbf722397b26960e459e2ae1bc9f8a5e56","count":5516,"time":1436721286},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CheckCommandAccess":{"symbol":{"name":"CheckCommandAccess","docStart":22642,"docEnd":23573,"docs":{"brief":"Returns whether a client has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom\nflags using the override system.","tags":[{"tag":"","text":"Returns whether a client has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom\nflags using the override system."},{"tag":"param:client","text":"Client index."},{"tag":"param:command","text":"Command name.  If the command is not found, the default\nflags are used."},{"tag":"param:flags","text":"Flag string to use as a default, if the command or override\nis not found."},{"tag":"param:override_only","text":"If true, SourceMod will not attempt to find a matching\ncommand, and it will only use the default flags specified.\nOtherwise, SourceMod will ignore the default flags if\nthere is a matching admin command."},{"tag":"return","text":"True if the client has access, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"bool","name":"override_only","decl":"bool override_only","default":"false"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"SetConVarInt":{"symbol":{"name":"SetConVarInt","docStart":5634,"docEnd":5853,"docs":{"brief":"Sets the integer value of a console variable.","tags":[{"tag":"","text":"Sets the integer value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New integer value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"RegAdminCmd":{"symbol":{"name":"RegAdminCmd","docStart":17126,"docEnd":18020,"docs":{"brief":"Creates a console command as an administrative command.  If the command does not exist,\nit is created.  When this command is invoked, the access rights of the player are\nautomatically checked before allowing it to continue.\n\nAdmin commands are case sensitive from both the client and server.","tags":[{"tag":"","text":"Creates a console command as an administrative command.  If the command does not exist,\nit is created.  When this command is invoked, the access rights of the player are\nautomatically checked before allowing it to continue.\n\nAdmin commands are case sensitive from both the client and server."},{"tag":"param:cmd","text":"String containing command to register."},{"tag":"param:callback","text":"A function to use as a callback for when the command is invoked."},{"tag":"param:adminflags","text":"Administrative flags (bitstring) to use for permissions."},{"tag":"param:description","text":"Optional description to use for help."},{"tag":"param:group","text":"String containing the command group to use.  If empty,\nthe plugin's filename will be used instead."},{"tag":"param:flags","text":"Optional console flags."},{"tag":"error","text":"Command name is the same as an existing convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd","default":null},{"type":"ConCmd","name":"callback","decl":"ConCmd callback","default":null},{"type":"int","name":"adminflags","decl":"int adminflags","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":"\"\""},{"type":"const char[]","name":"group","decl":"const char[] group","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CheckAccess":{"symbol":{"name":"CheckAccess","docStart":23715,"docEnd":24652,"docs":{"brief":"Returns whether an admin has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom flags\nusing the override system.","tags":[{"tag":"","text":"Returns whether an admin has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom flags\nusing the override system."},{"tag":"param:id","text":"AdminId of the admin."},{"tag":"param:command","text":"Command name.  If the command is not found, the default\nflags are used."},{"tag":"param:flags","text":"Flag string to use as a default, if the command or override\nis not found."},{"tag":"param:override_only","text":"If true, SourceMod will not attempt to find a matching\ncommand, and it will only use the default flags specified.\nOtherwise, SourceMod will ignore the default flags if\nthere is a matching admin command."},{"tag":"return","text":"True if the admin has access, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"bool","name":"override_only","decl":"bool override_only","default":"false"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"FindConVar":{"symbol":{"name":"FindConVar","docStart":4589,"docEnd":4777,"docs":{"brief":"Searches for a console variable.","tags":[{"tag":"","text":"Searches for a console variable."},{"tag":"param:name","text":"Name of convar to find."},{"tag":"return","text":"A handle to the convar if it is found. INVALID_HANDLE otherwise."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"PrintToServer":{"symbol":{"name":"PrintToServer","docStart":9964,"docEnd":10125,"docs":{"brief":"Sends a message to the server console.","tags":[{"tag":"","text":"Sends a message to the server console."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindNextConCommand":{"symbol":{"name":"FindNextConCommand","docStart":26723,"docEnd":27595,"docs":{"brief":"Reads the next entry in a ConCommandBase iterator.","tags":[{"tag":"","text":"Reads the next entry in a ConCommandBase iterator."},{"tag":"param:search","text":"ConCmdIter Handle to search."},{"tag":"param:buffer","text":"Buffer to store entry name."},{"tag":"param:max_size","text":"Maximum size of the buffer."},{"tag":"param:isCommand","text":"Variable to store whether the entry is a command.\nIf it is not a command, it is a ConVar."},{"tag":"param:flags","text":"Variable to store entry flags."},{"tag":"param:description","text":"Buffer to store the description, empty if no description present."},{"tag":"param:descrmax_size","text":"Maximum size of the description buffer."},{"tag":"return","text":"On success, the outputs are filled, the iterator is\nadvanced to the next entry, and true is returned.\nIf no more entries exist, false is returned, and the\ncontents of outputs is undefined."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"search","decl":"Handle search","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"bool&","name":"isCommand","decl":"bool& isCommand","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":"0"},{"type":"char[]","name":"description","decl":"char[] description","default":"\"\""},{"type":"int","name":"descrmax_size","decl":"int descrmax_size","default":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"SetConVarFlags":{"symbol":{"name":"SetConVarFlags","docStart":7430,"docEnd":7687,"docs":{"brief":"Sets the bitstring of flags on a console variable.","tags":[{"tag":"","text":"Sets the bitstring of flags on a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:flags","text":"A bitstring containing the FCVAR_* flags to enable."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"PrintToConsole":{"symbol":{"name":"PrintToConsole","docStart":10187,"docEnd":10468,"docs":{"brief":"Sends a message to a client's console.","tags":[{"tag":"","text":"Sends a message to a client's console."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCmdArgString":{"symbol":{"name":"GetCmdArgString","docStart":19987,"docEnd":20288,"docs":{"brief":"Retrieves the entire command argument string in one lump from the current\nconsole or server command.","tags":[{"tag":"","text":"Retrieves the entire command argument string in one lump from the current\nconsole or server command."},{"tag":"param:buffer","text":"Buffer to use for storing the string."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"Length of string written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"GetConVarMax":{"symbol":{"name":"GetConVarMax","docStart":8162,"docEnd":8529,"docs":{"brief":"Retrieves the maximum floating point value that a console variable can contain.","tags":[{"tag":"","text":"Retrieves the maximum floating point value that a console variable can contain."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:min","text":"By-reference cell to store the maximum floating point value."},{"tag":"return","text":"True if the convar has a maximum value set, false otherwise."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"float&","name":"max","decl":"float& max","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"SetConVarString":{"symbol":{"name":"SetConVarString","docStart":6851,"docEnd":7068,"docs":{"brief":"Sets the string value of a console variable.","tags":[{"tag":"","text":"Sets the string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New string value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"RemoveCommandListener":{"symbol":{"name":"RemoveCommandListener","docStart":30450,"docEnd":30770,"docs":{"brief":"Removes a previously added command listener, in reverse order of being added.","tags":[{"tag":"","text":"Removes a previously added command listener, in reverse order of being added."},{"tag":"param:callback","text":"Callback."},{"tag":"param:command","text":"Command, or if not specified, a global listener.\nThe command is case insensitive."},{"tag":"error","text":"Callback has no active listeners."}]},"kind":"native","returnType":"void","arguments":[{"type":"CommandListener","name":"callback","decl":"CommandListener callback","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":"\"\""}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"AddCommandListener":{"symbol":{"name":"AddCommandListener","docStart":29584,"docEnd":30362,"docs":{"brief":"Adds a callback that will fire when a command is sent to the server.\n\nRegistering commands is designed to create a new command as part of the UI,\nwhereas this is a lightweight hook on a command string, existing or not.\nUsing Reg*Cmd to intercept is in poor practice, as it physically creates a\nnew command and can slow down dispatch in general.\n\nTo see if this feature is available, use FeatureType_Capability and\nFEATURECAP_COMMANDLISTENER.","tags":[{"tag":"","text":"Adds a callback that will fire when a command is sent to the server.\n\nRegistering commands is designed to create a new command as part of the UI,\nwhereas this is a lightweight hook on a command string, existing or not.\nUsing Reg*Cmd to intercept is in poor practice, as it physically creates a\nnew command and can slow down dispatch in general.\n\nTo see if this feature is available, use FeatureType_Capability and\nFEATURECAP_COMMANDLISTENER."},{"tag":"param:callback","text":"Callback."},{"tag":"param:command","text":"Command, or if not specified, a global listener.\nThe command is case insensitive."},{"tag":"return","text":"True if this feature is available on the current game,\nfalse otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"CommandListener","name":"callback","decl":"CommandListener callback","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":"\"\""}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"GetConVarFlags":{"symbol":{"name":"GetConVarFlags","docStart":7134,"docEnd":7387,"docs":{"brief":"Returns the bitstring of flags on a console variable.","tags":[{"tag":"","text":"Returns the bitstring of flags on a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"A bitstring containing the FCVAR_* flags that are enabled."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"ResetConVar":{"symbol":{"name":"ResetConVar","docStart":8587,"docEnd":8766,"docs":{"brief":"Resets the console variable to its default value.","tags":[{"tag":"","text":"Resets the console variable to its default value."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"IsChatTrigger":{"symbol":{"name":"IsChatTrigger","docStart":12029,"docEnd":12238,"docs":{"brief":"Returns whether the current say hook is a chat trigger.\n\nThis function is only meaningful inside say or say_team hooks.","tags":[{"tag":"","text":"Returns whether the current say hook is a chat trigger.\n\nThis function is only meaningful inside say or say_team hooks."},{"tag":"return","text":"True if a chat trigger, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReadCommandIterator":{"symbol":{"name":"ReadCommandIterator","docStart":21950,"docEnd":22469,"docs":{"brief":"Reads a command iterator, then advances to the next command if any.\nOnly SourceMod specific commands are returned.","tags":[{"tag":"","text":"Reads a command iterator, then advances to the next command if any.\nOnly SourceMod specific commands are returned."},{"tag":"param:iter","text":"Command iterator Handle."},{"tag":"param:name","text":"Name buffer."},{"tag":"param:nameLen","text":"Name buffer size."},{"tag":"param:eflags","text":"Effective default flags of a command."},{"tag":"param:desc","text":"Command description buffer."},{"tag":"param:descLen","text":"Command description buffer size."},{"tag":"return","text":"True on success, false if there are no more commands."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"iter","decl":"Handle iter","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"nameLen","decl":"int nameLen","default":null},{"type":"int&","name":"eflags","decl":"int& eflags","default":"0"},{"type":"char[]","name":"desc","decl":"char[] desc","default":"\"\""},{"type":"int","name":"descLen","decl":"int descLen","default":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"PrintToConsoleAll":{"symbol":{"name":"PrintToConsoleAll","docStart":10545,"docEnd":10710,"docs":{"brief":"Sends a message to every client's console.","tags":[{"tag":"","text":"Sends a message to every client's console."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"a36dafb9068f5bd73b56b6947b207dd86146da5a","count":6078,"time":1492514987},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CommandExists":{"symbol":{"name":"CommandExists","docStart":30861,"docEnd":31032,"docs":{"brief":"Returns true if the supplied command exists.","tags":[{"tag":"","text":"Returns true if the supplied command exists."},{"tag":"param:command","text":"Command to find."},{"tag":"return","text":"True if command is found, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"command","decl":"const char[] command","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"CreateConVar":{"symbol":{"name":"CreateConVar","docStart":3538,"docEnd":4401,"docs":{"brief":"Creates a new console variable.","tags":[{"tag":"","text":"Creates a new console variable."},{"tag":"param:name","text":"Name of new convar."},{"tag":"param:defaultValue","text":"String containing the default value of new convar."},{"tag":"param:helpText","text":"Optional description of the convar."},{"tag":"param:flags","text":"Optional bitstream of flags determining how the convar should be handled. (See FCVAR_* constants for more details)"},{"tag":"param:hasMin","text":"Optional boolean that determines if the convar has a minimum value."},{"tag":"param:min","text":"Minimum floating point value that the convar can have if hasMin is true."},{"tag":"param:hasMax","text":"Optional boolean that determines if the convar has a maximum value."},{"tag":"param:max","text":"Maximum floating point value that the convar can have if hasMax is true."},{"tag":"return","text":"A handle to the newly created convar. If the convar already exists, INVALID_HANDLE is returned."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"defaultValue","decl":"const char[] defaultValue","default":null},{"type":"const char[]","name":"helpText","decl":"const char[] helpText","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"bool","name":"hasMin","decl":"bool hasMin","default":"false"},{"type":"float","name":"min","decl":"float min","default":"0.000000"},{"type":"bool","name":"hasMax","decl":"bool hasMax","default":"false"},{"type":"float","name":"max","decl":"float max","default":"0.000000"}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"GetCmdArgInt":{"symbol":{"name":"GetCmdArgInt","docStart":18954,"docEnd":19279,"docs":{"brief":"Retrieves a numeric command argument given its index, from the current\nconsole or server command. Will return 0 if the argument can not be\nparsed as a number. Use GetCmdArgIntEx to handle that explicitly.","tags":[{"tag":"","text":"Retrieves a numeric command argument given its index, from the current\nconsole or server command. Will return 0 if the argument can not be\nparsed as a number. Use GetCmdArgIntEx to handle that explicitly."},{"tag":"param:argnum","text":"Argument number to retrieve."},{"tag":"return","text":"Value of the command argument."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"argnum","decl":"int argnum","default":null}]},"created":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"FindFirstConCommand":{"symbol":{"name":"FindFirstConCommand","docStart":25404,"docEnd":26579,"docs":{"brief":"Starts a ConCommandBase search, traversing the list of ConVars and\nConCommands.  If a Handle is returned, the next entry must be read\nvia FindNextConCommand().  The order of the list is undefined.","tags":[{"tag":"","text":"Starts a ConCommandBase search, traversing the list of ConVars and\nConCommands.  If a Handle is returned, the next entry must be read\nvia FindNextConCommand().  The order of the list is undefined."},{"tag":"param:buffer","text":"Buffer to store entry name."},{"tag":"param:max_size","text":"Maximum size of the buffer."},{"tag":"param:isCommand","text":"Variable to store whether the entry is a command.\nIf it is not a command, it is a ConVar."},{"tag":"param:flags","text":"Variable to store entry flags."},{"tag":"param:description","text":"Buffer to store the description, empty if no description present."},{"tag":"param:descrmax_size","text":"Maximum size of the description buffer."},{"tag":"return","text":"On success, a ConCmdIter Handle is returned, which\ncan be read via FindNextConCommand(), and must be\nclosed via CloseHandle().  Additionally, the output\nparameters will be filled with information of the\nfirst ConCommandBase entry.\nOn failure, INVALID_HANDLE is returned, and the\ncontents of outputs is undefined."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"bool&","name":"isCommand","decl":"bool& isCommand","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":"0"},{"type":"char[]","name":"description","decl":"char[] description","default":"\"\""},{"type":"int","name":"descrmax_size","decl":"int descrmax_size","default":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"SetCommandFlags":{"symbol":{"name":"SetCommandFlags","docStart":25100,"docEnd":25340,"docs":{"brief":"Sets the bitstring of flags of a command.","tags":[{"tag":"","text":"Sets the bitstring of flags of a command."},{"tag":"param:name","text":"Name of the command."},{"tag":"param:flags","text":"A bitstring containing the FCVAR_* flags to enable."},{"tag":"return","text":"True on success, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"FakeClientCommandEx":{"symbol":{"name":"FakeClientCommandEx","docStart":9054,"docEnd":9501,"docs":{"brief":"Executes a client command on the server without being networked.  The\nexecution of the client command is delayed by one frame to prevent any\nre-entrancy issues that might surface with FakeClientCommand().","tags":[{"tag":"","text":"Executes a client command on the server without being networked.  The\nexecution of the client command is delayed by one frame to prevent any\nre-entrancy issues that might surface with FakeClientCommand()."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:fmt","text":"Format of the client command."},{"tag":"param:...","text":"Format parameters"},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"InsertServerCommand":{"symbol":{"name":"InsertServerCommand","docStart":7513,"docEnd":7707,"docs":{"brief":"Inserts a server command at the beginning of the server command buffer.","tags":[{"tag":"","text":"Inserts a server command at the beginning of the server command buffer."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarInt":{"symbol":{"name":"GetConVarInt","docStart":5371,"docEnd":5593,"docs":{"brief":"Returns the integer value of a console variable.","tags":[{"tag":"","text":"Returns the integer value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The integer value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"RegServerCmd":{"symbol":{"name":"RegServerCmd","docStart":15282,"docEnd":15788,"docs":{"brief":"Creates a server-only console command, or hooks an already existing one.\n\nServer commands are case sensitive.","tags":[{"tag":"","text":"Creates a server-only console command, or hooks an already existing one.\n\nServer commands are case sensitive."},{"tag":"param:cmd","text":"Name of the command to hook or create."},{"tag":"param:callback","text":"A function to use as a callback for when the command is invoked."},{"tag":"param:description","text":"Optional description to use for command creation."},{"tag":"param:flags","text":"Optional flags to use for command creation."},{"tag":"error","text":"Command name is the same as an existing convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd","default":null},{"type":"SrvCmd","name":"callback","decl":"SrvCmd callback","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetConVarBool":{"symbol":{"name":"SetConVarBool","docStart":5098,"docEnd":5317,"docs":{"brief":"Sets the boolean value of a console variable.","tags":[{"tag":"","text":"Sets the boolean value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New boolean value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"RemoveServerTag":{"symbol":{"name":"RemoveServerTag","docStart":28130,"docEnd":28247,"docs":{"brief":"Removes a tag previously added by the calling plugin.","tags":[{"tag":"","text":"Removes a tag previously added by the calling plugin."},{"tag":"param:tag","text":"Tag string to remove."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"tag","decl":"const char[] tag","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"ServerExecute":{"symbol":{"name":"ServerExecute","docStart":7775,"docEnd":7870,"docs":{"brief":"Executes every command in the server's command buffer, rather than once per frame.","tags":[{"tag":"","text":"Executes every command in the server's command buffer, rather than once per frame."}]},"kind":"native","returnType":"void","arguments":[]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarMin":{"symbol":{"name":"GetConVarMin","docStart":7737,"docEnd":8104,"docs":{"brief":"Retrieves the minimum floating point value that a console variable can contain.","tags":[{"tag":"","text":"Retrieves the minimum floating point value that a console variable can contain."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:min","text":"By-reference cell to store the minimum floating point value."},{"tag":"return","text":"True if the convar has a minimum value set, false otherwise."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"float&","name":"min","decl":"float& min","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"ServerCommand":{"symbol":{"name":"ServerCommand","docStart":6577,"docEnd":6771,"docs":{"brief":"Executes a server command as if it were on the server console (or RCON)","tags":[{"tag":"","text":"Executes a server command as if it were on the server console (or RCON)"},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetCmdReplySource":{"symbol":{"name":"SetCmdReplySource","docStart":11687,"docEnd":11966,"docs":{"brief":"Sets the current reply source of a command.\n\nOnly use this if you know what you are doing.  You should save the old value\nand restore it once you are done.","tags":[{"tag":"","text":"Sets the current reply source of a command.\n\nOnly use this if you know what you are doing.  You should save the old value\nand restore it once you are done."},{"tag":"param:source","text":"New ReplySource value."},{"tag":"return","text":"Old ReplySource value."}]},"kind":"native","returnType":"ReplySource","arguments":[{"type":"ReplySource","name":"source","decl":"ReplySource source","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ShowActivity2":{"symbol":{"name":"ShowActivity2","docStart":12272,"docEnd":12791,"docs":{"brief":"Displays usage of an admin command to users depending on the\nsetting of the sm_show_activity cvar.  All users receive a message\nin their chat text, except for the originating client, who receives\nthe message based on the current ReplySource.","tags":[{"tag":"","text":"Displays usage of an admin command to users depending on the\nsetting of the sm_show_activity cvar.  All users receive a message\nin their chat text, except for the originating client, who receives\nthe message based on the current ReplySource."},{"tag":"param:client","text":"Client index doing the action, or 0 for server."},{"tag":"param:tag","text":"Tag to prepend to the message."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"tag","decl":"const char[] tag","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetConVarString":{"symbol":{"name":"GetConVarString","docStart":6475,"docEnd":6783,"docs":{"brief":"Retrieves the string value of a console variable.","tags":[{"tag":"","text":"Retrieves the string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the value of the convar."},{"tag":"param:maxlen","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"GetCommandFlags":{"symbol":{"name":"GetCommandFlags","docStart":24787,"docEnd":25048,"docs":{"brief":"Returns the bitstring of flags of a command.","tags":[{"tag":"","text":"Returns the bitstring of flags of a command."},{"tag":"param:name","text":"Name of the command."},{"tag":"return","text":"A bitstring containing the FCVAR_* flags that are enabled\nor INVALID_FCVAR_FLAGS if command not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"RegConsoleCmd":{"symbol":{"name":"RegConsoleCmd","docStart":16313,"docEnd":17017,"docs":{"brief":"Creates a console command, or hooks an already existing one.\n\nConsole commands are case sensitive.  However, if the command already exists in the game,\na client may enter the command in any case.  SourceMod corrects for this automatically,\nand you should only hook the \"real\" version of the command.","tags":[{"tag":"","text":"Creates a console command, or hooks an already existing one.\n\nConsole commands are case sensitive.  However, if the command already exists in the game,\na client may enter the command in any case.  SourceMod corrects for this automatically,\nand you should only hook the \"real\" version of the command."},{"tag":"param:cmd","text":"Name of the command to hook or create."},{"tag":"param:callback","text":"A function to use as a callback for when the command is invoked."},{"tag":"param:description","text":"Optional description to use for command creation."},{"tag":"param:flags","text":"Optional flags to use for command creation."},{"tag":"error","text":"Command name is the same as an existing convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd","default":null},{"type":"ConCmd","name":"callback","decl":"ConCmd callback","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"CommandIterator":{"symbol":{"name":"CommandIterator","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"CommandIterator","docStart":20390,"docEnd":20698,"docs":{"brief":"Creates a new CommandIterator. Must be freed with delete or\nCloseHandle().\n\nThe CommandIterator can be used to iterate commands created by\nSourceMod plugins and allows inspection of properties associated\nwith the command.","tags":[{"tag":"","text":"Creates a new CommandIterator. Must be freed with delete or\nCloseHandle().\n\nThe CommandIterator can be used to iterate commands created by\nSourceMod plugins and allows inspection of properties associated\nwith the command."},{"tag":"return","text":"New CommandIterator Handle."}]},"kind":"native","returnType":"CommandIterator","arguments":[]},{"name":"Next","docStart":20738,"docEnd":20904,"docs":{"brief":"Determines if there is a next command. If one is found, the\niterator is advanced to it.","tags":[{"tag":"","text":"Determines if there is a next command. If one is found, the\niterator is advanced to it."},{"tag":"return","text":"true if found and iterator is advanced."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"GetDescription","docStart":20938,"docEnd":21134,"docs":{"brief":"Retrieves the command's description.","tags":[{"tag":"","text":"Retrieves the command's description."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlen","text":"Maximum size of the buffer."},{"tag":"error","text":"Invalid iterator position."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"GetName","docStart":21203,"docEnd":21392,"docs":{"brief":"Retrieves the command's name.","tags":[{"tag":"","text":"Retrieves the command's name."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlen","text":"Maximum size of the buffer."},{"tag":"error","text":"Invalid iterator position."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]}],"properties":[{"name":"Plugin","docStart":21454,"docEnd":21567,"docs":{"brief":"Retrieves the plugin handle of the command's creator","tags":[{"tag":"","text":"Retrieves the plugin handle of the command's creator"},{"tag":"error","text":"Invalid iterator position."}]},"type":"Handle","getter":true,"setter":false},{"name":"Flags","docStart":21627,"docEnd":21726,"docs":{"brief":"Retrieves the command's default flags","tags":[{"tag":"","text":"Retrieves the command's default flags"},{"tag":"error","text":"Invalid iterator position."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"28f1ea82b656a9511de8d1ecdca4547d81677f08","count":6305,"time":1531258771},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}}},"enumstructs":{},"constants":{},"defines":{"INVALID_FCVAR_FLAGS":{"symbol":{"name":"INVALID_FCVAR_FLAGS","docStart":0,"docEnd":0,"docs":null,"value":"(-1)"},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_ARCHIVE":{"symbol":{"name":"FCVAR_ARCHIVE","docStart":3710,"docEnd":3751,"docs":{"brief":"Set to cause it to be saved to vars.rc","tags":[{"tag":"","text":"Set to cause it to be saved to vars.rc"}]},"value":"(1<<7)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_REPLICATED":{"symbol":{"name":"FCVAR_REPLICATED","docStart":4338,"docEnd":4376,"docs":{"brief":"Server setting enforced on clients.","tags":[{"tag":"","text":"Server setting enforced on clients."}]},"value":"(1<<13)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_MATERIAL_SYSTEM":{"symbol":{"name":"FCVAR_MATERIAL_SYSTEM","docStart":3113,"docEnd":3158,"docs":{"brief":"Defined by the material system. (EP1-only)","tags":[{"tag":"","text":"Defined by the material system. (EP1-only)"}]},"value":"(1<<4)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_HIDDEN":{"symbol":{"name":"FCVAR_HIDDEN","docStart":3207,"docEnd":3313,"docs":{"brief":"Hidden. Doesn't appear in find or autocomplete. Like DEVELOPMENTONLY, but can't be compiled out.1 (OB+)","tags":[{"tag":"","text":"Hidden. Doesn't appear in find or autocomplete. Like DEVELOPMENTONLY, but can't be compiled out.1 (OB+)"}]},"value":"(1<<4)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_DATACACHE":{"symbol":{"name":"FCVAR_DATACACHE","docStart":3876,"docEnd":3916,"docs":{"brief":"Defined by the datacache system.","tags":[{"tag":"","text":"Defined by the datacache system."}]},"value":"(1<<19)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_ACCESSIBLE_FROM_THREADS":{"symbol":{"name":"FCVAR_ACCESSIBLE_FROM_THREADS","docStart":5754,"docEnd":5837,"docs":{"brief":"used as a debugging tool necessary to check material system thread convars (OB+)","tags":[{"tag":"","text":"used as a debugging tool necessary to check material system thread convars (OB+)"}]},"value":"(1<<25)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_STUDIORENDER":{"symbol":{"name":"FCVAR_STUDIORENDER","docStart":3558,"docEnd":3601,"docs":{"brief":"Defined by the studiorender system.","tags":[{"tag":"","text":"Defined by the studiorender system."}]},"value":"(1<<15)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_RELEASE":{"symbol":{"name":"FCVAR_RELEASE","docStart":5002,"docEnd":5076,"docs":{"brief":"Cvars tagged with this are the only cvars available to customers (L4D+)","tags":[{"tag":"","text":"Cvars tagged with this are the only cvars available to customers (L4D+)"}]},"value":"(1<<19)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_NEVER_AS_STRING":{"symbol":{"name":"FCVAR_NEVER_AS_STRING","docStart":4257,"docEnd":4289,"docs":{"brief":"Never try to print that cvar.","tags":[{"tag":"","text":"Never try to print that cvar."}]},"value":"(1<<12)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_NOT_CONNECTED":{"symbol":{"name":"FCVAR_NOT_CONNECTED","docStart":5338,"docEnd":5406,"docs":{"brief":"Cvar cannot be changed by a client that is connected to a server.","tags":[{"tag":"","text":"Cvar cannot be changed by a client that is connected to a server."}]},"value":"(1<<22)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_DONTRECORD":{"symbol":{"name":"FCVAR_DONTRECORD","docStart":4777,"docEnd":4821,"docs":{"brief":"Don't record these command in demo files.","tags":[{"tag":"","text":"Don't record these command in demo files."}]},"value":"(1<<17)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_DEMO":{"symbol":{"name":"FCVAR_DEMO","docStart":4682,"docEnd":4728,"docs":{"brief":"Record this cvar when starting a demo file.","tags":[{"tag":"","text":"Record this cvar when starting a demo file."}]},"value":"(1<<16)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_NONE":{"symbol":{"name":"FCVAR_NONE","docStart":2626,"docEnd":2657,"docs":{"brief":"The default, no flags at all","tags":[{"tag":"","text":"The default, no flags at all"}]},"value":"0"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_CHEAT":{"symbol":{"name":"FCVAR_CHEAT","docStart":4425,"docEnd":4490,"docs":{"brief":"Only useable in singleplayer / debug / multiplayer & sv_cheats","tags":[{"tag":"","text":"Only useable in singleplayer / debug / multiplayer & sv_cheats"}]},"value":"(1<<14)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_RELOAD_TEXTURES":{"symbol":{"name":"FCVAR_RELOAD_TEXTURES","docStart":5232,"docEnd":5289,"docs":{"brief":"If this cvar changes, if forces a texture reload (OB+)","tags":[{"tag":"","text":"If this cvar changes, if forces a texture reload (OB+)"}]},"value":"(1<<21)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_VPHYSICS":{"symbol":{"name":"FCVAR_VPHYSICS","docStart":4529,"docEnd":4557,"docs":{"brief":"Defined by vphysics.","tags":[{"tag":"","text":"Defined by vphysics."}]},"value":"(1<<27)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"_console_included":{"symbol":{"name":"_console_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888}},"FCVAR_USERINFO":{"symbol":{"name":"FCVAR_USERINFO","docStart":3882,"docEnd":3918,"docs":{"brief":"Changes the client's info string.","tags":[{"tag":"","text":"Changes the client's info string."}]},"value":"(1<<9)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_ARCHIVE_XBOX":{"symbol":{"name":"FCVAR_ARCHIVE_XBOX","docStart":5572,"docEnd":5614,"docs":{"brief":"Cvar written to config.cfg on the Xbox.","tags":[{"tag":"","text":"Cvar written to config.cfg on the Xbox."}]},"value":"(1<<24)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_GAMEDLL":{"symbol":{"name":"FCVAR_GAMEDLL","docStart":2959,"docEnd":2986,"docs":{"brief":"Defined by the game DLL.","tags":[{"tag":"","text":"Defined by the game DLL."}]},"value":"(1<<2)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_PRINTABLEONLY":{"symbol":{"name":"FCVAR_PRINTABLEONLY","docStart":3967,"docEnd":4061,"docs":{"brief":"This cvar's string cannot contain unprintable characters (e.g., used for player name, etc.)","tags":[{"tag":"","text":"This cvar's string cannot contain unprintable characters (e.g., used for player name, etc.)"}]},"value":"(1<<10)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FEATURECAP_COMMANDLISTENER":{"symbol":{"name":"FEATURECAP_COMMANDLISTENER","docStart":0,"docEnd":0,"docs":null,"value":"\"command listener\""},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_SERVER_CANNOT_QUERY":{"symbol":{"name":"FCVAR_SERVER_CANNOT_QUERY","docStart":6123,"docEnd":6204,"docs":{"brief":"If this is set, then the server is not allowed to query this cvar's value (via","tags":[{"tag":"","text":"If this is set, then the server is not allowed to query this cvar's value (via"}]},"value":"(1<<29)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_ARCHIVE_GAMECONSOLE":{"symbol":{"name":"FCVAR_ARCHIVE_GAMECONSOLE","docStart":5663,"docEnd":5705,"docs":{"brief":"Cvar written to config.cfg on the Xbox.","tags":[{"tag":"","text":"Cvar written to config.cfg on the Xbox."}]},"value":"(1<<24)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_UNLOGGED":{"symbol":{"name":"FCVAR_UNLOGGED","docStart":4110,"docEnd":4208,"docs":{"brief":"If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log","tags":[{"tag":"","text":"If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log"}]},"value":"(1<<11)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_RELOAD_MATERIALS":{"symbol":{"name":"FCVAR_RELOAD_MATERIALS","docStart":5125,"docEnd":5183,"docs":{"brief":"If this cvar changes, it forces a material reload (OB+)","tags":[{"tag":"","text":"If this cvar changes, it forces a material reload (OB+)"}]},"value":"(1<<20)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_CLIENTCMD_CAN_EXECUTE":{"symbol":{"name":"FCVAR_CLIENTCMD_CAN_EXECUTE","docStart":6352,"docEnd":6417,"docs":{"brief":"IVEngineClient::ClientCmd is allowed to execute this command.","tags":[{"tag":"","text":"IVEngineClient::ClientCmd is allowed to execute this command."}]},"value":"(1<<30)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_NOTIFY":{"symbol":{"name":"FCVAR_NOTIFY","docStart":3800,"docEnd":3833,"docs":{"brief":"Notifies players when changed.","tags":[{"tag":"","text":"Notifies players when changed."}]},"value":"(1<<8)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_INPUTSYSTEM":{"symbol":{"name":"FCVAR_INPUTSYSTEM","docStart":4378,"docEnd":4417,"docs":{"brief":"Defined by the inputsystem DLL.","tags":[{"tag":"","text":"Defined by the inputsystem DLL."}]},"value":"(1<<25)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_SS_ADDED":{"symbol":{"name":"FCVAR_SS_ADDED","docStart":4870,"docEnd":4953,"docs":{"brief":"This is one of the \"added\" FCVAR_SS variables for the splitscreen players (L4D+)","tags":[{"tag":"","text":"This is one of the \"added\" FCVAR_SS variables for the splitscreen players (L4D+)"}]},"value":"(1<<18)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_SS":{"symbol":{"name":"FCVAR_SS","docStart":4539,"docEnd":4633,"docs":{"brief":"causes varnameN where N  2 through max splitscreen slots for mod to be autogenerated (L4D+)","tags":[{"tag":"","text":"causes varnameN where N  2 through max splitscreen slots for mod to be autogenerated (L4D+)"}]},"value":"(1<<15)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_NETWORKSYSTEM":{"symbol":{"name":"FCVAR_NETWORKSYSTEM","docStart":4456,"docEnd":4494,"docs":{"brief":"Defined by the network system.","tags":[{"tag":"","text":"Defined by the network system."}]},"value":"(1<<26)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_DEVELOPMENTONLY":{"symbol":{"name":"FCVAR_DEVELOPMENTONLY","docStart":2804,"docEnd":2910,"docs":{"brief":"Hidden in released products. Flag is removed automatically if ALLOW_DEVELOPMENT_CVARS is defined. (OB+)","tags":[{"tag":"","text":"Hidden in released products. Flag is removed automatically if ALLOW_DEVELOPMENT_CVARS is defined. (OB+)"}]},"value":"(1<<1)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_SPONLY":{"symbol":{"name":"FCVAR_SPONLY","docStart":3585,"docEnd":3661,"docs":{"brief":"This cvar cannot be changed by clients connected to a multiplayer server.","tags":[{"tag":"","text":"This cvar cannot be changed by clients connected to a multiplayer server."}]},"value":"(1<<6)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_FILESYSTEM":{"symbol":{"name":"FCVAR_FILESYSTEM","docStart":4029,"docEnd":4064,"docs":{"brief":"Defined by the file system.","tags":[{"tag":"","text":"Defined by the file system."}]},"value":"(1<<21)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_PROTECTED":{"symbol":{"name":"FCVAR_PROTECTED","docStart":3362,"docEnd":3439,"docs":{"brief":"It's a server cvar, but we don't send the data since it's a password, etc.","tags":[{"tag":"","text":"It's a server cvar, but we don't send the data since it's a password, etc."}]},"value":"(1<<5)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_SOUNDSYSTEM":{"symbol":{"name":"FCVAR_SOUNDSYSTEM","docStart":4213,"docEnd":4256,"docs":{"brief":"Defined by the soundsystem library.","tags":[{"tag":"","text":"Defined by the soundsystem library."}]},"value":"(1<<23)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_CLIENTDLL":{"symbol":{"name":"FCVAR_CLIENTDLL","docStart":3035,"docEnd":3064,"docs":{"brief":"Defined by the client DLL.","tags":[{"tag":"","text":"Defined by the client DLL."}]},"value":"(1<<3)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_TOOLSYSTEM":{"symbol":{"name":"FCVAR_TOOLSYSTEM","docStart":3952,"docEnd":3993,"docs":{"brief":"Defined by an IToolSystem library","tags":[{"tag":"","text":"Defined by an IToolSystem library"}]},"value":"(1<<20)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162}},"FCVAR_UNREGISTERED":{"symbol":{"name":"FCVAR_UNREGISTERED","docStart":2706,"docEnd":2755,"docs":{"brief":"If this is set, don't add to linked list, etc.","tags":[{"tag":"","text":"If this is set, don't add to linked list, etc."}]},"value":"(1<<0)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_MATERIAL_SYSTEM_THREAD":{"symbol":{"name":"FCVAR_MATERIAL_SYSTEM_THREAD","docStart":5455,"docEnd":5523,"docs":{"brief":"Indicates this cvar is read from the material system thread (OB+)","tags":[{"tag":"","text":"Indicates this cvar is read from the material system thread (OB+)"}]},"value":"(1<<23)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_SERVER_CAN_EXECUTE":{"symbol":{"name":"FCVAR_SERVER_CAN_EXECUTE","docStart":5886,"docEnd":5949,"docs":{"brief":"the server is allowed to execute this command on clients via","tags":[{"tag":"","text":"the server is allowed to execute this command on clients via"}]},"value":"(1<<28)"},"created":{"hash":"4231adaedf4cbeb59e8952ef489bd291cae7ba58","count":5470,"time":1433387186},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_LAUNCHER":{"symbol":{"name":"FCVAR_LAUNCHER","docStart":2477,"docEnd":2573,"docs":{"brief":"Same value as FCVAR_DEVELOPMENTONLY, which is what most usages of this were intending to use.","tags":[{"tag":"","text":"Same value as FCVAR_DEVELOPMENTONLY, which is what most usages of this were intending to use."}]},"value":"(1<<1)"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FCVAR_PLUGIN":{"symbol":{"name":"FCVAR_PLUGIN","docStart":2210,"docEnd":2277,"docs":{"brief":"Actual value is same as FCVAR_SS_ADDED in Left 4 Dead and later.","tags":[{"tag":"","text":"Actual value is same as FCVAR_SS_ADDED in Left 4 Dead and later."}]},"value":"0"},"created":{"hash":"fdba3e1f66fe8365306a63fab507f82dfc781ba0","count":458,"time":1170970888},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"QueryCookie":{"symbol":{"name":"QueryCookie","docStart":1676,"docEnd":1726,"docs":{"brief":"Console variable query helper values.","tags":[{"tag":"","text":"Console variable query helper values."}]},"entries":[{"name":"QUERYCOOKIE_FAILED","docStart":0,"docEnd":0,"docs":null,"value":"0"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReplySource":{"symbol":{"name":"ReplySource","docStart":1780,"docEnd":1820,"docs":{"brief":"Reply sources for commands.","tags":[{"tag":"","text":"Reply sources for commands."}]},"entries":[{"name":"SM_REPLY_TO_CONSOLE","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"SM_REPLY_TO_CHAT","docStart":0,"docEnd":0,"docs":null,"value":"1"}]},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{"ConCmd":{"symbol":{"name":"ConCmd","docStart":15896,"docEnd":16251,"docs":{"brief":"Called when a generic console command is invoked.","tags":[{"tag":"","text":"Called when a generic console command is invoked."},{"tag":"param:client","text":"Index of the client, or 0 from the server."},{"tag":"param:args","text":"Number of arguments that were in the argument string."},{"tag":"return","text":"An Action value.  Not handling the command\nmeans that Source will report it as \"not found.\""}]},"type":"function Action(int client, int args)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"args","decl":"int args","default":null}]}},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CommandListener":{"symbol":{"name":"CommandListener","docStart":28299,"docEnd":29433,"docs":{"brief":"Callback for command listeners. This is invoked whenever any command\nreaches the server, from the server console itself or a player.\n\nClients may be in the process of connecting when they are executing commands\nIsClientConnected(client) is not guaranteed to return true.  Other functions\nsuch as GetClientIP() may not work at this point either.\n\nReturning Plugin_Handled or Plugin_Stop will prevent the original,\nbaseline code from running.\n\n-- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED --\nEven if returning Plugin_Handled or Plugin_Stop, some callbacks will still\ntrigger. These are:\n* C++ command dispatch hooks from Metamod:Source plugins\n* Reg*Cmd() hooks that did not create new commands.","tags":[{"tag":"","text":"Callback for command listeners. This is invoked whenever any command\nreaches the server, from the server console itself or a player.\n\nClients may be in the process of connecting when they are executing commands\nIsClientConnected(client) is not guaranteed to return true.  Other functions\nsuch as GetClientIP() may not work at this point either.\n\nReturning Plugin_Handled or Plugin_Stop will prevent the original,\nbaseline code from running.\n\n-- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED --\nEven if returning Plugin_Handled or Plugin_Stop, some callbacks will still\ntrigger. These are:\n* C++ command dispatch hooks from Metamod:Source plugins\n* Reg*Cmd() hooks that did not create new commands."},{"tag":"param:client","text":"Client, or 0 for server.\nClient may not be connected or in game."},{"tag":"param:command","text":"Command name, lower case. To get name as typed, use\nGetCmdArg() and specify argument 0."},{"tag":"param:argc","text":"Argument count."},{"tag":"return","text":"Action to take (see extended notes above)."}]},"type":"function Action(int client, const char[] command, int argc)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"int","name":"argc","decl":"int argc","default":null}]}},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"604942f0e7648b921be9939d6b32648ccfc853fe","count":6513,"time":1583356630}},"SrvCmd":{"symbol":{"name":"SrvCmd","docStart":14947,"docEnd":15232,"docs":{"brief":"Called when a server-only command is invoked.","tags":[{"tag":"","text":"Called when a server-only command is invoked."},{"tag":"param:args","text":"Number of arguments that were in the argument string."},{"tag":"return","text":"An Action value.  Not handling the command\nmeans that Source will report it as \"not found.\""}]},"type":"function Action(int args)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"args","decl":"int args","default":null}]}},"created":{"hash":"affff9eeb7c1f4de136d2412fd98b6ce556de890","count":5005,"time":1415574162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"entity_prop_stocks":{"functions":{"SetEntityRenderMode":{"symbol":{"name":"SetEntityRenderMode","docStart":12431,"docEnd":12633,"docs":{"brief":"Sets an entity's render mode.","tags":[{"tag":"","text":"Sets an entity's render mode."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:mode","text":"RenderMode value."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"RenderMode","name":"mode","decl":"RenderMode mode","default":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityMovetype":{"symbol":{"name":"GetEntityMovetype","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"9ac2a2e318662bdcbcc65a617b78fe76a329acaa","count":1821,"time":1198457088},"last_updated":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184}},"SetEntityMovetype":{"symbol":{"name":"SetEntityMovetype","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"any","name":"mt","decl":"any mt","default":null}]},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184}},"GetEntityFlags":{"symbol":{"name":"GetEntityFlags","docStart":9557,"docEnd":9955,"docs":{"brief":"Get an entity's flags.","tags":[{"tag":"","text":"Get an entity's flags."},{"tag":"note","text":"The game's actual flags are internally translated by SM\nto match the entity flags defined above as the actual values\ncan differ per engine."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Entity's flags, see entity flag defines above."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntityGravity":{"symbol":{"name":"SetEntityGravity","docStart":17095,"docEnd":17333,"docs":{"brief":"Sets an entity's gravity.","tags":[{"tag":"","text":"Sets an entity's gravity."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:amount","text":"Gravity to set (default = 1.0, half = 0.5, double = 2.0)."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"float","name":"amount","decl":"float amount","default":null}]},"created":{"hash":"9ac2a2e318662bdcbcc65a617b78fe76a329acaa","count":1821,"time":1198457088},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientButtons":{"symbol":{"name":"GetClientButtons","docStart":18933,"docEnd":19187,"docs":{"brief":"Get's a users current pressed buttons","tags":[{"tag":"","text":"Get's a users current pressed buttons"},{"tag":"param:client","text":"Client index"},{"tag":"return","text":"Bitsum of buttons"},{"tag":"error","text":"Invalid client index, client not in game,\nor lack of mod compliance."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntityHealth":{"symbol":{"name":"SetEntityHealth","docStart":17781,"docEnd":17974,"docs":{"brief":"Sets an entity's health","tags":[{"tag":"","text":"Sets an entity's health"},{"tag":"param:entity","text":"Entity index."},{"tag":"param:amount","text":"Health amount."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"amount","decl":"int amount","default":null}]},"created":{"hash":"9ac2a2e318662bdcbcc65a617b78fe76a329acaa","count":1821,"time":1198457088},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityRenderMode":{"symbol":{"name":"GetEntityRenderMode","docStart":11782,"docEnd":11984,"docs":{"brief":"Gets an entity's render mode.","tags":[{"tag":"","text":"Gets an entity's render mode."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"RenderMode value."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"RenderMode","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntityRenderColor":{"symbol":{"name":"SetEntityRenderColor","docStart":15377,"docEnd":15722,"docs":{"brief":"Sets an entity's color.","tags":[{"tag":"","text":"Sets an entity's color."},{"tag":"param:entity","text":"Entity index"},{"tag":"param:r","text":"Amount of red (0-255)"},{"tag":"param:g","text":"Amount of green (0-255)"},{"tag":"param:b","text":"Amount of blue (0-255)"},{"tag":"param:a","text":"Amount of alpha (0-255)"},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"r","decl":"int r","default":"255"},{"type":"int","name":"g","decl":"int g","default":"255"},{"type":"int","name":"b","decl":"int b","default":"255"},{"type":"int","name":"a","decl":"int a","default":"255"}]},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityRenderFx":{"symbol":{"name":"GetEntityRenderFx","docStart":13069,"docEnd":13267,"docs":{"brief":"Gets an entity's render Fx.","tags":[{"tag":"","text":"Gets an entity's render Fx."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"RenderFx value."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"RenderFx","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntityMoveType":{"symbol":{"name":"SetEntityMoveType","docStart":11138,"docEnd":11345,"docs":{"brief":"Sets an entity's movetype.","tags":[{"tag":"","text":"Sets an entity's movetype."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:mt","text":"Movetype, see enum above."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"MoveType","name":"mt","decl":"MoveType mt","default":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntityRenderFx":{"symbol":{"name":"SetEntityRenderFx","docStart":13704,"docEnd":13902,"docs":{"brief":"Sets an entity's render Fx.","tags":[{"tag":"","text":"Sets an entity's render Fx."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:fx","text":"RenderFx value."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"RenderFx","name":"fx","decl":"RenderFx fx","default":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityMoveType":{"symbol":{"name":"GetEntityMoveType","docStart":10481,"docEnd":10688,"docs":{"brief":"Gets an entity's movetype.","tags":[{"tag":"","text":"Gets an entity's movetype."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Movetype, see enum above."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"MoveType","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityRenderColor":{"symbol":{"name":"GetEntityRenderColor","docStart":14326,"docEnd":14672,"docs":{"brief":"Gets an entity's color.","tags":[{"tag":"","text":"Gets an entity's color."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:r","text":"Amount of red (0-255)"},{"tag":"param:g","text":"Amount of green (0-255)"},{"tag":"param:b","text":"Amount of blue (0-255)"},{"tag":"param:a","text":"Amount of alpha (0-255)"},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int&","name":"r","decl":"int& r","default":null},{"type":"int&","name":"g","decl":"int& g","default":null},{"type":"int&","name":"b","decl":"int& b","default":null},{"type":"int&","name":"a","decl":"int& a","default":null}]},"created":{"hash":"1748a411e1db6fde9bdb47066ac7b39338a04a23","count":5408,"time":1428104310},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityGravity":{"symbol":{"name":"GetEntityGravity","docStart":16459,"docEnd":16661,"docs":{"brief":"Gets an entity's gravity.","tags":[{"tag":"","text":"Gets an entity's gravity."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Entity's m_flGravity value."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"stock","returnType":"float","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"9ac2a2e318662bdcbcc65a617b78fe76a329acaa","count":1821,"time":1198457088},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntityFlags":{"symbol":{"name":"SetEntityFlags","docStart":9999,"docEnd":10423,"docs":{"brief":"Sets an entity's flags.","tags":[{"tag":"","text":"Sets an entity's flags."},{"tag":"note","text":"The entity flags as defined above are internally translated by SM\nto match the current game's expected value for the flags as\nthe actual values can differ per engine."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:flags","text":"Entity flags, see entity flag defines above."},{"tag":"error","text":"Invalid entity index, or lack of mod compliance."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"a5c473980405b875218bae94431b353c2bae4a19","count":3221,"time":1301938649},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{"MOVETYPE_OBSERVER":{"symbol":{"name":"MOVETYPE_OBSERVER","docStart":2343,"docEnd":2402,"docs":{"brief":"Observer movement, depends on player's observer mode","tags":[{"tag":"","text":"Observer movement, depends on player's observer mode"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_FLYGRAVITY":{"symbol":{"name":"MOVETYPE_FLYGRAVITY","docStart":1990,"docEnd":2043,"docs":{"brief":"flies through the air + is affected by gravity","tags":[{"tag":"","text":"flies through the air + is affected by gravity"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_CUSTOM":{"symbol":{"name":"MOVETYPE_CUSTOM","docStart":2424,"docEnd":2476,"docs":{"brief":"Allows the entity to describe its own physics","tags":[{"tag":"","text":"Allows the entity to describe its own physics"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_PUSH":{"symbol":{"name":"MOVETYPE_PUSH","docStart":2123,"docEnd":2162,"docs":{"brief":"no clip to world, push and crush","tags":[{"tag":"","text":"no clip to world, push and crush"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_LADDER":{"symbol":{"name":"MOVETYPE_LADDER","docStart":2267,"docEnd":2319,"docs":{"brief":"Used by players only when going onto a ladder","tags":[{"tag":"","text":"Used by players only when going onto a ladder"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_ISOMETRIC":{"symbol":{"name":"MOVETYPE_ISOMETRIC","docStart":1737,"docEnd":1755,"docs":{"brief":"For players","tags":[{"tag":"","text":"For players"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_WALK":{"symbol":{"name":"MOVETYPE_WALK","docStart":1776,"docEnd":1817,"docs":{"brief":"Player only - moving on the ground","tags":[{"tag":"","text":"Player only - moving on the ground"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_FLY":{"symbol":{"name":"MOVETYPE_FLY","docStart":1916,"docEnd":1964,"docs":{"brief":"No gravity, but still collides with stuff","tags":[{"tag":"","text":"No gravity, but still collides with stuff"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_STEP":{"symbol":{"name":"MOVETYPE_STEP","docStart":1838,"docEnd":1896,"docs":{"brief":"gravity, special edge handling -- monsters use this","tags":[{"tag":"","text":"gravity, special edge handling -- monsters use this"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_NONE":{"symbol":{"name":"MOVETYPE_NONE","docStart":1694,"docEnd":1712,"docs":{"brief":"never moves","tags":[{"tag":"","text":"never moves"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_VPHYSICS":{"symbol":{"name":"MOVETYPE_VPHYSICS","docStart":2067,"docEnd":2102,"docs":{"brief":"uses VPHYSICS for simulation","tags":[{"tag":"","text":"uses VPHYSICS for simulation"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"MOVETYPE_NOCLIP":{"symbol":{"name":"MOVETYPE_NOCLIP","docStart":2184,"docEnd":2245,"docs":{"brief":"No gravity, no collisions, still do velocity/avelocity","tags":[{"tag":"","text":"No gravity, no collisions, still do velocity/avelocity"}]}},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}}},"defines":{"FL_FLY":{"symbol":{"name":"FL_FLY","docStart":7410,"docEnd":7480,"docs":{"brief":"Changes the SV_Movestep() behavior to not need to be on ground","tags":[{"tag":"","text":"Changes the SV_Movestep() behavior to not need to be on ground"}]},"value":"(1 << 10)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_DUCKING":{"symbol":{"name":"FL_DUCKING","docStart":6300,"docEnd":6347,"docs":{"brief":"Player flag -- Player is fully crouched","tags":[{"tag":"","text":"Player flag -- Player is fully crouched"}]},"value":"(1 << 1)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_STATICPROP":{"symbol":{"name":"FL_STATICPROP","docStart":8020,"docEnd":8047,"docs":{"brief":"Eetsa static prop!","tags":[{"tag":"","text":"Eetsa static prop!"}]},"value":"(1 << 18)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_RIGHT":{"symbol":{"name":"IN_RIGHT","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 8)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_MOVERIGHT":{"symbol":{"name":"IN_MOVERIGHT","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 10)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_PARTIALGROUND":{"symbol":{"name":"FL_PARTIALGROUND","docStart":7941,"docEnd":7974,"docs":{"brief":"not all corners are valid","tags":[{"tag":"","text":"not all corners are valid"}]},"value":"(1 << 17)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_ALT2":{"symbol":{"name":"IN_ALT2","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 15)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_INWATER":{"symbol":{"name":"FL_INWATER","docStart":7348,"docEnd":7364,"docs":{"brief":"In water","tags":[{"tag":"","text":"In water"}]},"value":"(1 << 9)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_WEAPON1":{"symbol":{"name":"IN_WEAPON1","docStart":5617,"docEnd":5650,"docs":{"brief":"weapon defines these bits","tags":[{"tag":"","text":"weapon defines these bits"}]},"value":"(1 << 20)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_CANCEL":{"symbol":{"name":"IN_CANCEL","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 6)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_ZOOM":{"symbol":{"name":"IN_ZOOM","docStart":5541,"docEnd":5570,"docs":{"brief":"Zoom key for HUD zoom","tags":[{"tag":"","text":"Zoom key for HUD zoom"}]},"value":"(1 << 19)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_FREEZING":{"symbol":{"name":"FL_FREEZING","docStart":9433,"docEnd":9463,"docs":{"brief":"We're becoming frozen!","tags":[{"tag":"","text":"We're becoming frozen!"}]},"value":"(1 << 31)"},"created":{"hash":"a5c473980405b875218bae94431b353c2bae4a19","count":3221,"time":1301938649},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_FORWARD":{"symbol":{"name":"IN_FORWARD","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 3)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_DONTTOUCH":{"symbol":{"name":"FL_DONTTOUCH","docStart":8372,"docEnd":8485,"docs":{"brief":"Doesn't generate touch functions, generates Untouch() for anything it was touching when this flag was set","tags":[{"tag":"","text":"Doesn't generate touch functions, generates Untouch() for anything it was touching when this flag was set"}]},"value":"(1 << 22)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_GRAPHED":{"symbol":{"name":"FL_GRAPHED","docStart":8093,"docEnd":8169,"docs":{"brief":"worldgraph has this ent listed as something that blocks a connection","tags":[{"tag":"","text":"worldgraph has this ent listed as something that blocks a connection"}]},"value":"(1 << 19)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_ONGROUND":{"symbol":{"name":"FL_ONGROUND","docStart":6223,"docEnd":6254,"docs":{"brief":"At rest / on the ground","tags":[{"tag":"","text":"At rest / on the ground"}]},"value":"(1 << 0)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_ATTACK2":{"symbol":{"name":"IN_ATTACK2","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 11)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_BULLRUSH":{"symbol":{"name":"IN_BULLRUSH","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 22)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_SWIM":{"symbol":{"name":"FL_SWIM","docStart":7526,"docEnd":7616,"docs":{"brief":"Changes the SV_Movestep() behavior to not need to be on ground (but stay in water)","tags":[{"tag":"","text":"Changes the SV_Movestep() behavior to not need to be on ground (but stay in water)"}]},"value":"(1 << 11)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_RELOAD":{"symbol":{"name":"IN_RELOAD","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 13)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_CONVEYOR":{"symbol":{"name":"FL_CONVEYOR","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 12)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136}},"FL_WORLDBRUSH":{"symbol":{"name":"FL_WORLDBRUSH","docStart":8672,"docEnd":8803,"docs":{"brief":"Not moveable/removeable brush entity (really part of the world, but represented as an entity for transparency or something)","tags":[{"tag":"","text":"Not moveable/removeable brush entity (really part of the world, but represented as an entity for transparency or something)"}]},"value":"(1 << 24)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_USE":{"symbol":{"name":"IN_USE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 5)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_BACK":{"symbol":{"name":"IN_BACK","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 4)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"_entity_prop_stocks_included":{"symbol":{"name":"_entity_prop_stocks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814},"last_updated":{"hash":"570dc75512e1f3ac46c33e891ddd9698564c53aa","count":1801,"time":1198011814}},"FL_STEPMOVEMENT":{"symbol":{"name":"FL_STEPMOVEMENT","docStart":8259,"docEnd":8326,"docs":{"brief":"Changes the SV_Movestep() behavior to not do any processing","tags":[{"tag":"","text":"Changes the SV_Movestep() behavior to not do any processing"}]},"value":"(1 << 21)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_ATCONTROLS":{"symbol":{"name":"FL_ATCONTROLS","docStart":6814,"docEnd":6892,"docs":{"brief":"Player can't move, but keeps key inputs for controlling another entity","tags":[{"tag":"","text":"Player can't move, but keeps key inputs for controlling another entity"}]},"value":"(1 << 6)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_BASEVELOCITY":{"symbol":{"name":"FL_BASEVELOCITY","docStart":8531,"docEnd":8626,"docs":{"brief":"Base velocity has been applied this frame (used to convert base velocity into momentum)","tags":[{"tag":"","text":"Base velocity has been applied this frame (used to convert base velocity into momentum)"}]},"value":"(1 << 23)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_ATTACK":{"symbol":{"name":"IN_ATTACK","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 0)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_MOVELEFT":{"symbol":{"name":"IN_MOVELEFT","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 9)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_WATERJUMP":{"symbol":{"name":"FL_WATERJUMP","docStart":6393,"docEnd":6428,"docs":{"brief":"player jumping out of water","tags":[{"tag":"","text":"player jumping out of water"}]},"value":"(1 << 2)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_WEAPON2":{"symbol":{"name":"IN_WEAPON2","docStart":5697,"docEnd":5730,"docs":{"brief":"weapon defines these bits","tags":[{"tag":"","text":"weapon defines these bits"}]},"value":"(1 << 21)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_DISSOLVING":{"symbol":{"name":"FL_DISSOLVING","docStart":9159,"docEnd":9184,"docs":{"brief":"We're dissolving!","tags":[{"tag":"","text":"We're dissolving!"}]},"value":"(1 << 28)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_SCORE":{"symbol":{"name":"IN_SCORE","docStart":5271,"docEnd":5330,"docs":{"brief":"Used by client.dll for when scoreboard is held down","tags":[{"tag":"","text":"Used by client.dll for when scoreboard is held down"}]},"value":"(1 << 16)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_EP2V_UNKNOWN1":{"symbol":{"name":"FL_EP2V_UNKNOWN1","docStart":9509,"docEnd":9524,"docs":{"brief":"Unknown","tags":[{"tag":"","text":"Unknown"}]},"value":"(1 << 31)"},"created":{"hash":"a5c473980405b875218bae94431b353c2bae4a19","count":3221,"time":1301938649},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_GODMODE":{"symbol":{"name":"FL_GODMODE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 14)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136}},"FL_NOTARGET":{"symbol":{"name":"FL_NOTARGET","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 15)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136}},"FL_TRANSRAGDOLL":{"symbol":{"name":"FL_TRANSRAGDOLL","docStart":9230,"docEnd":9291,"docs":{"brief":"In the process of turning into a client side ragdoll.","tags":[{"tag":"","text":"In the process of turning into a client side ragdoll."}]},"value":"(1 << 29)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_WALK":{"symbol":{"name":"IN_WALK","docStart":5463,"docEnd":5494,"docs":{"brief":"Player holding walk key","tags":[{"tag":"","text":"Player holding walk key"}]},"value":"(1 << 18)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_INRAIN":{"symbol":{"name":"FL_INRAIN","docStart":6628,"docEnd":6676,"docs":{"brief":"Indicates the entity is standing in rain","tags":[{"tag":"","text":"Indicates the entity is standing in rain"}]},"value":"(1 << 4)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_KILLME":{"symbol":{"name":"FL_KILLME","docStart":8980,"docEnd":9048,"docs":{"brief":"This entity is marked for death -- will be freed by game DLL","tags":[{"tag":"","text":"This entity is marked for death -- will be freed by game DLL"}]},"value":"(1 << 26)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_LEFT":{"symbol":{"name":"IN_LEFT","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 7)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"FL_FAKECLIENT":{"symbol":{"name":"FL_FAKECLIENT","docStart":7003,"docEnd":7082,"docs":{"brief":"Fake client, simulated server side; don't send network messages to them","tags":[{"tag":"","text":"Fake client, simulated server side; don't send network messages to them"}]},"value":"(1 << 8)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_FROZEN":{"symbol":{"name":"FL_FROZEN","docStart":6722,"docEnd":6768,"docs":{"brief":"Player is frozen for 3rd person camera","tags":[{"tag":"","text":"Player is frozen for 3rd person camera"}]},"value":"(1 << 5)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_JUMP":{"symbol":{"name":"IN_JUMP","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 1)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_SPEED":{"symbol":{"name":"IN_SPEED","docStart":5377,"docEnd":5416,"docs":{"brief":"Player is holding the speed key","tags":[{"tag":"","text":"Player is holding the speed key"}]},"value":"(1 << 17)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_AIMTARGET":{"symbol":{"name":"FL_AIMTARGET","docStart":7838,"docEnd":7895,"docs":{"brief":"set if the crosshair needs to aim onto the entity","tags":[{"tag":"","text":"set if the crosshair needs to aim onto the entity"}]},"value":"(1 << 16)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_OBJECT":{"symbol":{"name":"FL_OBJECT","docStart":8849,"docEnd":8934,"docs":{"brief":"Terrible name. This is an object that NPCs should see. Missiles, for example.","tags":[{"tag":"","text":"Terrible name. This is an object that NPCs should see. Missiles, for example."}]},"value":"(1 << 25)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_ONFIRE":{"symbol":{"name":"FL_ONFIRE","docStart":9094,"docEnd":9113,"docs":{"brief":"You know...","tags":[{"tag":"","text":"You know..."}]},"value":"(1 << 27)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_DUCK":{"symbol":{"name":"IN_DUCK","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 2)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_ALT1":{"symbol":{"name":"IN_ALT1","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 14)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_RUN":{"symbol":{"name":"IN_RUN","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 12)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809}},"IN_GRENADE1":{"symbol":{"name":"IN_GRENADE1","docStart":5821,"docEnd":5838,"docs":{"brief":"grenade 1","tags":[{"tag":"","text":"grenade 1"}]},"value":"(1 << 23)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_GRENADE":{"symbol":{"name":"FL_GRENADE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 20)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136}},"IN_GRENADE2":{"symbol":{"name":"IN_GRENADE2","docStart":5885,"docEnd":5902,"docs":{"brief":"grenade 2","tags":[{"tag":"","text":"grenade 2"}]},"value":"(1 << 24)"},"created":{"hash":"d0fac2def94e7ca3c44467c82627e742e837be33","count":1827,"time":1198825809},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_ONTRAIN":{"symbol":{"name":"FL_ONTRAIN","docStart":6474,"docEnd":6582,"docs":{"brief":"Player is _controlling_ a train, so movement commands should be ignored on client during prediction.","tags":[{"tag":"","text":"Player is _controlling_ a train, so movement commands should be ignored on client during prediction."}]},"value":"(1 << 3)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_UNBLOCKABLE_BY_PLAYER":{"symbol":{"name":"FL_UNBLOCKABLE_BY_PLAYER","docStart":9337,"docEnd":9387,"docs":{"brief":"pusher that can't be blocked by the player","tags":[{"tag":"","text":"pusher that can't be blocked by the player"}]},"value":"(1 << 30)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IN_ATTACK3":{"symbol":{"name":"IN_ATTACK3","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 25)"},"created":{"hash":"710456f87130b915317fc89addec2d0e479e1030","count":3724,"time":1356300374},"last_updated":{"hash":"710456f87130b915317fc89addec2d0e479e1030","count":3724,"time":1356300374}},"PLAYER_FLAG_BITS":{"symbol":{"name":"PLAYER_FLAG_BITS","docStart":0,"docEnd":0,"docs":null,"value":"9"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136}},"FL_NPC":{"symbol":{"name":"FL_NPC","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 13)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136}},"FL_CLIENT":{"symbol":{"name":"FL_CLIENT","docStart":6938,"docEnd":6957,"docs":{"brief":"Is a player","tags":[{"tag":"","text":"Is a player"}]},"value":"(1 << 7)"},"created":{"hash":"a446121d6e8ab84ecd6a5671ffd6378f2aa6114f","count":1846,"time":1200167136},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"MoveType":{"symbol":{"name":"MoveType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"MOVETYPE_NONE","docStart":1708,"docEnd":1727,"docs":{"brief":"never moves","tags":[{"tag":"","text":"never moves"}]},"value":"0"},{"name":"MOVETYPE_ISOMETRIC","docStart":1758,"docEnd":1777,"docs":{"brief":"For players","tags":[{"tag":"","text":"For players"}]},"value":null},{"name":"MOVETYPE_WALK","docStart":1808,"docEnd":1850,"docs":{"brief":"Player only - moving on the ground","tags":[{"tag":"","text":"Player only - moving on the ground"}]},"value":null},{"name":"MOVETYPE_STEP","docStart":1881,"docEnd":1940,"docs":{"brief":"gravity, special edge handling -- monsters use this","tags":[{"tag":"","text":"gravity, special edge handling -- monsters use this"}]},"value":null},{"name":"MOVETYPE_FLY","docStart":1971,"docEnd":2020,"docs":{"brief":"No gravity, but still collides with stuff","tags":[{"tag":"","text":"No gravity, but still collides with stuff"}]},"value":null},{"name":"MOVETYPE_FLYGRAVITY","docStart":2051,"docEnd":2105,"docs":{"brief":"flies through the air + is affected by gravity","tags":[{"tag":"","text":"flies through the air + is affected by gravity"}]},"value":null},{"name":"MOVETYPE_VPHYSICS","docStart":2136,"docEnd":2172,"docs":{"brief":"uses VPHYSICS for simulation","tags":[{"tag":"","text":"uses VPHYSICS for simulation"}]},"value":null},{"name":"MOVETYPE_PUSH","docStart":2203,"docEnd":2243,"docs":{"brief":"no clip to world, push and crush","tags":[{"tag":"","text":"no clip to world, push and crush"}]},"value":null},{"name":"MOVETYPE_NOCLIP","docStart":2274,"docEnd":2336,"docs":{"brief":"No gravity, no collisions, still do velocity/avelocity","tags":[{"tag":"","text":"No gravity, no collisions, still do velocity/avelocity"}]},"value":null},{"name":"MOVETYPE_LADDER","docStart":2367,"docEnd":2420,"docs":{"brief":"Used by players only when going onto a ladder","tags":[{"tag":"","text":"Used by players only when going onto a ladder"}]},"value":null},{"name":"MOVETYPE_OBSERVER","docStart":2451,"docEnd":2511,"docs":{"brief":"Observer movement, depends on player's observer mode","tags":[{"tag":"","text":"Observer movement, depends on player's observer mode"}]},"value":null},{"name":"MOVETYPE_CUSTOM","docStart":2542,"docEnd":2595,"docs":{"brief":"Allows the entity to describe its own physics","tags":[{"tag":"","text":"Allows the entity to describe its own physics"}]},"value":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RenderFx":{"symbol":{"name":"RenderFx","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RENDERFX_NONE","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"RENDERFX_PULSE_SLOW","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_PULSE_FAST","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_PULSE_SLOW_WIDE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_PULSE_FAST_WIDE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_FADE_SLOW","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_FADE_FAST","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_SOLID_SLOW","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_SOLID_FAST","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_STROBE_SLOW","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_STROBE_FAST","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_STROBE_FASTER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_FLICKER_SLOW","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_FLICKER_FAST","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_NO_DISSIPATION","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_DISTORT","docStart":3782,"docEnd":3821,"docs":{"brief":"Distort/scale/translate flicker","tags":[{"tag":"","text":"Distort/scale/translate flicker"}]},"value":null},{"name":"RENDERFX_HOLOGRAM","docStart":3852,"docEnd":3892,"docs":{"brief":"kRenderFxDistort + distance fade","tags":[{"tag":"","text":"kRenderFxDistort + distance fade"}]},"value":null},{"name":"RENDERFX_EXPLODE","docStart":3923,"docEnd":3951,"docs":{"brief":"Scale up really big!","tags":[{"tag":"","text":"Scale up really big!"}]},"value":null},{"name":"RENDERFX_GLOWSHELL","docStart":3982,"docEnd":4003,"docs":{"brief":"Glowing Shell","tags":[{"tag":"","text":"Glowing Shell"}]},"value":null},{"name":"RENDERFX_CLAMP_MIN_SCALE","docStart":4034,"docEnd":4098,"docs":{"brief":"Keep this sprite from getting very small (SPRITES only!)","tags":[{"tag":"","text":"Keep this sprite from getting very small (SPRITES only!)"}]},"value":null},{"name":"RENDERFX_ENV_RAIN","docStart":4129,"docEnd":4176,"docs":{"brief":"for environmental rendermode, make rain","tags":[{"tag":"","text":"for environmental rendermode, make rain"}]},"value":null},{"name":"RENDERFX_ENV_SNOW","docStart":4207,"docEnd":4254,"docs":{"brief":"\"        \"            \"    , make snow","tags":[{"tag":"","text":"\"        \"            \"    , make snow"}]},"value":null},{"name":"RENDERFX_SPOTLIGHT","docStart":4285,"docEnd":4329,"docs":{"brief":"TEST CODE for experimental spotlight","tags":[{"tag":"","text":"TEST CODE for experimental spotlight"}]},"value":null},{"name":"RENDERFX_RAGDOLL","docStart":4360,"docEnd":4431,"docs":{"brief":"HACKHACK: TEST CODE for signalling death of a ragdoll character","tags":[{"tag":"","text":"HACKHACK: TEST CODE for signalling death of a ragdoll character"}]},"value":null},{"name":"RENDERFX_PULSE_FAST_WIDER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"RENDERFX_MAX","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RenderMode":{"symbol":{"name":"RenderMode","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RENDER_NORMAL","docStart":2652,"docEnd":2663,"docs":{"brief":"src","tags":[{"tag":"","text":"src"}]},"value":null},{"name":"RENDER_TRANSCOLOR","docStart":2694,"docEnd":2716,"docs":{"brief":"c*a+dest*(1-a)","tags":[{"tag":"","text":"c*a+dest*(1-a)"}]},"value":null},{"name":"RENDER_TRANSTEXTURE","docStart":2747,"docEnd":2771,"docs":{"brief":"src*a+dest*(1-a)","tags":[{"tag":"","text":"src*a+dest*(1-a)"}]},"value":null},{"name":"RENDER_GLOW","docStart":2802,"docEnd":2872,"docs":{"brief":"src*a+dest -- No Z buffer checks -- Fixed size in screen space","tags":[{"tag":"","text":"src*a+dest -- No Z buffer checks -- Fixed size in screen space"}]},"value":null},{"name":"RENDER_TRANSALPHA","docStart":2903,"docEnd":2933,"docs":{"brief":"src*srca+dest*(1-srca)","tags":[{"tag":"","text":"src*srca+dest*(1-srca)"}]},"value":null},{"name":"RENDER_TRANSADD","docStart":2964,"docEnd":2982,"docs":{"brief":"src*a+dest","tags":[{"tag":"","text":"src*a+dest"}]},"value":null},{"name":"RENDER_ENVIRONMENTAL","docStart":3013,"docEnd":3062,"docs":{"brief":"not drawn, used for environmental effects","tags":[{"tag":"","text":"not drawn, used for environmental effects"}]},"value":null},{"name":"RENDER_TRANSADDFRAMEBLEND","docStart":3093,"docEnd":3163,"docs":{"brief":"use a fractional frame value to blend between animation frames","tags":[{"tag":"","text":"use a fractional frame value to blend between animation frames"}]},"value":null},{"name":"RENDER_TRANSALPHAADD","docStart":3194,"docEnd":3218,"docs":{"brief":"src + dest*(1-a)","tags":[{"tag":"","text":"src + dest*(1-a)"}]},"value":null},{"name":"RENDER_WORLDGLOW","docStart":3249,"docEnd":3311,"docs":{"brief":"Same as kRenderGlow but not fixed size in screen space","tags":[{"tag":"","text":"Same as kRenderGlow but not fixed size in screen space"}]},"value":null},{"name":"RENDER_NONE","docStart":3342,"docEnd":3363,"docs":{"brief":"Don't render.","tags":[{"tag":"","text":"Don't render."}]},"value":null}]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"sdktools_entinput":{"functions":{"SetVariantVector3D":{"symbol":{"name":"SetVariantVector3D","docStart":2882,"docEnd":2975,"docs":{"brief":"Sets a 3D vector in the global variant object.","tags":[{"tag":"","text":"Sets a 3D vector in the global variant object."},{"tag":"param:vec","text":"Input vector."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"SetVariantEntity":{"symbol":{"name":"SetVariantEntity","docStart":3347,"docEnd":3474,"docs":{"brief":"Sets an entity in the global variant object.","tags":[{"tag":"","text":"Sets an entity in the global variant object."},{"tag":"param:entity","text":"Entity index."},{"tag":"error","text":"Invalid entity index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"AcceptEntityInput":{"symbol":{"name":"AcceptEntityInput","docStart":1659,"docEnd":2254,"docs":{"brief":"Invokes a named input method on an entity.\n\nAfter completion (successful or not), the current global variant is re-initialized.","tags":[{"tag":"","text":"Invokes a named input method on an entity.\n\nAfter completion (successful or not), the current global variant is re-initialized."},{"tag":"param:dest","text":"Destination entity index."},{"tag":"param:input","text":"Input action."},{"tag":"param:activator","text":"Entity index which initiated the sequence of actions (-1 for a NULL entity)."},{"tag":"param:caller","text":"Entity index from which this event is sent (-1 for a NULL entity)."},{"tag":"param:outputid","text":"Unknown."},{"tag":"return","text":"True if successful otherwise false."},{"tag":"error","text":"Invalid entity index or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"dest","decl":"int dest","default":null},{"type":"const char[]","name":"input","decl":"const char[] input","default":null},{"type":"int","name":"activator","decl":"int activator","default":"-1"},{"type":"int","name":"caller","decl":"int caller","default":"-1"},{"type":"int","name":"outputid","decl":"int outputid","default":"0"}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantString":{"symbol":{"name":"SetVariantString","docStart":2453,"docEnd":2543,"docs":{"brief":"Sets a string in the global variant object.","tags":[{"tag":"","text":"Sets a string in the global variant object."},{"tag":"param:str","text":"Input string."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"SetVariantFloat":{"symbol":{"name":"SetVariantFloat","docStart":2734,"docEnd":2837,"docs":{"brief":"Sets a floating point value in the global variant object.","tags":[{"tag":"","text":"Sets a floating point value in the global variant object."},{"tag":"param:val","text":"Input value."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"val","decl":"float val","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"SetVariantColor":{"symbol":{"name":"SetVariantColor","docStart":3203,"docEnd":3293,"docs":{"brief":"Sets a color in the global variant object.","tags":[{"tag":"","text":"Sets a color in the global variant object."},{"tag":"param:color","text":"Input color."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"SetVariantPosVector3D":{"symbol":{"name":"SetVariantPosVector3D","docStart":3032,"docEnd":3143,"docs":{"brief":"Sets a 3D position vector in the global variant object.","tags":[{"tag":"","text":"Sets a 3D position vector in the global variant object."},{"tag":"param:vec","text":"Input position vector."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"SetVariantBool":{"symbol":{"name":"SetVariantBool","docStart":2317,"docEnd":2410,"docs":{"brief":"Sets a bool value in the global variant object.","tags":[{"tag":"","text":"Sets a bool value in the global variant object."},{"tag":"param:val","text":"Input value."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"val","decl":"bool val","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}},"SetVariantInt":{"symbol":{"name":"SetVariantInt","docStart":2596,"docEnd":2693,"docs":{"brief":"Sets an integer value in the global variant object.","tags":[{"tag":"","text":"Sets an integer value in the global variant object."},{"tag":"param:val","text":"Input value."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"val","decl":"int val","default":null}]},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"7451257578e0f3ae059e122b1a65bd0a4d9f4678","count":5907,"time":1463774181}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_entinput_included":{"symbol":{"name":"_sdktools_entinput_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379},"last_updated":{"hash":"b50d7697f6d72c70c6fde2eb5f3b8a8fe8cc4913","count":1499,"time":1191009379}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_engine":{"functions":{"SetLightStyle":{"symbol":{"name":"SetLightStyle","docStart":1997,"docEnd":2238,"docs":{"brief":"Sets a light style.","tags":[{"tag":"","text":"Sets a light style."},{"tag":"param:style","text":"Light style (from 0 to MAX_LIGHTSTYLES-1)"},{"tag":"param:value","text":"Light value string (see world.cpp/light.cpp in dlls)"},{"tag":"error","text":"Light style index is out of range."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"style","decl":"int style","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"4527682421e3c9cfeb36961099abca58187a5682","count":1153,"time":1185227482},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientEyePosition":{"symbol":{"name":"GetClientEyePosition","docStart":2301,"docEnd":2559,"docs":{"brief":"Returns the client's eye position.","tags":[{"tag":"","text":"Returns the client's eye position."},{"tag":"param:client","text":"Player's index."},{"tag":"param:pos","text":"Destination vector to store the client's eye position."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float[3]","name":"pos","decl":"float pos[3]","default":null}]},"created":{"hash":"d05a57fcba7ed445570d42e1a090f37fde82aba5","count":1220,"time":1185847705},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetClientViewEntity":{"symbol":{"name":"SetClientViewEntity","docStart":1686,"docEnd":1935,"docs":{"brief":"Sets a client's \"viewing entity.\"","tags":[{"tag":"","text":"Sets a client's \"viewing entity.\""},{"tag":"param:client","text":"Client index."},{"tag":"param:entity","text":"Entity index."},{"tag":"error","text":"Invalid client or entity, lack of mod support, or client not in\ngame."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"ee05ac6cfbf41bbd7b31a8505938641ee6bcebc0","count":1107,"time":1184376601},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_engine_included":{"symbol":{"name":"_sdktools_engine_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ee05ac6cfbf41bbd7b31a8505938641ee6bcebc0","count":1107,"time":1184376601},"last_updated":{"hash":"ee05ac6cfbf41bbd7b31a8505938641ee6bcebc0","count":1107,"time":1184376601}},"MAX_LIGHTSTYLES":{"symbol":{"name":"MAX_LIGHTSTYLES","docStart":0,"docEnd":0,"docs":null,"value":"64"},"created":{"hash":"4527682421e3c9cfeb36961099abca58187a5682","count":1153,"time":1185227482},"last_updated":{"hash":"4527682421e3c9cfeb36961099abca58187a5682","count":1153,"time":1185227482}}},"enums":{},"typesets":{},"typedefs":{}},"logging":{"functions":{"LogAction":{"symbol":{"name":"LogAction","docStart":2693,"docEnd":3154,"docs":{"brief":"Logs an action from a command or event whereby interception and routing may\nbe important.  This is intended to be a logging version of ShowActivity().","tags":[{"tag":"","text":"Logs an action from a command or event whereby interception and routing may\nbe important.  This is intended to be a logging version of ShowActivity()."},{"tag":"param:client","text":"Client performing the action, 0 for server, or -1 if not\napplicable."},{"tag":"param:target","text":"Client being targetted, or -1 if not applicable."},{"tag":"param:message","text":"Message format."},{"tag":"param:...","text":"Message formatting parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"target","decl":"int target","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveGameLogHook":{"symbol":{"name":"RemoveGameLogHook","docStart":5150,"docEnd":5231,"docs":{"brief":"Removes a game log hook.","tags":[{"tag":"","text":"Removes a game log hook."},{"tag":"param:hook","text":"Hook function."}]},"kind":"native","returnType":"void","arguments":[{"type":"GameLogHook","name":"hook","decl":"GameLogHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddGameLogHook":{"symbol":{"name":"AddGameLogHook","docStart":5021,"docEnd":5099,"docs":{"brief":"Adds a game log hook.","tags":[{"tag":"","text":"Adds a game log hook."},{"tag":"param:hook","text":"Hook function."}]},"kind":"native","returnType":"void","arguments":[{"type":"GameLogHook","name":"hook","decl":"GameLogHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LogError":{"symbol":{"name":"LogError","docStart":3237,"docEnd":3387,"docs":{"brief":"Logs a plugin error message to the SourceMod logs.","tags":[{"tag":"","text":"Logs a plugin error message to the SourceMod logs."},{"tag":"param:format","text":"String format."},{"tag":"param:...","text":"Format arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LogToFileEx":{"symbol":{"name":"LogToFileEx","docStart":2338,"docEnd":2614,"docs":{"brief":"Same as LogToFile(), except no plugin logtag is prepended.","tags":[{"tag":"","text":"Same as LogToFile(), except no plugin logtag is prepended."},{"tag":"param:file","text":"File to write the log message in."},{"tag":"param:format","text":"String format."},{"tag":"param:...","text":"Format arguments."},{"tag":"error","text":"File could not be opened/written."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LogMessage":{"symbol":{"name":"LogMessage","docStart":1645,"docEnd":1862,"docs":{"brief":"Logs a plugin message to the SourceMod logs.  The log message will be\nprefixed by the plugin's logtag (filename).","tags":[{"tag":"","text":"Logs a plugin message to the SourceMod logs.  The log message will be\nprefixed by the plugin's logtag (filename)."},{"tag":"param:format","text":"String format."},{"tag":"param:...","text":"Format arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LogToFile":{"symbol":{"name":"LogToFile","docStart":1921,"docEnd":2261,"docs":{"brief":"Logs a message to any file.  The log message will be in the normal\nSourceMod format, with the plugin logtag prepended.","tags":[{"tag":"","text":"Logs a message to any file.  The log message will be in the normal\nSourceMod format, with the plugin logtag prepended."},{"tag":"param:file","text":"File to write the log message in."},{"tag":"param:format","text":"String format."},{"tag":"param:...","text":"Format arguments."},{"tag":"error","text":"File could not be opened/written."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnLogAction":{"symbol":{"name":"OnLogAction","docStart":3444,"docEnd":4263,"docs":{"brief":"Called when an action is going to be logged.","tags":[{"tag":"","text":"Called when an action is going to be logged."},{"tag":"param:source","text":"Handle to the object logging the action, or INVALID_HANDLE\nif Core is logging the action."},{"tag":"param:ident","text":"Type of object logging the action (plugin, ext, or core)."},{"tag":"param:client","text":"Client the action is from; 0 for server, -1 if not applicable."},{"tag":"param:target","text":"Client the action is targetting, or -1 if not applicable."},{"tag":"param:message","text":"Message that is being logged."},{"tag":"return","text":"Plugin_Continue will perform the default logging behavior.\nPlugin_Handled will stop Core from logging the message.\nPlugin_Stop is the same as Handled, but prevents any other\nplugins from handling the message."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"Handle","name":"source","decl":"Handle source","default":null},{"type":"Identity","name":"ident","decl":"Identity ident","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"target","decl":"int target","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sm_logging_included":{"symbol":{"name":"_sm_logging_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}},"enums":{},"typesets":{},"typedefs":{"GameLogHook":{"symbol":{"name":"GameLogHook","docStart":4413,"docEnd":4954,"docs":{"brief":"Called when a game log message is received.\n\nAny Log*() functions called within this callback will not recursively\npass through.  That is, they will log directly, bypassing this callback.\n\nNote that this does not capture log messages from the engine.  It only\ncaptures log messages being sent from the game/mod itself.","tags":[{"tag":"","text":"Called when a game log message is received.\n\nAny Log*() functions called within this callback will not recursively\npass through.  That is, they will log directly, bypassing this callback.\n\nNote that this does not capture log messages from the engine.  It only\ncaptures log messages being sent from the game/mod itself."},{"tag":"param:message","text":"Message contents."},{"tag":"return","text":"Plugin_Handled or Plugin_Stop will prevent the message\nfrom being written to the log file."}]},"type":"function Action(const char[] message)","parsedSignature":{"returnType":"Action","arguments":[{"type":"const char[]","name":"message","decl":"const char[] message","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"sdktools_sound":{"functions":{"EmitSentence":{"symbol":{"name":"EmitSentence","docStart":10077,"docEnd":10918,"docs":{"brief":"Emits a sentence to a list of clients.","tags":[{"tag":"","text":"Emits a sentence to a list of clients."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:sentence","text":"Sentence index (from PrecacheSentenceFile)."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"param:...","text":"Optional list of Float[3] arrays to specify additional origins."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"sentence","decl":"int sentence","default":null},{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetGameSoundParams":{"symbol":{"name":"GetGameSoundParams","docStart":18600,"docEnd":19395,"docs":{"brief":"Retrieves the parameters for a game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Retrieves the parameters for a game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:maxlength","text":"Maximum length of sample string buffer."},{"tag":"param:entity","text":"Entity the sound is being emitted from."},{"tag":"return","text":"True if the sound was successfully retrieved, false if it\nwas not found"}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"int&","name":"soundLevel","decl":"int& soundLevel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"char[]","name":"sample","decl":"char[] sample","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitSound":{"symbol":{"name":"EmitSound","docStart":7113,"docEnd":7955,"docs":{"brief":"Emits a sound to a list of clients.","tags":[{"tag":"","text":"Emits a sound to a list of clients."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"param:...","text":"Optional list of Float[3] arrays to specify additional origins."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitGameSoundToClient":{"symbol":{"name":"EmitGameSoundToClient","docStart":22245,"docEnd":22952,"docs":{"brief":"Wrapper to emit a game sound to one client.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Wrapper to emit a game sound to one client.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:client","text":"Client index."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ATTN_TO_SNDLEVEL":{"symbol":{"name":"ATTN_TO_SNDLEVEL","docStart":18276,"docEnd":18468,"docs":{"brief":"Converts an attenuation value to a sound level.\nThis function is from the HL2SDK.","tags":[{"tag":"","text":"Converts an attenuation value to a sound level.\nThis function is from the HL2SDK."},{"tag":"param:attn","text":"Attenuation value."},{"tag":"return","text":"Integer sound level."}]},"kind":"stock","returnType":"int","arguments":[{"type":"float","name":"attn","decl":"float attn","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrefetchSound":{"symbol":{"name":"PrefetchSound","docStart":5060,"docEnd":5169,"docs":{"brief":"Prefetches a sound.","tags":[{"tag":"","text":"Prefetches a sound."},{"tag":"param:name","text":"Sound file name relative to the \"sound\" folder."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitSoundToAll":{"symbol":{"name":"EmitSoundToAll","docStart":16861,"docEnd":17509,"docs":{"brief":"Wrapper to emit sound to all clients.","tags":[{"tag":"","text":"Wrapper to emit sound to all clients."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FadeClientVolume":{"symbol":{"name":"FadeClientVolume","docStart":6365,"docEnd":6750,"docs":{"brief":"Fades a client's volume level toward silence or a given percentage.","tags":[{"tag":"","text":"Fades a client's volume level toward silence or a given percentage."},{"tag":"param:client","text":"Client index."},{"tag":"param:percent","text":"Fade percentage."},{"tag":"param:outtime","text":"Fade out time, in seconds."},{"tag":"param:holdtime","text":"Hold time, in seconds."},{"tag":"param:intime","text":"Fade in time, in seconds."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"percent","decl":"float percent","default":null},{"type":"float","name":"outtime","decl":"float outtime","default":null},{"type":"float","name":"holdtime","decl":"float holdtime","default":null},{"type":"float","name":"intime","decl":"float intime","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrecacheScriptSound":{"symbol":{"name":"PrecacheScriptSound","docStart":24853,"docEnd":25523,"docs":{"brief":"Precache a game sound.\n\nMost games will precache all game sounds on map start, but this is not guaranteed...\nTeam Fortress 2 is known to not pre-cache MvM game mode sounds on non-MvM maps.\n\nDue to the above, this native should be called before any calls to GetGameSoundParams,\nEmitGameSound*, or EmitAmbientGameSound.\n\nIt should be safe to pass already precached game sounds to this function.\n\nNote: It precaches all files for a game sound.","tags":[{"tag":"","text":"Precache a game sound.\n\nMost games will precache all game sounds on map start, but this is not guaranteed...\nTeam Fortress 2 is known to not pre-cache MvM game mode sounds on non-MvM maps.\n\nDue to the above, this native should be called before any calls to GetGameSoundParams,\nEmitGameSound*, or EmitAmbientGameSound.\n\nIt should be safe to pass already precached game sounds to this function.\n\nNote: It precaches all files for a game sound."},{"tag":"param:soundname","text":"Game sound to precache"},{"tag":"return","text":"True if the game sound was found, false if sound did not exist\nor had no files"}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"soundname","decl":"const char[] soundname","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitGameSoundToAll":{"symbol":{"name":"EmitGameSoundToAll","docStart":23562,"docEnd":24229,"docs":{"brief":"Wrapper to emit game sound to all clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Wrapper to emit game sound to all clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetDistGainFromSoundLevel":{"symbol":{"name":"GetDistGainFromSoundLevel","docStart":11387,"docEnd":11809,"docs":{"brief":"Calculates gain of sound on given distance with given sound level in decibel","tags":[{"tag":"","text":"Calculates gain of sound on given distance with given sound level in decibel"},{"tag":"param:soundlevel","text":"decibel of sound, like SNDLEVEL_NORMAL or integer value"},{"tag":"param:distance","text":"distance of sound to calculate, not meter or feet, but Source Engine`s normal Coordinate unit"},{"tag":"return","text":"gain of sound. you can multiply this with original sound`s volume to calculate volume on given distance"}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"soundlevel","decl":"int soundlevel","default":null},{"type":"float","name":"distance","decl":"float distance","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddAmbientSoundHook":{"symbol":{"name":"AddAmbientSoundHook","docStart":14574,"docEnd":14723,"docs":{"brief":"Hooks all played ambient sounds.","tags":[{"tag":"","text":"Hooks all played ambient sounds."},{"tag":"param:hook","text":"Function to use as a hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"AmbientSHook","name":"hook","decl":"AmbientSHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddNormalSoundHook":{"symbol":{"name":"AddNormalSoundHook","docStart":14780,"docEnd":14928,"docs":{"brief":"Hooks all played normal sounds.","tags":[{"tag":"","text":"Hooks all played normal sounds."},{"tag":"param:hook","text":"Function to use as a hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"NormalSHook","name":"hook","decl":"NormalSHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StopSound":{"symbol":{"name":"StopSound","docStart":6857,"docEnd":7041,"docs":{"brief":"Stops a sound.","tags":[{"tag":"","text":"Stops a sound."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:channel","text":"Channel number."},{"tag":"param:name","text":"Sound file name relative to the \"sound\" folder."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"channel","decl":"int channel","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitAmbientSound":{"symbol":{"name":"EmitAmbientSound","docStart":5636,"docEnd":6082,"docs":{"brief":"Emits an ambient sound.","tags":[{"tag":"","text":"Emits an ambient sound."},{"tag":"param:name","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:pos","text":"Origin of sound."},{"tag":"param:entity","text":"Entity index to associate sound with."},{"tag":"param:level","text":"Sound level (from 0 to 255)."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:vol","text":"Volume (from 0.0 to 1.0)."},{"tag":"param:pitch","text":"Pitch (from 0 to 255)."},{"tag":"param:delay","text":"Play delay."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"entity","decl":"int entity","default":"0"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"vol","decl":"float vol","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveAmbientSoundHook":{"symbol":{"name":"RemoveAmbientSoundHook","docStart":14983,"docEnd":15135,"docs":{"brief":"Unhooks all played ambient sounds.","tags":[{"tag":"","text":"Unhooks all played ambient sounds."},{"tag":"param:hook","text":"Function used for the hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"AmbientSHook","name":"hook","decl":"AmbientSHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitGameSound":{"symbol":{"name":"EmitGameSound","docStart":19609,"docEnd":20468,"docs":{"brief":"Emits a game sound to a list of clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Emits a game sound to a list of clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"return","text":"True if the sound was played successfully, false if it failed"},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitAmbientGameSound":{"symbol":{"name":"EmitAmbientGameSound","docStart":21182,"docEnd":21656,"docs":{"brief":"Emits an ambient game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Emits an ambient game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:pos","text":"Origin of sound."},{"tag":"param:entity","text":"Entity index to associate sound with."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:delay","text":"Play delay."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"entity","decl":"int entity","default":"0"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitSoundEntry":{"symbol":{"name":"EmitSoundEntry","docStart":8448,"docEnd":9528,"docs":{"brief":"Emits a sound or game sound to a list of clients using the latest version of the engine sound interface.\nThis native is only available in engines that are greater than or equal to Portal 2.","tags":[{"tag":"","text":"Emits a sound or game sound to a list of clients using the latest version of the engine sound interface.\nThis native is only available in engines that are greater than or equal to Portal 2."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:soundEntry","text":"Sound entry name."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:seed","text":"Sound seed."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"param:...","text":"Optional list of Float[3] arrays to specify additional origins."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"const char[]","name":"soundEntry","decl":"const char[] soundEntry","default":null},{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"seed","decl":"int seed","default":"0"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"ee0575bbb0e8f97a5bc623ce98ac8b98d6781a91","count":5187,"time":1421865209},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveNormalSoundHook":{"symbol":{"name":"RemoveNormalSoundHook","docStart":15195,"docEnd":15346,"docs":{"brief":"Unhooks all played normal sounds.","tags":[{"tag":"","text":"Unhooks all played normal sounds."},{"tag":"param:hook","text":"Function used for the hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"NormalSHook","name":"hook","decl":"NormalSHook hook","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EmitSoundToClient":{"symbol":{"name":"EmitSoundToClient","docStart":15404,"docEnd":16090,"docs":{"brief":"Wrapper to emit sound to one client.","tags":[{"tag":"","text":"Wrapper to emit sound to one client."},{"tag":"param:client","text":"Client index."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetSoundDuration":{"symbol":{"name":"GetSoundDuration","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}},"methodmaps":{},"enumstructs":{},"constants":{"SNDLEVEL_HOME":{"symbol":{"name":"SNDLEVEL_HOME","docStart":3525,"docEnd":3556,"docs":{"brief":"Average home (3.9 attn)","tags":[{"tag":"","text":"Average home (3.9 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_MINIBIKE":{"symbol":{"name":"SNDLEVEL_MINIBIKE","docStart":3974,"docEnd":4015,"docs":{"brief":"Mini-bike, alarm clock (0.7 attn)","tags":[{"tag":"","text":"Mini-bike, alarm clock (0.7 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_DRYER":{"symbol":{"name":"SNDLEVEL_DRYER","docStart":3656,"docEnd":3677,"docs":{"brief":"Clothes dryer","tags":[{"tag":"","text":"Clothes dryer"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_GUNFIRE":{"symbol":{"name":"SNDLEVEL_GUNFIRE","docStart":4400,"docEnd":4439,"docs":{"brief":"Gunshot, jet engine (0.27 attn)","tags":[{"tag":"","text":"Gunshot, jet engine (0.27 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_SPAWNING":{"symbol":{"name":"SND_SPAWNING","docStart":2858,"docEnd":2897,"docs":{"brief":"Used in some cases for ambients","tags":[{"tag":"","text":"Used in some cases for ambients"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_CONVO":{"symbol":{"name":"SNDLEVEL_CONVO","docStart":3587,"docEnd":3625,"docs":{"brief":"Normal conversation (2.0 attn)","tags":[{"tag":"","text":"Normal conversation (2.0 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_DELAY":{"symbol":{"name":"SND_DELAY","docStart":2928,"docEnd":2962,"docs":{"brief":"Sound has an initial delay","tags":[{"tag":"","text":"Sound has an initial delay"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_CHANGEPITCH":{"symbol":{"name":"SND_CHANGEPITCH","docStart":2748,"docEnd":2774,"docs":{"brief":"Change sound pitch","tags":[{"tag":"","text":"Change sound pitch"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_NONE":{"symbol":{"name":"SNDLEVEL_NONE","docStart":3277,"docEnd":3289,"docs":{"brief":"None","tags":[{"tag":"","text":"None"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_WHISPER":{"symbol":{"name":"SNDLEVEL_WHISPER","docStart":3374,"docEnd":3392,"docs":{"brief":"Whispering","tags":[{"tag":"","text":"Whispering"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_RAIDSIREN":{"symbol":{"name":"SNDLEVEL_RAIDSIREN","docStart":4347,"docEnd":4369,"docs":{"brief":"Air raid siren","tags":[{"tag":"","text":"Air raid siren"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_SNOWMOBILE":{"symbol":{"name":"SNDLEVEL_SNOWMOBILE","docStart":4239,"docEnd":4258,"docs":{"brief":"Snow mobile","tags":[{"tag":"","text":"Snow mobile"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_HELICOPTER":{"symbol":{"name":"SNDLEVEL_HELICOPTER","docStart":4190,"docEnd":4208,"docs":{"brief":"Helicopter","tags":[{"tag":"","text":"Helicopter"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_CAR":{"symbol":{"name":"SNDLEVEL_CAR","docStart":3784,"docEnd":3824,"docs":{"brief":"Car or vacuum cleaner (1.0 attn)","tags":[{"tag":"","text":"Car or vacuum cleaner (1.0 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_WEAPON":{"symbol":{"name":"SNDCHAN_WEAPON","docStart":2077,"docEnd":2092,"docs":{"brief":"Weapons","tags":[{"tag":"","text":"Weapons"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_ROCKET":{"symbol":{"name":"SNDLEVEL_ROCKET","docStart":4470,"docEnd":4505,"docs":{"brief":"Rocket launching (0.2 attn)","tags":[{"tag":"","text":"Rocket launching (0.2 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_ITEM":{"symbol":{"name":"SNDCHAN_ITEM","docStart":2168,"docEnd":2181,"docs":{"brief":"Items","tags":[{"tag":"","text":"Items"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_CHANGEVOL":{"symbol":{"name":"SND_CHANGEVOL","docStart":2690,"docEnd":2717,"docs":{"brief":"Change sound volume","tags":[{"tag":"","text":"Change sound volume"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_NORMAL":{"symbol":{"name":"SNDLEVEL_NORMAL","docStart":3855,"docEnd":3881,"docs":{"brief":"Normal sound level","tags":[{"tag":"","text":"Normal sound level"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_TRAFFIC":{"symbol":{"name":"SNDLEVEL_TRAFFIC","docStart":3912,"docEnd":3943,"docs":{"brief":"Busy traffic (0.8 attn)","tags":[{"tag":"","text":"Busy traffic (0.8 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_SHOULDPAUSE":{"symbol":{"name":"SND_SHOULDPAUSE","docStart":3147,"docEnd":3178,"docs":{"brief":"Pause if game is paused","tags":[{"tag":"","text":"Pause if game is paused"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_FRIDGE":{"symbol":{"name":"SNDLEVEL_FRIDGE","docStart":3474,"docEnd":3494,"docs":{"brief":"Refrigerator","tags":[{"tag":"","text":"Refrigerator"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_LIBRARY":{"symbol":{"name":"SNDLEVEL_LIBRARY","docStart":3423,"docEnd":3443,"docs":{"brief":"In a library","tags":[{"tag":"","text":"In a library"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_RUSTLE":{"symbol":{"name":"SNDLEVEL_RUSTLE","docStart":3320,"docEnd":3343,"docs":{"brief":"Rustling leaves","tags":[{"tag":"","text":"Rustling leaves"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_AUTO":{"symbol":{"name":"SNDCHAN_AUTO","docStart":2034,"docEnd":2046,"docs":{"brief":"Auto","tags":[{"tag":"","text":"Auto"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_STOP":{"symbol":{"name":"SND_STOP","docStart":2805,"docEnd":2827,"docs":{"brief":"Stop the sound","tags":[{"tag":"","text":"Stop the sound"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_VOICE_BASE":{"symbol":{"name":"SNDCHAN_VOICE_BASE","docStart":2421,"docEnd":2461,"docs":{"brief":"\"Channel for network voice data\"","tags":[{"tag":"","text":"\"Channel for network voice data\""}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_REPLACE":{"symbol":{"name":"SNDCHAN_REPLACE","docStart":1988,"docEnd":2003,"docs":{"brief":"Unknown","tags":[{"tag":"","text":"Unknown"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_STATIC":{"symbol":{"name":"SNDCHAN_STATIC","docStart":2345,"docEnd":2390,"docs":{"brief":"\"Stream channel from the static area\"","tags":[{"tag":"","text":"\"Stream channel from the static area\""}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_SPEAKER":{"symbol":{"name":"SND_SPEAKER","docStart":3069,"docEnd":3116,"docs":{"brief":"Being played by a mic through a speaker","tags":[{"tag":"","text":"Being played by a mic through a speaker"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_STOPLOOPING":{"symbol":{"name":"SND_STOPLOOPING","docStart":2993,"docEnd":3038,"docs":{"brief":"Stop looping all sounds on the entity","tags":[{"tag":"","text":"Stop looping all sounds on the entity"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_AIRCRAFT":{"symbol":{"name":"SNDLEVEL_AIRCRAFT","docStart":4289,"docEnd":4316,"docs":{"brief":"Auto horn, aircraft","tags":[{"tag":"","text":"Auto horn, aircraft"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_SCREAMING":{"symbol":{"name":"SNDLEVEL_SCREAMING","docStart":4046,"docEnd":4080,"docs":{"brief":"Screaming child (0.5 attn)","tags":[{"tag":"","text":"Screaming child (0.5 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_BODY":{"symbol":{"name":"SNDCHAN_BODY","docStart":2212,"docEnd":2227,"docs":{"brief":"Player?","tags":[{"tag":"","text":"Player?"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_TRAIN":{"symbol":{"name":"SNDLEVEL_TRAIN","docStart":4111,"docEnd":4159,"docs":{"brief":"Subway train, pneumatic drill (0.4 attn)","tags":[{"tag":"","text":"Subway train, pneumatic drill (0.4 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_STREAM":{"symbol":{"name":"SNDCHAN_STREAM","docStart":2258,"docEnd":2314,"docs":{"brief":"\"Stream channel from the static or dynamic area\"","tags":[{"tag":"","text":"\"Stream channel from the static or dynamic area\""}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_VOICE":{"symbol":{"name":"SNDCHAN_VOICE","docStart":2123,"docEnd":2137,"docs":{"brief":"Voices","tags":[{"tag":"","text":"Voices"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SND_NOFLAGS":{"symbol":{"name":"SND_NOFLAGS","docStart":2644,"docEnd":2659,"docs":{"brief":"Nothing","tags":[{"tag":"","text":"Nothing"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDLEVEL_DISHWASHER":{"symbol":{"name":"SNDLEVEL_DISHWASHER","docStart":3708,"docEnd":3753,"docs":{"brief":"Dishwasher/washing machine (1.5 attn)","tags":[{"tag":"","text":"Dishwasher/washing machine (1.5 attn)"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDCHAN_USER_BASE":{"symbol":{"name":"SNDCHAN_USER_BASE","docStart":2492,"docEnd":2542,"docs":{"brief":"Anything >= this is allocated to game code","tags":[{"tag":"","text":"Anything >= this is allocated to game code"}]}},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"defines":{"SNDATTN_RICOCHET":{"symbol":{"name":"SNDATTN_RICOCHET","docStart":4970,"docEnd":4993,"docs":{"brief":"Ricochet effect","tags":[{"tag":"","text":"Ricochet effect"}]},"value":"1.5"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDPITCH_NORMAL":{"symbol":{"name":"SNDPITCH_NORMAL","docStart":4608,"docEnd":4628,"docs":{"brief":"Normal pitch","tags":[{"tag":"","text":"Normal pitch"}]},"value":"100"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDVOL_NORMAL":{"symbol":{"name":"SNDVOL_NORMAL","docStart":4549,"docEnd":4570,"docs":{"brief":"Normal volume","tags":[{"tag":"","text":"Normal volume"}]},"value":"1.0"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDATTN_STATIC":{"symbol":{"name":"SNDATTN_STATIC","docStart":4905,"docEnd":4932,"docs":{"brief":"Static attenuation?","tags":[{"tag":"","text":"Static attenuation?"}]},"value":"1.25"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDPITCH_LOW":{"symbol":{"name":"SNDPITCH_LOW","docStart":4666,"docEnd":4685,"docs":{"brief":"A low pitch","tags":[{"tag":"","text":"A low pitch"}]},"value":"95"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDATTN_NORMAL":{"symbol":{"name":"SNDATTN_NORMAL","docStart":4841,"docEnd":4867,"docs":{"brief":"Normal attenuation","tags":[{"tag":"","text":"Normal attenuation"}]},"value":"0.8"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDATTN_NONE":{"symbol":{"name":"SNDATTN_NONE","docStart":4781,"docEnd":4803,"docs":{"brief":"No attenuation","tags":[{"tag":"","text":"No attenuation"}]},"value":"0.0"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDPITCH_HIGH":{"symbol":{"name":"SNDPITCH_HIGH","docStart":4723,"docEnd":4743,"docs":{"brief":"A high pitch","tags":[{"tag":"","text":"A high pitch"}]},"value":"120"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SNDATTN_IDLE":{"symbol":{"name":"SNDATTN_IDLE","docStart":5031,"docEnd":5056,"docs":{"brief":"Idle attenuation?","tags":[{"tag":"","text":"Idle attenuation?"}]},"value":"2.0"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOUND_FROM_WORLD":{"symbol":{"name":"SOUND_FROM_WORLD","docStart":0,"docEnd":0,"docs":null,"value":"0"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377}},"_sdktools_sound_included":{"symbol":{"name":"_sdktools_sound_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377}},"SOUND_FROM_PLAYER":{"symbol":{"name":"SOUND_FROM_PLAYER","docStart":0,"docEnd":0,"docs":null,"value":"-2"},"created":{"hash":"b5831fd2636a288773d6f1ec67ecfa1c0e8bf7cb","count":1048,"time":1183830377},"last_updated":{"hash":"f2ebf2f4b98f3ab2c621976b54c5079b4f27cde8","count":1049,"time":1183830689}},"SOUND_FROM_LOCAL_PLAYER":{"symbol":{"name":"SOUND_FROM_LOCAL_PLAYER","docStart":0,"docEnd":0,"docs":null,"value":"-1"},"created":{"hash":"f2ebf2f4b98f3ab2c621976b54c5079b4f27cde8","count":1049,"time":1183830689},"last_updated":{"hash":"f2ebf2f4b98f3ab2c621976b54c5079b4f27cde8","count":1049,"time":1183830689}}},"enums":{},"typesets":{"NormalSHook":{"symbol":{"name":"NormalSHook","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":12865,"docEnd":13872,"docs":{"brief":"Called when a sound is going to be emitted to one or more clients.\nNOTICE: all params can be overwritten to modify the default behavior.","tags":[{"tag":"","text":"Called when a sound is going to be emitted to one or more clients.\nNOTICE: all params can be overwritten to modify the default behavior."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array (modify this value if you add/remove elements from the client array)."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity emitting the sound."},{"tag":"param:channel","text":"Channel emitting the sound."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:level","text":"Sound level."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:soundEntry","text":"Game sound entry name. (Used in engines newer than Portal 2)"},{"tag":"param:seed","text":"Sound seed. (Used in engines newer than Portal 2)"},{"tag":"return","text":"Plugin_Continue to allow the sound to be played, Plugin_Stop to block it,\nPlugin_Changed when any parameter has been modified."}]},"type":"function Action(int clients[MAXPLAYERS], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags, char soundEntry[PLATFORM_MAX_PATH], int& seed)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[MAXPLAYERS]","decl":"int clients[MAXPLAYERS]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"char","name":"soundEntry[PLATFORM_MAX_PATH]","decl":"char soundEntry[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"seed","decl":"int& seed","default":null}]}},{"docStart":14104,"docEnd":14139,"docs":{"brief":"Deprecated. Use other prototype.","tags":[{"tag":"","text":"Deprecated. Use other prototype."}]},"type":"function Action(int clients[64], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags, char soundEntry[PLATFORM_MAX_PATH], int& seed)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[64]","decl":"int clients[64]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"char","name":"soundEntry[PLATFORM_MAX_PATH]","decl":"char soundEntry[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"seed","decl":"int& seed","default":null}]}},{"docStart":14363,"docEnd":14398,"docs":{"brief":"Deprecated. Use other prototype.","tags":[{"tag":"","text":"Deprecated. Use other prototype."}]},"type":"function Action(int clients[64], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[64]","decl":"int clients[64]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null}]}}]},"created":{"hash":"0d787e24ce3277cb8ff364eced3d67e5fafff36a","count":5795,"time":1448490335},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"NormalSHook":{"symbol":{"name":"NormalSHook","docStart":11908,"docEnd":12828,"docs":{"brief":"Called when a sound is going to be emitted to one or more clients.\nNOTICE: all params can be overwritten to modify the default behavior.","tags":[{"tag":"","text":"Called when a sound is going to be emitted to one or more clients.\nNOTICE: all params can be overwritten to modify the default behavior."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array (modify this value if you add/remove elements from the client array)."},{"tag":"param:sample","text":"Sound file name relative to the \"sounds\" folder."},{"tag":"param:entity","text":"Entity emitting the sound."},{"tag":"param:channel","text":"Channel emitting the sound."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:level","text":"Sound level."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:soundEntry","text":"Game sound entry name. (Used in engines newer than Portal 2)"},{"tag":"param:seed","text":"Sound seed. (Used in engines newer than Portal 2)"},{"tag":"return","text":"Plugin_Continue to allow the sound to be played, Plugin_Stop to block it,\nPlugin_Changed when any parameter has been modified."}]},"type":"function Action(int clients[64], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags, char soundEntry[PLATFORM_MAX_PATH], int& seed)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[64]","decl":"int clients[64]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"char","name":"soundEntry[PLATFORM_MAX_PATH]","decl":"char soundEntry[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"seed","decl":"int& seed","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"4346e963e5534786eaf63f6e549b40f1f7bfe9c4","count":5732,"time":1446207994}},"AmbientSHook":{"symbol":{"name":"AmbientSHook","docStart":11886,"docEnd":12643,"docs":{"brief":"Called when an ambient sound is about to be emitted to one or more clients.\n\nNOTICE: all parameters can be overwritten to modify the default behavior.","tags":[{"tag":"","text":"Called when an ambient sound is about to be emitted to one or more clients.\n\nNOTICE: all parameters can be overwritten to modify the default behavior."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity index associated to the sound."},{"tag":"param:volume","text":"Volume (from 0.0 to 1.0)."},{"tag":"param:level","text":"Sound level (from 0 to 255)."},{"tag":"param:pitch","text":"Pitch (from 0 to 255)."},{"tag":"param:pos","text":"Origin of sound."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:delay","text":"Play delay."},{"tag":"return","text":"Plugin_Continue to allow the sound to be played, Plugin_Stop to block it,\nPlugin_Changed when any parameter has been modified."}]},"type":"function Action(char sample[PLATFORM_MAX_PATH], int& entity, float& volume, int& level, int& pitch, float pos[3], int& flags, float& delay)","parsedSignature":{"returnType":"Action","arguments":[{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"float","name":"pos[3]","decl":"float pos[3]","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"float&","name":"delay","decl":"float& delay","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"handles":{"functions":{"CloneHandle":{"symbol":{"name":"CloneHandle","docStart":2203,"docEnd":3280,"docs":{"brief":"Clones a Handle.  When passing handles in between plugins, caching handles\ncan result in accidental invalidation when one plugin releases the Handle, or is its owner\nis unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.","tags":[{"tag":"","text":"Clones a Handle.  When passing handles in between plugins, caching handles\ncan result in accidental invalidation when one plugin releases the Handle, or is its owner\nis unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner."},{"tag":"note","text":"Usually, you will be cloning Handles for other plugins.  This means that if you clone\nthe Handle without specifying the new owner, it will assume the identity of your original\ncalling plugin, which is not very useful.  You should either specify that the receiving\nplugin should clone the handle on its own, or you should explicitly clone the Handle\nusing the receiving plugin's identity Handle."},{"tag":"param:hndl","text":"Handle to clone/duplicate."},{"tag":"param:plugin","text":"Optional Handle to another plugin to mark as the new owner.\nIf no owner is passed, the owner becomes the calling plugin."},{"tag":"return","text":"Handle on success, INVALID_HANDLE if not cloneable."},{"tag":"error","text":"Invalid handles will cause a run time error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":"INVALID_HANDLE"}]},"created":{"hash":"a4363dfa4f7c6e801b2f31d57f45a44c255962cf","count":252,"time":1167676587},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CloseHandle":{"symbol":{"name":"CloseHandle","docStart":1770,"docEnd":2160,"docs":{"brief":"Closes a Handle.  If the handle has multiple copies open,\nit is not destroyed unless all copies are closed.","tags":[{"tag":"","text":"Closes a Handle.  If the handle has multiple copies open,\nit is not destroyed unless all copies are closed."},{"tag":"note","text":"Closing a Handle has a different meaning for each Handle type.  Make\nsure you read the documentation on whatever provided the Handle."},{"tag":"param:hndl","text":"Handle to close."},{"tag":"error","text":"Invalid handles will cause a run time error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]},"created":{"hash":"a4363dfa4f7c6e801b2f31d57f45a44c255962cf","count":252,"time":1167676587},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsValidHandle":{"symbol":{"name":"IsValidHandle","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]},"created":{"hash":"a4363dfa4f7c6e801b2f31d57f45a44c255962cf","count":252,"time":1167676587},"last_updated":{"hash":"41ac66fceb864a4f54666eb67f83fa67e618efe9","count":1766,"time":1196869125}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_handles_included":{"symbol":{"name":"_handles_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"a4363dfa4f7c6e801b2f31d57f45a44c255962cf","count":252,"time":1167676587},"last_updated":{"hash":"a4363dfa4f7c6e801b2f31d57f45a44c255962cf","count":252,"time":1167676587}}},"enums":{"Handle":{"symbol":{"name":"Handle","docStart":1639,"docEnd":1673,"docs":{"brief":"Preset Handle values.","tags":[{"tag":"","text":"Preset Handle values."}]},"entries":[{"name":"INVALID_HANDLE","docStart":0,"docEnd":0,"docs":null,"value":"0"}]},"created":{"hash":"a4363dfa4f7c6e801b2f31d57f45a44c255962cf","count":252,"time":1167676587},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"files":{"functions":{"FileSize":{"symbol":{"name":"FileSize","docStart":22409,"docEnd":22956,"docs":{"brief":"Get the file size in bytes.","tags":[{"tag":"","text":"Get the file size in bytes."},{"tag":"param:path","text":"Path to the file."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to find files existing in any of\nthe Valve search paths, rather than solely files\nexisting directly in the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"File size in bytes, -1 if file not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"GAME\""}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FileExists":{"symbol":{"name":"FileExists","docStart":20389,"docEnd":20933,"docs":{"brief":"Checks if a file exists.","tags":[{"tag":"","text":"Checks if a file exists."},{"tag":"param:path","text":"Path to the file."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to find files existing in any of\nthe Valve search paths, rather than solely files\nexisting directly in the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"True if the file exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"GAME\""}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FilePosition":{"symbol":{"name":"FilePosition","docStart":20146,"docEnd":20346,"docs":{"brief":"Get current position in the file.","tags":[{"tag":"","text":"Get current position in the file."},{"tag":"param:file","text":"Handle to the file."},{"tag":"return","text":"Value for the file position indicator."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"file","decl":"Handle file","default":null}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FileSeek":{"symbol":{"name":"FileSeek","docStart":19743,"docEnd":20081,"docs":{"brief":"Sets the file position indicator.","tags":[{"tag":"","text":"Sets the file position indicator."},{"tag":"param:file","text":"Handle to the file."},{"tag":"param:position","text":"Position relative to what is specified in whence."},{"tag":"param:where","text":"SEEK_ constant value of where to see from."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"file","decl":"Handle file","default":null},{"type":"int","name":"position","decl":"int position","default":null},{"type":"int","name":"where","decl":"int where","default":null}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"IsEndOfFile":{"symbol":{"name":"IsEndOfFile","docStart":19475,"docEnd":19700,"docs":{"brief":"Tests if the end of file has been reached.","tags":[{"tag":"","text":"Tests if the end of file has been reached."},{"tag":"param:file","text":"Handle to the file."},{"tag":"return","text":"True if end of file has been reached, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"file","decl":"Handle file","default":null}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"BuildPath":{"symbol":{"name":"BuildPath","docStart":9994,"docEnd":10528,"docs":{"brief":"Builds a path relative to the SourceMod folder.  This should be used instead of\ndirectly referencing addons/sourcemod, in case users change the name of their\nfolder layout.","tags":[{"tag":"","text":"Builds a path relative to the SourceMod folder.  This should be used instead of\ndirectly referencing addons/sourcemod, in case users change the name of their\nfolder layout."},{"tag":"param:type","text":"Type of path to build as the base."},{"tag":"param:buffer","text":"Buffer to store the path."},{"tag":"param:maxlength","text":"Maximum length of buffer."},{"tag":"param:fmt","text":"Format string."},{"tag":"param:...","text":"Format arguments."},{"tag":"return","text":"Number of bytes written to buffer (not including null terminator)."}]},"kind":"native","returnType":"int","arguments":[{"type":"PathType","name":"type","decl":"PathType type","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"DirExists":{"symbol":{"name":"DirExists","docStart":21743,"docEnd":22302,"docs":{"brief":"Checks if a directory exists.","tags":[{"tag":"","text":"Checks if a directory exists."},{"tag":"param:path","text":"Path to the directory."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to find files existing in any of\nthe Valve search paths, rather than solely files\nexisting directly in the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"True if the directory exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"GAME\""}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FlushFile":{"symbol":{"name":"FlushFile","docStart":23061,"docEnd":23351,"docs":{"brief":"Flushes a file's buffered output; any buffered output\nis immediately written to the file.","tags":[{"tag":"","text":"Flushes a file's buffered output; any buffered output\nis immediately written to the file."},{"tag":"param:file","text":"Handle to the file."},{"tag":"return","text":"True on success or use_valve_fs specified with OpenFile,\notherwise false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"file","decl":"Handle file","default":null}]},"created":{"hash":"459a9d41ba6b66564b73b14fcb1d944f90998382","count":822,"time":1179710918},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"GetFileTime":{"symbol":{"name":"GetFileTime","docStart":25331,"docEnd":25520,"docs":{"brief":"Returns a file timestamp as a unix timestamp.","tags":[{"tag":"","text":"Returns a file timestamp as a unix timestamp."},{"tag":"param:file","text":"File name."},{"tag":"param:tmode","text":"Time mode."},{"tag":"return","text":"Time value, or -1 on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"FileTimeMode","name":"tmode","decl":"FileTimeMode tmode","default":null}]},"created":{"hash":"d9866748f72e1b38b7c1d396370e7fa35c30a9e7","count":1371,"time":1188152942},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"LogToOpenFileEx":{"symbol":{"name":"LogToOpenFileEx","docStart":25966,"docEnd":26270,"docs":{"brief":"Same as LogToFileEx(), except uses an open file Handle.  The file must\nbe opened in text appending mode.","tags":[{"tag":"","text":"Same as LogToFileEx(), except uses an open file Handle.  The file must\nbe opened in text appending mode."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:message","text":"Message format."},{"tag":"param:...","text":"Message format parameters."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"aab0eeaa1ee5de3f41a0aa0685ea35f08735ab05","count":1379,"time":1188180037},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"WriteFileString":{"symbol":{"name":"WriteFileString","docStart":17368,"docEnd":17677,"docs":{"brief":"Writes a binary string to a file.","tags":[{"tag":"","text":"Writes a binary string to a file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:buffer","text":"String to write."},{"tag":"param:term","text":"True to append NUL terminator, false otherwise."},{"tag":"return","text":"True on success, false on error."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"bool","name":"term","decl":"bool term","default":null}]},"created":{"hash":"abb763d1e1049de0ae16d1848c0cf0619b747b88","count":1797,"time":1197846660},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"WriteFileCell":{"symbol":{"name":"WriteFileCell","docStart":18760,"docEnd":19327,"docs":{"brief":"Writes a single binary cell to a file.","tags":[{"tag":"","text":"Writes a single binary cell to a file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:data","text":"Cell to write to the file."},{"tag":"param:size","text":"Size of the data to read in bytes.  Valid\nsizes are 1, 2, or 4 bytes.  If the size\nis less than 4 bytes, the data is truncated\nrather than casted.  That is, only the lower\nbits will be read."},{"tag":"return","text":"True on success, false on error."},{"tag":"error","text":"Invalid Handle."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"int","name":"data","decl":"int data","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"abb763d1e1049de0ae16d1848c0cf0619b747b88","count":1797,"time":1197846660},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"ReadFile":{"symbol":{"name":"ReadFile","docStart":15246,"docEnd":15647,"docs":{"brief":"Reads binary data from a file.","tags":[{"tag":"","text":"Reads binary data from a file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:items","text":"Array to store each item read."},{"tag":"param:num_items","text":"Number of items to read into the array."},{"tag":"param:size","text":"Size of each element, in bytes, to be read.\nValid sizes are 1, 2, or 4."},{"tag":"return","text":"Number of elements read, or -1 on error."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"any[]","name":"items","decl":"any[] items","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"abb763d1e1049de0ae16d1848c0cf0619b747b88","count":1797,"time":1197846660},"last_updated":{"hash":"4e0ae0cb5e57d3f438a7cb2d015bb36e9488c1aa","count":6590,"time":1594285753}},"SetFilePermissions":{"symbol":{"name":"SetFilePermissions","docStart":25059,"docEnd":25265,"docs":{"brief":"Changes a file or directories permissions.","tags":[{"tag":"","text":"Changes a file or directories permissions."},{"tag":"param:path","text":"Path to the file."},{"tag":"param:mode","text":"Permissions to set."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"int","name":"mode","decl":"int mode","default":null}]},"created":{"hash":"f3299b2c8c8b7c189a7682d3ce05c034a2532b05","count":4515,"time":1403325907},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"RemoveDir":{"symbol":{"name":"RemoveDir","docStart":23392,"docEnd":23629,"docs":{"brief":"Removes a directory.","tags":[{"tag":"","text":"Removes a directory."},{"tag":"note","text":"On most Operating Systems you cannot remove a directory which has files inside it."},{"tag":"param:path","text":"Path to the directory."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"LogToOpenFile":{"symbol":{"name":"LogToOpenFile","docStart":25588,"docEnd":25890,"docs":{"brief":"Same as LogToFile(), except uses an open file Handle.  The file must\nbe opened in text appending mode.","tags":[{"tag":"","text":"Same as LogToFile(), except uses an open file Handle.  The file must\nbe opened in text appending mode."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:message","text":"Message format."},{"tag":"param:...","text":"Message format parameters."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"aab0eeaa1ee5de3f41a0aa0685ea35f08735ab05","count":1379,"time":1188180037},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"ReadFileCell":{"symbol":{"name":"ReadFileCell","docStart":18174,"docEnd":18568,"docs":{"brief":"Reads a single binary cell from a file.","tags":[{"tag":"","text":"Reads a single binary cell from a file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:data","text":"Variable to store the data read."},{"tag":"param:size","text":"Size of the data to read in bytes.  Valid\nsizes are 1, 2, or 4 bytes."},{"tag":"return","text":"Number of elements read (max 1), or -1 on error."},{"tag":"error","text":"Invalid Handle."}]},"kind":"stock","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"int&","name":"data","decl":"int& data","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"abb763d1e1049de0ae16d1848c0cf0619b747b88","count":1797,"time":1197846660},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"WriteFile":{"symbol":{"name":"WriteFile","docStart":16611,"docEnd":17283,"docs":{"brief":"Writes binary data to a file.","tags":[{"tag":"","text":"Writes binary data to a file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:items","text":"Array of items to write.  The data is read directly.\nThat is, in 1 or 2-byte mode, the lower byte(s) in\neach cell are used directly, rather than performing\nany casts from a 4-byte number to a smaller number."},{"tag":"param:num_items","text":"Number of items in the array."},{"tag":"param:size","text":"Size of each item in the array in bytes.\nValid sizes are 1, 2, or 4."},{"tag":"return","text":"True on success, false on error."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"const any[]","name":"items","decl":"const any[] items","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"abb763d1e1049de0ae16d1848c0cf0619b747b88","count":1797,"time":1197846660},"last_updated":{"hash":"4e0ae0cb5e57d3f438a7cb2d015bb36e9488c1aa","count":6590,"time":1594285753}},"OpenFile":{"symbol":{"name":"OpenFile","docStart":12234,"docEnd":14094,"docs":{"brief":"Opens or creates a file, returning a File handle on success. File handles\nshould be closed with delete or CloseHandle().\n\nThe open mode may be one of the following strings:\n\"r\": Open an existing file for reading.\n\"w\": Create a file for writing, or truncate (delete the contents of) an\nexisting file and then open it for writing.\n\"a\": Create a file for writing, or open an existing file such that writes\nwill be appended to the end.\n\"r+\": Open an existing file for both reading and writing.\n\"w+\": Create a file for reading and writing, or truncate an existing file\nand then open it for reading and writing.\n\"a+\": Create a file for both reading and writing, or open an existing file\nsuch that writes will be appended to the end.\n\nThe open mode may also contain an additional character after \"r\", \"w\", or \"a\",\nbut before any \"+\" sign. This character may be \"b\" (indicating binary mode) or\n\"t\" (indicating text mode). By default, \"text\" mode is implied. On Linux and\nMac, this has no distinction from binary mode. On Windows, it causes the '\\n'\ncharacter (0xA) to be written as \"\\r\\n\" (0xD, 0xA).\n\nExample: \"rb\" opens a binary file for reading; \"at\" opens a text file for\nappending.","tags":[{"tag":"","text":"Opens or creates a file, returning a File handle on success. File handles\nshould be closed with delete or CloseHandle().\n\nThe open mode may be one of the following strings:\n\"r\": Open an existing file for reading.\n\"w\": Create a file for writing, or truncate (delete the contents of) an\nexisting file and then open it for writing.\n\"a\": Create a file for writing, or open an existing file such that writes\nwill be appended to the end.\n\"r+\": Open an existing file for both reading and writing.\n\"w+\": Create a file for reading and writing, or truncate an existing file\nand then open it for reading and writing.\n\"a+\": Create a file for both reading and writing, or open an existing file\nsuch that writes will be appended to the end.\n\nThe open mode may also contain an additional character after \"r\", \"w\", or \"a\",\nbut before any \"+\" sign. This character may be \"b\" (indicating binary mode) or\n\"t\" (indicating text mode). By default, \"text\" mode is implied. On Linux and\nMac, this has no distinction from binary mode. On Windows, it causes the '\\n'\ncharacter (0xA) to be written as \"\\r\\n\" (0xD, 0xA).\n\nExample: \"rb\" opens a binary file for reading; \"at\" opens a text file for\nappending."},{"tag":"param:file","text":"File to open."},{"tag":"param:mode","text":"Open mode."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to find files existing in valve\nsearch paths, rather than solely files existing directly\nin the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"A File handle, or null if the file could not be opened."}]},"kind":"native","returnType":"File","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"const char[]","name":"mode","decl":"const char[] mode","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"GAME\""}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"9e39f18230c0424d8b7ccf869193d0739b8a2bdb","count":6467,"time":1573518252}},"ReadFileString":{"symbol":{"name":"ReadFileString","docStart":15724,"docEnd":16518,"docs":{"brief":"Reads a UTF8 or ANSI string from a file.","tags":[{"tag":"","text":"Reads a UTF8 or ANSI string from a file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:buffer","text":"Buffer to store the string."},{"tag":"param:max_size","text":"Maximum size of the string buffer."},{"tag":"param:read_count","text":"If -1, reads until a null terminator is encountered in\nthe file.  Otherwise, read_count bytes are read\ninto the buffer provided.  In this case the buffer\nis not explicitly null terminated, and the buffer\nwill contain any null terminators read from the file."},{"tag":"return","text":"Number of characters written to the buffer, or -1\nif an error was encountered."},{"tag":"error","text":"Invalid Handle, or read_count > max_size."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"read_count","decl":"int read_count","default":"-1"}]},"created":{"hash":"abb763d1e1049de0ae16d1848c0cf0619b747b88","count":1797,"time":1197846660},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"RenameFile":{"symbol":{"name":"RenameFile","docStart":21041,"docEnd":21596,"docs":{"brief":"Renames a file.","tags":[{"tag":"","text":"Renames a file."},{"tag":"param:newpath","text":"New path to the file."},{"tag":"param:oldpath","text":"Path to the existing file."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to rename files in the game's\nValve search paths, rather than directly in the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"True on success or use_valve_fs specified, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"newpath","decl":"const char[] newpath","default":null},{"type":"const char[]","name":"oldpath","decl":"const char[] oldpath","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"DEFAULT_WRITE_PATH\""}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"DeleteFile":{"symbol":{"name":"DeleteFile","docStart":14219,"docEnd":14786,"docs":{"brief":"Deletes a file.","tags":[{"tag":"","text":"Deletes a file."},{"tag":"param:path","text":"Path of the file to delete."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to delete files existing in the Valve\nsearch path, rather than solely files existing directly\nin the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"True on success, false on failure or if file not immediately removed."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"DEFAULT_WRITE_PATH\""}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"ReadFileLine":{"symbol":{"name":"ReadFileLine","docStart":14908,"docEnd":15172,"docs":{"brief":"Reads a line from a text file.","tags":[{"tag":"","text":"Reads a line from a text file."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:buffer","text":"String buffer to hold the line."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"CreateDirectory":{"symbol":{"name":"CreateDirectory","docStart":24212,"docEnd":24922,"docs":{"brief":"Creates a directory.","tags":[{"tag":"","text":"Creates a directory."},{"tag":"param:path","text":"Path to create."},{"tag":"param:mode","text":"Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have\nthe execute bit set on Linux.  On Windows, the mode is ignored."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to create folders in the game's\nValve search paths, rather than directly in the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for default.\nIn this case, mode is ignored."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"int","name":"mode","decl":"int mode","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"DEFAULT_WRITE_PATH\""}]},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"WriteFileLine":{"symbol":{"name":"WriteFileLine","docStart":17756,"docEnd":18099,"docs":{"brief":"Writes a line of text to a text file.  A newline is automatically appended.","tags":[{"tag":"","text":"Writes a line of text to a text file.  A newline is automatically appended."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"ReadDirEntry":{"symbol":{"name":"ReadDirEntry","docStart":11487,"docEnd":12128,"docs":{"brief":"Reads the current directory entry as a local filename, then moves to the next file.","tags":[{"tag":"","text":"Reads the current directory entry as a local filename, then moves to the next file."},{"tag":"note","text":"Contents of buffers are undefined when returning false."},{"tag":"note","text":"Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux."},{"tag":"param:dir","text":"Handle to a directory."},{"tag":"param:buffer","text":"String buffer to hold directory name."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"param:type","text":"Optional variable to store the file type."},{"tag":"return","text":"True on success, false if there are no more files to read."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"dir","decl":"Handle dir","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"FileType&","name":"type","decl":"FileType& type","default":"FileType_Unknown"}]},"created":{"hash":"2fc806542a2c68707ac57b5a8f8de291ab3c52e4","count":253,"time":1167681016},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"OpenDirectory":{"symbol":{"name":"OpenDirectory","docStart":10627,"docEnd":11364,"docs":{"brief":"Opens a directory/folder for contents enumeration.","tags":[{"tag":"","text":"Opens a directory/folder for contents enumeration."},{"tag":"note","text":"Directories are closed with CloseHandle() or delete."},{"tag":"note","text":"Directories Handles can be cloned."},{"tag":"note","text":"OpenDirectory() supports the \"file://\" notation."},{"tag":"param:path","text":"Path to open."},{"tag":"param:use_valve_fs","text":"If true, the Valve file system will be used instead.\nThis can be used to find files existing in any of\nthe Valve search paths, rather than solely files\nexisting directly in the gamedir."},{"tag":"param:valve_path_id","text":"If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths."},{"tag":"return","text":"A Handle to the directory, null on error."}]},"kind":"native","returnType":"DirectoryListing","arguments":[{"type":"const char[]","name":"path","decl":"const char[] path","default":null},{"type":"bool","name":"use_valve_fs","decl":"bool use_valve_fs","default":"false"},{"type":"const char[]","name":"valve_path_id","decl":"const char[] valve_path_id","default":"\"GAME\""}]},"created":{"hash":"2fc806542a2c68707ac57b5a8f8de291ab3c52e4","count":253,"time":1167681016},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}}},"methodmaps":{"DirectoryListing":{"symbol":{"name":"DirectoryListing","docStart":3138,"docEnd":3265,"docs":{"brief":"A DirectoryListing iterates over the contents of a directory. To obtain a\nDirectoryListing handle, call OpenDirectory().","tags":[{"tag":"","text":"A DirectoryListing iterates over the contents of a directory. To obtain a\nDirectoryListing handle, call OpenDirectory()."}]},"parent":"Handle","methods":[{"name":"GetNext","docStart":3308,"docEnd":3771,"docs":{"brief":"Reads the current directory entry as a local filename, then moves to the\nnext file.\n\nNote: Both the '.' and '..' automatic directory entries will be retrieved.","tags":[{"tag":"","text":"Reads the current directory entry as a local filename, then moves to the\nnext file.\n\nNote: Both the '.' and '..' automatic directory entries will be retrieved."},{"tag":"param:buffer","text":"String buffer to hold directory name."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"param:type","text":"Optional variable to store the file type."},{"tag":"return","text":"True on success, false if there are no more files to read."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"FileType&","name":"type","decl":"FileType& type","default":"FileType_Unknown"}]}],"properties":[]},"created":{"hash":"79143d8b6e1cee3b716262025b5c78248982f69b","count":5041,"time":1416087748},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"File":{"symbol":{"name":"File","docStart":3872,"docEnd":4076,"docs":{"brief":"A File object can be obtained by calling OpenFile(). File objects should be\nclosed with delete or Close(). Note that, \"delete file\" does not\nactually delete the file, it just closes the handle.","tags":[{"tag":"","text":"A File object can be obtained by calling OpenFile(). File objects should be\nclosed with delete or Close(). Note that, \"delete file\" does not\nactually delete the file, it just closes the handle."}]},"parent":"Handle","methods":[{"name":"Close","docStart":4107,"docEnd":4183,"docs":{"brief":"Close the file handle. This is the same as using CloseHandle() or delete.","tags":[{"tag":"","text":"Close the file handle. This is the same as using CloseHandle() or delete."}]},"kind":"stock","returnType":"void","arguments":[]},{"name":"ReadLine","docStart":4238,"docEnd":4460,"docs":{"brief":"Reads a line of text from a file.","tags":[{"tag":"","text":"Reads a line of text from a file."},{"tag":"param:buffer","text":"String buffer to hold the line."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"Read","docStart":4526,"docEnd":4888,"docs":{"brief":"Reads binary data from a file.","tags":[{"tag":"","text":"Reads binary data from a file."},{"tag":"param:items","text":"Array to store each item read."},{"tag":"param:num_items","text":"Number of items to read into the array."},{"tag":"param:size","text":"Size of each element, in bytes, to be read.\nValid sizes are 1, 2, or 4."},{"tag":"return","text":"Number of elements read, or -1 on error."}]},"kind":"native","returnType":"int","arguments":[{"type":"any[]","name":"items","decl":"any[] items","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"ReadString","docStart":4957,"docEnd":5708,"docs":{"brief":"Reads a UTF8 or ANSI string from a file.","tags":[{"tag":"","text":"Reads a UTF8 or ANSI string from a file."},{"tag":"param:buffer","text":"Buffer to store the string."},{"tag":"param:max_size","text":"Maximum size of the string buffer."},{"tag":"param:read_count","text":"If -1, reads until a null terminator is encountered in\nthe file.  Otherwise, read_count bytes are read\ninto the buffer provided.  In this case the buffer\nis not explicitly null terminated, and the buffer\nwill contain any null terminators read from the file."},{"tag":"return","text":"Number of characters written to the buffer, or -1\nif an error was encountered."},{"tag":"error","text":"read_count > max_size."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"read_count","decl":"int read_count","default":"-1"}]},{"name":"Write","docStart":5793,"docEnd":6394,"docs":{"brief":"Writes binary data to a file.","tags":[{"tag":"","text":"Writes binary data to a file."},{"tag":"param:items","text":"Array of items to write.  The data is read directly.\nThat is, in 1 or 2-byte mode, the lower byte(s) in\neach cell are used directly, rather than performing\nany casts from a 4-byte number to a smaller number."},{"tag":"param:num_items","text":"Number of items in the array."},{"tag":"param:size","text":"Size of each item in the array in bytes.\nValid sizes are 1, 2, or 4."},{"tag":"return","text":"True on success, false on error."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const any[]","name":"items","decl":"const any[] items","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"WriteString","docStart":6471,"docEnd":6694,"docs":{"brief":"Writes a binary string to a file.","tags":[{"tag":"","text":"Writes a binary string to a file."},{"tag":"param:buffer","text":"String to write."},{"tag":"param:term","text":"True to append NUL terminator, false otherwise."},{"tag":"return","text":"True on success, false on error."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"bool","name":"term","decl":"bool term","default":null}]},{"name":"WriteLine","docStart":6765,"docEnd":7070,"docs":{"brief":"Writes a line of text to a text file.  A newline is automatically appended.","tags":[{"tag":"","text":"Writes a line of text to a text file.  A newline is automatically appended."},{"tag":"param:hndl","text":"Handle to the file."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"ReadInt8","docStart":7137,"docEnd":7363,"docs":{"brief":"Reads a single int8 (byte) from a file. The returned value is sign-\nextended to an int32.","tags":[{"tag":"","text":"Reads a single int8 (byte) from a file. The returned value is sign-\nextended to an int32."},{"tag":"param:data","text":"Variable to store the data read."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"data","decl":"int& data","default":null}]},{"name":"ReadUint8","docStart":7410,"docEnd":7645,"docs":{"brief":"Reads a single uint8 (unsigned byte) from a file. The returned value is\nzero-extended to an int32.","tags":[{"tag":"","text":"Reads a single uint8 (unsigned byte) from a file. The returned value is\nzero-extended to an int32."},{"tag":"param:data","text":"Variable to store the data read."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"data","decl":"int& data","default":null}]},{"name":"ReadInt16","docStart":7693,"docEnd":7911,"docs":{"brief":"Reads a single int16 (short) from a file. The value is sign-extended to\nan int32.","tags":[{"tag":"","text":"Reads a single int16 (short) from a file. The value is sign-extended to\nan int32."},{"tag":"param:data","text":"Variable to store the data read."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"data","decl":"int& data","default":null}]},{"name":"ReadUint16","docStart":7959,"docEnd":8187,"docs":{"brief":"Reads a single unt16 (unsigned short) from a file. The value is zero-\nextended to an int32.","tags":[{"tag":"","text":"Reads a single unt16 (unsigned short) from a file. The value is zero-\nextended to an int32."},{"tag":"param:data","text":"Variable to store the data read."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"data","decl":"int& data","default":null}]},{"name":"ReadInt32","docStart":8236,"docEnd":8412,"docs":{"brief":"Reads a single int32 (int/cell) from a file.","tags":[{"tag":"","text":"Reads a single int32 (int/cell) from a file."},{"tag":"param:data","text":"Variable to store the data read."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"data","decl":"int& data","default":null}]},{"name":"WriteInt8","docStart":8460,"docEnd":8635,"docs":{"brief":"Writes a single int8 (byte) to a file.","tags":[{"tag":"","text":"Writes a single int8 (byte) to a file."},{"tag":"param:data","text":"Data to write (truncated to an int8)."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"data","decl":"int data","default":null}]},{"name":"WriteInt16","docStart":8682,"docEnd":8860,"docs":{"brief":"Writes a single int16 (short) to a file.","tags":[{"tag":"","text":"Writes a single int16 (short) to a file."},{"tag":"param:data","text":"Data to write (truncated to an int16)."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"data","decl":"int data","default":null}]},{"name":"WriteInt32","docStart":8908,"docEnd":9065,"docs":{"brief":"Writes a single int32 (int/cell) to a file.","tags":[{"tag":"","text":"Writes a single int32 (int/cell) to a file."},{"tag":"param:data","text":"Data to write."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"data","decl":"int data","default":null}]},{"name":"EndOfFile","docStart":9113,"docEnd":9246,"docs":{"brief":"Tests if the end of file has been reached.","tags":[{"tag":"","text":"Tests if the end of file has been reached."},{"tag":"return","text":"True if end of file has been reached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"Seek","docStart":9285,"docEnd":9537,"docs":{"brief":"Sets the file position indicator.","tags":[{"tag":"","text":"Sets the file position indicator."},{"tag":"param:position","text":"Position relative to what is specified in whence."},{"tag":"param:where","text":"SEEK_ constant value of where to see from."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null},{"type":"int","name":"where","decl":"int where","default":null}]},{"name":"Flush","docStart":9594,"docEnd":9834,"docs":{"brief":"Flushes a file's buffered output; any buffered output\nis immediately written to the file.","tags":[{"tag":"","text":"Flushes a file's buffered output; any buffered output\nis immediately written to the file."},{"tag":"return","text":"True on success or use_valve_fs specified with OpenFile,\notherwise false on failure."}]},"kind":"native","returnType":"bool","arguments":[]}],"properties":[{"name":"Position","docStart":9870,"docEnd":9933,"docs":{"brief":"Get the current position in the file; returns -1 on failure.","tags":[{"tag":"","text":"Get the current position in the file; returns -1 on failure."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"79143d8b6e1cee3b716262025b5c78248982f69b","count":5041,"time":1416087748},"last_updated":{"hash":"4e0ae0cb5e57d3f438a7cb2d015bb36e9488c1aa","count":6590,"time":1594285753}}},"enumstructs":{},"constants":{},"defines":{"FPERM_G_WRITE":{"symbol":{"name":"FPERM_G_WRITE","docStart":23946,"docEnd":23968,"docs":{"brief":"Group can write.","tags":[{"tag":"","text":"Group can write."}]},"value":"0x0010"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FPERM_G_READ":{"symbol":{"name":"FPERM_G_READ","docStart":23887,"docEnd":23908,"docs":{"brief":"Group can read.","tags":[{"tag":"","text":"Group can read."}]},"value":"0x0020"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FPERM_U_EXEC":{"symbol":{"name":"FPERM_U_EXEC","docStart":23829,"docEnd":23849,"docs":{"brief":"User can exec.","tags":[{"tag":"","text":"User can exec."}]},"value":"0x0040"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"SEEK_END":{"symbol":{"name":"SEEK_END","docStart":2993,"docEnd":3024,"docs":{"brief":"Seek from end position.","tags":[{"tag":"","text":"Seek from end position."}]},"value":"2"},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FPERM_O_WRITE":{"symbol":{"name":"FPERM_O_WRITE","docStart":24125,"docEnd":24148,"docs":{"brief":"Anyone can write.","tags":[{"tag":"","text":"Anyone can write."}]},"value":"0x0002"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"SEEK_SET":{"symbol":{"name":"SEEK_SET","docStart":2866,"docEnd":2890,"docs":{"brief":"Seek from start.","tags":[{"tag":"","text":"Seek from start."}]},"value":"0"},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FPERM_G_EXEC":{"symbol":{"name":"FPERM_G_EXEC","docStart":24006,"docEnd":24027,"docs":{"brief":"Group can exec.","tags":[{"tag":"","text":"Group can exec."}]},"value":"0x0008"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FPERM_O_READ":{"symbol":{"name":"FPERM_O_READ","docStart":24065,"docEnd":24087,"docs":{"brief":"Anyone can read.","tags":[{"tag":"","text":"Anyone can read."}]},"value":"0x0004"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"FPERM_U_READ":{"symbol":{"name":"FPERM_U_READ","docStart":23712,"docEnd":23732,"docs":{"brief":"User can read.","tags":[{"tag":"","text":"User can read."}]},"value":"0x0100"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"PLATFORM_MAX_PATH":{"symbol":{"name":"PLATFORM_MAX_PATH","docStart":2802,"docEnd":2830,"docs":{"brief":"Maximum path length.","tags":[{"tag":"","text":"Maximum path length."}]},"value":"256"},"created":{"hash":"2a7f0b985434b888d9ae17f8450fe2987685c1c2","count":258,"time":1167687993},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SEEK_CUR":{"symbol":{"name":"SEEK_CUR","docStart":2924,"docEnd":2959,"docs":{"brief":"Seek from current position.","tags":[{"tag":"","text":"Seek from current position."}]},"value":"1"},"created":{"hash":"45baab94a6e979f44de113122166f41c76399855","count":275,"time":1168133428},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FPERM_O_EXEC":{"symbol":{"name":"FPERM_O_EXEC","docStart":24186,"docEnd":24208,"docs":{"brief":"Anyone can exec.","tags":[{"tag":"","text":"Anyone can exec."}]},"value":"0x0001"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}},"_files_included":{"symbol":{"name":"_files_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"2fc806542a2c68707ac57b5a8f8de291ab3c52e4","count":253,"time":1167681016},"last_updated":{"hash":"2fc806542a2c68707ac57b5a8f8de291ab3c52e4","count":253,"time":1167681016}},"FPERM_U_WRITE":{"symbol":{"name":"FPERM_U_WRITE","docStart":23770,"docEnd":23791,"docs":{"brief":"User can write.","tags":[{"tag":"","text":"User can write."}]},"value":"0x0080"},"created":{"hash":"556c03babfeac3d679edfb459384efb4d20eff11","count":2308,"time":1221635239},"last_updated":{"hash":"22635d8d354f42d8e295617d74ea95d3ef28c68b","count":6434,"time":1564611487}}},"enums":{"FileType":{"symbol":{"name":"FileType","docStart":2297,"docEnd":2327,"docs":{"brief":"File inode types.","tags":[{"tag":"","text":"File inode types."}]},"entries":[{"name":"FileType_Unknown","docStart":2372,"docEnd":2411,"docs":{"brief":"Unknown file type (device/socket)","tags":[{"tag":"","text":"Unknown file type (device/socket)"}]},"value":"0"},{"name":"FileType_Directory","docStart":2438,"docEnd":2463,"docs":{"brief":"File is a directory","tags":[{"tag":"","text":"File is a directory"}]},"value":"1"},{"name":"FileType_File","docStart":2490,"docEnd":2510,"docs":{"brief":"File is a file","tags":[{"tag":"","text":"File is a file"}]},"value":"2"}]},"created":{"hash":"2fc806542a2c68707ac57b5a8f8de291ab3c52e4","count":253,"time":1167681016},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PathType":{"symbol":{"name":"PathType","docStart":3028,"docEnd":3052,"docs":{"brief":"Path types.","tags":[{"tag":"","text":"Path types."}]},"entries":[{"name":"Path_SM","docStart":3101,"docEnd":3130,"docs":{"brief":"SourceMod root folder","tags":[{"tag":"","text":"SourceMod root folder"}]},"value":null}]},"created":{"hash":"5187ea19036cead2218b933798c28a06fc44145f","count":635,"time":1174077572},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FileTimeMode":{"symbol":{"name":"FileTimeMode","docStart":2518,"docEnd":2547,"docs":{"brief":"File time modes.","tags":[{"tag":"","text":"File time modes."}]},"entries":[{"name":"FileTime_LastAccess","docStart":2600,"docEnd":2640,"docs":{"brief":"Last access (does not work on FAT)","tags":[{"tag":"","text":"Last access (does not work on FAT)"}]},"value":"0"},{"name":"FileTime_Created","docStart":2671,"docEnd":2708,"docs":{"brief":"Creation (does not work on FAT)","tags":[{"tag":"","text":"Creation (does not work on FAT)"}]},"value":"1"},{"name":"FileTime_LastChange","docStart":2739,"docEnd":2762,"docs":{"brief":"Last modification","tags":[{"tag":"","text":"Last modification"}]},"value":"2"}]},"created":{"hash":"d9866748f72e1b38b7c1d396370e7fa35c30a9e7","count":1371,"time":1188152942},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"textparse":{"functions":{"SMC_CreateParser":{"symbol":{"name":"SMC_CreateParser","docStart":7458,"docEnd":7611,"docs":{"brief":"Creates a new SMC file format parser.  This is used to set parse hooks.","tags":[{"tag":"","text":"Creates a new SMC file format parser.  This is used to set parse hooks."},{"tag":"return","text":"A new Handle to an SMC Parse structure."}]},"kind":"native","returnType":"SMCParser","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_ParseFile":{"symbol":{"name":"SMC_ParseFile","docStart":7653,"docEnd":8096,"docs":{"brief":"Parses an SMC file.","tags":[{"tag":"","text":"Parses an SMC file."},{"tag":"param:smc","text":"A Handle to an SMC Parse structure."},{"tag":"param:file","text":"A string containing the file path."},{"tag":"param:line","text":"An optional by reference cell to store the last line number read."},{"tag":"param:col","text":"An optional by reference cell to store the last column number read."},{"tag":"return","text":"An SMCParseError result."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"SMCError","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"int&","name":"line","decl":"int& line","default":"0"},{"type":"int&","name":"col","decl":"int& col","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_SetParseStart":{"symbol":{"name":"SMC_SetParseStart","docStart":8704,"docEnd":8923,"docs":{"brief":"Sets the SMC_ParseStart function of a parse Handle.","tags":[{"tag":"","text":"Sets the SMC_ParseStart function of a parse Handle."},{"tag":"param:smc","text":"Handle to an SMC Parse."},{"tag":"param:func","text":"SMC_ParseStart function."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc","default":null},{"type":"SMC_ParseStart","name":"func","decl":"SMC_ParseStart func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_SetParseEnd":{"symbol":{"name":"SMC_SetParseEnd","docStart":8992,"docEnd":9198,"docs":{"brief":"Sets the SMC_ParseEnd of a parse handle.","tags":[{"tag":"","text":"Sets the SMC_ParseEnd of a parse handle."},{"tag":"param:smc","text":"Handle to an SMC Parse."},{"tag":"param:func","text":"SMC_ParseEnd function."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc","default":null},{"type":"SMC_ParseEnd","name":"func","decl":"SMC_ParseEnd func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_SetRawLine":{"symbol":{"name":"SMC_SetRawLine","docStart":9644,"docEnd":9804,"docs":{"brief":"Sets a raw line reader on an SMC parser Handle.","tags":[{"tag":"","text":"Sets a raw line reader on an SMC parser Handle."},{"tag":"param:smc","text":"Handle to an SMC Parse."},{"tag":"param:func","text":"SMC_RawLine function."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc","default":null},{"type":"SMC_RawLine","name":"func","decl":"SMC_RawLine func","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_SetReaders":{"symbol":{"name":"SMC_SetReaders","docStart":9263,"docEnd":9544,"docs":{"brief":"Sets the three main reader functions.","tags":[{"tag":"","text":"Sets the three main reader functions."},{"tag":"param:smc","text":"An SMC parse Handle."},{"tag":"param:ns","text":"An SMC_NewSection function pointer."},{"tag":"param:kv","text":"An SMC_KeyValue function pointer."},{"tag":"param:es","text":"An SMC_EndSection function pointer."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc","default":null},{"type":"SMC_NewSection","name":"ns","decl":"SMC_NewSection ns","default":null},{"type":"SMC_KeyValue","name":"kv","decl":"SMC_KeyValue kv","default":null},{"type":"SMC_EndSection","name":"es","decl":"SMC_EndSection es","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_GetErrorString":{"symbol":{"name":"SMC_GetErrorString","docStart":8188,"docEnd":8623,"docs":{"brief":"Gets an error string for an SMCError code.","tags":[{"tag":"","text":"Gets an error string for an SMCError code."},{"tag":"note","text":"SMCError_Okay returns false."},{"tag":"note","text":"SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false."},{"tag":"param:error","text":"The SMCParseError code."},{"tag":"param:buffer","text":"A string buffer for the error (contents undefined on failure)."},{"tag":"param:buf_max","text":"The maximum size of the buffer."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"SMCError","name":"error","decl":"SMCError error","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"buf_max","decl":"int buf_max","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"SMCParser":{"symbol":{"name":"SMCParser","docStart":5364,"docEnd":5681,"docs":{"brief":"An SMCParser is a callback-driven parser for SourceMod configuration files.\nSMC files are similar to Valve KeyValues format, with two key differences:\n(1) SMC cannot handle single-item entries (that is, a key with no value).\n(2) SMC files can have multi-line comment blocks, whereas KeyValues cannot.","tags":[{"tag":"","text":"An SMCParser is a callback-driven parser for SourceMod configuration files.\nSMC files are similar to Valve KeyValues format, with two key differences:\n(1) SMC cannot handle single-item entries (that is, a key with no value).\n(2) SMC files can have multi-line comment blocks, whereas KeyValues cannot."}]},"parent":"Handle","methods":[{"name":"SMCParser","docStart":5717,"docEnd":5756,"docs":{"brief":"Create a new SMC file format parser.","tags":[{"tag":"","text":"Create a new SMC file format parser."}]},"kind":"native","returnType":"SMCParser","arguments":[]},{"name":"ParseFile","docStart":5790,"docEnd":6097,"docs":{"brief":"Parses an SMC file.","tags":[{"tag":"","text":"Parses an SMC file."},{"tag":"param:file","text":"A string containing the file path."},{"tag":"param:line","text":"An optional variable to store the last line number read."},{"tag":"param:col","text":"An optional variable to store the last column number read."},{"tag":"return","text":"An SMCParseError result."}]},"kind":"native","returnType":"SMCError","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"int&","name":"line","decl":"int& line","default":"0"},{"type":"int&","name":"col","decl":"int& col","default":"0"}]},{"name":"GetErrorString","docStart":7052,"docEnd":7369,"docs":{"brief":"Gets an error string for an SMCError code.","tags":[{"tag":"","text":"Gets an error string for an SMCError code."},{"tag":"param:error","text":"The SMCParseError code."},{"tag":"param:buffer","text":"A string buffer for the error (contents undefined on failure)."},{"tag":"param:buf_max","text":"The maximum size of the buffer."},{"tag":"return","text":"The number of characters written to buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"SMCError","name":"error","decl":"SMCError error","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"buf_max","decl":"int buf_max","default":null}]}],"properties":[{"name":"OnStart","docStart":6186,"docEnd":6243,"docs":{"brief":"Sets the callback for receiving SMC_ParseStart events.","tags":[{"tag":"","text":"Sets the callback for receiving SMC_ParseStart events."}]},"type":"SMC_ParseStart","getter":false,"setter":true},{"name":"OnEnd","docStart":6331,"docEnd":6386,"docs":{"brief":"Sets the callback for receiving SMC_ParseEnd events.","tags":[{"tag":"","text":"Sets the callback for receiving SMC_ParseEnd events."}]},"type":"SMC_ParseEnd","getter":false,"setter":true},{"name":"OnEnterSection","docStart":6468,"docEnd":6525,"docs":{"brief":"Sets the callback for receiving SMC_NewSection events.","tags":[{"tag":"","text":"Sets the callback for receiving SMC_NewSection events."}]},"type":"SMC_NewSection","getter":false,"setter":true},{"name":"OnLeaveSection","docStart":6620,"docEnd":6677,"docs":{"brief":"Sets the callback for receiving SMC_EndSection events.","tags":[{"tag":"","text":"Sets the callback for receiving SMC_EndSection events."}]},"type":"SMC_EndSection","getter":false,"setter":true},{"name":"OnKeyValue","docStart":6772,"docEnd":6827,"docs":{"brief":"Sets the callback for receiving SMC_KeyValue events.","tags":[{"tag":"","text":"Sets the callback for receiving SMC_KeyValue events."}]},"type":"SMC_KeyValue","getter":false,"setter":true},{"name":"OnRawLine","docStart":6914,"docEnd":6968,"docs":{"brief":"Sets the callback for receiving SMC_RawLine events.","tags":[{"tag":"","text":"Sets the callback for receiving SMC_RawLine events."}]},"type":"SMC_RawLine","getter":false,"setter":true}]},"created":{"hash":"8479c2f067188c5cade70eee1563e722d1ce73b6","count":5001,"time":1415565187},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_textparse_included":{"symbol":{"name":"_textparse_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}},"enums":{"SMCResult":{"symbol":{"name":"SMCResult","docStart":1974,"docEnd":2010,"docs":{"brief":"Parse result directive.","tags":[{"tag":"","text":"Parse result directive."}]},"entries":[{"name":"SMCParse_Continue","docStart":2060,"docEnd":2084,"docs":{"brief":"Continue parsing","tags":[{"tag":"","text":"Continue parsing"}]},"value":null},{"name":"SMCParse_Halt","docStart":2115,"docEnd":2140,"docs":{"brief":"Stop parsing here","tags":[{"tag":"","text":"Stop parsing here"}]},"value":null},{"name":"SMCParse_HaltFail","docStart":2171,"docEnd":2210,"docs":{"brief":"Stop parsing and return failure","tags":[{"tag":"","text":"Stop parsing and return failure"}]},"value":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMCError":{"symbol":{"name":"SMCError","docStart":2218,"docEnd":2249,"docs":{"brief":"Parse error codes.","tags":[{"tag":"","text":"Parse error codes."}]},"entries":[{"name":"SMCError_Okay","docStart":2298,"docEnd":2314,"docs":{"brief":"No error","tags":[{"tag":"","text":"No error"}]},"value":"0"},{"name":"SMCError_StreamOpen","docStart":2345,"docEnd":2374,"docs":{"brief":"Stream failed to open","tags":[{"tag":"","text":"Stream failed to open"}]},"value":null},{"name":"SMCError_StreamError","docStart":2405,"docEnd":2439,"docs":{"brief":"The stream died... somehow","tags":[{"tag":"","text":"The stream died... somehow"}]},"value":null},{"name":"SMCError_Custom","docStart":2470,"docEnd":2509,"docs":{"brief":"A custom handler threw an error","tags":[{"tag":"","text":"A custom handler threw an error"}]},"value":null},{"name":"SMCError_InvalidSection1","docStart":2540,"docEnd":2607,"docs":{"brief":"A section was declared without quotes, and had extra tokens","tags":[{"tag":"","text":"A section was declared without quotes, and had extra tokens"}]},"value":null},{"name":"SMCError_InvalidSection2","docStart":2638,"docEnd":2687,"docs":{"brief":"A section was declared without any header","tags":[{"tag":"","text":"A section was declared without any header"}]},"value":null},{"name":"SMCError_InvalidSection3","docStart":2718,"docEnd":2784,"docs":{"brief":"A section ending was declared with too many unknown tokens","tags":[{"tag":"","text":"A section ending was declared with too many unknown tokens"}]},"value":null},{"name":"SMCError_InvalidSection4","docStart":2815,"docEnd":2865,"docs":{"brief":"A section ending has no matching beginning","tags":[{"tag":"","text":"A section ending has no matching beginning"}]},"value":null},{"name":"SMCError_InvalidSection5","docStart":2896,"docEnd":2946,"docs":{"brief":"A section beginning has no matching ending","tags":[{"tag":"","text":"A section beginning has no matching ending"}]},"value":null},{"name":"SMCError_InvalidTokens","docStart":2977,"docEnd":3039,"docs":{"brief":"There were too many unidentifiable strings on one line","tags":[{"tag":"","text":"There were too many unidentifiable strings on one line"}]},"value":null},{"name":"SMCError_TokenOverflow","docStart":3070,"docEnd":3105,"docs":{"brief":"The token buffer overflowed","tags":[{"tag":"","text":"The token buffer overflowed"}]},"value":null},{"name":"SMCError_InvalidProperty1","docStart":3136,"docEnd":3190,"docs":{"brief":"A property was declared outside of any section","tags":[{"tag":"","text":"A property was declared outside of any section"}]},"value":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{"SMC_ParseEnd":{"symbol":{"name":"SMC_ParseEnd","docStart":4661,"docEnd":4883,"docs":{"brief":"Called when parsing is halted.","tags":[{"tag":"","text":"Called when parsing is halted."},{"tag":"param:smc","text":"The SMCParser."},{"tag":"param:halted","text":"True if abnormally halted, false otherwise."},{"tag":"param:failed","text":"True if parsing failed, false otherwise."}]},"type":"function void(SMCParser smc, bool halted, bool failed)","parsedSignature":{"returnType":"void","arguments":[{"type":"SMCParser","name":"smc","decl":"SMCParser smc","default":null},{"type":"bool","name":"halted","decl":"bool halted","default":null},{"type":"bool","name":"failed","decl":"bool failed","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_KeyValue":{"symbol":{"name":"SMC_KeyValue","docStart":3823,"docEnd":4290,"docs":{"brief":"Called when the parser finds a new key/value pair.\n\nNote: Enclosing quotes are always stripped.","tags":[{"tag":"","text":"Called when the parser finds a new key/value pair.\n\nNote: Enclosing quotes are always stripped."},{"tag":"param:smc","text":"The SMCParser."},{"tag":"param:key","text":"String containing key name."},{"tag":"param:value","text":"String containing value name."},{"tag":"param:key_quotes","text":"Whether or not the key was enclosed in quotes."},{"tag":"param:value_quotes","text":"Whether or not the value was enclosed in quotes."},{"tag":"return","text":"An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)","parsedSignature":{"returnType":"SMCResult","arguments":[{"type":"SMCParser","name":"smc","decl":"SMCParser smc","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"key_quotes","decl":"bool key_quotes","default":null},{"type":"bool","name":"value_quotes","decl":"bool value_quotes","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_NewSection":{"symbol":{"name":"SMC_NewSection","docStart":3354,"docEnd":3721,"docs":{"brief":"Called when the parser is entering a new section or sub-section.\n\nNote: Enclosing quotes are always stripped.","tags":[{"tag":"","text":"Called when the parser is entering a new section or sub-section.\n\nNote: Enclosing quotes are always stripped."},{"tag":"param:smc","text":"The SMC Parser."},{"tag":"param:name","text":"String containing section name."},{"tag":"param:opt_quotes","text":"True if the section name was quote-enclosed in the file."},{"tag":"return","text":"An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc, const char[] name, bool opt_quotes)","parsedSignature":{"returnType":"SMCResult","arguments":[{"type":"SMCParser","name":"smc","decl":"SMCParser smc","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"bool","name":"opt_quotes","decl":"bool opt_quotes","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_ParseStart":{"symbol":{"name":"SMC_ParseStart","docStart":3198,"docEnd":3293,"docs":{"brief":"Called when parsing is started.","tags":[{"tag":"","text":"Called when parsing is started."},{"tag":"param:smc","text":"The SMC Parse Handle."}]},"type":"function void(SMCParser smc)","parsedSignature":{"returnType":"void","arguments":[{"type":"SMCParser","name":"smc","decl":"SMCParser smc","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_EndSection":{"symbol":{"name":"SMC_EndSection","docStart":4428,"docEnd":4595,"docs":{"brief":"Called when the parser finds the end of the current section.","tags":[{"tag":"","text":"Called when the parser finds the end of the current section."},{"tag":"param:smc","text":"The SMCParser."},{"tag":"return","text":"An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc)","parsedSignature":{"returnType":"SMCResult","arguments":[{"type":"SMCParser","name":"smc","decl":"SMCParser smc","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SMC_RawLine":{"symbol":{"name":"SMC_RawLine","docStart":4968,"docEnd":5270,"docs":{"brief":"Callback for whenever a new line of text is about to be parsed.","tags":[{"tag":"","text":"Callback for whenever a new line of text is about to be parsed."},{"tag":"param:smc","text":"The SMCParser."},{"tag":"param:line","text":"A string containing the raw line from the file."},{"tag":"param:lineno","text":"The line number it occurs on."},{"tag":"return","text":"An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc, const char[] line, int lineno)","parsedSignature":{"returnType":"SMCResult","arguments":[{"type":"SMCParser","name":"smc","decl":"SMCParser smc","default":null},{"type":"const char[]","name":"line","decl":"const char[] line","default":null},{"type":"int","name":"lineno","decl":"int lineno","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"halflife":{"functions":{"PrintToChatAll":{"symbol":{"name":"PrintToChatAll","docStart":15023,"docEnd":15195,"docs":{"brief":"Prints a message to all clients in the chat area.","tags":[{"tag":"","text":"Prints a message to all clients in the chat area."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"bd15f93d7d4743b399a7f658378479142874385a","count":893,"time":1181163077},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GetServerAuthId":{"symbol":{"name":"GetServerAuthId","docStart":27333,"docEnd":27850,"docs":{"brief":"Retrieves the server's authentication string (SteamID).\n\nNote: If called before server is connected to Steam, auth id\nwill be invalid ([I:0:1], 1, etc.)","tags":[{"tag":"","text":"Retrieves the server's authentication string (SteamID).\n\nNote: If called before server is connected to Steam, auth id\nwill be invalid ([I:0:1], 1, etc.)"},{"tag":"param:authType","text":"Auth id type and format to use.\n(Only AuthId_Steam3 and AuthId_SteamID64 are supported)"},{"tag":"param:auth","text":"Buffer to store the server's auth id."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"error","text":"Invalid AuthIdType given."}]},"kind":"native","returnType":"void","arguments":[{"type":"AuthIdType","name":"authType","decl":"AuthIdType authType","default":null},{"type":"char[]","name":"auth","decl":"char[] auth","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"ed46ca3328bb878122f74a5af8590feb96e7c3c6","count":5888,"time":1461727028},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GetServerSteamAccountId":{"symbol":{"name":"GetServerSteamAccountId","docStart":27930,"docEnd":28050,"docs":{"brief":"Returns the server's Steam account ID.","tags":[{"tag":"","text":"Returns the server's Steam account ID."},{"tag":"return","text":"Steam account ID or 0 if not available."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"ed46ca3328bb878122f74a5af8590feb96e7c3c6","count":5888,"time":1461727028},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"PrecacheModel":{"symbol":{"name":"PrecacheModel","docStart":10754,"docEnd":11007,"docs":{"brief":"Precaches a given model.","tags":[{"tag":"","text":"Precaches a given model."},{"tag":"param:model","text":"Name of the model to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns the model index, 0 for error."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"model","decl":"const char[] model","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ShowMOTDPanel":{"symbol":{"name":"ShowMOTDPanel","docStart":24508,"docEnd":25057,"docs":{"brief":"Shows a MOTD panel to a specific client.","tags":[{"tag":"","text":"Shows a MOTD panel to a specific client."},{"tag":"param:client","text":"Client index."},{"tag":"param:title","text":"Title of the panel (printed on the top border of the window)."},{"tag":"param:msg","text":"Contents of the panel, it can be treated as an url, filename or plain text\ndepending on the type parameter (WARNING: msg has to be 192 bytes maximum!)"},{"tag":"param:type","text":"Determines the way to treat the message body of the panel."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"title","decl":"const char[] title","default":null},{"type":"const char[]","name":"msg","decl":"const char[] msg","default":null},{"type":"int","name":"type","decl":"int type","default":"1"}]},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GetRandomInt":{"symbol":{"name":"GetRandomInt","docStart":6801,"docEnd":7047,"docs":{"brief":"Returns a random number from the Half-Life 2 Random Stream.","tags":[{"tag":"","text":"Returns a random number from the Half-Life 2 Random Stream."},{"tag":"param:nmin","text":"Minimum random bound."},{"tag":"param:nmax","text":"Maximum random bound."},{"tag":"return","text":"A random number between (inclusive) nmin and nmax."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"nmin","decl":"int nmin","default":null},{"type":"int","name":"nmax","decl":"int nmax","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetGameFrameTime":{"symbol":{"name":"GetGameFrameTime","docStart":9537,"docEnd":9653,"docs":{"brief":"Returns the time the Game took processing the last frame.","tags":[{"tag":"","text":"Returns the time the Game took processing the last frame."},{"tag":"return","text":"Game frame time."}]},"kind":"native","returnType":"float","arguments":[]},"created":{"hash":"44c744b8fd4da788c02275599136ae3ffa0af58d","count":6118,"time":1498472292},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrecacheSound":{"symbol":{"name":"PrecacheSound","docStart":12750,"docEnd":13014,"docs":{"brief":"Precaches a given sound.","tags":[{"tag":"","text":"Precaches a given sound."},{"tag":"param:sound","text":"Name of the sound to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"True if successfully precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"sound","decl":"const char[] sound","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsDedicatedServer":{"symbol":{"name":"IsDedicatedServer","docStart":8944,"docEnd":9062,"docs":{"brief":"Returns whether the server is dedicated.","tags":[{"tag":"","text":"Returns whether the server is dedicated."},{"tag":"return","text":"True if dedicated, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetGameFolderName":{"symbol":{"name":"GetGameFolderName","docStart":10168,"docEnd":10417,"docs":{"brief":"Returns the name of the game's directory.","tags":[{"tag":"","text":"Returns the name of the game's directory."},{"tag":"param:buffer","text":"Buffer to store the directory name."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrintHintText":{"symbol":{"name":"PrintHintText","docStart":16339,"docEnd":16636,"docs":{"brief":"Prints a message to a specific client with a hint box.","tags":[{"tag":"","text":"Prints a message to a specific client with a hint box."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"LogToGame":{"symbol":{"name":"LogToGame","docStart":6121,"docEnd":6260,"docs":{"brief":"Logs a generic message to the HL2 logs.","tags":[{"tag":"","text":"Logs a generic message to the HL2 logs."},{"tag":"param:format","text":"String format."},{"tag":"param:...","text":"Format arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrecacheSentenceFile":{"symbol":{"name":"PrecacheSentenceFile","docStart":11078,"docEnd":11340,"docs":{"brief":"Precaches a given sentence file.","tags":[{"tag":"","text":"Precaches a given sentence file."},{"tag":"param:file","text":"Name of the sentence file to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns a sentence file index."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetGameTime":{"symbol":{"name":"GetGameTime","docStart":9267,"docEnd":9370,"docs":{"brief":"Returns the game time based on the game tick.","tags":[{"tag":"","text":"Returns the game time based on the game tick."},{"tag":"return","text":"Game tick time."}]},"kind":"native","returnType":"float","arguments":[]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetGameTickCount":{"symbol":{"name":"GetGameTickCount","docStart":9403,"docEnd":9501,"docs":{"brief":"Returns the game's internal tick count.","tags":[{"tag":"","text":"Returns the game's internal tick count."},{"tag":"return","text":"Game tick count."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"f65de3bbbbd482b1035a6600f96cb23f12510b65","count":3541,"time":1338383623},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsModelPrecached":{"symbol":{"name":"IsModelPrecached","docStart":12060,"docEnd":12229,"docs":{"brief":"Returns if a given model is precached.","tags":[{"tag":"","text":"Returns if a given model is precached."},{"tag":"param:model","text":"Name of the model to check."},{"tag":"return","text":"True if precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"model","decl":"const char[] model","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrintHintTextToAll":{"symbol":{"name":"PrintHintTextToAll","docStart":16710,"docEnd":16881,"docs":{"brief":"Prints a message to all clients with a hint box.","tags":[{"tag":"","text":"Prints a message to all clients with a hint box."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"CreateHudSynchronizer":{"symbol":{"name":"CreateHudSynchronizer","docStart":17832,"docEnd":19549,"docs":{"brief":"Creates a HUD synchronization object.  This object is used to automatically assign and\nre-use channels for a set of messages.\n\nThe HUD has a hardcoded number of channels (usually 6) for displaying\ntext.  You can use any channel for any area of the screen.  Text on\ndifferent channels can overlap, but text on the same channel will\nerase the old text first.  This overlapping and overwriting gets problematic.\n\nA HUD synchronization object automatically selects channels for you based on\nthe following heuristics:\n- If channel X was last used by the object, and hasn't been modified again,\nchannel X gets re-used.\n- Otherwise, a new channel is chosen based on the least-recently-used channel.\n\nThis ensures that if you display text on a sync object, that the previous text\ndisplayed on it will always be cleared first.  This is because your new text\nwill either overwrite the old text on the same channel, or because another\nchannel has already erased your text.\n\nNote that messages can still overlap if they are on different synchronization\nobjects, or they are displayed to manual channels.\n\nThese are particularly useful for displaying repeating or refreshing HUD text, in\naddition to displaying multiple message sets in one area of the screen (for example,\ncenter-say messages that may pop up randomly that you don't want to overlap each\nother).","tags":[{"tag":"","text":"Creates a HUD synchronization object.  This object is used to automatically assign and\nre-use channels for a set of messages.\n\nThe HUD has a hardcoded number of channels (usually 6) for displaying\ntext.  You can use any channel for any area of the screen.  Text on\ndifferent channels can overlap, but text on the same channel will\nerase the old text first.  This overlapping and overwriting gets problematic.\n\nA HUD synchronization object automatically selects channels for you based on\nthe following heuristics:\n- If channel X was last used by the object, and hasn't been modified again,\nchannel X gets re-used.\n- Otherwise, a new channel is chosen based on the least-recently-used channel.\n\nThis ensures that if you display text on a sync object, that the previous text\ndisplayed on it will always be cleared first.  This is because your new text\nwill either overwrite the old text on the same channel, or because another\nchannel has already erased your text.\n\nNote that messages can still overlap if they are on different synchronization\nobjects, or they are displayed to manual channels.\n\nThese are particularly useful for displaying repeating or refreshing HUD text, in\naddition to displaying multiple message sets in one area of the screen (for example,\ncenter-say messages that may pop up randomly that you don't want to overlap each\nother)."},{"tag":"return","text":"New HUD synchronization object.\nThe Handle can be closed with CloseHandle().\nIf HUD text is not supported on this mod, then\nINVALID_HANDLE is returned."}]},"kind":"native","returnType":"Handle","arguments":[]},"created":{"hash":"e7f8d1b2f53a70a4fc718244eb45e959c541f0bf","count":1916,"time":1204502078},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"SetRandomSeed":{"symbol":{"name":"SetRandomSeed","docStart":6318,"docEnd":6432,"docs":{"brief":"Sets the seed value for the global Half-Life 2 Random Stream.","tags":[{"tag":"","text":"Sets the seed value for the global Half-Life 2 Random Stream."},{"tag":"param:seed","text":"Seed value."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"seed","decl":"int seed","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ShowSyncHudText":{"symbol":{"name":"ShowSyncHudText","docStart":22192,"docEnd":22772,"docs":{"brief":"Shows a synchronized HUD message to a client.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text.","tags":[{"tag":"","text":"Shows a synchronized HUD message to a client.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text."},{"tag":"param:client","text":"Client index to send the message to."},{"tag":"param:sync","text":"Synchronization object."},{"tag":"param:message","text":"Message text or formatting rules."},{"tag":"param:...","text":"Message formatting parameters."},{"tag":"return","text":"-1 on failure, anything else on success.\nThis function fails if the mod does not support it."},{"tag":"error","text":"Client not in-game, or sync object not valid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"sync","decl":"Handle sync","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"e7f8d1b2f53a70a4fc718244eb45e959c541f0bf","count":1916,"time":1204502078},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"PrecacheDecal":{"symbol":{"name":"PrecacheDecal","docStart":11417,"docEnd":11655,"docs":{"brief":"Precaches a given decal.","tags":[{"tag":"","text":"Precaches a given decal."},{"tag":"param:decal","text":"Name of the decal to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns a decal index."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"decal","decl":"const char[] decal","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ShowVGUIPanel":{"symbol":{"name":"ShowVGUIPanel","docStart":17171,"docEnd":17727,"docs":{"brief":"Shows a VGUI panel to a specific client.","tags":[{"tag":"","text":"Shows a VGUI panel to a specific client."},{"tag":"param:client","text":"Client index."},{"tag":"param:name","text":"Panel type name (Check viewport_panel_names.h to see a list of\nsome panel names)."},{"tag":"param:Kv","text":"KeyValues handle with all the data for the panel setup (Depends\non the panel type and may be unused)."},{"tag":"param:show","text":"True to show the panel, or false to remove it from the client screen."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"Handle","name":"Kv","decl":"Handle Kv","default":"INVALID_HANDLE"},{"type":"bool","name":"show","decl":"bool show","default":"true"}]},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"PrintCenterText":{"symbol":{"name":"PrintCenterText","docStart":15479,"docEnd":15788,"docs":{"brief":"Prints a message to a specific client in the center of the screen.","tags":[{"tag":"","text":"Prints a message to a specific client in the center of the screen."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"IsDecalPrecached":{"symbol":{"name":"IsDecalPrecached","docStart":12284,"docEnd":12453,"docs":{"brief":"Returns if a given decal is precached.","tags":[{"tag":"","text":"Returns if a given decal is precached."},{"tag":"param:decal","text":"Name of the decal to check."},{"tag":"return","text":"True if precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"decal","decl":"const char[] decal","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEngineTime":{"symbol":{"name":"GetEngineTime","docStart":9100,"docEnd":9232,"docs":{"brief":"Returns a high-precision time value for profiling the engine.","tags":[{"tag":"","text":"Returns a high-precision time value for profiling the engine."},{"tag":"return","text":"A floating point time value."}]},"kind":"native","returnType":"float","arguments":[]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetHudTextParamsEx":{"symbol":{"name":"SetHudTextParamsEx","docStart":20963,"docEnd":21986,"docs":{"brief":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParams\nmodify them.\n\nThis is the same as SetHudTextParams(), except it lets you set the alternate\ncolor for when effects require it.","tags":[{"tag":"","text":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParams\nmodify them.\n\nThis is the same as SetHudTextParams(), except it lets you set the alternate\ncolor for when effects require it."},{"tag":"param:x","text":"x coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:y","text":"y coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:holdTime","text":"Number of seconds to hold the text."},{"tag":"param:color1","text":"First color set, array values being [red, green, blue, alpha]"},{"tag":"param:color2","text":"Second color set, array values being [red, green, blue, alpha]"},{"tag":"param:effect","text":"0/1 causes the text to fade in and fade out.\n2 causes the text to flash[?]."},{"tag":"param:fxTime","text":"Duration of chosen effect (may not apply to all effects)."},{"tag":"param:fadeIn","text":"Number of seconds to spend fading in."},{"tag":"param:fadeOut","text":"Number of seconds to spend fading out."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"x","decl":"float x","default":null},{"type":"float","name":"y","decl":"float y","default":null},{"type":"float","name":"holdTime","decl":"float holdTime","default":null},{"type":"int[4]","name":"color1","decl":"int color1[4]","default":null},{"type":"int[4]","name":"color2","decl":"int color2[4]","default":"{ 255, 255, 255, 0 }"},{"type":"int","name":"effect","decl":"int effect","default":"0"},{"type":"float","name":"fxTime","decl":"float fxTime","default":"6.000000"},{"type":"float","name":"fadeIn","decl":"float fadeIn","default":"0.100000"},{"type":"float","name":"fadeOut","decl":"float fadeOut","default":"0.200000"}]},"created":{"hash":"e7f8d1b2f53a70a4fc718244eb45e959c541f0bf","count":1916,"time":1204502078},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GuessSDKVersion":{"symbol":{"name":"GuessSDKVersion","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"a36c266e7d22e86719c5855739e2f25c15098529","count":3960,"time":1374422036}},"EntRefToEntIndex":{"symbol":{"name":"EntRefToEntIndex","docStart":26339,"docEnd":26482,"docs":{"brief":"Retrieves the entity index from a reference.","tags":[{"tag":"","text":"Retrieves the entity index from a reference."},{"tag":"param:ref","text":"Entity reference."},{"tag":"return","text":"Entity index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"ref","decl":"int ref","default":null}]},"created":{"hash":"3e36382b585a8da3e087fb0eb22c937217b83e6f","count":2747,"time":1248395671},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"IsSoundPrecached":{"symbol":{"name":"IsSoundPrecached","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"sound","decl":"const char[] sound","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"PrecacheGeneric":{"symbol":{"name":"PrecacheGeneric","docStart":11726,"docEnd":11985,"docs":{"brief":"Precaches a given generic file.","tags":[{"tag":"","text":"Precaches a given generic file."},{"tag":"param:generic","text":"Name of the generic file to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns a generic file index."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"generic","decl":"const char[] generic","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetGameDescription":{"symbol":{"name":"GetGameDescription","docStart":9691,"docEnd":10081,"docs":{"brief":"Returns the game description from the mod.","tags":[{"tag":"","text":"Returns the game description from the mod."},{"tag":"param:buffer","text":"Buffer to store the description."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"param:original","text":"If true, retrieves the original game description,\nignoring any potential hooks from plugins."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"original","decl":"bool original","default":"false"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ClearSyncHud":{"symbol":{"name":"ClearSyncHud","docStart":22861,"docEnd":23502,"docs":{"brief":"Clears the text on a synchronized HUD channel.\n\nThis is not the same as sending \"\" because it guarantees that it won't\noverwrite text on another channel.  For example, consider the scenario:\n\n1. Your synchronized message goes to channel 3.\n2. Someone else's non-synchronized message goes to channel 3.\n\nIf you were to simply send \"\" on your synchronized message,\nthen someone else's text could be overwritten.","tags":[{"tag":"","text":"Clears the text on a synchronized HUD channel.\n\nThis is not the same as sending \"\" because it guarantees that it won't\noverwrite text on another channel.  For example, consider the scenario:\n\n1. Your synchronized message goes to channel 3.\n2. Someone else's non-synchronized message goes to channel 3.\n\nIf you were to simply send \"\" on your synchronized message,\nthen someone else's text could be overwritten."},{"tag":"param:client","text":"Client index to send the message to."},{"tag":"param:sync","text":"Synchronization object."},{"tag":"error","text":"Client not in-game, or sync object not valid."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"sync","decl":"Handle sync","default":null}]},"created":{"hash":"e7f8d1b2f53a70a4fc718244eb45e959c541f0bf","count":1916,"time":1204502078},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GetRandomFloat":{"symbol":{"name":"GetRandomFloat","docStart":6474,"docEnd":6735,"docs":{"brief":"Returns a random floating point number from the Half-Life 2 Random Stream.","tags":[{"tag":"","text":"Returns a random floating point number from the Half-Life 2 Random Stream."},{"tag":"param:fMin","text":"Minimum random bound."},{"tag":"param:fMax","text":"Maximum random bound."},{"tag":"return","text":"A random number between (inclusive) fMin and fMax."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"fMin","decl":"float fMin","default":"0.000000"},{"type":"float","name":"fMax","decl":"float fMax","default":"1.000000"}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMapDisplayName":{"symbol":{"name":"GetMapDisplayName","docStart":7949,"docEnd":8858,"docs":{"brief":"Get the display name of a workshop map.\n\nNote: You do not need to call FindMap first.  This native will call FindMap internally.","tags":[{"tag":"","text":"Get the display name of a workshop map.\n\nNote: You do not need to call FindMap first.  This native will call FindMap internally."},{"tag":"param:map","text":"Map name (usually same as map path relative to maps/ dir,\nexcluding .bsp extension)."},{"tag":"param:displayName","text":"Map's display name, i.e. cp_mymapname or de_mymapname.\nIf FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound,\nthe map cannot be resolved and this native will return false,\nbut displayName will be a copy of map."},{"tag":"param:maxlen","text":"Maximum length to write to displayName var."},{"tag":"return","text":"true if FindMap returns FindMap_Found, FindMap_FuzzyMatch, or\nFindMap_NonCanonical.\nfalse if FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"char[]","name":"displayName","decl":"char[] displayName","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"10a95cfdce5ea52f8ef991785053eb1c4da1d9c7","count":5647,"time":1442348218},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrintToChat":{"symbol":{"name":"PrintToChat","docStart":14653,"docEnd":14951,"docs":{"brief":"Prints a message to a specific client in the chat area.","tags":[{"tag":"","text":"Prints a message to a specific client in the chat area."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"EntIndexToEntRef":{"symbol":{"name":"EntIndexToEntRef","docStart":26130,"docEnd":26293,"docs":{"brief":"Converts an entity index into a serial encoded entity reference.","tags":[{"tag":"","text":"Converts an entity index into a serial encoded entity reference."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Entity reference."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"3e36382b585a8da3e087fb0eb22c937217b83e6f","count":2747,"time":1248395671},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"IsMapValid":{"symbol":{"name":"IsMapValid","docStart":7097,"docEnd":7270,"docs":{"brief":"Returns whether a map is valid or not.","tags":[{"tag":"","text":"Returns whether a map is valid or not."},{"tag":"param:map","text":"Map name, excluding .bsp extension."},{"tag":"return","text":"True if valid, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetHudTextParams":{"symbol":{"name":"SetHudTextParams","docStart":19593,"docEnd":20788,"docs":{"brief":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParamsEx\nmodify them.\n\nYou must call this function before drawing text.  If you are drawing\ntext to multiple clients, you can set the parameters once, since\nthey won't be modified.  However, as soon as you pass control back\nto other plugins, you must reset the parameters next time you draw.","tags":[{"tag":"","text":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParamsEx\nmodify them.\n\nYou must call this function before drawing text.  If you are drawing\ntext to multiple clients, you can set the parameters once, since\nthey won't be modified.  However, as soon as you pass control back\nto other plugins, you must reset the parameters next time you draw."},{"tag":"param:x","text":"x coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:y","text":"y coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:holdTime","text":"Number of seconds to hold the text."},{"tag":"param:r","text":"Red color value."},{"tag":"param:g","text":"Green color value."},{"tag":"param:b","text":"Blue color value."},{"tag":"param:a","text":"Alpha transparency value."},{"tag":"param:effect","text":"0/1 causes the text to fade in and fade out.\n2 causes the text to flash[?]."},{"tag":"param:fxTime","text":"Duration of chosen effect (may not apply to all effects)."},{"tag":"param:fadeIn","text":"Number of seconds to spend fading in."},{"tag":"param:fadeOut","text":"Number of seconds to spend fading out."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"x","decl":"float x","default":null},{"type":"float","name":"y","decl":"float y","default":null},{"type":"float","name":"holdTime","decl":"float holdTime","default":null},{"type":"int","name":"r","decl":"int r","default":null},{"type":"int","name":"g","decl":"int g","default":null},{"type":"int","name":"b","decl":"int b","default":null},{"type":"int","name":"a","decl":"int a","default":null},{"type":"int","name":"effect","decl":"int effect","default":"0"},{"type":"float","name":"fxTime","decl":"float fxTime","default":"6.000000"},{"type":"float","name":"fadeIn","decl":"float fadeIn","default":"0.100000"},{"type":"float","name":"fadeOut","decl":"float fadeOut","default":"0.200000"}]},"created":{"hash":"e7f8d1b2f53a70a4fc718244eb45e959c541f0bf","count":1916,"time":1204502078},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"ShowHudText":{"symbol":{"name":"ShowHudText","docStart":23558,"docEnd":24423,"docs":{"brief":"Shows a HUD message to a client on the given channel.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text.","tags":[{"tag":"","text":"Shows a HUD message to a client on the given channel.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text."},{"tag":"param:client","text":"Client index to send the message to."},{"tag":"param:channel","text":"A channel number.\nIf -1, then a channel will automatically be selected\nbased on the least-recently-used channel.  If the\nchannel is any other number, it will be modulo'd with\nthe channel count to get a final channel number."},{"tag":"param:message","text":"Message text or formatting rules."},{"tag":"param:...","text":"Message formatting parameters."},{"tag":"return","text":"-1 on failure (lack of mod support).\nAny other return value is the channel number that was\nused to render the text."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"channel","decl":"int channel","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"e7f8d1b2f53a70a4fc718244eb45e959c541f0bf","count":1916,"time":1204502078},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"MakeCompatEntRef":{"symbol":{"name":"MakeCompatEntRef","docStart":26525,"docEnd":26686,"docs":{"brief":"Converts a reference into a backwards compatible version.","tags":[{"tag":"","text":"Converts a reference into a backwards compatible version."},{"tag":"param:ref","text":"Entity reference."},{"tag":"return","text":"Bcompat reference."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"ref","decl":"int ref","default":null}]},"created":{"hash":"3e36382b585a8da3e087fb0eb22c937217b83e6f","count":2747,"time":1248395671},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GetCurrentMap":{"symbol":{"name":"GetCurrentMap","docStart":10482,"docEnd":10693,"docs":{"brief":"Returns the current map name.","tags":[{"tag":"","text":"Returns the current map name."},{"tag":"param:buffer","text":"Buffer to store map name."},{"tag":"param:maxlength","text":"Maximum length of buffer."},{"tag":"return","text":"Number of bytes written (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindMap":{"symbol":{"name":"FindMap","docStart":7317,"docEnd":7867,"docs":{"brief":"Returns whether a full or partial map name is found or can be resolved","tags":[{"tag":"","text":"Returns whether a full or partial map name is found or can be resolved"},{"tag":"param:map","text":"Map name (usually same as map path relative to maps/ dir,\nexcluding .bsp extension)."},{"tag":"param:foundmap","text":"Resolved map name. If the return is FindMap_FuzzyMatch\nor FindMap_NonCanonical the buffer will be the full path."},{"tag":"param:maxlen","text":"Maximum length to write to map var."},{"tag":"return","text":"Result of the find operation. Not all result types are supported on all games."}]},"kind":"native","returnType":"FindMapResult","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"char[]","name":"foundmap","decl":"char[] foundmap","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"f107ff9cd2fefeae1fa51aad3db1f4b4fa8e9968","count":5491,"time":1435425047},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrintCenterTextAll":{"symbol":{"name":"PrintCenterTextAll","docStart":15864,"docEnd":16047,"docs":{"brief":"Prints a message to all clients in the center of the screen.","tags":[{"tag":"","text":"Prints a message to all clients in the center of the screen."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"bd15f93d7d4743b399a7f658378479142874385a","count":893,"time":1181163077},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"CreateDialog":{"symbol":{"name":"CreateDialog","docStart":13445,"docEnd":13802,"docs":{"brief":"Creates different types of ingame messages.","tags":[{"tag":"","text":"Creates different types of ingame messages."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:kv","text":"KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information)."},{"tag":"param:type","text":"Message type to display ingame."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"DialogType","name":"type","decl":"DialogType type","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"IsGenericPrecached":{"symbol":{"name":"IsGenericPrecached","docStart":12508,"docEnd":12691,"docs":{"brief":"Returns if a given generic file is precached.","tags":[{"tag":"","text":"Returns if a given generic file is precached."},{"tag":"param:generic","text":"Name of the generic file to check."},{"tag":"return","text":"True if precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"generic","decl":"const char[] generic","default":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEngineVersion":{"symbol":{"name":"GetEngineVersion","docStart":14329,"docEnd":14607,"docs":{"brief":"Gets the engine version that the currently-loaded SM core was compiled against.\n\nThe engine version values are not guaranteed to be in any particular order,\nand should only be compared by (in)equality.","tags":[{"tag":"","text":"Gets the engine version that the currently-loaded SM core was compiled against.\n\nThe engine version values are not guaranteed to be in any particular order,\nand should only be compared by (in)equality."},{"tag":"return","text":"An EngineVersion value."}]},"kind":"native","returnType":"EngineVersion","arguments":[]},"created":{"hash":"a36c266e7d22e86719c5855739e2f25c15098529","count":3960,"time":1374422036},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"GetClientsInRange":{"symbol":{"name":"GetClientsInRange","docStart":26810,"docEnd":27223,"docs":{"brief":"Find clients that are potentially in range of a position.","tags":[{"tag":"","text":"Find clients that are potentially in range of a position."},{"tag":"param:origin","text":"Coordinates from which to test range."},{"tag":"param:rangeType","text":"Range type to use for filtering clients."},{"tag":"param:clients","text":"Array to which found client indexes will be written."},{"tag":"param:size","text":"Maximum size of clients array."},{"tag":"return","text":"Number of client indexes written to clients array."}]},"kind":"native","returnType":"int","arguments":[{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":null},{"type":"ClientRangeType","name":"rangeType","decl":"ClientRangeType rangeType","default":null},{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"6d1a2b0d8627cdfcc0e8c6b158e2726174d33be5","count":5145,"time":1419971877},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}},"DisplayAskConnectBox":{"symbol":{"name":"DisplayAskConnectBox","docStart":25409,"docEnd":25751,"docs":{"brief":"Displays a panel asking the client to connect to a specified IP.","tags":[{"tag":"","text":"Displays a panel asking the client to connect to a specified IP."},{"tag":"param:client","text":"Client index."},{"tag":"param:time","text":"Duration to hold the panel on the client's screen."},{"tag":"param:ip","text":"Destination IP."},{"tag":"param:password","text":"Password to connect to the destination IP. The client will be able to see this."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"time","decl":"float time","default":null},{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"const char[]","name":"password","decl":"const char[] password","default":"\"\""}]},"created":{"hash":"aec2160e84fe30a18007667950a423726ff124f7","count":1414,"time":1189640220},"last_updated":{"hash":"fba71ed24d1f143c5625fe5053237c389cec90f9","count":6488,"time":1581014024}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"MOTDPANEL_TYPE_INDEX":{"symbol":{"name":"MOTDPANEL_TYPE_INDEX","docStart":3253,"docEnd":3297,"docs":{"brief":"Msg is auto determined by the engine","tags":[{"tag":"","text":"Msg is auto determined by the engine"}]},"value":"1"},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_EPISODE1":{"symbol":{"name":"SOURCE_SDK_EPISODE1","docStart":1999,"docEnd":2042,"docs":{"brief":"SDK+Engine released after Episode 1","tags":[{"tag":"","text":"SDK+Engine released after Episode 1"}]},"value":"20"},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_LEFT4DEAD":{"symbol":{"name":"SOURCE_SDK_LEFT4DEAD","docStart":2696,"docEnd":2750,"docs":{"brief":"Engine released after Left 4 Dead (no SDK yet)","tags":[{"tag":"","text":"Engine released after Left 4 Dead (no SDK yet)"}]},"value":"40"},"created":{"hash":"ff7a2c6b73ad3500d9b9a3b830c8521ee0bf6279","count":2405,"time":1226675910},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"INVALID_ENT_REFERENCE":{"symbol":{"name":"INVALID_ENT_REFERENCE","docStart":0,"docEnd":0,"docs":null,"value":"0xFFFFFFFF"},"created":{"hash":"3e36382b585a8da3e087fb0eb22c937217b83e6f","count":2747,"time":1248395671},"last_updated":{"hash":"3e36382b585a8da3e087fb0eb22c937217b83e6f","count":2747,"time":1248395671}},"MOTDPANEL_TYPE_FILE":{"symbol":{"name":"MOTDPANEL_TYPE_FILE","docStart":3421,"docEnd":3465,"docs":{"brief":"Treat msg as a filename to be opened","tags":[{"tag":"","text":"Treat msg as a filename to be opened"}]},"value":"3"},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MOTDPANEL_TYPE_TEXT":{"symbol":{"name":"MOTDPANEL_TYPE_TEXT","docStart":3176,"docEnd":3207,"docs":{"brief":"Treat msg as plain text","tags":[{"tag":"","text":"Treat msg as plain text"}]},"value":"0"},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_EPISODE2":{"symbol":{"name":"SOURCE_SDK_EPISODE2","docStart":2088,"docEnd":2142,"docs":{"brief":"SDK+Engine released after Episode 2/Orange Box","tags":[{"tag":"","text":"SDK+Engine released after Episode 2/Orange Box"}]},"value":"30"},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_UNKNOWN":{"symbol":{"name":"SOURCE_SDK_UNKNOWN","docStart":1685,"docEnd":1731,"docs":{"brief":"Could not determine the engine version","tags":[{"tag":"","text":"Could not determine the engine version"}]},"value":"0"},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_CSS":{"symbol":{"name":"SOURCE_SDK_CSS","docStart":2431,"docEnd":2520,"docs":{"brief":"Sometime-older version of Source 2009 SDK+Engine, used for Counter-Strike: Source","tags":[{"tag":"","text":"Sometime-older version of Source 2009 SDK+Engine, used for Counter-Strike: Source"}]},"value":"34"},"created":{"hash":"8362b8d22628fa16b04849e08fd8d2a6c551d3de","count":3615,"time":1345514039},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_BLOODYGOODTIME":{"symbol":{"name":"SOURCE_SDK_BLOODYGOODTIME","docStart":2188,"docEnd":2260,"docs":{"brief":"Modified version of ep2 engine used by Bloody Good Time (no SDK)","tags":[{"tag":"","text":"Modified version of ep2 engine used by Bloody Good Time (no SDK)"}]},"value":"32"},"created":{"hash":"a7218d2e59855a349a93882fda075271e6862998","count":3185,"time":1294810247},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_EPISODE2VALVE":{"symbol":{"name":"SOURCE_SDK_EPISODE2VALVE","docStart":2566,"docEnd":2650,"docs":{"brief":"SDK+Engine released after Episode 2/Orange Box, \"Source 2009\" or \"Source MP\"","tags":[{"tag":"","text":"SDK+Engine released after Episode 2/Orange Box, \"Source 2009\" or \"Source MP\""}]},"value":"35"},"created":{"hash":"c468c26ad65e2975953f9f7bea3251c8e2eccebc","count":2894,"time":1263173372},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_ALIENSWARM":{"symbol":{"name":"SOURCE_SDK_ALIENSWARM","docStart":2898,"docEnd":2943,"docs":{"brief":"SDK+Engine released after Alien Swarm","tags":[{"tag":"","text":"SDK+Engine released after Alien Swarm"}]},"value":"60"},"created":{"hash":"dd44a0aaea79eda341842ba4b97b6fb4149b6b31","count":3100,"time":1280269952},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_DARKMESSIAH":{"symbol":{"name":"SOURCE_SDK_DARKMESSIAH","docStart":1880,"docEnd":1953,"docs":{"brief":"Modified version of original engine used by Dark Messiah (no SDK)","tags":[{"tag":"","text":"Modified version of original engine used by Dark Messiah (no SDK)"}]},"value":"15"},"created":{"hash":"bd9fab6cf5b8736513f9722c507eee27cb94a2d4","count":2584,"time":1234945162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MOTDPANEL_TYPE_URL":{"symbol":{"name":"MOTDPANEL_TYPE_URL","docStart":3343,"docEnd":3375,"docs":{"brief":"Treat msg as an URL link","tags":[{"tag":"","text":"Treat msg as an URL link"}]},"value":"2"},"created":{"hash":"4a6a016790f6bc0496ff4a8a040db25274df7107","count":1219,"time":1185837418},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_ORIGINAL":{"symbol":{"name":"SOURCE_SDK_ORIGINAL","docStart":1777,"docEnd":1834,"docs":{"brief":"Original Source engine (still used by \"The Ship\")","tags":[{"tag":"","text":"Original Source engine (still used by \"The Ship\")"}]},"value":"10"},"created":{"hash":"c033f5415a2271df243508e636e0ebc85d5b92e8","count":1838,"time":1199689184},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_halflife_included":{"symbol":{"name":"_halflife_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634}},"SOURCE_SDK_LEFT4DEAD2":{"symbol":{"name":"SOURCE_SDK_LEFT4DEAD2","docStart":2796,"docEnd":2852,"docs":{"brief":"Engine released after Left 4 Dead 2 (no SDK yet)","tags":[{"tag":"","text":"Engine released after Left 4 Dead 2 (no SDK yet)"}]},"value":"50"},"created":{"hash":"6d5e7cbe084043d9e2a8a70b4c0170902bb81dcc","count":2895,"time":1263173883},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_CSGO":{"symbol":{"name":"SOURCE_SDK_CSGO","docStart":2989,"docEnd":3037,"docs":{"brief":"Engine released after CS:GO (no SDK yet)","tags":[{"tag":"","text":"Engine released after CS:GO (no SDK yet)"}]},"value":"80"},"created":{"hash":"917b6d4521b539ffef7f4efafa4318819f0b4159","count":3517,"time":1338149283},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_DOTA":{"symbol":{"name":"SOURCE_SDK_DOTA","docStart":3083,"docEnd":3128,"docs":{"brief":"Engine released after Dota 2 (no SDK)","tags":[{"tag":"","text":"Engine released after Dota 2 (no SDK)"}]},"value":"90"},"created":{"hash":"519e8c5fcd45ff6aaba020c52d2b8eff4fb0b10d","count":3854,"time":1363706324},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SOURCE_SDK_EYE":{"symbol":{"name":"SOURCE_SDK_EYE","docStart":2306,"docEnd":2385,"docs":{"brief":"Modified version of ep2 engine used by E.Y.E Divine Cybermancy (no SDK)","tags":[{"tag":"","text":"Modified version of ep2 engine used by E.Y.E Divine Cybermancy (no SDK)"}]},"value":"33"},"created":{"hash":"b2311e2ea5f20d46a8e8b12b51d5593b29d63d97","count":3428,"time":1319843380},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"DialogType":{"symbol":{"name":"DialogType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"DialogType_Msg","docStart":3514,"docEnd":3547,"docs":{"brief":"just an on screen message","tags":[{"tag":"","text":"just an on screen message"}]},"value":"0"},{"name":"DialogType_Menu","docStart":3574,"docEnd":3597,"docs":{"brief":"an options menu","tags":[{"tag":"","text":"an options menu"}]},"value":null},{"name":"DialogType_Text","docStart":3624,"docEnd":3649,"docs":{"brief":"a richtext dialog","tags":[{"tag":"","text":"a richtext dialog"}]},"value":null},{"name":"DialogType_Entry","docStart":3676,"docEnd":3696,"docs":{"brief":"an entry box","tags":[{"tag":"","text":"an entry box"}]},"value":null},{"name":"DialogType_AskConnect","docStart":3723,"docEnd":3774,"docs":{"brief":"ask the client to connect to a specified IP","tags":[{"tag":"","text":"ask the client to connect to a specified IP"}]},"value":null}]},"created":{"hash":"6c17b9f37bab4f1b9fbfc6363b11a3df48eda56c","count":874,"time":1180679634},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindMapResult":{"symbol":{"name":"FindMapResult","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"FindMap_Found","docStart":5323,"docEnd":5364,"docs":{"brief":"A direct match for this name was found","tags":[{"tag":"","text":"A direct match for this name was found"}]},"value":null},{"name":"FindMap_NotFound","docStart":5384,"docEnd":5429,"docs":{"brief":"No match for this map name could be found.","tags":[{"tag":"","text":"No match for this map name could be found."}]},"value":null},{"name":"FindMap_FuzzyMatch","docStart":5452,"docEnd":5651,"docs":{"brief":"A fuzzy match for this map name was found.\nEx: cp_dust -> cp_dustbowl, c1m1 -> c1m1_hotel\nOnly supported for maps that the engine knows about. (This excludes workshop maps on Orangebox).","tags":[{"tag":"","text":"A fuzzy match for this map name was found.\nEx: cp_dust -> cp_dustbowl, c1m1 -> c1m1_hotel\nOnly supported for maps that the engine knows about. (This excludes workshop maps on Orangebox)."}]},"value":null},{"name":"FindMap_NonCanonical","docStart":5676,"docEnd":5854,"docs":{"brief":"A non-canonical match for this map name was found.\nEx: workshop/1234 -> workshop/cp_qualified_name.ugc1234\nOnly supported on \"Orangebox\" games with workshop support.","tags":[{"tag":"","text":"A non-canonical match for this map name was found.\nEx: workshop/1234 -> workshop/cp_qualified_name.ugc1234\nOnly supported on \"Orangebox\" games with workshop support."}]},"value":null},{"name":"FindMap_PossiblyAvailable","docStart":5881,"docEnd":6041,"docs":{"brief":"No currently available match for this map name could be found, but it may be possible to load\nOnly supported on \"Orangebox\" games with workshop support.","tags":[{"tag":"","text":"No currently available match for this map name could be found, but it may be possible to load\nOnly supported on \"Orangebox\" games with workshop support."}]},"value":null}]},"created":{"hash":"f107ff9cd2fefeae1fa51aad3db1f4b4fa8e9968","count":5491,"time":1435425047},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EngineVersion":{"symbol":{"name":"EngineVersion","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Engine_Unknown","docStart":3834,"docEnd":3880,"docs":{"brief":"Could not determine the engine version","tags":[{"tag":"","text":"Could not determine the engine version"}]},"value":null},{"name":"Engine_Original","docStart":3911,"docEnd":3960,"docs":{"brief":"Original Source Engine (used by The Ship)","tags":[{"tag":"","text":"Original Source Engine (used by The Ship)"}]},"value":null},{"name":"Engine_SourceSDK2006","docStart":3991,"docEnd":4041,"docs":{"brief":"Episode 1 Source Engine (second major SDK)","tags":[{"tag":"","text":"Episode 1 Source Engine (second major SDK)"}]},"value":null},{"name":"Engine_SourceSDK2007","docStart":4072,"docEnd":4122,"docs":{"brief":"Orange Box Source Engine (third major SDK)","tags":[{"tag":"","text":"Orange Box Source Engine (third major SDK)"}]},"value":null},{"name":"Engine_Left4Dead","docStart":4153,"docEnd":4172,"docs":{"brief":"Left 4 Dead","tags":[{"tag":"","text":"Left 4 Dead"}]},"value":null},{"name":"Engine_DarkMessiah","docStart":4203,"docEnd":4262,"docs":{"brief":"Dark Messiah Multiplayer (based on original engine)","tags":[{"tag":"","text":"Dark Messiah Multiplayer (based on original engine)"}]},"value":null},{"name":"Engine_Left4Dead2","docStart":4293,"docEnd":4314,"docs":{"brief":"Left 4 Dead 2","tags":[{"tag":"","text":"Left 4 Dead 2"}]},"value":"7"},{"name":"Engine_AlienSwarm","docStart":4345,"docEnd":4386,"docs":{"brief":"Alien Swarm (and Alien Swarm SDK)","tags":[{"tag":"","text":"Alien Swarm (and Alien Swarm SDK)"}]},"value":null},{"name":"Engine_BloodyGoodTime","docStart":4417,"docEnd":4441,"docs":{"brief":"Bloody Good Time","tags":[{"tag":"","text":"Bloody Good Time"}]},"value":null},{"name":"Engine_EYE","docStart":4472,"docEnd":4503,"docs":{"brief":"E.Y.E Divine Cybermancy","tags":[{"tag":"","text":"E.Y.E Divine Cybermancy"}]},"value":null},{"name":"Engine_Portal2","docStart":4534,"docEnd":4550,"docs":{"brief":"Portal 2","tags":[{"tag":"","text":"Portal 2"}]},"value":null},{"name":"Engine_CSGO","docStart":4581,"docEnd":4621,"docs":{"brief":"Counter-Strike: Global Offensive","tags":[{"tag":"","text":"Counter-Strike: Global Offensive"}]},"value":null},{"name":"Engine_CSS","docStart":4652,"docEnd":4682,"docs":{"brief":"Counter-Strike: Source","tags":[{"tag":"","text":"Counter-Strike: Source"}]},"value":null},{"name":"Engine_DOTA","docStart":4713,"docEnd":4727,"docs":{"brief":"Dota 2","tags":[{"tag":"","text":"Dota 2"}]},"value":null},{"name":"Engine_HL2DM","docStart":4758,"docEnd":4788,"docs":{"brief":"Half-Life 2 Deathmatch","tags":[{"tag":"","text":"Half-Life 2 Deathmatch"}]},"value":null},{"name":"Engine_DODS","docStart":4819,"docEnd":4848,"docs":{"brief":"Day of Defeat: Source","tags":[{"tag":"","text":"Day of Defeat: Source"}]},"value":null},{"name":"Engine_TF2","docStart":4879,"docEnd":4902,"docs":{"brief":"Team Fortress 2","tags":[{"tag":"","text":"Team Fortress 2"}]},"value":null},{"name":"Engine_NuclearDawn","docStart":4933,"docEnd":4953,"docs":{"brief":"Nuclear Dawn","tags":[{"tag":"","text":"Nuclear Dawn"}]},"value":null},{"name":"Engine_SDK2013","docStart":4984,"docEnd":5007,"docs":{"brief":"Source SDK 2013","tags":[{"tag":"","text":"Source SDK 2013"}]},"value":null},{"name":"Engine_Blade","docStart":5038,"docEnd":5060,"docs":{"brief":"Blade Symphony","tags":[{"tag":"","text":"Blade Symphony"}]},"value":null},{"name":"Engine_Insurgency","docStart":5091,"docEnd":5130,"docs":{"brief":"Insurgency (2013 Retail version","tags":[{"tag":"","text":"Insurgency (2013 Retail version"}]},"value":null},{"name":"Engine_Contagion","docStart":5161,"docEnd":5178,"docs":{"brief":"Contagion","tags":[{"tag":"","text":"Contagion"}]},"value":null},{"name":"Engine_BlackMesa","docStart":5209,"docEnd":5239,"docs":{"brief":"Black Mesa Multiplayer","tags":[{"tag":"","text":"Black Mesa Multiplayer"}]},"value":null},{"name":"Engine_DOI","docStart":5270,"docEnd":5291,"docs":{"brief":"Day of Infamy","tags":[{"tag":"","text":"Day of Infamy"}]},"value":null}]},"created":{"hash":"a36c266e7d22e86719c5855739e2f25c15098529","count":3960,"time":1374422036},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ClientRangeType":{"symbol":{"name":"ClientRangeType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RangeType_Visibility","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"RangeType_Audibility","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"6d1a2b0d8627cdfcc0e8c6b158e2726174d33be5","count":5145,"time":1419971877},"last_updated":{"hash":"6d1a2b0d8627cdfcc0e8c6b158e2726174d33be5","count":5145,"time":1419971877}}},"typesets":{},"typedefs":{}},"float":{"functions":{"FloatDiv":{"symbol":{"name":"FloatDiv","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"float","name":"dividend","decl":"float dividend","default":null},{"type":"float","name":"divisor","decl":"float divisor","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"12fca79006656d716b481eb8bba29b3d769683f4","count":6246,"time":1517614058}},"FloatCompare":{"symbol":{"name":"FloatCompare","docStart":4852,"docEnd":5219,"docs":{"brief":"Compares two floats.","tags":[{"tag":"","text":"Compares two floats."},{"tag":"param:fOne","text":"First value."},{"tag":"param:fTwo","text":"Second value."},{"tag":"return","text":"Returns 1 if the first argument is greater than the second argument.\nReturns -1 if the first argument is smaller than the second argument.\nReturns 0 if both arguments are equal."}]},"kind":"native","returnType":"int","arguments":[{"type":"float","name":"fOne","decl":"float fOne","default":null},{"type":"float","name":"fTwo","decl":"float fTwo","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SquareRoot":{"symbol":{"name":"SquareRoot","docStart":5273,"docEnd":5460,"docs":{"brief":"Returns the square root of the input value, equivalent to floatpower(value, 0.5).","tags":[{"tag":"","text":"Returns the square root of the input value, equivalent to floatpower(value, 0.5)."},{"tag":"param:value","text":"Input value."},{"tag":"return","text":"Square root of the value."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RadToDeg":{"symbol":{"name":"RadToDeg","docStart":11824,"docEnd":11937,"docs":{"brief":"Converts radians to degrees.","tags":[{"tag":"","text":"Converts radians to degrees."},{"tag":"param:angle","text":"Radians."},{"tag":"return","text":"Degrees."}]},"kind":"stock","returnType":"float","arguments":[{"type":"float","name":"angle","decl":"float angle","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RoundToFloor":{"symbol":{"name":"RoundToFloor","docStart":4475,"docEnd":4632,"docs":{"brief":"Rounds a float to the next lowest integer value.","tags":[{"tag":"","text":"Rounds a float to the next lowest integer value."},{"tag":"param:value","text":"Input value to be rounded."},{"tag":"return","text":"Rounded value."}]},"kind":"native","returnType":"int","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetURandomFloat":{"symbol":{"name":"GetURandomFloat","docStart":12235,"docEnd":12447,"docs":{"brief":"Returns a uniform random float in the range [0, 1).\n\nNote: Uniform random number streams are seeded automatically per-plugin.","tags":[{"tag":"","text":"Returns a uniform random float in the range [0, 1).\n\nNote: Uniform random number streams are seeded automatically per-plugin."},{"tag":"return","text":"Uniform random floating-point number."}]},"kind":"native","returnType":"float","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ArcTangent2":{"symbol":{"name":"ArcTangent2","docStart":7474,"docEnd":7669,"docs":{"brief":"Returns the arctangent2 of the input values.","tags":[{"tag":"","text":"Returns the arctangent2 of the input values."},{"tag":"param:x","text":"Horizontal value."},{"tag":"param:y","text":"Vertical value."},{"tag":"return","text":"atan2(value) in radians."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"x","decl":"float x","default":null},{"type":"float","name":"y","decl":"float y","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Cosine":{"symbol":{"name":"Cosine","docStart":6383,"docEnd":6521,"docs":{"brief":"Returns the cosine of the argument.","tags":[{"tag":"","text":"Returns the cosine of the argument."},{"tag":"param:value","text":"Input value in radians."},{"tag":"return","text":"cos(value)."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FloatAdd":{"symbol":{"name":"FloatAdd","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"float","name":"oper1","decl":"float oper1","default":null},{"type":"float","name":"oper2","decl":"float oper2","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"12fca79006656d716b481eb8bba29b3d769683f4","count":6246,"time":1517614058}},"FloatSub":{"symbol":{"name":"FloatSub","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"float","name":"oper1","decl":"float oper1","default":null},{"type":"float","name":"oper2","decl":"float oper2","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"12fca79006656d716b481eb8bba29b3d769683f4","count":6246,"time":1517614058}},"GetURandomInt":{"symbol":{"name":"GetURandomInt","docStart":12013,"docEnd":12202,"docs":{"brief":"Returns a random integer in the range [0, 2^31-1].\n\nNote: Uniform random number streams are seeded automatically per-plugin.","tags":[{"tag":"","text":"Returns a random integer in the range [0, 2^31-1].\n\nNote: Uniform random number streams are seeded automatically per-plugin."},{"tag":"return","text":"Random integer."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Pow":{"symbol":{"name":"Pow","docStart":5503,"docEnd":5710,"docs":{"brief":"Returns the value raised to the power of the exponent.","tags":[{"tag":"","text":"Returns the value raised to the power of the exponent."},{"tag":"param:value","text":"Value to be raised."},{"tag":"param:exponent","text":"Value to raise the base."},{"tag":"return","text":"value^exponent."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null},{"type":"float","name":"exponent","decl":"float exponent","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Logarithm":{"symbol":{"name":"Logarithm","docStart":5942,"docEnd":6151,"docs":{"brief":"Returns the logarithm of any base specified.","tags":[{"tag":"","text":"Returns the logarithm of any base specified."},{"tag":"param:value","text":"Input value."},{"tag":"param:base","text":"Logarithm base to use, default is 10."},{"tag":"return","text":"log(value)/log(base)."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null},{"type":"float","name":"base","decl":"float base","default":"10.000000"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DegToRad":{"symbol":{"name":"DegToRad","docStart":11635,"docEnd":11748,"docs":{"brief":"Converts degrees to radians.","tags":[{"tag":"","text":"Converts degrees to radians."},{"tag":"param:angle","text":"Degrees."},{"tag":"return","text":"Radians."}]},"kind":"stock","returnType":"float","arguments":[{"type":"float","name":"angle","decl":"float angle","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RoundToCeil":{"symbol":{"name":"RoundToCeil","docStart":4275,"docEnd":4433,"docs":{"brief":"Rounds a float to the next highest integer value.","tags":[{"tag":"","text":"Rounds a float to the next highest integer value."},{"tag":"param:value","text":"Input value to be rounded."},{"tag":"return","text":"Rounded value."}]},"kind":"native","returnType":"int","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FloatMul":{"symbol":{"name":"FloatMul","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"float","name":"oper1","decl":"float oper1","default":null},{"type":"float","name":"oper2","decl":"float oper2","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"12fca79006656d716b481eb8bba29b3d769683f4","count":6246,"time":1517614058}},"RoundToZero":{"symbol":{"name":"RoundToZero","docStart":4078,"docEnd":4233,"docs":{"brief":"Rounds a float to the closest integer to zero.","tags":[{"tag":"","text":"Rounds a float to the closest integer to zero."},{"tag":"param:value","text":"Input value to be rounded."},{"tag":"return","text":"Rounded value."}]},"kind":"native","returnType":"int","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RoundToNearest":{"symbol":{"name":"RoundToNearest","docStart":4675,"docEnd":4807,"docs":{"brief":"Standard IEEE rounding.","tags":[{"tag":"","text":"Standard IEEE rounding."},{"tag":"param:value","text":"Input value to be rounded."},{"tag":"return","text":"Rounded value."}]},"kind":"native","returnType":"int","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Exponential":{"symbol":{"name":"Exponential","docStart":5762,"docEnd":5898,"docs":{"brief":"Returns the value of raising the input by e.","tags":[{"tag":"","text":"Returns the value of raising the input by e."},{"tag":"param:value","text":"Input value."},{"tag":"return","text":"exp(value)."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FloatFraction":{"symbol":{"name":"FloatFraction","docStart":3902,"docEnd":4032,"docs":{"brief":"Returns the decimal part of a float.","tags":[{"tag":"","text":"Returns the decimal part of a float."},{"tag":"param:value","text":"Input value."},{"tag":"return","text":"Decimal part."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FloatAbs":{"symbol":{"name":"FloatAbs","docStart":6739,"docEnd":6874,"docs":{"brief":"Returns an absolute value.","tags":[{"tag":"","text":"Returns an absolute value."},{"tag":"param:value","text":"Input value."},{"tag":"return","text":"Absolute value of the input."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ArcSine":{"symbol":{"name":"ArcSine","docStart":7291,"docEnd":7434,"docs":{"brief":"Returns the arcsine of the input value.","tags":[{"tag":"","text":"Returns the arcsine of the input value."},{"tag":"param:angle","text":"Input value."},{"tag":"return","text":"asin(value) in radians."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"angle","decl":"float angle","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Sine":{"symbol":{"name":"Sine","docStart":6210,"docEnd":6346,"docs":{"brief":"Returns the sine of the argument.","tags":[{"tag":"","text":"Returns the sine of the argument."},{"tag":"param:value","text":"Input value in radians."},{"tag":"return","text":"sin(value)."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ArcCosine":{"symbol":{"name":"ArcCosine","docStart":7104,"docEnd":7249,"docs":{"brief":"Returns the arccosine of the input value.","tags":[{"tag":"","text":"Returns the arccosine of the input value."},{"tag":"param:angle","text":"Input value."},{"tag":"return","text":"acos(value) in radians."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"angle","decl":"float angle","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetURandomSeedSimple":{"symbol":{"name":"SetURandomSeedSimple","docStart":12824,"docEnd":13011,"docs":{"brief":"Seeds a plugin's uniform random number stream. This is done automatically,\nso normally it is totally unnecessary to call this.","tags":[{"tag":"","text":"Seeds a plugin's uniform random number stream. This is done automatically,\nso normally it is totally unnecessary to call this."},{"tag":"param:seed","text":"Single seed value."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"seed","decl":"int seed","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Tangent":{"symbol":{"name":"Tangent","docStart":6560,"docEnd":6699,"docs":{"brief":"Returns the tangent of the argument.","tags":[{"tag":"","text":"Returns the tangent of the argument."},{"tag":"param:value","text":"Input value in radians."},{"tag":"return","text":"tan(value)."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RoundFloat":{"symbol":{"name":"RoundFloat","docStart":7718,"docEnd":7928,"docs":{"brief":"Rounds a floating point number using the \"round to nearest\" algorithm.","tags":[{"tag":"","text":"Rounds a floating point number using the \"round to nearest\" algorithm."},{"tag":"param:value","text":"Floating point value to round."},{"tag":"return","text":"The value rounded to the nearest integer."}]},"kind":"stock","returnType":"int","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetURandomSeed":{"symbol":{"name":"SetURandomSeed","docStart":12484,"docEnd":12758,"docs":{"brief":"Seeds a plugin's uniform random number stream. This is done automatically,\nso normally it is totally unnecessary to call this.","tags":[{"tag":"","text":"Seeds a plugin's uniform random number stream. This is done automatically,\nso normally it is totally unnecessary to call this."},{"tag":"param:seeds","text":"Array of numbers to use as seeding data."},{"tag":"param:numSeeds","text":"Number of seeds in the seeds array."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"seeds","decl":"const int[] seeds","default":null},{"type":"int","name":"numSeeds","decl":"int numSeeds","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ArcTangent":{"symbol":{"name":"ArcTangent","docStart":6915,"docEnd":7061,"docs":{"brief":"Returns the arctangent of the input value.","tags":[{"tag":"","text":"Returns the arctangent of the input value."},{"tag":"param:angle","text":"Input value."},{"tag":"return","text":"atan(value) in radians."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"angle","decl":"float angle","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_float_included":{"symbol":{"name":"_float_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}},"FLOAT_PI":{"symbol":{"name":"FLOAT_PI","docStart":0,"docEnd":0,"docs":null,"value":"3.1415926535897932384626433832795"},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools":{"functions":{"EndPrepSDKCall":{"symbol":{"name":"EndPrepSDKCall","docStart":6891,"docEnd":7063,"docs":{"brief":"Finalizes an SDK call preparation and returns the resultant Handle.","tags":[{"tag":"","text":"Finalizes an SDK call preparation and returns the resultant Handle."},{"tag":"return","text":"A new SDKCall Handle on success, or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"Handle","arguments":[]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrepSDKCall_SetVirtual":{"symbol":{"name":"PrepSDKCall_SetVirtual","docStart":4311,"docEnd":4430,"docs":{"brief":"Sets the virtual index of the SDK call if it is virtual.","tags":[{"tag":"","text":"Sets the virtual index of the SDK call if it is virtual."},{"tag":"param:vtblidx","text":"Virtual table index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"vtblidx","decl":"int vtblidx","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrepSDKCall_SetReturnInfo":{"symbol":{"name":"PrepSDKCall_SetReturnInfo","docStart":5857,"docEnd":6317,"docs":{"brief":"Sets the return information of an SDK call.  Do not call this if there is no return data.\nThis must be called if there is a return value (i.e. it is not necessarily safe to ignore\nthe data).","tags":[{"tag":"","text":"Sets the return information of an SDK call.  Do not call this if there is no return data.\nThis must be called if there is a return value (i.e. it is not necessarily safe to ignore\nthe data)."},{"tag":"param:type","text":"Data type to convert to/from."},{"tag":"param:pass","text":"How the data is passed in C++."},{"tag":"param:decflags","text":"Flags on decoding from the plugin to C++."},{"tag":"param:encflags","text":"Flags on encoding from C++ to the plugin."}]},"kind":"native","returnType":"void","arguments":[{"type":"SDKType","name":"type","decl":"SDKType type","default":null},{"type":"SDKPassMethod","name":"pass","decl":"SDKPassMethod pass","default":null},{"type":"int","name":"decflags","decl":"int decflags","default":"0"},{"type":"int","name":"encflags","decl":"int encflags","default":"0"}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrepSDKCall_SetSignature":{"symbol":{"name":"PrepSDKCall_SetSignature","docStart":4484,"docEnd":5003,"docs":{"brief":"Finds an address in a library and sets it as the address to use for the SDK call.","tags":[{"tag":"","text":"Finds an address in a library and sets it as the address to use for the SDK call."},{"tag":"param:lib","text":"Library to use."},{"tag":"param:signature","text":"Binary data to search for in the library.  If it starts with '@',\nthe bytes parameter is ignored and the signature is interpreted\nas a symbol lookup in the library."},{"tag":"param:bytes","text":"Number of bytes in the binary search string."},{"tag":"return","text":"True on success, false if nothing was found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"SDKLibrary","name":"lib","decl":"SDKLibrary lib","default":null},{"type":"const char[]","name":"signature","decl":"const char[] signature","default":null},{"type":"int","name":"bytes","decl":"int bytes","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrepSDKCall_SetFromConf":{"symbol":{"name":"PrepSDKCall_SetFromConf","docStart":5331,"docEnd":5753,"docs":{"brief":"Finds an address or virtual function index in a GameConfig file and sets it as\nthe calling information for the SDK call.","tags":[{"tag":"","text":"Finds an address or virtual function index in a GameConfig file and sets it as\nthe calling information for the SDK call."},{"tag":"param:gameconf","text":"GameConfig Handle, or INVALID_HANDLE to use sdktools.games.txt."},{"tag":"param:source","text":"Whether to look in Offsets or Signatures."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"True on success, false if nothing was found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"gameconf","decl":"Handle gameconf","default":null},{"type":"SDKFuncConfSource","name":"source","decl":"SDKFuncConfSource source","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SDKCall":{"symbol":{"name":"SDKCall","docStart":7100,"docEnd":8151,"docs":{"brief":"Calls an SDK function with the given parameters.\n\nIf the call type is Entity or Player, the index MUST ALWAYS be the FIRST parameter passed.\nIf the call type is GameRules, then nothing special needs to be passed.\nIf the return value is a Vector or QAngles, the SECOND parameter must be a Float[3].\nIf the return value is a string, the THIRD parameter must be a String buffer, and the\nFOURTH parameter must be the maximum length.\nAll parameters must be passed after the above is followed.  Failure to follow these\nrules will result in crashes or wildly unexpected behavior!\n\nIf the return value is a float or integer, the return value will be this value.\nIf the return value is a CBaseEntity, CBasePlayer, or edict, the return value will\nalways be the entity index, or -1 for NULL.","tags":[{"tag":"","text":"Calls an SDK function with the given parameters.\n\nIf the call type is Entity or Player, the index MUST ALWAYS be the FIRST parameter passed.\nIf the call type is GameRules, then nothing special needs to be passed.\nIf the return value is a Vector or QAngles, the SECOND parameter must be a Float[3].\nIf the return value is a string, the THIRD parameter must be a String buffer, and the\nFOURTH parameter must be the maximum length.\nAll parameters must be passed after the above is followed.  Failure to follow these\nrules will result in crashes or wildly unexpected behavior!\n\nIf the return value is a float or integer, the return value will be this value.\nIf the return value is a CBaseEntity, CBasePlayer, or edict, the return value will\nalways be the entity index, or -1 for NULL."},{"tag":"param:call","text":"SDKCall Handle."},{"tag":"param:...","text":"Call Parameters."},{"tag":"return","text":"Simple return value, if any."},{"tag":"error","text":"Invalid Handle or internal decoding error."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"call","decl":"Handle call","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrepSDKCall_AddParameter":{"symbol":{"name":"PrepSDKCall_AddParameter","docStart":6427,"docEnd":6782,"docs":{"brief":"Adds a parameter to the calling convention.  This should be called in normal ascending order.","tags":[{"tag":"","text":"Adds a parameter to the calling convention.  This should be called in normal ascending order."},{"tag":"param:type","text":"Data type to convert to/from."},{"tag":"param:pass","text":"How the data is passed in C++."},{"tag":"param:decflags","text":"Flags on decoding from the plugin to C++."},{"tag":"param:encflags","text":"Flags on encoding from C++ to the plugin."}]},"kind":"native","returnType":"void","arguments":[{"type":"SDKType","name":"type","decl":"SDKType type","default":null},{"type":"SDKPassMethod","name":"pass","decl":"SDKPassMethod pass","default":null},{"type":"int","name":"decflags","decl":"int decflags","default":"0"},{"type":"int","name":"encflags","decl":"int encflags","default":"0"}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetPlayerResourceEntity":{"symbol":{"name":"GetPlayerResourceEntity","docStart":8198,"docEnd":8348,"docs":{"brief":"Returns the entity index of the player resource/manager entity.","tags":[{"tag":"","text":"Returns the entity index of the player resource/manager entity."},{"tag":"return","text":"Index of resource entity or -1 if not found."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"0c7696da65379a3661af0afad3f4047293e5b032","count":3817,"time":1363456236},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"StartPrepSDKCall":{"symbol":{"name":"StartPrepSDKCall","docStart":4142,"docEnd":4258,"docs":{"brief":"Starts the preparation of an SDK call.","tags":[{"tag":"","text":"Starts the preparation of an SDK call."},{"tag":"param:type","text":"Type of function call this will be."}]},"kind":"native","returnType":"void","arguments":[{"type":"SDKCallType","name":"type","decl":"SDKCallType type","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PrepSDKCall_SetAddress":{"symbol":{"name":"PrepSDKCall_SetAddress","docStart":5097,"docEnd":5276,"docs":{"brief":"Uses the given function address for the SDK call.","tags":[{"tag":"","text":"Uses the given function address for the SDK call."},{"tag":"param:addr","text":"Address of function to use."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Address","name":"addr","decl":"Address addr","default":null}]},"created":{"hash":"0513f93f9d7e6e1daaebe0a0dab321a8f9367602","count":4347,"time":1399481896},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"VENCODE_FLAG_COPYBACK":{"symbol":{"name":"VENCODE_FLAG_COPYBACK","docStart":4106,"docEnd":4138,"docs":{"brief":"Copy back data once done","tags":[{"tag":"","text":"Copy back data once done"}]},"value":"(1<<0)"},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VDECODE_FLAG_ALLOWNULL":{"symbol":{"name":"VDECODE_FLAG_ALLOWNULL","docStart":3790,"docEnd":3821,"docs":{"brief":"Allow NULL for pointers","tags":[{"tag":"","text":"Allow NULL for pointers"}]},"value":"(1<<0)"},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VDECODE_FLAG_ALLOWWORLD":{"symbol":{"name":"VDECODE_FLAG_ALLOWWORLD","docStart":3950,"docEnd":3976,"docs":{"brief":"Allow World entity","tags":[{"tag":"","text":"Allow World entity"}]},"value":"(1<<2)"},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VDECODE_FLAG_BYREF":{"symbol":{"name":"VDECODE_FLAG_BYREF","docStart":4024,"docEnd":4056,"docs":{"brief":"Floats/ints by reference","tags":[{"tag":"","text":"Floats/ints by reference"}]},"value":"(1<<3)"},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_sdktools_included":{"symbol":{"name":"_sdktools_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985}},"VDECODE_FLAG_ALLOWNOTINGAME":{"symbol":{"name":"VDECODE_FLAG_ALLOWNOTINGAME","docStart":3869,"docEnd":3902,"docs":{"brief":"Allow players not in game","tags":[{"tag":"","text":"Allow players not in game"}]},"value":"(1<<1)"},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"SDKType":{"symbol":{"name":"SDKType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"SDKType_CBaseEntity","docStart":2938,"docEnd":2977,"docs":{"brief":"CBaseEntity (always as pointer)","tags":[{"tag":"","text":"CBaseEntity (always as pointer)"}]},"value":null},{"name":"SDKType_CBasePlayer","docStart":3004,"docEnd":3043,"docs":{"brief":"CBasePlayer (always as pointer)","tags":[{"tag":"","text":"CBasePlayer (always as pointer)"}]},"value":null},{"name":"SDKType_Vector","docStart":3070,"docEnd":3111,"docs":{"brief":"Vector (pointer, byval, or byref)","tags":[{"tag":"","text":"Vector (pointer, byval, or byref)"}]},"value":null},{"name":"SDKType_QAngle","docStart":3138,"docEnd":3180,"docs":{"brief":"QAngles (pointer, byval, or byref)","tags":[{"tag":"","text":"QAngles (pointer, byval, or byref)"}]},"value":null},{"name":"SDKType_PlainOldData","docStart":3207,"docEnd":3249,"docs":{"brief":"Integer/generic data <=32bit (any)","tags":[{"tag":"","text":"Integer/generic data <=32bit (any)"}]},"value":null},{"name":"SDKType_Float","docStart":3276,"docEnd":3295,"docs":{"brief":"Float (any)","tags":[{"tag":"","text":"Float (any)"}]},"value":null},{"name":"SDKType_Edict","docStart":3322,"docEnd":3357,"docs":{"brief":"edict_t (always as pointer)","tags":[{"tag":"","text":"edict_t (always as pointer)"}]},"value":null},{"name":"SDKType_String","docStart":3384,"docEnd":3434,"docs":{"brief":"NULL-terminated string (always as pointer)","tags":[{"tag":"","text":"NULL-terminated string (always as pointer)"}]},"value":null},{"name":"SDKType_Bool","docStart":3461,"docEnd":3482,"docs":{"brief":"Boolean (any)","tags":[{"tag":"","text":"Boolean (any)"}]},"value":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SDKPassMethod":{"symbol":{"name":"SDKPassMethod","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"SDKPass_Pointer","docStart":3538,"docEnd":3563,"docs":{"brief":"Pass as a pointer","tags":[{"tag":"","text":"Pass as a pointer"}]},"value":null},{"name":"SDKPass_Plain","docStart":3590,"docEnd":3616,"docs":{"brief":"Pass as plain data","tags":[{"tag":"","text":"Pass as plain data"}]},"value":null},{"name":"SDKPass_ByValue","docStart":3643,"docEnd":3674,"docs":{"brief":"Pass an object by value","tags":[{"tag":"","text":"Pass an object by value"}]},"value":null},{"name":"SDKPass_ByRef","docStart":3701,"docEnd":3736,"docs":{"brief":"Pass an object by reference","tags":[{"tag":"","text":"Pass an object by reference"}]},"value":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SDKFuncConfSource":{"symbol":{"name":"SDKFuncConfSource","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"SDKConf_Virtual","docStart":2679,"docEnd":2732,"docs":{"brief":"Read a virtual index from the Offsets section","tags":[{"tag":"","text":"Read a virtual index from the Offsets section"}]},"value":"0"},{"name":"SDKConf_Signature","docStart":2759,"docEnd":2811,"docs":{"brief":"Read a signature from the Signatures section","tags":[{"tag":"","text":"Read a signature from the Signatures section"}]},"value":"1"},{"name":"SDKConf_Address","docStart":2838,"docEnd":2888,"docs":{"brief":"Read an address from the Addresses section","tags":[{"tag":"","text":"Read an address from the Addresses section"}]},"value":"2"}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SDKCallType":{"symbol":{"name":"SDKCallType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"SDKCall_Static","docStart":2173,"docEnd":2192,"docs":{"brief":"Static call","tags":[{"tag":"","text":"Static call"}]},"value":null},{"name":"SDKCall_Entity","docStart":2219,"docEnd":2243,"docs":{"brief":"CBaseEntity call","tags":[{"tag":"","text":"CBaseEntity call"}]},"value":null},{"name":"SDKCall_Player","docStart":2270,"docEnd":2294,"docs":{"brief":"CBasePlayer call","tags":[{"tag":"","text":"CBasePlayer call"}]},"value":null},{"name":"SDKCall_GameRules","docStart":2321,"docEnd":2344,"docs":{"brief":"CGameRules call","tags":[{"tag":"","text":"CGameRules call"}]},"value":null},{"name":"SDKCall_EntityList","docStart":2371,"docEnd":2401,"docs":{"brief":"CGlobalEntityList call","tags":[{"tag":"","text":"CGlobalEntityList call"}]},"value":null},{"name":"SDKCall_Raw","docStart":2428,"docEnd":2476,"docs":{"brief":"|this| pointer with an arbitrary address","tags":[{"tag":"","text":"|this| pointer with an arbitrary address"}]},"value":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SDKLibrary":{"symbol":{"name":"SDKLibrary","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"SDKLibrary_Server","docStart":2529,"docEnd":2562,"docs":{"brief":"server.dll/server_i486.so","tags":[{"tag":"","text":"server.dll/server_i486.so"}]},"value":null},{"name":"SDKLibrary_Engine","docStart":2589,"docEnd":2619,"docs":{"brief":"engine.dll/engine_*.so","tags":[{"tag":"","text":"engine.dll/engine_*.so"}]},"value":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"sdktools_functions":{"functions":{"GivePlayerItem":{"symbol":{"name":"GivePlayerItem","docStart":2034,"docEnd":2373,"docs":{"brief":"Gives a named item to a player.","tags":[{"tag":"","text":"Gives a named item to a player."},{"tag":"param:client","text":"Client index."},{"tag":"param:item","text":"Item classname (such as weapon_ak47)."},{"tag":"param:iSubType","text":"Unknown."},{"tag":"return","text":"Entity index on success, or -1 on failure."},{"tag":"error","text":"Invalid client or client not in game, or lack of mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"item","decl":"const char[] item","default":null},{"type":"int","name":"iSubType","decl":"int iSubType","default":"0"}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DispatchKeyValueFloat":{"symbol":{"name":"DispatchKeyValueFloat","docStart":6769,"docEnd":7120,"docs":{"brief":"Dispatches a KeyValue into given entity using a floating point value.","tags":[{"tag":"","text":"Dispatches a KeyValue into given entity using a floating point value."},{"tag":"param:entity","text":"Destination entity index."},{"tag":"param:keyName","text":"Name of the key."},{"tag":"param:value","text":"Floating point value."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid entity index, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"keyName","decl":"const char[] keyName","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"b609c4eb86355df8118b27b13b1a9267feaf060b","count":1505,"time":1191104796},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"ExtinguishPlayer":{"symbol":{"name":"ExtinguishPlayer","docStart":2155,"docEnd":2333,"docs":{"brief":"Extinguishes a player that is on fire.","tags":[{"tag":"","text":"Extinguishes a player that is on fire."},{"tag":"param:client","text":"Client index."},{"tag":"error","text":"Invalid client or client not in game, or lack of mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"0b9447d986b289e5872729c24a5e1d3a866e0745","count":956,"time":1182018443},"last_updated":{"hash":"0b9447d986b289e5872729c24a5e1d3a866e0745","count":956,"time":1182018443}},"ActivateEntity":{"symbol":{"name":"ActivateEntity","docStart":11583,"docEnd":11749,"docs":{"brief":"Activates an entity (CBaseAnimating::Activate)","tags":[{"tag":"","text":"Activates an entity (CBaseAnimating::Activate)"},{"tag":"param:entity","text":"Entity index."},{"tag":"error","text":"Invalid entity or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"946834b86863d6ce86f2446d978601107e5b4572","count":2008,"time":1208388543},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"ForcePlayerSuicide":{"symbol":{"name":"ForcePlayerSuicide","docStart":4024,"docEnd":4201,"docs":{"brief":"Forces a player to commit suicide.","tags":[{"tag":"","text":"Forces a player to commit suicide."},{"tag":"param:client","text":"Client index."},{"tag":"error","text":"Invalid client or client not in game, or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"a57acce7468d2a98499802367823de70fe31070b","count":1152,"time":1185224518},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetTeamScore":{"symbol":{"name":"GetTeamScore","docStart":8723,"docEnd":8966,"docs":{"brief":"Returns the score of a team based on a team index.\nNote: This native should not be called before OnMapStart.","tags":[{"tag":"","text":"Returns the score of a team based on a team index.\nNote: This native should not be called before OnMapStart."},{"tag":"param:index","text":"Team index."},{"tag":"return","text":"Score."},{"tag":"error","text":"Invalid team index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"ff2819e2666ef2c51013dc43d3a3a5c166e85436","count":1614,"time":1192923550},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"SlapPlayer":{"symbol":{"name":"SlapPlayer","docStart":4250,"docEnd":4536,"docs":{"brief":"Slaps a player in a random direction.","tags":[{"tag":"","text":"Slaps a player in a random direction."},{"tag":"param:client","text":"Client index."},{"tag":"param:health","text":"Health to subtract."},{"tag":"param:sound","text":"False to disable the sound effects."},{"tag":"error","text":"Invalid client or client not in game, or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"health","decl":"int health","default":"5"},{"type":"bool","name":"sound","decl":"bool sound","default":"true"}]},"created":{"hash":"78d054e077b5e9de57e30ab499bd5e65e8ada6fd","count":1170,"time":1185395014},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"EquipPlayerWeapon":{"symbol":{"name":"EquipPlayerWeapon","docStart":11264,"docEnd":11523,"docs":{"brief":"Equip's a player's weapon.","tags":[{"tag":"","text":"Equip's a player's weapon."},{"tag":"param:client","text":"Client index."},{"tag":"param:weapon","text":"CBaseCombatWeapon entity index."},{"tag":"error","text":"Invalid client or entity, lack of mod support, or client not in\ngame."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null}]},"created":{"hash":"fbe46934a45afa8603a207ebc2e693ea0d376359","count":1957,"time":1207011081},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GivePlayerAmmo":{"symbol":{"name":"GivePlayerAmmo","docStart":12480,"docEnd":12926,"docs":{"brief":"Gives ammo of a certain type to a player.\nThis natives obeys the maximum amount of ammo a player can carry per ammo type.","tags":[{"tag":"","text":"Gives ammo of a certain type to a player.\nThis natives obeys the maximum amount of ammo a player can carry per ammo type."},{"tag":"param:client","text":"The client index."},{"tag":"param:amount","text":"Amount of ammo to give. Is capped at ammotype's limit."},{"tag":"param:ammotype","text":"Type of ammo to give to player."},{"tag":"param:suppressSound","text":"If true, don't play the ammo pickup sound."},{"tag":"return","text":"Amount of ammo actually given."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"amount","decl":"int amount","default":null},{"type":"int","name":"ammotype","decl":"int ammotype","default":null},{"type":"bool","name":"suppressSound","decl":"bool suppressSound","default":"false"}]},"created":{"hash":"75d950e4b0fa9bdb8ad5c611e7ef21fa98d3adb5","count":4244,"time":1392047359},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"DispatchSpawn":{"symbol":{"name":"DispatchSpawn","docStart":6067,"docEnd":6301,"docs":{"brief":"Spawns an entity into the game.","tags":[{"tag":"","text":"Spawns an entity into the game."},{"tag":"param:entity","text":"Entity index of the created entity."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid entity index, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"c6dba359c6f4ee11ae9c6a554d14bb6edcc601b4","count":1429,"time":1189885082},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"ExtinguishEntity":{"symbol":{"name":"ExtinguishEntity","docStart":3271,"docEnd":3453,"docs":{"brief":"Extinguishes an entity that is on fire.","tags":[{"tag":"","text":"Extinguishes an entity that is on fire."},{"tag":"param:entity","text":"Entity index."},{"tag":"error","text":"Invalid entity or client not in game, or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"a76f3eba97cf4696ac4bba97057fb1f52273896f","count":981,"time":1182186162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetTeamName":{"symbol":{"name":"GetTeamName","docStart":8337,"docEnd":8654,"docs":{"brief":"Retrieves the team name based on a team index.\nNote: This native should not be called before OnMapStart.","tags":[{"tag":"","text":"Retrieves the team name based on a team index.\nNote: This native should not be called before OnMapStart."},{"tag":"param:index","text":"Team index."},{"tag":"param:name","text":"Buffer to store string in."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid team index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"ff2819e2666ef2c51013dc43d3a3a5c166e85436","count":1614,"time":1192923550},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetPlayerJingleFile":{"symbol":{"name":"GetPlayerJingleFile","docStart":10543,"docEnd":10905,"docs":{"brief":"Retrieves the jingle file name associated with a given client.","tags":[{"tag":"","text":"Retrieves the jingle file name associated with a given client."},{"tag":"param:client","text":"Player's index."},{"tag":"param:hex","text":"Buffer to store the jingle filename."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"True on success, otherwise false."},{"tag":"error","text":"Invalid client or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"hex","decl":"char[] hex","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"7db280a6662bcf113414b6fe0b016df87b94d3f3","count":4005,"time":1376269714},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"ExtinguishClient":{"symbol":{"name":"ExtinguishClient","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"a76f3eba97cf4696ac4bba97057fb1f52273896f","count":981,"time":1182186162},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"GetPlayerWeaponSlot":{"symbol":{"name":"GetPlayerWeaponSlot","docStart":2452,"docEnd":2760,"docs":{"brief":"Returns the weapon in a player's slot.","tags":[{"tag":"","text":"Returns the weapon in a player's slot."},{"tag":"param:client","text":"Client index."},{"tag":"param:slot","text":"Slot index (mod specific)."},{"tag":"return","text":"Entity index on success, -1 if no weapon existed."},{"tag":"error","text":"Invalid client or client not in game, or lack of mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"slot","decl":"int slot","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetClientInfo":{"symbol":{"name":"SetClientInfo","docStart":11794,"docEnd":12146,"docs":{"brief":"Sets values to client info buffer keys and notifies the engine of the change.\nThe change does not get propagated to mods until the next frame.","tags":[{"tag":"","text":"Sets values to client info buffer keys and notifies the engine of the change.\nThe change does not get propagated to mods until the next frame."},{"tag":"param:client","text":"Player's index."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value string."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"22aa6561b5f47f2dd5a2789541231c0df77222e5","count":2108,"time":1212995552},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"SetEntityModel":{"symbol":{"name":"SetEntityModel","docStart":9851,"docEnd":10043,"docs":{"brief":"Sets the model to a given entity.","tags":[{"tag":"","text":"Sets the model to a given entity."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:model","text":"Model name."},{"tag":"error","text":"Invalid entity index, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"model","decl":"const char[] model","default":null}]},"created":{"hash":"ef8db35a49c04992d498151439cd3f1f4b93378e","count":1721,"time":1195928220},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetServerNetStats":{"symbol":{"name":"GetServerNetStats","docStart":10982,"docEnd":11194,"docs":{"brief":"Returns the average server network traffic in bytes/sec.","tags":[{"tag":"","text":"Returns the average server network traffic in bytes/sec."},{"tag":"param:in","text":"Buffer to store the input traffic velocity."},{"tag":"param:out","text":"Buffer to store the output traffic velocity."}]},"kind":"native","returnType":"void","arguments":[{"type":"float&","name":"inAmount","decl":"float& inAmount","default":null},{"type":"float&","name":"outAmout","decl":"float& outAmout","default":null}]},"created":{"hash":"9ab9eba5d7400c2ae3be50bf4c12a967f043512d","count":1770,"time":1196907935},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetClientAimTarget":{"symbol":{"name":"GetClientAimTarget","docStart":7637,"docEnd":8062,"docs":{"brief":"Returns the entity a client is aiming at.","tags":[{"tag":"","text":"Returns the entity a client is aiming at."},{"tag":"param:client","text":"Client performing the aiming."},{"tag":"param:only_clients","text":"True to exclude all entities but clients."},{"tag":"return","text":"Entity index being aimed at.\n-1 if no entity is being aimed at.\n-2 if the function is not supported."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"only_clients","decl":"bool only_clients","default":"true"}]},"created":{"hash":"c2644b2f94d4ff7121b9d801a4af0ab8ed41e092","count":1612,"time":1192783865},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"RemovePlayerItem":{"symbol":{"name":"RemovePlayerItem","docStart":1661,"docEnd":1977,"docs":{"brief":"Removes a player's item.","tags":[{"tag":"","text":"Removes a player's item."},{"tag":"param:client","text":"Client index."},{"tag":"param:item","text":"CBaseCombatWeapon entity index."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid client or entity, lack of mod support, or client not in\ngame."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"item","decl":"int item","default":null}]},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetClientEyeAngles":{"symbol":{"name":"GetClientEyeAngles","docStart":5052,"docEnd":5366,"docs":{"brief":"Returns the client's eye angles.","tags":[{"tag":"","text":"Returns the client's eye angles."},{"tag":"param:client","text":"Player's index."},{"tag":"param:ang","text":"Destination vector to store the client's eye angles."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float[3]","name":"ang","decl":"float ang[3]","default":null}]},"created":{"hash":"d05a57fcba7ed445570d42e1a090f37fde82aba5","count":1220,"time":1185847705},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetTeamCount":{"symbol":{"name":"GetTeamCount","docStart":8134,"docEnd":8305,"docs":{"brief":"Returns the total number of teams in a game.\nNote: This native should not be called before OnMapStart.","tags":[{"tag":"","text":"Returns the total number of teams in a game.\nNote: This native should not be called before OnMapStart."},{"tag":"return","text":"Total number of teams."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"ff2819e2666ef2c51013dc43d3a3a5c166e85436","count":1614,"time":1192923550},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetTeamEntity":{"symbol":{"name":"GetTeamEntity","docStart":9624,"docEnd":9805,"docs":{"brief":"Returns the entity index of a team.","tags":[{"tag":"","text":"Returns the entity index of a team."},{"tag":"param:teamIndex","text":"Team index."},{"tag":"return","text":"Entity index of team."},{"tag":"error","text":"Invalid team index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"teamIndex","decl":"int teamIndex","default":null}]},"created":{"hash":"ae8efdddcb27682c8277a0813619d7e1365bcbfb","count":5366,"time":1425997663},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"IgnitePlayer":{"symbol":{"name":"IgnitePlayer","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"time","decl":"float time","default":null},{"type":"bool","name":"npc","decl":"bool npc","default":"false"},{"type":"float","name":"size","decl":"float size","default":"0.000000"},{"type":"bool","name":"level","decl":"bool level","default":"false"}]},"created":{"hash":"0b9447d986b289e5872729c24a5e1d3a866e0745","count":956,"time":1182018443},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"GetTeamClientCount":{"symbol":{"name":"GetTeamClientCount","docStart":9310,"docEnd":9577,"docs":{"brief":"Retrieves the number of players in a certain team.\nNote: This native should not be called before OnMapStart.","tags":[{"tag":"","text":"Retrieves the number of players in a certain team.\nNote: This native should not be called before OnMapStart."},{"tag":"param:index","text":"Team index."},{"tag":"return","text":"Number of players in the team."},{"tag":"error","text":"Invalid team index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"ff2819e2666ef2c51013dc43d3a3a5c166e85436","count":1614,"time":1192923550},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"IgniteEntity":{"symbol":{"name":"IgniteEntity","docStart":2819,"docEnd":3166,"docs":{"brief":"Ignites an entity on fire.","tags":[{"tag":"","text":"Ignites an entity on fire."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:time","text":"Number of seconds to set on fire."},{"tag":"param:npc","text":"True to only affect NPCs."},{"tag":"param:size","text":"Unknown."},{"tag":"param:level","text":"Unknown."},{"tag":"error","text":"Invalid entity or client not in game, or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"float","name":"time","decl":"float time","default":null},{"type":"bool","name":"npc","decl":"bool npc","default":"false"},{"type":"float","name":"size","decl":"float size","default":"0.000000"},{"type":"bool","name":"level","decl":"bool level","default":"false"}]},"created":{"hash":"a76f3eba97cf4696ac4bba97057fb1f52273896f","count":981,"time":1182186162},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TeleportEntity":{"symbol":{"name":"TeleportEntity","docStart":3500,"docEnd":3866,"docs":{"brief":"Teleports an entity.","tags":[{"tag":"","text":"Teleports an entity."},{"tag":"param:entity","text":"Client index."},{"tag":"param:origin","text":"New origin, or NULL_VECTOR for no change."},{"tag":"param:angles","text":"New angles, or NULL_VECTOR for no change."},{"tag":"param:velocity","text":"New velocity, or NULL_VECTOR for no change."},{"tag":"error","text":"Invalid entity or client not in game, or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"angles","decl":"const float angles[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"velocity","decl":"const float velocity[3]","default":"NULL_VECTOR"}]},"created":{"hash":"a76f3eba97cf4696ac4bba97057fb1f52273896f","count":981,"time":1182186162},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"SetTeamScore":{"symbol":{"name":"SetTeamScore","docStart":9007,"docEnd":9257,"docs":{"brief":"Sets the score of a team based on a team index.\nNote: This native should not be called before OnMapStart.","tags":[{"tag":"","text":"Sets the score of a team based on a team index.\nNote: This native should not be called before OnMapStart."},{"tag":"param:index","text":"Team index."},{"tag":"param:value","text":"New score value."},{"tag":"error","text":"Invalid team index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"ff2819e2666ef2c51013dc43d3a3a5c166e85436","count":1614,"time":1192923550},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"DispatchKeyValueVector":{"symbol":{"name":"DispatchKeyValueVector","docStart":7207,"docEnd":7542,"docs":{"brief":"Dispatches a KeyValue into given entity using a vector value.","tags":[{"tag":"","text":"Dispatches a KeyValue into given entity using a vector value."},{"tag":"param:entity","text":"Destination entity index."},{"tag":"param:keyName","text":"Name of the key."},{"tag":"param:vec","text":"Vector value."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid entity index, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"keyName","decl":"const char[] keyName","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"b609c4eb86355df8118b27b13b1a9267feaf060b","count":1505,"time":1191104796},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"TeleportPlayer":{"symbol":{"name":"TeleportPlayer","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":null},{"type":"const float[3]","name":"angles","decl":"const float angles[3]","default":null},{"type":"const float[3]","name":"velocity","decl":"const float velocity[3]","default":null}]},"created":{"hash":"0b9447d986b289e5872729c24a5e1d3a866e0745","count":956,"time":1182018443},"last_updated":{"hash":"9d0c2ea4d81bb5cf55b3b776cafdb4fe45512ef9","count":1269,"time":1186524660}},"FindEntityByClassname":{"symbol":{"name":"FindEntityByClassname","docStart":4608,"docEnd":4975,"docs":{"brief":"Searches for an entity by classname.","tags":[{"tag":"","text":"Searches for an entity by classname."},{"tag":"param:startEnt","text":"The entity index after which to begin searching from.\nUse -1 to start from the first entity."},{"tag":"param:classname","text":"Classname of the entity to find."},{"tag":"return","text":"Entity index >= 0 if found, -1 otherwise."},{"tag":"error","text":"Lack of mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"startEnt","decl":"int startEnt","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null}]},"created":{"hash":"bcc798e165e5f3f2e06982e44d45c7fd51155849","count":1241,"time":1185952738},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"DispatchKeyValue":{"symbol":{"name":"DispatchKeyValue","docStart":6345,"docEnd":6680,"docs":{"brief":"Dispatches a KeyValue into given entity using a string value.","tags":[{"tag":"","text":"Dispatches a KeyValue into given entity using a string value."},{"tag":"param:entity","text":"Destination entity index."},{"tag":"param:keyName","text":"Name of the key."},{"tag":"param:value","text":"String value."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid entity index, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"keyName","decl":"const char[] keyName","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"b609c4eb86355df8118b27b13b1a9267feaf060b","count":1505,"time":1191104796},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"GetPlayerDecalFile":{"symbol":{"name":"GetPlayerDecalFile","docStart":10108,"docEnd":10467,"docs":{"brief":"Retrieves the decal file name associated with a given client.","tags":[{"tag":"","text":"Retrieves the decal file name associated with a given client."},{"tag":"param:client","text":"Player's index."},{"tag":"param:hex","text":"Buffer to store the logo filename."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"True on success, otherwise false."},{"tag":"error","text":"Invalid client or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"hex","decl":"char[] hex","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"9ab9eba5d7400c2ae3be50bf4c12a967f043512d","count":1770,"time":1196907935},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"SetClientName":{"symbol":{"name":"SetClientName","docStart":12228,"docEnd":12417,"docs":{"brief":"Changes a client's name.","tags":[{"tag":"","text":"Changes a client's name."},{"tag":"param:client","text":"Player's index."},{"tag":"param:name","text":"New name."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"7d795b523e03d603df40349d212a12d53517c2a7","count":5382,"time":1427051708},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"CreateEntityByName":{"symbol":{"name":"CreateEntityByName","docStart":5429,"docEnd":5983,"docs":{"brief":"Creates an entity by string name, but does not spawn it (see DispatchSpawn).\nIf ForceEdictIndex is not -1, then it will use the edict by that index. If the index is\ninvalid or there is already an edict using that index, it will error out.","tags":[{"tag":"","text":"Creates an entity by string name, but does not spawn it (see DispatchSpawn).\nIf ForceEdictIndex is not -1, then it will use the edict by that index. If the index is\ninvalid or there is already an edict using that index, it will error out."},{"tag":"param:classname","text":"Entity classname."},{"tag":"param:ForceEdictIndex","text":"Edict index used by the created entity (ignored on Orangebox and above)."},{"tag":"return","text":"Entity index on success, or -1 on failure."},{"tag":"error","text":"Invalid edict index, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null},{"type":"int","name":"ForceEdictIndex","decl":"int ForceEdictIndex","default":"-1"}]},"created":{"hash":"c6dba359c6f4ee11ae9c6a554d14bb6edcc601b4","count":1429,"time":1189885082},"last_updated":{"hash":"625650c160837ddba43e64b68e712f4ed964a90b","count":6487,"time":1580547239}},"IsPlayerAlive":{"symbol":{"name":"IsPlayerAlive","docStart":5018,"docEnd":5245,"docs":{"brief":"Returns if the client is alive or dead.","tags":[{"tag":"","text":"Returns if the client is alive or dead."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"True if the client is alive, false otherwise."},{"tag":"error","text":"Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"c611ba9ea595820e8735e6b59771b5a295be88d7","count":1240,"time":1185951355},"last_updated":{"hash":"c2644b2f94d4ff7121b9d801a4af0ab8ed41e092","count":1612,"time":1192783865}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_functions_included":{"symbol":{"name":"_sdktools_functions_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985},"last_updated":{"hash":"11ff3812893ff06b55d8f693403eafe786d80a7a","count":955,"time":1182016985}}},"enums":{},"typesets":{},"typedefs":{}},"bitbuffer":{"functions":{"BfWriteByte":{"symbol":{"name":"BfWriteByte","docStart":7560,"docEnd":7806,"docs":{"brief":"Writes a byte to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a byte to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:byte","text":"Byte to write (value will be written as 8bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"byte","decl":"int byte","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteFloat":{"symbol":{"name":"BfWriteFloat","docStart":9063,"docEnd":9296,"docs":{"brief":"Writes a floating point number to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a floating point number to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Number to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float","name":"num","decl":"float num","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfGetNumBytesLeft":{"symbol":{"name":"BfGetNumBytesLeft","docStart":16165,"docEnd":16411,"docs":{"brief":"Returns the number of bytes left in a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Returns the number of bytes left in a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Number of bytes left unread."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"7a5b8caa16a06c3efafc5bc445fc39342985e7e6","count":1873,"time":1203555815},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadAngle":{"symbol":{"name":"BfReadAngle","docStart":14671,"docEnd":14944,"docs":{"brief":"Reads a bit angle from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a bit angle from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"param:numBits","text":"Optional number of bits to use."},{"tag":"return","text":"Angle read."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"numBits","decl":"int numBits","default":"8"}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteShort":{"symbol":{"name":"BfWriteShort","docStart":8126,"docEnd":8385,"docs":{"brief":"Writes a 16bit integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 16bit integer to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Integer to write (value will be written as 16bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteString":{"symbol":{"name":"BfWriteString","docStart":9349,"docEnd":9572,"docs":{"brief":"Writes a string to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a string to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:string","text":"Text string to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"const char[]","name":"string","decl":"const char[] string","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadBool":{"symbol":{"name":"BfReadBool","docStart":11499,"docEnd":11721,"docs":{"brief":"Reads a single bit from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a single bit from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Bit value read."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteNum":{"symbol":{"name":"BfWriteNum","docStart":8754,"docEnd":9014,"docs":{"brief":"Writes a normal integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a normal integer to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Integer to write (value will be written as 32bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteAngles":{"symbol":{"name":"BfWriteAngles","docStart":11206,"docEnd":11439,"docs":{"brief":"Writes a 3D angle vector to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D angle vector to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:angles","text":"Angle vector to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"angles","decl":"float angles[3]","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadWord":{"symbol":{"name":"BfReadWord","docStart":12580,"docEnd":12833,"docs":{"brief":"Reads a 16bit unsigned integer from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 16bit unsigned integer from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Integer value read (read as 16bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteWord":{"symbol":{"name":"BfWriteWord","docStart":8436,"docEnd":8704,"docs":{"brief":"Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 16bit unsigned integer to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:num","text":"Integer to write (value will be written as 16bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteVecCoord":{"symbol":{"name":"BfWriteVecCoord","docStart":10611,"docEnd":10857,"docs":{"brief":"Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D vector of coordinates to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:coord","text":"Coordinate array to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"coord","decl":"float coord[3]","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadCoord":{"symbol":{"name":"BfReadCoord","docStart":15001,"docEnd":15223,"docs":{"brief":"Reads a coordinate from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a coordinate from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Coordinate read."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadChar":{"symbol":{"name":"BfReadChar","docStart":12031,"docEnd":12257,"docs":{"brief":"Reads a character from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a character from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Character value read."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadString":{"symbol":{"name":"BfReadString","docStart":13438,"docEnd":14271,"docs":{"brief":"Reads a string from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a string from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:line","text":"If true the buffer will be copied until it reaches a '\\n' or a null terminator."},{"tag":"return","text":"Number of bytes written to the buffer.  If the bitbuffer stream overflowed,\nthat is, had no terminator before the end of the stream, then a negative\nnumber will be returned equal to the number of characters written to the\nbuffer minus 1.  The buffer will be null terminated regardless of the\nreturn value."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"line","decl":"bool line","default":"false"}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadEntity":{"symbol":{"name":"BfReadEntity","docStart":14359,"docEnd":14630,"docs":{"brief":"Reads an entity from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads an entity from a readable bitbuffer (bf_read)."},{"tag":"note","text":"This is a wrapper around BfReadShort()."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Entity index read."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteCoord":{"symbol":{"name":"BfWriteCoord","docStart":10330,"docEnd":10556,"docs":{"brief":"Writes a coordinate to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a coordinate to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:coord","text":"Coordinate to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float","name":"coord","decl":"float coord","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadVecNormal":{"symbol":{"name":"BfReadVecNormal","docStart":15574,"docEnd":15811,"docs":{"brief":"Reads a 3D normal vector from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 3D normal vector from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"param:vec","text":"Destination vector array."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteEntity":{"symbol":{"name":"BfWriteEntity","docStart":9636,"docEnd":9931,"docs":{"brief":"Writes an entity to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes an entity to a writable bitbuffer (bf_write)."},{"tag":"note","text":"This is a wrapper around BfWriteShort()."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:ent","text":"Entity index to write."},{"tag":"error","text":"Invalid or incorrect Handle, or invalid entity."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"ent","decl":"int ent","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteVecNormal":{"symbol":{"name":"BfWriteVecNormal","docStart":10918,"docEnd":11146,"docs":{"brief":"Writes a 3D normal vector to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D normal vector to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:vec","text":"Vector to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadByte":{"symbol":{"name":"BfReadByte","docStart":11761,"docEnd":11992,"docs":{"brief":"Reads a byte from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a byte from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Byte value read (read as 8bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadVecCoord":{"symbol":{"name":"BfReadVecCoord","docStart":15265,"docEnd":15514,"docs":{"brief":"Reads a 3D vector of coordinates from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 3D vector of coordinates from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"param:coord","text":"Destination coordinate array."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"coord","decl":"float coord[3]","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadAngles":{"symbol":{"name":"BfReadAngles","docStart":15870,"docEnd":16106,"docs":{"brief":"Reads a 3D angle vector from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 3D angle vector from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"param:angles","text":"Destination angle vector."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float[3]","name":"angles","decl":"float angles[3]","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadNum":{"symbol":{"name":"BfReadNum","docStart":12872,"docEnd":13115,"docs":{"brief":"Reads a normal integer to a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a normal integer to a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Integer value read (read as 32bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadShort":{"symbol":{"name":"BfReadShort","docStart":12296,"docEnd":12540,"docs":{"brief":"Reads a 16bit integer from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 16bit integer from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Integer value read (read as 16bit)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfReadFloat":{"symbol":{"name":"BfReadFloat","docStart":13153,"docEnd":13396,"docs":{"brief":"Reads a floating point number from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a floating point number from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Floating point value read."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null}]},"created":{"hash":"f64945b2aa3994ca8db4a76b19327bf3fbe3bc9f","count":599,"time":1173647345},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteBool":{"symbol":{"name":"BfWriteBool","docStart":7262,"docEnd":7508,"docs":{"brief":"Writes a single bit to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a single bit to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:bit","text":"Bit to write (true for 1, false for 0)."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"bool","name":"bit","decl":"bool bit","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteChar":{"symbol":{"name":"BfWriteChar","docStart":7857,"docEnd":8076,"docs":{"brief":"Writes a byte to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a byte to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:chr","text":"Character to write."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"int","name":"chr","decl":"int chr","default":null}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BfWriteAngle":{"symbol":{"name":"BfWriteAngle","docStart":9983,"docEnd":10260,"docs":{"brief":"Writes a bit angle to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a bit angle to a writable bitbuffer (bf_write)."},{"tag":"param:bf","text":"bf_write handle to write to."},{"tag":"param:angle","text":"Angle to write."},{"tag":"param:numBits","text":"Optional number of bits to use."},{"tag":"error","text":"Invalid or incorrect Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"bf","decl":"Handle bf","default":null},{"type":"float","name":"angle","decl":"float angle","default":null},{"type":"int","name":"numBits","decl":"int numBits","default":"8"}]},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"BfWrite":{"symbol":{"name":"BfWrite","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"WriteBool","docStart":1692,"docEnd":1817,"docs":{"brief":"Writes a single bit to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a single bit to a writable bitbuffer (bf_write)."},{"tag":"param:bit","text":"Bit to write (true for 1, false for 0)."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"bit","decl":"bool bit","default":null}]},{"name":"WriteByte","docStart":1866,"docEnd":1992,"docs":{"brief":"Writes a byte to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a byte to a writable bitbuffer (bf_write)."},{"tag":"param:byte","text":"Byte to write (value will be written as 8bit)."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"byte","decl":"int byte","default":null}]},{"name":"WriteChar","docStart":2039,"docEnd":2138,"docs":{"brief":"Writes a byte to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a byte to a writable bitbuffer (bf_write)."},{"tag":"param:chr","text":"Character to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"chr","decl":"int chr","default":null}]},{"name":"WriteShort","docStart":2184,"docEnd":2323,"docs":{"brief":"Writes a 16bit integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 16bit integer to a writable bitbuffer (bf_write)."},{"tag":"param:num","text":"Integer to write (value will be written as 16bit)."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null}]},{"name":"WriteWord","docStart":2370,"docEnd":2518,"docs":{"brief":"Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 16bit unsigned integer to a writable bitbuffer (bf_write)."},{"tag":"param:num","text":"Integer to write (value will be written as 16bit)."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null}]},{"name":"WriteNum","docStart":2564,"docEnd":2704,"docs":{"brief":"Writes a normal integer to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a normal integer to a writable bitbuffer (bf_write)."},{"tag":"param:num","text":"Integer to write (value will be written as 32bit)."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"num","decl":"int num","default":null}]},{"name":"WriteFloat","docStart":2749,"docEnd":2862,"docs":{"brief":"Writes a floating point number to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a floating point number to a writable bitbuffer (bf_write)."},{"tag":"param:num","text":"Number to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"num","decl":"float num","default":null}]},{"name":"WriteString","docStart":2911,"docEnd":3014,"docs":{"brief":"Writes a string to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a string to a writable bitbuffer (bf_write)."},{"tag":"param:string","text":"Text string to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"string","decl":"const char[] string","default":null}]},{"name":"WriteEntity","docStart":3074,"docEnd":3179,"docs":{"brief":"Writes an entity to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes an entity to a writable bitbuffer (bf_write)."},{"tag":"param:ent","text":"Entity index to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"ent","decl":"int ent","default":null}]},{"name":"WriteAngle","docStart":3227,"docEnd":3381,"docs":{"brief":"Writes a bit angle to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a bit angle to a writable bitbuffer (bf_write)."},{"tag":"param:angle","text":"Angle to write."},{"tag":"param:numBits","text":"Optional number of bits to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"angle","decl":"float angle","default":null},{"type":"int","name":"numBits","decl":"int numBits","default":"8"}]},{"name":"WriteCoord","docStart":3447,"docEnd":3553,"docs":{"brief":"Writes a coordinate to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a coordinate to a writable bitbuffer (bf_write)."},{"tag":"param:coord","text":"Coordinate to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"coord","decl":"float coord","default":null}]},{"name":"WriteVecCoord","docStart":3604,"docEnd":3730,"docs":{"brief":"Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D vector of coordinates to a writable bitbuffer (bf_write)."},{"tag":"param:coord","text":"Coordinate array to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"coord","decl":"float coord[3]","default":null}]},{"name":"WriteVecNormal","docStart":3787,"docEnd":3895,"docs":{"brief":"Writes a 3D normal vector to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D normal vector to a writable bitbuffer (bf_write)."},{"tag":"param:vec","text":"Vector to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"WriteAngles","docStart":3951,"docEnd":4064,"docs":{"brief":"Writes a 3D angle vector to a writable bitbuffer (bf_write).","tags":[{"tag":"","text":"Writes a 3D angle vector to a writable bitbuffer (bf_write)."},{"tag":"param:angles","text":"Angle vector to write."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"angles","decl":"float angles[3]","default":null}]}],"properties":[]},"created":{"hash":"2cfe54f34bda5d948394636e3afd619b3b35d346","count":5021,"time":1415581010},"last_updated":{"hash":"2cfe54f34bda5d948394636e3afd619b3b35d346","count":5021,"time":1415581010}},"BfRead":{"symbol":{"name":"BfRead","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"ReadBool","docStart":4154,"docEnd":4255,"docs":{"brief":"Reads a single bit from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a single bit from a readable bitbuffer (bf_read)."},{"tag":"return","text":"Bit value read."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"ReadByte","docStart":4293,"docEnd":4404,"docs":{"brief":"Reads a byte from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a byte from a readable bitbuffer (bf_read)."},{"tag":"return","text":"Byte value read (read as 8bit)."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"ReadChar","docStart":4441,"docEnd":4547,"docs":{"brief":"Reads a character from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a character from a readable bitbuffer (bf_read)."},{"tag":"return","text":"Character value read."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"ReadShort","docStart":4584,"docEnd":4759,"docs":{"brief":"Reads a 16bit integer from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 16bit integer from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Integer value read (read as 16bit)."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"ReadWord","docStart":4797,"docEnd":4981,"docs":{"brief":"Reads a 16bit unsigned integer from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 16bit unsigned integer from a readable bitbuffer (bf_read)."},{"tag":"param:bf","text":"bf_read handle to read from."},{"tag":"return","text":"Integer value read (read as 16bit)."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"ReadNum","docStart":5018,"docEnd":5141,"docs":{"brief":"Reads a normal integer to a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a normal integer to a readable bitbuffer (bf_read)."},{"tag":"return","text":"Integer value read (read as 32bit)."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"ReadFloat","docStart":5177,"docEnd":5300,"docs":{"brief":"Reads a floating point number from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a floating point number from a readable bitbuffer (bf_read)."},{"tag":"return","text":"Floating point value read."}]},"kind":"native","returnType":"float","arguments":[]},{"name":"ReadString","docStart":5340,"docEnd":6032,"docs":{"brief":"Reads a string from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a string from a readable bitbuffer (bf_read)."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:line","text":"If true the buffer will be copied until it reaches a '\\n' or a null terminator."},{"tag":"return","text":"Number of bytes written to the buffer.  If the bitbuffer stream overflowed,\nthat is, had no terminator before the end of the stream, then a negative\nnumber will be returned equal to the number of characters written to the\nbuffer minus 1.  The buffer will be null terminated regardless of the\nreturn value."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"line","decl":"bool line","default":"false"}]},{"name":"ReadEntity","docStart":6116,"docEnd":6217,"docs":{"brief":"Reads an entity from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads an entity from a readable bitbuffer (bf_read)."},{"tag":"return","text":"Entity index read."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"ReadAngle","docStart":6256,"docEnd":6406,"docs":{"brief":"Reads a bit angle from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a bit angle from a readable bitbuffer (bf_read)."},{"tag":"param:numBits","text":"Optional number of bits to use."},{"tag":"return","text":"Angle read."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"numBits","decl":"int numBits","default":"8"}]},{"name":"ReadCoord","docStart":6459,"docEnd":6561,"docs":{"brief":"Reads a coordinate from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a coordinate from a readable bitbuffer (bf_read)."},{"tag":"return","text":"Coordinate read."}]},"kind":"native","returnType":"float","arguments":[]},{"name":"ReadVecCoord","docStart":6601,"docEnd":6730,"docs":{"brief":"Reads a 3D vector of coordinates from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 3D vector of coordinates from a readable bitbuffer (bf_read)."},{"tag":"param:coord","text":"Destination coordinate array."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"coord","decl":"float coord[3]","default":null}]},{"name":"ReadVecNormal","docStart":6786,"docEnd":6903,"docs":{"brief":"Reads a 3D normal vector from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 3D normal vector from a readable bitbuffer (bf_read)."},{"tag":"param:vec","text":"Destination vector array."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"ReadAngles","docStart":6958,"docEnd":7074,"docs":{"brief":"Reads a 3D angle vector from a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Reads a 3D angle vector from a readable bitbuffer (bf_read)."},{"tag":"param:angles","text":"Destination angle vector."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"angles","decl":"float angles[3]","default":null}]}],"properties":[{"name":"BytesLeft","docStart":7129,"docEnd":7199,"docs":{"brief":"Returns the number of bytes left in a readable bitbuffer (bf_read).","tags":[{"tag":"","text":"Returns the number of bytes left in a readable bitbuffer (bf_read)."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"2cfe54f34bda5d948394636e3afd619b3b35d346","count":5021,"time":1415581010},"last_updated":{"hash":"2cfe54f34bda5d948394636e3afd619b3b35d346","count":5021,"time":1415581010}}},"enumstructs":{},"constants":{},"defines":{"_bitbuffer_included":{"symbol":{"name":"_bitbuffer_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636},"last_updated":{"hash":"0fbb38ef8efda0d4df8168302e5c8416903755cb","count":506,"time":1171651636}}},"enums":{},"typesets":{},"typedefs":{}},"commandline":{"functions":{"GetCommandLine":{"symbol":{"name":"GetCommandLine","docStart":1613,"docEnd":1958,"docs":{"brief":"Gets the full command line the server was launched with.","tags":[{"tag":"","text":"Gets the full command line the server was launched with."},{"tag":"param:commandLine","text":"Buffer to store the command line in."},{"tag":"param:maxlen","text":"Maximum length of the command line buffer."},{"tag":"return","text":"True if the command line is valid; otherwise, false."},{"tag":"error","text":"No command line available, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"commandLine","decl":"char[] commandLine","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCommandLineParamInt":{"symbol":{"name":"GetCommandLineParamInt","docStart":2566,"docEnd":2960,"docs":{"brief":"Gets the value of a command line parameter the server was launched with.","tags":[{"tag":"","text":"Gets the value of a command line parameter the server was launched with."},{"tag":"param:param","text":"The command line parameter to get the value of."},{"tag":"param:defValue","text":"The default value to return if the parameter wasn't specified."},{"tag":"return","text":"The integer value of the command line parameter value."},{"tag":"error","text":"No command line available, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"param","decl":"const char[] param","default":null},{"type":"int","name":"defValue","decl":"int defValue","default":"0"}]},"created":{"hash":"a580f8c2708d8bf6bb21213ef1a8d10c80499112","count":4907,"time":1412896780},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindCommandLineParam":{"symbol":{"name":"FindCommandLineParam","docStart":3515,"docEnd":3809,"docs":{"brief":"Determines if a specific command line parameter is present.","tags":[{"tag":"","text":"Determines if a specific command line parameter is present."},{"tag":"param:param","text":"The command line parameter to test."},{"tag":"return","text":"True if the command line parameter is specified; otherwise, false."},{"tag":"error","text":"No command line available, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"param","decl":"const char[] param","default":null}]},"created":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCommandLineParamFloat":{"symbol":{"name":"GetCommandLineParamFloat","docStart":3033,"docEnd":3434,"docs":{"brief":"Gets the value of a command line parameter the server was launched with.","tags":[{"tag":"","text":"Gets the value of a command line parameter the server was launched with."},{"tag":"param:param","text":"The command line parameter to get the value of."},{"tag":"param:defValue","text":"The default value to return if the parameter wasn't specified."},{"tag":"return","text":"The floating point value of the command line parameter value."},{"tag":"error","text":"No command line available, or no mod support."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"param","decl":"const char[] param","default":null},{"type":"float","name":"defValue","decl":"float defValue","default":"0.000000"}]},"created":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCommandLineParam":{"symbol":{"name":"GetCommandLineParam","docStart":2020,"docEnd":2459,"docs":{"brief":"Gets the value of a command line parameter the server was launched with.","tags":[{"tag":"","text":"Gets the value of a command line parameter the server was launched with."},{"tag":"param:param","text":"The command line parameter to get the value of."},{"tag":"param:value","text":"Buffer to store the parameter value in."},{"tag":"param:maxlen","text":"Maximum length of the value buffer."},{"tag":"param:defValue","text":"The default value to return if the parameter wasn't specified."},{"tag":"error","text":"No command line available, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"param","decl":"const char[] param","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"const char[]","name":"defValue","decl":"const char[] defValue","default":"\"\""}]},"created":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetCommandLineParamNumber":{"symbol":{"name":"GetCommandLineParamNumber","docStart":2565,"docEnd":2924,"docs":{"brief":"Gets the value of a command line parameter the server was launched with.","tags":[{"tag":"","text":"Gets the value of a command line parameter the server was launched with."},{"tag":"param:param","text":"The command line parameter to get the value of."},{"tag":"param:defValue","text":"The default value to return if the parameter wasn't specified."},{"tag":"return","text":"The integer value of the command line parameter value."},{"tag":"error","text":"No command line available, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"param","decl":"const char[] param","default":null},{"type":"int","name":"defValue","decl":"int defValue","default":"0"}]},"created":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562},"last_updated":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_commandline_included_":{"symbol":{"name":"_commandline_included_","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562},"last_updated":{"hash":"f2a80e33fd9f365c640c568a076bf8f68609636b","count":4900,"time":1412716562}}},"enums":{},"typesets":{},"typedefs":{}},"tf2_stocks":{"functions":{"TF2_GetPlayerConditionFlags":{"symbol":{"name":"TF2_GetPlayerConditionFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF2_GetPlayerResourceData":{"symbol":{"name":"TF2_GetPlayerResourceData","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFResourceType","name":"type","decl":"TFResourceType type","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"0c7696da65379a3661af0afad3f4047293e5b032","count":3817,"time":1363456236}},"TF2_GetObjectMode":{"symbol":{"name":"TF2_GetObjectMode","docStart":16583,"docEnd":16766,"docs":{"brief":"Gets an entity's object mode.","tags":[{"tag":"","text":"Gets an entity's object mode."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Current TFObjectMode of entity."},{"tag":"error","text":"Invalid entity index."}]},"kind":"stock","returnType":"TFObjectMode","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"4ab3b15efd06e75860ef96bad5b26501c850d0de","count":3094,"time":1279934615},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_EquipPlayerClassWeapons":{"symbol":{"name":"TF2_EquipPlayerClassWeapons","docStart":6317,"docEnd":6640,"docs":{"brief":"Equips a client with a class's weapons. This does not remove existing weapons.\n\nNote:  Some class specific items such tf_weapon_pda_engineer_build are only given\nif the client is the correct class.","tags":[{"tag":"","text":"Equips a client with a class's weapons. This does not remove existing weapons.\n\nNote:  Some class specific items such tf_weapon_pda_engineer_build are only given\nif the client is the correct class."},{"tag":"param:client","text":"Player's index."},{"tag":"param:class","text":"TFClasssType class symbol."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFClassType","name":"class","decl":"TFClassType class","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"d0286c1391b20fcb35cdf6aed1d8e7bac2dbf316","count":2022,"time":1208901903}},"TF2_RemoveWeaponSlot":{"symbol":{"name":"TF2_RemoveWeaponSlot","docStart":13276,"docEnd":13494,"docs":{"brief":"Removes all weapons from a client's weapon slot","tags":[{"tag":"","text":"Removes all weapons from a client's weapon slot"},{"tag":"param:client","text":"Player's index."},{"tag":"param:slot","text":"Slot index (0-5)"},{"tag":"error","text":"Invalid client, invalid slot or lack of mod support"}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"slot","decl":"int slot","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_GetPlayerClass":{"symbol":{"name":"TF2_GetPlayerClass","docStart":10502,"docEnd":10687,"docs":{"brief":"Gets a client's current class.","tags":[{"tag":"","text":"Gets a client's current class."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"Current TFClassType of player."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"TFClassType","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_IsPlayerInCondition":{"symbol":{"name":"TF2_IsPlayerInCondition","docStart":14802,"docEnd":15000,"docs":{"brief":"Check whether or not a condition is set on a player","tags":[{"tag":"","text":"Check whether or not a condition is set on a player"},{"tag":"param:client","text":"Player's index."},{"tag":"param:cond","text":"TFCond constant"},{"tag":"return","text":"True if set, false otherwise"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFCond","name":"cond","decl":"TFCond cond","default":null}]},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_SetClientTeam":{"symbol":{"name":"TF2_SetClientTeam","docStart":9664,"docEnd":9855,"docs":{"brief":"Sets a client's current team.","tags":[{"tag":"","text":"Sets a client's current team."},{"tag":"param:client","text":"Client index."},{"tag":"param:team","text":"TFTeam team symbol."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFTeam","name":"team","decl":"TFTeam team","default":null}]},"created":{"hash":"58d94c2827f870ebe361ad66443ebf762db8bc3d","count":5249,"time":1424485407},"last_updated":{"hash":"f772c88eedcd5dd59e4f9ad351fcbb5d5c41d26b","count":5250,"time":1424485594}},"TF2_GivePlayerWeapon":{"symbol":{"name":"TF2_GivePlayerWeapon","docStart":5835,"docEnd":6077,"docs":{"brief":"Gives a named weapon to a client","tags":[{"tag":"","text":"Gives a named weapon to a client"},{"tag":"param:client","text":"Player's index."},{"tag":"param:weapon","text":"Weapon name"},{"tag":"return","text":"False if weapon could not be created, true on success"},{"tag":"error","text":"Invalid client index or lack of mod support"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"weapon","decl":"const char[] weapon","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"d0286c1391b20fcb35cdf6aed1d8e7bac2dbf316","count":2022,"time":1208901903}},"TF2_ChangeClientTeam":{"symbol":{"name":"TF2_ChangeClientTeam","docStart":10215,"docEnd":10389,"docs":{"brief":"Changes a client's current team.","tags":[{"tag":"","text":"Changes a client's current team."},{"tag":"param:client","text":"Client index."},{"tag":"param:team","text":"TFTeam team symbol."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFTeam","name":"team","decl":"TFTeam team","default":null}]},"created":{"hash":"20b5f765727fd64a01bf7613633fd3903d8a3412","count":5259,"time":1424654445},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_SetPlayerResourceData":{"symbol":{"name":"TF2_SetPlayerResourceData","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFResourceType","name":"type","decl":"TFResourceType type","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"0c7696da65379a3661af0afad3f4047293e5b032","count":3817,"time":1363456236}},"TF2_RemoveAllWeapons":{"symbol":{"name":"TF2_RemoveAllWeapons","docStart":14184,"docEnd":14271,"docs":{"brief":"Removes all weapons from a client","tags":[{"tag":"","text":"Removes all weapons from a client"},{"tag":"param:client","text":"Player's index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_SetPlayerClass":{"symbol":{"name":"TF2_SetPlayerClass","docStart":10815,"docEnd":11230,"docs":{"brief":"Sets a client's class.\n\nNote: If setting player class in a player spawn hook weapons should be set to false.","tags":[{"tag":"","text":"Sets a client's class.\n\nNote: If setting player class in a player spawn hook weapons should be set to false."},{"tag":"param:client","text":"Player's index."},{"tag":"param:classType","text":"TFClassType class symbol."},{"tag":"param:weapons","text":"This parameter is ignored."},{"tag":"param:persistent","text":"If true, changes the player's desired class so the change stays after death."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TFClassType","name":"classType","decl":"TFClassType classType","default":null},{"type":"bool","name":"weapons","decl":"bool weapons","default":"true"},{"type":"bool","name":"persistent","decl":"bool persistent","default":"true"}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_GetClientTeam":{"symbol":{"name":"TF2_GetClientTeam","docStart":9941,"docEnd":10118,"docs":{"brief":"Gets a client's current team.","tags":[{"tag":"","text":"Gets a client's current team."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"Current TFTeam of client."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"TFTeam","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"1562530cdd7eb7cd30c042612374e72f245d8d6a","count":5027,"time":1415690624},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}},"TF2_GetObjectType":{"symbol":{"name":"TF2_GetObjectType","docStart":16143,"docEnd":16326,"docs":{"brief":"Gets an entity's object type.","tags":[{"tag":"","text":"Gets an entity's object type."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Current TFObjectType of entity."},{"tag":"error","text":"Invalid entity index."}]},"kind":"stock","returnType":"TFObjectType","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"4ab3b15efd06e75860ef96bad5b26501c850d0de","count":3094,"time":1279934615},"last_updated":{"hash":"3164af7e342225844510f1f7f5116a332fb57223","count":6578,"time":1593308099}}},"methodmaps":{},"enumstructs":{},"constants":{"TF_DMG_CUSTOM_BURNING_ARROW":{"symbol":{"name":"TF_DMG_CUSTOM_BURNING_ARROW","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TFWeaponSlot_Secondary":{"symbol":{"name":"TFWeaponSlot_Secondary","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TFWeaponSlot_Grenade":{"symbol":{"name":"TFWeaponSlot_Grenade","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_WEAPON_DRG_POMSON":{"symbol":{"name":"TF_WEAPON_DRG_POMSON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043},"last_updated":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043}},"TF_WEAPON_SNIPERRIFLE_DECAP":{"symbol":{"name":"TF_WEAPON_SNIPERRIFLE_DECAP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF_CUSTOM_SPELL_LIGHTNING":{"symbol":{"name":"TF_CUSTOM_SPELL_LIGHTNING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_BACKSTAB":{"symbol":{"name":"TF_DMG_CUSTOM_BACKSTAB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TFWeaponSlot_Melee":{"symbol":{"name":"TFWeaponSlot_Melee","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_WEAPON_TRANQ":{"symbol":{"name":"TF_WEAPON_TRANQ","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SPELLBOOK_PROJECTILE":{"symbol":{"name":"TF_WEAPON_SPELLBOOK_PROJECTILE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_WEAPON_GRENADE_JAR":{"symbol":{"name":"TF_WEAPON_GRENADE_JAR","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SHOVEL":{"symbol":{"name":"TF_WEAPON_SHOVEL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_DRAGONS_FURY_BONUS_BURNING":{"symbol":{"name":"TF_CUSTOM_DRAGONS_FURY_BONUS_BURNING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_CUSTOM_SPELL_MIRV":{"symbol":{"name":"TF_CUSTOM_SPELL_MIRV","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_AIR_STICKY_BURST":{"symbol":{"name":"TF_DMG_CUSTOM_AIR_STICKY_BURST","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_FISTS":{"symbol":{"name":"TF_WEAPON_FISTS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_NONE":{"symbol":{"name":"TF_WEAPON_NONE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SENTRY_REVENGE":{"symbol":{"name":"TF_WEAPON_SENTRY_REVENGE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_STUNBALL":{"symbol":{"name":"TF_WEAPON_GRENADE_STUNBALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PUMPKIN_BOMB":{"symbol":{"name":"TF_CUSTOM_PUMPKIN_BOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_SPELL_SKELETON":{"symbol":{"name":"TF_CUSTOM_SPELL_SKELETON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_CUSTOM_GENERIC_BOMB":{"symbol":{"name":"TF_CUSTOM_GENERIC_BOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"2e28b036f83de7b39913ec36da256011d9be653f","count":6453,"time":1571210021},"last_updated":{"hash":"2e28b036f83de7b39913ec36da256011d9be653f","count":6453,"time":1571210021}},"TF_CUSTOM_TAUNT_GRAND_SLAM":{"symbol":{"name":"TF_CUSTOM_TAUNT_GRAND_SLAM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_GRENADE_EMP":{"symbol":{"name":"TF_WEAPON_GRENADE_EMP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_HEADSHOT":{"symbol":{"name":"TF_DMG_CUSTOM_HEADSHOT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PENETRATE_MY_TEAM":{"symbol":{"name":"TF_CUSTOM_PENETRATE_MY_TEAM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_SPELLBOOK":{"symbol":{"name":"TF_WEAPON_SPELLBOOK","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_CUSTOM_PRACTICE_STICKY":{"symbol":{"name":"TF_CUSTOM_PRACTICE_STICKY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"8888e88dc4243add0ea7a9c0b27a06cae8cb469f","count":3398,"time":1318297476},"last_updated":{"hash":"8888e88dc4243add0ea7a9c0b27a06cae8cb469f","count":3398,"time":1318297476}},"TF_CUSTOM_SHOTGUN_REVENGE_CRIT":{"symbol":{"name":"TF_CUSTOM_SHOTGUN_REVENGE_CRIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_GOLD_WRENCH":{"symbol":{"name":"TF_DMG_CUSTOM_GOLD_WRENCH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PLASMA_CHARGED":{"symbol":{"name":"TF_CUSTOM_PLASMA_CHARGED","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107},"last_updated":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107}},"TF_CUSTOM_MERASMUS_ZAP":{"symbol":{"name":"TF_CUSTOM_MERASMUS_ZAP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044},"last_updated":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044}},"TF_WEAPON_GRENADE_MIRV_DEMOMAN":{"symbol":{"name":"TF_WEAPON_GRENADE_MIRV_DEMOMAN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SENTRY_ROCKET":{"symbol":{"name":"TF_WEAPON_SENTRY_ROCKET","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SODA_POPPER":{"symbol":{"name":"TF_WEAPON_SODA_POPPER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF_DMG_CUSTOM_ROCKET_DIRECTHIT":{"symbol":{"name":"TF_DMG_CUSTOM_ROCKET_DIRECTHIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_FLARE_EXPLOSION":{"symbol":{"name":"TF_CUSTOM_FLARE_EXPLOSION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF_WEAPON_LIFELINE":{"symbol":{"name":"TF_WEAPON_LIFELINE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_AXTINGUISHER_BOOSTED":{"symbol":{"name":"TF_CUSTOM_AXTINGUISHER_BOOSTED","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"ae00144e84263c934d4df9b3cf0c10204e1a18a3","count":6398,"time":1555970011},"last_updated":{"hash":"ae00144e84263c934d4df9b3cf0c10204e1a18a3","count":6398,"time":1555970011}},"TF_CUSTOM_SPELL_BATS":{"symbol":{"name":"TF_CUSTOM_SPELL_BATS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_CUSTOM_PLAYER_SENTRY":{"symbol":{"name":"TF_CUSTOM_PLAYER_SENTRY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_COMBO_PUNCH":{"symbol":{"name":"TF_CUSTOM_COMBO_PUNCH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_PDA_SPY_BUILD":{"symbol":{"name":"TF_WEAPON_PDA_SPY_BUILD","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_WEAPON_BUFF_ITEM":{"symbol":{"name":"TF_WEAPON_BUFF_ITEM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_THROWABLE_KILL":{"symbol":{"name":"TF_CUSTOM_THROWABLE_KILL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_WEAPON_FLAMETHROWER":{"symbol":{"name":"TF_WEAPON_FLAMETHROWER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_NAILGUN":{"symbol":{"name":"TF_WEAPON_NAILGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_PDA_SPY":{"symbol":{"name":"TF_WEAPON_PDA_SPY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_ROCKETPACK":{"symbol":{"name":"TF_WEAPON_ROCKETPACK","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"3b4ac1c64d80ea16b92ac260dbadcf9e3bd76be1","count":3610,"time":1345069745},"last_updated":{"hash":"3b4ac1c64d80ea16b92ac260dbadcf9e3bd76be1","count":3610,"time":1345069745}},"TF_WEAPON_GRAPPLINGHOOK":{"symbol":{"name":"TF_WEAPON_GRAPPLINGHOOK","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_TELEFRAG":{"symbol":{"name":"TF_DMG_CUSTOM_TELEFRAG","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TFWeaponSlot_Item1":{"symbol":{"name":"TFWeaponSlot_Item1","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_WEAPON_JAR_MILK":{"symbol":{"name":"TF_WEAPON_JAR_MILK","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_HEADSHOT":{"symbol":{"name":"TF_CUSTOM_HEADSHOT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_SLAP":{"symbol":{"name":"TF_WEAPON_SLAP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_WEAPON_SNIPERRIFLE":{"symbol":{"name":"TF_WEAPON_SNIPERRIFLE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_DECAPITATION":{"symbol":{"name":"TF_CUSTOM_DECAPITATION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_BREAKABLE_SIGN":{"symbol":{"name":"TF_WEAPON_BREAKABLE_SIGN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_WEAPON_GRENADE_CLEAVER":{"symbol":{"name":"TF_WEAPON_GRENADE_CLEAVER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991},"last_updated":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991}},"TF_DMG_CUSTOM_TAUNTATK_GRENADE":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_GRENADE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_MINIGUN":{"symbol":{"name":"TF_WEAPON_MINIGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PICKAXE":{"symbol":{"name":"TF_CUSTOM_PICKAXE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_DMG_CUSTOM_TAUNTATK_HADOUKEN":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_HADOUKEN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_MECHANICAL_ARM":{"symbol":{"name":"TF_WEAPON_MECHANICAL_ARM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107},"last_updated":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107}},"TF_CUSTOM_SPELL_TINY":{"symbol":{"name":"TF_CUSTOM_SPELL_TINY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_WEAPON_LUNCHBOX":{"symbol":{"name":"TF_WEAPON_LUNCHBOX","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_GAS":{"symbol":{"name":"TF_WEAPON_GRENADE_GAS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_BASEBALL":{"symbol":{"name":"TF_DMG_CUSTOM_BASEBALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_CARRIED_BUILDING":{"symbol":{"name":"TF_CUSTOM_CARRIED_BUILDING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_PUMPKIN_BOMB":{"symbol":{"name":"TF_WEAPON_PUMPKIN_BOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_FLYINGBURN":{"symbol":{"name":"TF_CUSTOM_FLYINGBURN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_SHOTGUN_PYRO":{"symbol":{"name":"TF_WEAPON_SHOTGUN_PYRO","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SMG":{"symbol":{"name":"TF_WEAPON_SMG","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_MEDIGUN":{"symbol":{"name":"TF_WEAPON_MEDIGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_CALTROP":{"symbol":{"name":"TF_WEAPON_GRENADE_CALTROP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADELAUNCHER":{"symbol":{"name":"TF_WEAPON_GRENADELAUNCHER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_WRENCH_FIX":{"symbol":{"name":"TF_CUSTOM_WRENCH_FIX","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_HEADSHOT_DECAPITATION":{"symbol":{"name":"TF_CUSTOM_HEADSHOT_DECAPITATION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"01de453d25762f7f53b511800c2c03b6dae8f929","count":3568,"time":1340897251},"last_updated":{"hash":"01de453d25762f7f53b511800c2c03b6dae8f929","count":3568,"time":1340897251}},"TF_WEAPON_PIPEBOMBLAUNCHER":{"symbol":{"name":"TF_WEAPON_PIPEBOMBLAUNCHER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_LASER_POINTER":{"symbol":{"name":"TF_WEAPON_LASER_POINTER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TFWeaponSlot_Item2":{"symbol":{"name":"TFWeaponSlot_Item2","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_CUSTOM_BURNING":{"symbol":{"name":"TF_CUSTOM_BURNING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_DMG_CUSTOM_PUMPKIN_BOMB":{"symbol":{"name":"TF_DMG_CUSTOM_PUMPKIN_BOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SHOTGUN_SOLDIER":{"symbol":{"name":"TF_WEAPON_SHOTGUN_SOLDIER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_WRENCH":{"symbol":{"name":"TF_WEAPON_WRENCH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_FLYINGBURN":{"symbol":{"name":"TF_DMG_CUSTOM_FLYINGBURN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_SPELL_FIREBALL":{"symbol":{"name":"TF_CUSTOM_SPELL_FIREBALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_WEAPON_BAT_WOOD":{"symbol":{"name":"TF_WEAPON_BAT_WOOD","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PLASMA":{"symbol":{"name":"TF_CUSTOM_PLASMA","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107},"last_updated":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107}},"TF_WEAPON_PASSTIME_GUN":{"symbol":{"name":"TF_WEAPON_PASSTIME_GUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_WEAPON_FLAME_BALL":{"symbol":{"name":"TF_WEAPON_FLAME_BALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"23a1c5f952db647f9179d261d06f65b4405dd005","count":6186,"time":1508679122},"last_updated":{"hash":"23a1c5f952db647f9179d261d06f65b4405dd005","count":6186,"time":1508679122}},"TF_CUSTOM_TAUNT_ENGINEER_ARM":{"symbol":{"name":"TF_CUSTOM_TAUNT_ENGINEER_ARM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_DMG_CUSTOM_BLEEDING":{"symbol":{"name":"TF_DMG_CUSTOM_BLEEDING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_STICKBOMB_EXPLOSION":{"symbol":{"name":"TF_CUSTOM_STICKBOMB_EXPLOSION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5453e60099c418f760a70a2157d3d0572ae125c1","count":3190,"time":1295227544},"last_updated":{"hash":"5453e60099c418f760a70a2157d3d0572ae125c1","count":3190,"time":1295227544}},"TF_CUSTOM_TRIGGER_HURT":{"symbol":{"name":"TF_CUSTOM_TRIGGER_HURT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"64bfb0961e69f7bc0acfe145bcbf08a781e1a3bb","count":3145,"time":1288275810},"last_updated":{"hash":"64bfb0961e69f7bc0acfe145bcbf08a781e1a3bb","count":3145,"time":1288275810}},"TF_CUSTOM_SPELL_METEOR":{"symbol":{"name":"TF_CUSTOM_SPELL_METEOR","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_ROCKET_DIRECTHIT":{"symbol":{"name":"TF_CUSTOM_ROCKET_DIRECTHIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_EYEBALL_ROCKET":{"symbol":{"name":"TF_CUSTOM_EYEBALL_ROCKET","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f42a16643c9aebf9d4e23040e9e21ee9f5945fe7","count":3433,"time":1320325619},"last_updated":{"hash":"f42a16643c9aebf9d4e23040e9e21ee9f5945fe7","count":3433,"time":1320325619}},"TF_CUSTOM_CROC":{"symbol":{"name":"TF_CUSTOM_CROC","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_WEAPON_THROWABLE":{"symbol":{"name":"TF_WEAPON_THROWABLE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_WEAPON_HANDGUN_SCOUT_SEC":{"symbol":{"name":"TF_WEAPON_HANDGUN_SCOUT_SEC","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF_WEAPON_GRENADE_JAR_GAS":{"symbol":{"name":"TF_WEAPON_GRENADE_JAR_GAS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_CUSTOM_SLAP_KILL":{"symbol":{"name":"TF_CUSTOM_SLAP_KILL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_DMG_CUSTOM_STANDARD_STICKY":{"symbol":{"name":"TF_DMG_CUSTOM_STANDARD_STICKY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_CHARGE_IMPACT":{"symbol":{"name":"TF_DMG_CUSTOM_CHARGE_IMPACT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_BAT_FISH":{"symbol":{"name":"TF_WEAPON_BAT_FISH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_FLARE_PELLET":{"symbol":{"name":"TF_CUSTOM_FLARE_PELLET","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"3b4ac1c64d80ea16b92ac260dbadcf9e3bd76be1","count":3610,"time":1345069745},"last_updated":{"hash":"3b4ac1c64d80ea16b92ac260dbadcf9e3bd76be1","count":3610,"time":1345069745}},"TF_CUSTOM_AIR_STICKY_BURST":{"symbol":{"name":"TF_CUSTOM_AIR_STICKY_BURST","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TFWeaponSlot_Building":{"symbol":{"name":"TFWeaponSlot_Building","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_WEAPON_PDA_ENGINEER_BUILD":{"symbol":{"name":"TF_WEAPON_PDA_ENGINEER_BUILD","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SENTRY_BULLET":{"symbol":{"name":"TF_WEAPON_SENTRY_BULLET","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_FLAGEVENT_DEFENDED":{"symbol":{"name":"TF_FLAGEVENT_DEFENDED","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_PENETRATE_HEADSHOT":{"symbol":{"name":"TF_DMG_CUSTOM_PENETRATE_HEADSHOT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SHOTGUN_HWG":{"symbol":{"name":"TF_WEAPON_SHOTGUN_HWG","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_SUICIDE":{"symbol":{"name":"TF_DMG_CUSTOM_SUICIDE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_RAYGUN":{"symbol":{"name":"TF_WEAPON_RAYGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107},"last_updated":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107}},"TF_DMG_CUSTOM_BURNING":{"symbol":{"name":"TF_DMG_CUSTOM_BURNING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_BOTTLE":{"symbol":{"name":"TF_WEAPON_BOTTLE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_BUILDER":{"symbol":{"name":"TF_WEAPON_BUILDER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_SPELL_TELEPORT":{"symbol":{"name":"TF_CUSTOM_SPELL_TELEPORT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_CUSTOM_BURNING_FLARE":{"symbol":{"name":"TF_CUSTOM_BURNING_FLARE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_THROWABLE":{"symbol":{"name":"TF_CUSTOM_THROWABLE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_CUSTOM_GIANT_HAMMER":{"symbol":{"name":"TF_CUSTOM_GIANT_HAMMER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_CUSTOM_SAPPER_RECORDER_DEATH":{"symbol":{"name":"TF_CUSTOM_SAPPER_RECORDER_DEATH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991},"last_updated":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991}},"TF_CUSTOM_SPELL_BLASTJUMP":{"symbol":{"name":"TF_CUSTOM_SPELL_BLASTJUMP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_FISH_KILL":{"symbol":{"name":"TF_DMG_CUSTOM_FISH_KILL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_MINIGUN":{"symbol":{"name":"TF_DMG_CUSTOM_MINIGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_NORMAL":{"symbol":{"name":"TF_WEAPON_GRENADE_NORMAL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_SWORD":{"symbol":{"name":"TF_WEAPON_SWORD","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_TAUNT_BARBARIAN_SWING":{"symbol":{"name":"TF_CUSTOM_TAUNT_BARBARIAN_SWING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_TAUNT_HADOUKEN":{"symbol":{"name":"TF_CUSTOM_TAUNT_HADOUKEN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TFWeaponSlot_PDA":{"symbol":{"name":"TFWeaponSlot_PDA","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_WEAPON_PARTICLE_CANNON":{"symbol":{"name":"TF_WEAPON_PARTICLE_CANNON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107},"last_updated":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107}},"TF_DMG_CUSTOM_PLAYER_SENTRY":{"symbol":{"name":"TF_DMG_CUSTOM_PLAYER_SENTRY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_CANNON":{"symbol":{"name":"TF_WEAPON_CANNON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901},"last_updated":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901}},"TF_WEAPON_PDA":{"symbol":{"name":"TF_WEAPON_PDA","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_THROWABLE":{"symbol":{"name":"TF_WEAPON_GRENADE_THROWABLE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_WEAPON_GRENADE_WATERBALLOON":{"symbol":{"name":"TF_WEAPON_GRENADE_WATERBALLOON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_WEAPON_PARACHUTE":{"symbol":{"name":"TF_WEAPON_PARACHUTE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"c70543839f9ff1f6a2819890ec62bdcbc9280b98","count":4773,"time":1408688054},"last_updated":{"hash":"c70543839f9ff1f6a2819890ec62bdcbc9280b98","count":4773,"time":1408688054}},"TF_FLAGEVENT_RETURNED":{"symbol":{"name":"TF_FLAGEVENT_RETURNED","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"c667723958c8d94981247825cf1e36dcded1351e","count":3201,"time":1298940281},"last_updated":{"hash":"c667723958c8d94981247825cf1e36dcded1351e","count":3201,"time":1298940281}},"TF_WEAPON_SHOTGUN_BUILDING_RESCUE":{"symbol":{"name":"TF_WEAPON_SHOTGUN_BUILDING_RESCUE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901},"last_updated":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901}},"TF_CUSTOM_STANDARD_STICKY":{"symbol":{"name":"TF_CUSTOM_STANDARD_STICKY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_GRENADE_STICKY_BALL":{"symbol":{"name":"TF_WEAPON_GRENADE_STICKY_BALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901},"last_updated":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901}},"TF_WEAPON_GRENADE_NAPALM":{"symbol":{"name":"TF_WEAPON_GRENADE_NAPALM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_HEAL":{"symbol":{"name":"TF_WEAPON_GRENADE_HEAL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_TAUNT_ARMAGEDDON":{"symbol":{"name":"TF_CUSTOM_TAUNT_ARMAGEDDON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"3b4ac1c64d80ea16b92ac260dbadcf9e3bd76be1","count":3610,"time":1345069745},"last_updated":{"hash":"3b4ac1c64d80ea16b92ac260dbadcf9e3bd76be1","count":3610,"time":1345069745}},"TF_CUSTOM_BURNING_ARROW":{"symbol":{"name":"TF_CUSTOM_BURNING_ARROW","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT":{"symbol":{"name":"TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_HANDGUN_SCOUT_PRIMARY":{"symbol":{"name":"TF_WEAPON_HANDGUN_SCOUT_PRIMARY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_TAUNT_ARROW_STAB":{"symbol":{"name":"TF_CUSTOM_TAUNT_ARROW_STAB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_SYRINGEGUN_MEDIC":{"symbol":{"name":"TF_WEAPON_SYRINGEGUN_MEDIC","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_TAUNTATK_FENCING":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_FENCING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_PEP_BRAWLER_BLASTER":{"symbol":{"name":"TF_WEAPON_PEP_BRAWLER_BLASTER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"01de453d25762f7f53b511800c2c03b6dae8f929","count":3568,"time":1340897251},"last_updated":{"hash":"01de453d25762f7f53b511800c2c03b6dae8f929","count":3568,"time":1340897251}},"TF_WEAPON_SNIPERRIFLE_CLASSIC":{"symbol":{"name":"TF_WEAPON_SNIPERRIFLE_CLASSIC","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7a96467045b9ced8b6e775e6772041b5a0d94390","count":4495,"time":1402817453},"last_updated":{"hash":"7a96467045b9ced8b6e775e6772041b5a0d94390","count":4495,"time":1402817453}},"TF_FLAGEVENT_PICKEDUP":{"symbol":{"name":"TF_FLAGEVENT_PICKEDUP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_TAUNTATK_GASBLAST":{"symbol":{"name":"TF_CUSTOM_TAUNTATK_GASBLAST","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_WEAPON_DIRECTHIT":{"symbol":{"name":"TF_WEAPON_DIRECTHIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_DEFENSIVE_STICKY":{"symbol":{"name":"TF_CUSTOM_DEFENSIVE_STICKY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_PDA_ENGINEER_DESTROY":{"symbol":{"name":"TF_WEAPON_PDA_ENGINEER_DESTROY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_DECAPITATION_BOSS":{"symbol":{"name":"TF_CUSTOM_DECAPITATION_BOSS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"64bfb0961e69f7bc0acfe145bcbf08a781e1a3bb","count":3145,"time":1288275810},"last_updated":{"hash":"64bfb0961e69f7bc0acfe145bcbf08a781e1a3bb","count":3145,"time":1288275810}},"TF_CUSTOM_TAUNT_GRENADE":{"symbol":{"name":"TF_CUSTOM_TAUNT_GRENADE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_CLEAVER_CRIT":{"symbol":{"name":"TF_CUSTOM_CLEAVER_CRIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991},"last_updated":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991}},"TF_DMG_CUSTOM_PENETRATE_MY_TEAM":{"symbol":{"name":"TF_DMG_CUSTOM_PENETRATE_MY_TEAM","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_FLAGEVENT_DROPPED":{"symbol":{"name":"TF_FLAGEVENT_DROPPED","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_ROCKETLAUNCHER":{"symbol":{"name":"TF_WEAPON_ROCKETLAUNCHER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEPON_FLAME_BALL":{"symbol":{"name":"TF_WEPON_FLAME_BALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_DMG_CUSTOM_COMBO_PUNCH":{"symbol":{"name":"TF_DMG_CUSTOM_COMBO_PUNCH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_CARRIED_BUILDING":{"symbol":{"name":"TF_DMG_CUSTOM_CARRIED_BUILDING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_REVOLVER":{"symbol":{"name":"TF_WEAPON_REVOLVER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_MIRVBOMB":{"symbol":{"name":"TF_WEAPON_GRENADE_MIRVBOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_DECAPITATION":{"symbol":{"name":"TF_DMG_CUSTOM_DECAPITATION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_DRAGONS_FURY_IGNITE":{"symbol":{"name":"TF_CUSTOM_DRAGONS_FURY_IGNITE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_WEAPON_PISTOL":{"symbol":{"name":"TF_WEAPON_PISTOL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_CLEAVER":{"symbol":{"name":"TF_WEAPON_CLEAVER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991},"last_updated":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991}},"TF_WEAPON_BAT":{"symbol":{"name":"TF_WEAPON_BAT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_RAYGUN_REVENGE":{"symbol":{"name":"TF_WEAPON_RAYGUN_REVENGE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043},"last_updated":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043}},"TF_CUSTOM_TAUNT_FENCING":{"symbol":{"name":"TF_CUSTOM_TAUNT_FENCING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_FLAGEVENT_CAPTURED":{"symbol":{"name":"TF_FLAGEVENT_CAPTURED","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_JAR":{"symbol":{"name":"TF_WEAPON_JAR","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_BASEBALL":{"symbol":{"name":"TF_CUSTOM_BASEBALL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_FLAREGUN":{"symbol":{"name":"TF_WEAPON_FLAREGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_TAUNT_UBERSLICE":{"symbol":{"name":"TF_CUSTOM_TAUNT_UBERSLICE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_SCATTERGUN":{"symbol":{"name":"TF_WEAPON_SCATTERGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PLASMA_GIB":{"symbol":{"name":"TF_CUSTOM_PLASMA_GIB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107},"last_updated":{"hash":"301ae447b458df1ca5f24dd40d16643b32bc6280","count":3372,"time":1313861107}},"TF_CUSTOM_SUICIDE":{"symbol":{"name":"TF_CUSTOM_SUICIDE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_CROSSBOW":{"symbol":{"name":"TF_WEAPON_CROSSBOW","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"4d319c12f81b63627fe7043d817fbf797752a569","count":3175,"time":1292710062},"last_updated":{"hash":"4d319c12f81b63627fe7043d817fbf797752a569","count":3175,"time":1292710062}},"TF_WEAPON_FLAMETHROWER_ROCKET":{"symbol":{"name":"TF_WEAPON_FLAMETHROWER_ROCKET","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_CONCUSSION":{"symbol":{"name":"TF_WEAPON_GRENADE_CONCUSSION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_MERASMUS_GRENADE":{"symbol":{"name":"TF_CUSTOM_MERASMUS_GRENADE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044},"last_updated":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044}},"TF_WEAPON_KNIFE":{"symbol":{"name":"TF_WEAPON_KNIFE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_CLUB":{"symbol":{"name":"TF_WEAPON_CLUB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_FISH_KILL":{"symbol":{"name":"TF_CUSTOM_FISH_KILL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_BOOTS_STOP":{"symbol":{"name":"TF_CUSTOM_BOOTS_STOP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF_CUSTOM_PENETRATE_ALL_PLAYERS":{"symbol":{"name":"TF_CUSTOM_PENETRATE_ALL_PLAYERS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_MERASMUS_PLAYER_BOMB":{"symbol":{"name":"TF_CUSTOM_MERASMUS_PLAYER_BOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044},"last_updated":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044}},"TF_WEAPON_SHOTGUN_PRIMARY":{"symbol":{"name":"TF_WEAPON_SHOTGUN_PRIMARY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_DEFENSIVE_STICKY":{"symbol":{"name":"TF_DMG_CUSTOM_DEFENSIVE_STICKY","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_MIRV":{"symbol":{"name":"TF_WEAPON_GRENADE_MIRV","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_BACKSTAB":{"symbol":{"name":"TF_CUSTOM_BACKSTAB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_GRENADE_ORNAMENT":{"symbol":{"name":"TF_WEAPON_GRENADE_ORNAMENT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043},"last_updated":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043}},"TF_WEAPON_GRENADE_DEMOMAN":{"symbol":{"name":"TF_WEAPON_GRENADE_DEMOMAN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_TAUNT_ALLCLASS_GUITAR_RIFF":{"symbol":{"name":"TF_CUSTOM_TAUNT_ALLCLASS_GUITAR_RIFF","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"4a65e38d54eb580df492eb732d5a8321bd099dc4","count":4216,"time":1390835717},"last_updated":{"hash":"4a65e38d54eb580df492eb732d5a8321bd099dc4","count":4216,"time":1390835717}},"TF_CUSTOM_MERASMUS_DECAPITATION":{"symbol":{"name":"TF_CUSTOM_MERASMUS_DECAPITATION","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044},"last_updated":{"hash":"20d4597fa070e768b63b7b88f54baddffd4cebf9","count":3681,"time":1351466044}},"TF_CUSTOM_KART":{"symbol":{"name":"TF_CUSTOM_KART","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_WEAPON_JAR_GAS":{"symbol":{"name":"TF_WEAPON_JAR_GAS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722},"last_updated":{"hash":"5aaea4c2c58cab8d07fb520144636d6aa8006870","count":6185,"time":1508676722}},"TF_CUSTOM_TAUNT_HIGH_NOON":{"symbol":{"name":"TF_CUSTOM_TAUNT_HIGH_NOON","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_INVIS":{"symbol":{"name":"TF_WEAPON_INVIS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_FIREAXE":{"symbol":{"name":"TF_WEAPON_FIREAXE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_CHARGE_IMPACT":{"symbol":{"name":"TF_CUSTOM_CHARGE_IMPACT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_BOOTS_STOMP":{"symbol":{"name":"TF_CUSTOM_BOOTS_STOMP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7037723993a0ab6129b31f42c9d7ad2e8bf889ce","count":3311,"time":1308959116},"last_updated":{"hash":"7037723993a0ab6129b31f42c9d7ad2e8bf889ce","count":3311,"time":1308959116}},"TF_WEAPON_GRENADE_PIPEBOMB":{"symbol":{"name":"TF_WEAPON_GRENADE_PIPEBOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_WRENCH_FIX":{"symbol":{"name":"TF_DMG_WRENCH_FIX","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_DISPENSER_GUN":{"symbol":{"name":"TF_WEAPON_DISPENSER_GUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_BONESAW":{"symbol":{"name":"TF_WEAPON_BONESAW","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_BAT_GIFTWRAP":{"symbol":{"name":"TF_WEAPON_BAT_GIFTWRAP","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043},"last_updated":{"hash":"6e499c8213f318c26754484c657eaadbb88e3653","count":3456,"time":1324013043}},"TF_WEAPON_CROWBAR":{"symbol":{"name":"TF_WEAPON_CROWBAR","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_DISPENSER":{"symbol":{"name":"TF_WEAPON_DISPENSER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_AEGIS_ROUND":{"symbol":{"name":"TF_CUSTOM_AEGIS_ROUND","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263},"last_updated":{"hash":"be222a16ceecb9dc0c241b32763b8308ead18f5e","count":3309,"time":1308895263}},"TF_WEAPON_ROCKETLAUNCHER_DIRECTHIT":{"symbol":{"name":"TF_WEAPON_ROCKETLAUNCHER_DIRECTHIT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_COMPOUND_BOW":{"symbol":{"name":"TF_WEAPON_COMPOUND_BOW","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_BLEEDING":{"symbol":{"name":"TF_CUSTOM_BLEEDING","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_GOLD_WRENCH":{"symbol":{"name":"TF_CUSTOM_GOLD_WRENCH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_GRENADE_SMOKE_BOMB":{"symbol":{"name":"TF_WEAPON_GRENADE_SMOKE_BOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_WEAPON_GRENADE_JAR_MILK":{"symbol":{"name":"TF_WEAPON_GRENADE_JAR_MILK","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7972acf5bf3eb52e92d024cff8dc71f550d18c4c","count":3131,"time":1285961070},"last_updated":{"hash":"7972acf5bf3eb52e92d024cff8dc71f550d18c4c","count":3131,"time":1285961070}},"TF_CUSTOM_CANNONBALL_PUSH":{"symbol":{"name":"TF_CUSTOM_CANNONBALL_PUSH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901},"last_updated":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901}},"TF_WEAPON_GRENADE_NAIL":{"symbol":{"name":"TF_WEAPON_GRENADE_NAIL","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_PICKAXE":{"symbol":{"name":"TF_DMG_CUSTOM_PICKAXE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_MINIGUN":{"symbol":{"name":"TF_CUSTOM_MINIGUN","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_STICKY_BALL_LAUNCHER":{"symbol":{"name":"TF_WEAPON_STICKY_BALL_LAUNCHER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901},"last_updated":{"hash":"536123ec59b8436b2139750f947c33ab496014c5","count":3718,"time":1355921901}},"TF_WEAPON_HARVESTER_SAW":{"symbol":{"name":"TF_WEAPON_HARVESTER_SAW","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698},"last_updated":{"hash":"0775976165949c5f34b78972d1e11a5f71571394","count":4162,"time":1383091698}},"TF_CUSTOM_CLEAVER":{"symbol":{"name":"TF_CUSTOM_CLEAVER","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991},"last_updated":{"hash":"cd3c3fffdebba6e2870e4e63d4d1c904b4797a0d","count":3594,"time":1343994991}},"TFWeaponSlot_Primary":{"symbol":{"name":"TFWeaponSlot_Primary","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519},"last_updated":{"hash":"f80a8d306b97443079f1d89d28582369cc1701b8","count":3192,"time":1296589519}},"TF_WEAPON_STICKBOMB":{"symbol":{"name":"TF_WEAPON_STICKBOMB","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"4d319c12f81b63627fe7043d817fbf797752a569","count":3175,"time":1292710062},"last_updated":{"hash":"4d319c12f81b63627fe7043d817fbf797752a569","count":3175,"time":1292710062}},"TF_WEAPON_CHARGED_SMG":{"symbol":{"name":"TF_WEAPON_CHARGED_SMG","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_TAUNTATK_UBERSLICE":{"symbol":{"name":"TF_DMG_CUSTOM_TAUNTATK_UBERSLICE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_SPELL_MONOCULUS":{"symbol":{"name":"TF_CUSTOM_SPELL_MONOCULUS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_CUSTOM_RUNE_REFLECT":{"symbol":{"name":"TF_CUSTOM_RUNE_REFLECT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114},"last_updated":{"hash":"6dc602ad7cdd8168af7ba221ab1fa52bde30b874","count":5891,"time":1461727114}},"TF_DMG_CUSTOM_BURNING_FLARE":{"symbol":{"name":"TF_DMG_CUSTOM_BURNING_FLARE","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CUSTOM_PENETRATE_HEADSHOT":{"symbol":{"name":"TF_CUSTOM_PENETRATE_HEADSHOT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_TAUNT_ENGINEER_SMASH":{"symbol":{"name":"TF_CUSTOM_TAUNT_ENGINEER_SMASH","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_CUSTOM_TELEFRAG":{"symbol":{"name":"TF_CUSTOM_TELEFRAG","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418},"last_updated":{"hash":"e517eceb24ef894c4b86a8ca1d784ccbc2b2a32e","count":3127,"time":1285937418}},"TF_WEAPON_PISTOL_SCOUT":{"symbol":{"name":"TF_WEAPON_PISTOL_SCOUT","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS":{"symbol":{"name":"TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS","docStart":0,"docEnd":0,"docs":null},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}}},"defines":{"TF_DEATHFLAG_AUSTRALIUM":{"symbol":{"name":"TF_DEATHFLAG_AUSTRALIUM","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 10)"},"created":{"hash":"8f6f8819373fe70ac6965f96cd43e2b0e6bf8da6","count":6194,"time":1509105819},"last_updated":{"hash":"8f6f8819373fe70ac6965f96cd43e2b0e6bf8da6","count":6194,"time":1509105819}},"TF_DEATHFLAG_PURGATORY":{"symbol":{"name":"TF_DEATHFLAG_PURGATORY","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 8)"},"created":{"hash":"f42a16643c9aebf9d4e23040e9e21ee9f5945fe7","count":3433,"time":1320325619},"last_updated":{"hash":"f42a16643c9aebf9d4e23040e9e21ee9f5945fe7","count":3433,"time":1320325619}},"TF_CONDFLAG_DAZED":{"symbol":{"name":"TF_CONDFLAG_DAZED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 15)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_TAUNTING":{"symbol":{"name":"TF_CONDFLAG_TAUNTING","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 7)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_NONE":{"symbol":{"name":"TF_CONDFLAG_NONE","docStart":0,"docEnd":0,"docs":null,"value":"0"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_KRITZKRIEGED":{"symbol":{"name":"TF_CONDFLAG_KRITZKRIEGED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 11)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_INHEALRADIUS":{"symbol":{"name":"TF_CONDFLAG_INHEALRADIUS","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 20)"},"created":{"hash":"d94634398ee3ab897084964cb2ffb6fb7410cceb","count":3200,"time":1298940188},"last_updated":{"hash":"d94634398ee3ab897084964cb2ffb6fb7410cceb","count":3200,"time":1298940188}},"TF_DEATHFLAG_MINIBOSS":{"symbol":{"name":"TF_DEATHFLAG_MINIBOSS","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 9)"},"created":{"hash":"8f6f8819373fe70ac6965f96cd43e2b0e6bf8da6","count":6194,"time":1509105819},"last_updated":{"hash":"8f6f8819373fe70ac6965f96cd43e2b0e6bf8da6","count":6194,"time":1509105819}},"TF_DEATHFLAG_ASSISTERDOMINATION":{"symbol":{"name":"TF_DEATHFLAG_ASSISTERDOMINATION","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 1)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_DEMOBUFF":{"symbol":{"name":"TF_CONDFLAG_DEMOBUFF","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 18)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_HEALING":{"symbol":{"name":"TF_CONDFLAG_HEALING","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 21)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"d94634398ee3ab897084964cb2ffb6fb7410cceb","count":3200,"time":1298940188}},"TF_DEATHFLAG_KILLERREVENGE":{"symbol":{"name":"TF_DEATHFLAG_KILLERREVENGE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 2)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_BLEEDING":{"symbol":{"name":"TF_CONDFLAG_BLEEDING","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 25)"},"created":{"hash":"1507d03c219d32513949443d9aaec6b15537bb00","count":3088,"time":1279639297},"last_updated":{"hash":"1507d03c219d32513949443d9aaec6b15537bb00","count":3088,"time":1279639297}},"TF_CONDFLAG_DISGUISING":{"symbol":{"name":"TF_CONDFLAG_DISGUISING","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 2)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_DEATHFLAG_FIRSTBLOOD":{"symbol":{"name":"TF_DEATHFLAG_FIRSTBLOOD","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 4)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_JARATED":{"symbol":{"name":"TF_CONDFLAG_JARATED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 24)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"1507d03c219d32513949443d9aaec6b15537bb00","count":3088,"time":1279639297}},"TF_CONDFLAG_BUFFED":{"symbol":{"name":"TF_CONDFLAG_BUFFED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 16)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_CLOAKFLICKER":{"symbol":{"name":"TF_CONDFLAG_CLOAKFLICKER","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 9)"},"created":{"hash":"4d319c12f81b63627fe7043d817fbf797752a569","count":3175,"time":1292710062},"last_updated":{"hash":"4d319c12f81b63627fe7043d817fbf797752a569","count":3175,"time":1292710062}},"TF_CONDFLAG_CHARGING":{"symbol":{"name":"TF_CONDFLAG_CHARGING","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 17)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_DEATHFLAG_INTERRUPTED":{"symbol":{"name":"TF_DEATHFLAG_INTERRUPTED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 6)"},"created":{"hash":"5453e60099c418f760a70a2157d3d0572ae125c1","count":3190,"time":1295227544},"last_updated":{"hash":"5453e60099c418f760a70a2157d3d0572ae125c1","count":3190,"time":1295227544}},"TF_CONDFLAG_CLOAKED":{"symbol":{"name":"TF_CONDFLAG_CLOAKED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 4)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_DEATHFLAG_GIBBED":{"symbol":{"name":"TF_DEATHFLAG_GIBBED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 7)"},"created":{"hash":"5453e60099c418f760a70a2157d3d0572ae125c1","count":3190,"time":1295227544},"last_updated":{"hash":"5453e60099c418f760a70a2157d3d0572ae125c1","count":3190,"time":1295227544}},"TF_CONDFLAG_DISGUISED":{"symbol":{"name":"TF_CONDFLAG_DISGUISED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 3)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_MEGAHEAL":{"symbol":{"name":"TF_CONDFLAG_MEGAHEAL","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 28)"},"created":{"hash":"024d094459eea1b0aaa494dddbbe7ae4adaa475f","count":3270,"time":1305214430},"last_updated":{"hash":"024d094459eea1b0aaa494dddbbe7ae4adaa475f","count":3270,"time":1305214430}},"TF_CONDFLAG_MARKEDFORDEATH":{"symbol":{"name":"TF_CONDFLAG_MARKEDFORDEATH","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 30)"},"created":{"hash":"b6415818f652c05d39f65d46638d8d3a3ec4c77e","count":3216,"time":1300039406},"last_updated":{"hash":"024d094459eea1b0aaa494dddbbe7ae4adaa475f","count":3270,"time":1305214430}},"TF_DEATHFLAG_DEADRINGER":{"symbol":{"name":"TF_DEATHFLAG_DEADRINGER","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 5)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_OVERHEALED":{"symbol":{"name":"TF_CONDFLAG_OVERHEALED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 23)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"1507d03c219d32513949443d9aaec6b15537bb00","count":3088,"time":1279639297}},"TF_CONDFLAG_SLOWED":{"symbol":{"name":"TF_CONDFLAG_SLOWED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 0)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_DEADRINGERED":{"symbol":{"name":"TF_CONDFLAG_DEADRINGERED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 13)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_ONFIRE":{"symbol":{"name":"TF_CONDFLAG_ONFIRE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 22)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"1507d03c219d32513949443d9aaec6b15537bb00","count":3088,"time":1279639297}},"TF_CONDFLAG_UBERCHARGEFADE":{"symbol":{"name":"TF_CONDFLAG_UBERCHARGEFADE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 8)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_ZOOMED":{"symbol":{"name":"TF_CONDFLAG_ZOOMED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 1)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_DEATHFLAG_ASSISTERREVENGE":{"symbol":{"name":"TF_DEATHFLAG_ASSISTERREVENGE","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 3)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_UBERCHARGED":{"symbol":{"name":"TF_CONDFLAG_UBERCHARGED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 5)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_CRITCOLA":{"symbol":{"name":"TF_CONDFLAG_CRITCOLA","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 19)"},"created":{"hash":"2f128113b657fa749a843844ac7de4127021a680","count":3045,"time":1277249493},"last_updated":{"hash":"2f128113b657fa749a843844ac7de4127021a680","count":3045,"time":1277249493}},"TF_CONDFLAG_TELEPORTGLOW":{"symbol":{"name":"TF_CONDFLAG_TELEPORTGLOW","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 6)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_REGENBUFFED":{"symbol":{"name":"TF_CONDFLAG_REGENBUFFED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 29)"},"created":{"hash":"b6415818f652c05d39f65d46638d8d3a3ec4c77e","count":3216,"time":1300039406},"last_updated":{"hash":"024d094459eea1b0aaa494dddbbe7ae4adaa475f","count":3270,"time":1305214430}},"TF_CONDFLAG_DEFENSEBUFFED":{"symbol":{"name":"TF_CONDFLAG_DEFENSEBUFFED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 26)"},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"TF_CONDFLAG_MILKED":{"symbol":{"name":"TF_CONDFLAG_MILKED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 27)"},"created":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442},"last_updated":{"hash":"7fb57a4064db3f0566679473cdd25429abeab8b5","count":3126,"time":1285904442}},"_tf2_stocks_included":{"symbol":{"name":"_tf2_stocks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634}},"TF_CONDFLAG_BONKED":{"symbol":{"name":"TF_CONDFLAG_BONKED","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 14)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_DEATHFLAG_KILLERDOMINATION":{"symbol":{"name":"TF_DEATHFLAG_KILLERDOMINATION","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 0)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}},"TF_CONDFLAG_TELEPORTING":{"symbol":{"name":"TF_CONDFLAG_TELEPORTING","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 10)"},"created":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885},"last_updated":{"hash":"956d345e174a06d16247d9d945aa71248b3aaf3c","count":2944,"time":1270039885}}},"enums":{"TFResourceType":{"symbol":{"name":"TFResourceType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"TFResource_Ping","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Score","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Deaths","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_TotalScore","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Captures","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Defenses","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Dominations","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Revenge","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_BuildingsDestroyed","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Headshots","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Backstabs","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_HealPoints","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Invulns","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_Teleports","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_ResupplyPoints","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_KillAssists","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_MaxHealth","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"TFResource_PlayerClass","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634},"last_updated":{"hash":"b865f9688675bdef0757ef3349b6900afc544435","count":1964,"time":1207348634}}},"typesets":{},"typedefs":{}},"topmenus":{"functions":{"LoadTopMenuConfig":{"symbol":{"name":"LoadTopMenuConfig","docStart":9929,"docEnd":11138,"docs":{"brief":"Re-sorts the items in a TopMenu via a configuration file.\n\nThe format of the configuration file should be a Valve Key-Values\nformatted file that SourceMod can parse.  There should be one root\nsection, and one sub-section for each category.  Each sub-section's\nname should match the category name.\n\nEach sub-section may only contain key/value pairs in the form of:\nkey: \"item\"\nvalue: Name of the item as passed to AddToTopMenu().\n\nThe TopMenu will draw items in the order declared in the configuration\nfile.  If items do not appear in the configuration file, they are sorted\nper-player based on how the handler function renders for that player.\nThese items appear after the configuration sorted items.","tags":[{"tag":"","text":"Re-sorts the items in a TopMenu via a configuration file.\n\nThe format of the configuration file should be a Valve Key-Values\nformatted file that SourceMod can parse.  There should be one root\nsection, and one sub-section for each category.  Each sub-section's\nname should match the category name.\n\nEach sub-section may only contain key/value pairs in the form of:\nkey: \"item\"\nvalue: Name of the item as passed to AddToTopMenu().\n\nThe TopMenu will draw items in the order declared in the configuration\nfile.  If items do not appear in the configuration file, they are sorted\nper-player based on how the handler function renders for that player.\nThese items appear after the configuration sorted items."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:file","text":"File path."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum size of the error buffer.\nError buffer will be filled with a\nzero-terminated string if false is\nreturned."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid TopMenu Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DisplayTopMenu":{"symbol":{"name":"DisplayTopMenu","docStart":13770,"docEnd":14080,"docs":{"brief":"Displays a TopMenu to a client.","tags":[{"tag":"","text":"Displays a TopMenu to a client."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"param:position","text":"Position to display from."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid TopMenu Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"TopMenuPosition","name":"position","decl":"TopMenuPosition position","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetTopMenuInfoString":{"symbol":{"name":"GetTopMenuInfoString","docStart":12278,"docEnd":12711,"docs":{"brief":"Retrieves the info string of a top menu item.","tags":[{"tag":"","text":"Retrieves the info string of a top menu item."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:parent","text":"TopMenuObject ID."},{"tag":"param:buffer","text":"Buffer to store info string."},{"tag":"param:maxlength","text":"Maximum size of info string."},{"tag":"return","text":"Number of bytes written, not including the\nnull terminator."},{"tag":"error","text":"Invalid TopMenu Handle or TopMenuObject ID."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"__ext_topmenus_SetNTVOptional":{"symbol":{"name":"__ext_topmenus_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}},"GetTopMenuObjName":{"symbol":{"name":"GetTopMenuObjName","docStart":12817,"docEnd":13250,"docs":{"brief":"Retrieves the name string of a top menu item.","tags":[{"tag":"","text":"Retrieves the name string of a top menu item."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:topobj","text":"TopMenuObject ID."},{"tag":"param:buffer","text":"Buffer to store info string."},{"tag":"param:maxlength","text":"Maximum size of info string."},{"tag":"return","text":"Number of bytes written, not including the\nnull terminator."},{"tag":"error","text":"Invalid TopMenu Handle or TopMenuObject ID."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateTopMenu":{"symbol":{"name":"CreateTopMenu","docStart":9690,"docEnd":9870,"docs":{"brief":"Creates a TopMenu.","tags":[{"tag":"","text":"Creates a TopMenu."},{"tag":"param:handler","text":"Handler to use for drawing the root title."},{"tag":"return","text":"A new TopMenu Handle, or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"TopMenu","arguments":[{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindTopMenuCategory":{"symbol":{"name":"FindTopMenuCategory","docStart":14573,"docEnd":14885,"docs":{"brief":"Finds a category's topobj ID in a TopMenu.","tags":[{"tag":"","text":"Finds a category's topobj ID in a TopMenu."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:name","text":"Object's unique name."},{"tag":"return","text":"TopMenuObject ID on success, or\nINVALID_TOPMENUOBJECT on failure."},{"tag":"error","text":"Invalid TopMenu Handle."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddToTopMenu":{"symbol":{"name":"AddToTopMenu","docStart":11238,"docEnd":11989,"docs":{"brief":"Adds an topobj to a TopMenu.","tags":[{"tag":"","text":"Adds an topobj to a TopMenu."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:name","text":"Object name (MUST be unique)."},{"tag":"param:type","text":"Object type."},{"tag":"param:handler","text":"Handler for topobj."},{"tag":"param:parent","text":"Parent topobj ID, or INVALID_TOPMENUOBJECT for none.\nItems must have a category parent.\nCategories must not have a parent."},{"tag":"param:cmdname","text":"Command name (for access overrides)."},{"tag":"param:flags","text":"Default access flags."},{"tag":"param:info_string","text":"Arbitrary storage (max 255 bytes)."},{"tag":"return","text":"A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on\nfailure."},{"tag":"error","text":"Invalid TopMenu Handle."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"TopMenuObjectType","name":"type","decl":"TopMenuObjectType type","default":null},{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler","default":null},{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent","default":null},{"type":"const char[]","name":"cmdname","decl":"const char[] cmdname","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"const char[]","name":"info_string","decl":"const char[] info_string","default":"\"\""}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetTopMenuTitleCaching":{"symbol":{"name":"SetTopMenuTitleCaching","docStart":14967,"docEnd":15460,"docs":{"brief":"Change the menu title caching behavior of the TopMenu. By default the\ntitles are cached to reduce overhead. If you need dynamic menu titles, which\ncan change everytime the menu is displayed to a user, set this to false.","tags":[{"tag":"","text":"Change the menu title caching behavior of the TopMenu. By default the\ntitles are cached to reduce overhead. If you need dynamic menu titles, which\ncan change everytime the menu is displayed to a user, set this to false."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:cache_titles","text":"Cache the menu titles and don't call the handler with\nTopMenuAction_DisplayTitle everytime the menu is drawn?"},{"tag":"error","text":"Invalid TopMenu Handle"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"bool","name":"cache_titles","decl":"bool cache_titles","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveFromTopMenu":{"symbol":{"name":"RemoveFromTopMenu","docStart":13353,"docEnd":13696,"docs":{"brief":"Removes an topobj from a TopMenu.\n\nPlugins' topobjs are automatically removed all TopMenus when the given\nplugin unloads or pauses.  In the case of unpausing, all items are restored.","tags":[{"tag":"","text":"Removes an topobj from a TopMenu.\n\nPlugins' topobjs are automatically removed all TopMenus when the given\nplugin unloads or pauses.  In the case of unpausing, all items are restored."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:topobj","text":"TopMenuObject ID."},{"tag":"error","text":"Invalid TopMenu Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DisplayTopMenuCategory":{"symbol":{"name":"DisplayTopMenuCategory","docStart":14167,"docEnd":14480,"docs":{"brief":"Displays a TopMenu category to a client.","tags":[{"tag":"","text":"Displays a TopMenu category to a client."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:category","text":"Category topobj id."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid TopMenu Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu","default":null},{"type":"TopMenuObject","name":"category","decl":"TopMenuObject category","default":null},{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"TopMenu":{"symbol":{"name":"TopMenu","docStart":4303,"docEnd":4464,"docs":{"brief":"TopMenu objects are used for constructing multi-layer menus. Currently, they\nsupport at most two levels. The first level of items are called \"categories\".","tags":[{"tag":"","text":"TopMenu objects are used for constructing multi-layer menus. Currently, they\nsupport at most two levels. The first level of items are called \"categories\"."}]},"parent":"Handle","methods":[{"name":"TopMenu","docStart":4498,"docEnd":4638,"docs":{"brief":"Creates a new TopMenu.","tags":[{"tag":"","text":"Creates a new TopMenu."},{"tag":"param:handler","text":"Handler to use for drawing the root title."},{"tag":"return","text":"A new TopMenu."}]},"kind":"native","returnType":"TopMenu","arguments":[{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler","default":null}]},{"name":"FromHandle","docStart":4692,"docEnd":4851,"docs":{"brief":"Returns a TopMenu handle from a generic handle. If the given handle is\na TopMenu, the handle is simply casted back. Otherwise, an error is\nraised.","tags":[{"tag":"","text":"Returns a TopMenu handle from a generic handle. If the given handle is\na TopMenu, the handle is simply casted back. Otherwise, an error is\nraised."}]},"kind":"native","returnType":"TopMenu","arguments":[{"type":"Handle","name":"handle","decl":"Handle handle","default":null}]},{"name":"LoadConfig","docStart":4914,"docEnd":6055,"docs":{"brief":"Re-sorts the items in a TopMenu via a configuration file.\n\nThe format of the configuration file should be a Valve Key-Values\nformatted file that SourceMod can parse.  There should be one root\nsection, and one sub-section for each category.  Each sub-section's\nname should match the category name.\n\nEach sub-section may only contain key/value pairs in the form of:\nkey: \"item\"\nvalue: Name of the item as passed to AddToTopMenu().\n\nThe TopMenu will draw items in the order declared in the configuration\nfile.  If items do not appear in the configuration file, they are sorted\nper-player based on how the handler function renders for that player.\nThese items appear after the configuration sorted items.","tags":[{"tag":"","text":"Re-sorts the items in a TopMenu via a configuration file.\n\nThe format of the configuration file should be a Valve Key-Values\nformatted file that SourceMod can parse.  There should be one root\nsection, and one sub-section for each category.  Each sub-section's\nname should match the category name.\n\nEach sub-section may only contain key/value pairs in the form of:\nkey: \"item\"\nvalue: Name of the item as passed to AddToTopMenu().\n\nThe TopMenu will draw items in the order declared in the configuration\nfile.  If items do not appear in the configuration file, they are sorted\nper-player based on how the handler function renders for that player.\nThese items appear after the configuration sorted items."},{"tag":"param:topmenu","text":"TopMenu Handle."},{"tag":"param:file","text":"File path."},{"tag":"param:error","text":"Error buffer."},{"tag":"param:maxlength","text":"Maximum size of the error buffer. Error buffer\nwill be filled with a zero-terminated string if\nfalse is returned."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"AddCategory","docStart":6141,"docEnd":6534,"docs":{"brief":"Adds a category to a TopMenu.","tags":[{"tag":"","text":"Adds a category to a TopMenu."},{"tag":"param:name","text":"Object name (MUST be unique)."},{"tag":"param:handler","text":"Handler for topobj."},{"tag":"param:cmdname","text":"Command name (for access overrides)."},{"tag":"param:flags","text":"Default access flags."},{"tag":"param:info_string","text":"Arbitrary storage (max 255 bytes)."},{"tag":"return","text":"A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler","default":null},{"type":"const char[]","name":"cmdname","decl":"const char[] cmdname","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"const char[]","name":"info_string","decl":"const char[] info_string","default":"\"\""}]},{"name":"AddItem","docStart":6782,"docEnd":7254,"docs":{"brief":"Adds an item to a TopMenu category.","tags":[{"tag":"","text":"Adds an item to a TopMenu category."},{"tag":"param:name","text":"Object name (MUST be unique)."},{"tag":"param:handler","text":"Handler for topobj."},{"tag":"param:category","text":"The object of the parent category for the item."},{"tag":"param:cmdname","text":"Command name (for access overrides)."},{"tag":"param:flags","text":"Default access flags."},{"tag":"param:info_string","text":"Arbitrary storage (max 255 bytes)."},{"tag":"return","text":"A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler","default":null},{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent","default":null},{"type":"const char[]","name":"cmdname","decl":"const char[] cmdname","default":"\"\""},{"type":"int","name":"flags","decl":"int flags","default":"0"},{"type":"const char[]","name":"info_string","decl":"const char[] info_string","default":"\"\""}]},{"name":"GetInfoString","docStart":7512,"docEnd":7803,"docs":{"brief":"Retrieves the info string of a top menu item.","tags":[{"tag":"","text":"Retrieves the info string of a top menu item."},{"tag":"param:parent","text":"TopMenuObject ID."},{"tag":"param:buffer","text":"Buffer to store info string."},{"tag":"param:maxlength","text":"Maximum size of info string."},{"tag":"return","text":"Number of bytes written, not including the  null terminator."}]},"kind":"native","returnType":"int","arguments":[{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetObjName","docStart":7895,"docEnd":8185,"docs":{"brief":"Retrieves the name string of a top menu item.","tags":[{"tag":"","text":"Retrieves the name string of a top menu item."},{"tag":"param:topobj","text":"TopMenuObject ID."},{"tag":"param:buffer","text":"Buffer to store info string."},{"tag":"param:maxlength","text":"Maximum size of info string."},{"tag":"return","text":"Number of bytes written, not including the null terminator."}]},"kind":"native","returnType":"int","arguments":[{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"Remove","docStart":8274,"docEnd":8521,"docs":{"brief":"Removes an topobj from a TopMenu.\n\nPlugins' topobjs are automatically removed all TopMenus when the given\nplugin unloads or pauses.  In the case of unpausing, all items are restored.","tags":[{"tag":"","text":"Removes an topobj from a TopMenu.\n\nPlugins' topobjs are automatically removed all TopMenus when the given\nplugin unloads or pauses.  In the case of unpausing, all items are restored."},{"tag":"param:topobj","text":"TopMenuObject ID."}]},"kind":"native","returnType":"void","arguments":[{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj","default":null}]},{"name":"Display","docStart":8577,"docEnd":8767,"docs":{"brief":"Displays a TopMenu to a client.","tags":[{"tag":"","text":"Displays a TopMenu to a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:position","text":"Position to display from."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"TopMenuPosition","name":"position","decl":"TopMenuPosition position","default":null}]},{"name":"DisplayCategory","docStart":8840,"docEnd":9033,"docs":{"brief":"Displays a TopMenu category to a client.","tags":[{"tag":"","text":"Displays a TopMenu category to a client."},{"tag":"param:category","text":"Category topobj id."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"TopMenuObject","name":"category","decl":"TopMenuObject category","default":null},{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"FindCategory","docStart":9112,"docEnd":9326,"docs":{"brief":"Finds a category's topobj ID in a TopMenu.","tags":[{"tag":"","text":"Finds a category's topobj ID in a TopMenu."},{"tag":"param:name","text":"Object's unique name."},{"tag":"return","text":"TopMenuObject ID on success, or\nINVALID_TOPMENUOBJECT on failure."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]}],"properties":[{"name":"CacheTitles","docStart":9394,"docEnd":9614,"docs":{"brief":"Set the menu title caching behavior of the TopMenu. By default titles\nare cached to reduce overhead. If you need dynamic menu titles which\nchange each time the menu is displayed to a user, set this to false.","tags":[{"tag":"","text":"Set the menu title caching behavior of the TopMenu. By default titles\nare cached to reduce overhead. If you need dynamic menu titles which\nchange each time the menu is displayed to a user, set this to false."}]},"type":"bool","getter":false,"setter":true}]},"created":{"hash":"b97335ccb0024ce44e5bb12032b1b40dc417fa46","count":4941,"time":1414722033},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_topmenus_included":{"symbol":{"name":"_topmenus_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}}},"enums":{"TopMenuPosition":{"symbol":{"name":"TopMenuPosition","docStart":3356,"docEnd":3409,"docs":{"brief":"Top menu starting positions for display.","tags":[{"tag":"","text":"Top menu starting positions for display."}]},"entries":[{"name":"TopMenuPosition_Start","docStart":3473,"docEnd":3503,"docs":{"brief":"Start/root of the menu","tags":[{"tag":"","text":"Start/root of the menu"}]},"value":"0"},{"name":"TopMenuPosition_LastRoot","docStart":3542,"docEnd":3580,"docs":{"brief":"Last position in the root menu","tags":[{"tag":"","text":"Last position in the root menu"}]},"value":"1"},{"name":"TopMenuPosition_LastCategory","docStart":3619,"docEnd":3663,"docs":{"brief":"Last position in their last category","tags":[{"tag":"","text":"Last position in their last category"}]},"value":"3"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TopMenuObjectType":{"symbol":{"name":"TopMenuObjectType","docStart":3135,"docEnd":3170,"docs":{"brief":"Top menu topobj types.","tags":[{"tag":"","text":"Top menu topobj types."}]},"entries":[{"name":"TopMenuObject_Category","docStart":3236,"docEnd":3283,"docs":{"brief":"Category (sub-menu branching from root)","tags":[{"tag":"","text":"Category (sub-menu branching from root)"}]},"value":"0"},{"name":"TopMenuObject_Item","docStart":3322,"docEnd":3348,"docs":{"brief":"Item on a sub-menu","tags":[{"tag":"","text":"Item on a sub-menu"}]},"value":"1"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TopMenuObject":{"symbol":{"name":"TopMenuObject","docStart":3671,"docEnd":3722,"docs":{"brief":"Top menu topobj tag for type checking.","tags":[{"tag":"","text":"Top menu topobj tag for type checking."}]},"entries":[{"name":"INVALID_TOPMENUOBJECT","docStart":0,"docEnd":0,"docs":null,"value":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TopMenuAction":{"symbol":{"name":"TopMenuAction","docStart":1676,"docEnd":1731,"docs":{"brief":"Actions a top menu will take on an topobj.","tags":[{"tag":"","text":"Actions a top menu will take on an topobj."}]},"entries":[{"name":"TopMenuAction_DisplayOption","docStart":1757,"docEnd":1949,"docs":{"brief":"An option is being drawn for a menu (or for sorting purposes).\n\nINPUT : TopMenu Handle, topobj ID, client index.\nOUTPUT: Buffer for rendering, maxlength of buffer.","tags":[{"tag":"","text":"An option is being drawn for a menu (or for sorting purposes).\n\nINPUT : TopMenu Handle, topobj ID, client index.\nOUTPUT: Buffer for rendering, maxlength of buffer."}]},"value":"0"},{"name":"TopMenuAction_DisplayTitle","docStart":1989,"docEnd":2306,"docs":{"brief":"The title of a menu is being drawn for a given topobj.\n\nNote: The Object ID will be INVALID_TOPMENUOBJECT if drawing the\nroot title.  Otherwise, the Object ID is a category.\n\nINPUT : TopMenu Handle, topobj ID, client index.\nOUTPUT: Buffer for rendering, maxlength of buffer.","tags":[{"tag":"","text":"The title of a menu is being drawn for a given topobj.\n\nNote: The Object ID will be INVALID_TOPMENUOBJECT if drawing the\nroot title.  Otherwise, the Object ID is a category.\n\nINPUT : TopMenu Handle, topobj ID, client index.\nOUTPUT: Buffer for rendering, maxlength of buffer."}]},"value":"1"},{"name":"TopMenuAction_SelectOption","docStart":2345,"docEnd":2516,"docs":{"brief":"A menu option has been selected.\n\nThe Object ID will always be an item (not a category).\n\nINPUT : TopMenu Handle, topobj ID, client index.","tags":[{"tag":"","text":"A menu option has been selected.\n\nThe Object ID will always be an item (not a category).\n\nINPUT : TopMenu Handle, topobj ID, client index."}]},"value":"2"},{"name":"TopMenuAction_DrawOption","docStart":2555,"docEnd":2876,"docs":{"brief":"A menu option is being drawn and its flags can be overridden.\n\nINPUT : TopMenu Handle, topobj ID, client index.\nOUTPUT: The first byte of the 'buffer' string should be set\nto the desired flags.  By default, it will contain\nITEMDRAW_DEFAULT.","tags":[{"tag":"","text":"A menu option is being drawn and its flags can be overridden.\n\nINPUT : TopMenu Handle, topobj ID, client index.\nOUTPUT: The first byte of the 'buffer' string should be set\nto the desired flags.  By default, it will contain\nITEMDRAW_DEFAULT."}]},"value":"3"},{"name":"TopMenuAction_RemoveObject","docStart":2914,"docEnd":3093,"docs":{"brief":"Called when an topobj is being removed from the menu.\nThis can be used to clean up data stored in the info string.\n\nINPUT : TopMenu Handle, topobj ID.","tags":[{"tag":"","text":"Called when an topobj is being removed from the menu.\nThis can be used to clean up data stored in the info string.\n\nINPUT : TopMenu Handle, topobj ID."}]},"value":"4"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{"TopMenuHandler":{"symbol":{"name":"TopMenuHandler","docStart":3781,"docEnd":4131,"docs":{"brief":"TopMenu callback prototype.","tags":[{"tag":"","text":"TopMenu callback prototype."},{"tag":"param:topmenu","text":"Handle to the TopMenu."},{"tag":"param:action","text":"TopMenuAction being performed."},{"tag":"param:topobj_id","text":"The topobj ID (if used)."},{"tag":"param:param","text":"Extra parameter (if used)."},{"tag":"param:buffer","text":"Output buffer (if used)."},{"tag":"param:maxlength","text":"Output buffer (if used)."}]},"type":"function void(TopMenu topmenu, TopMenuAction action, TopMenuObject topobj_id, int param, char[] buffer, int maxlength)","parsedSignature":{"returnType":"void","arguments":[{"type":"TopMenu","name":"topmenu","decl":"TopMenu topmenu","default":null},{"type":"TopMenuAction","name":"action","decl":"TopMenuAction action","default":null},{"type":"TopMenuObject","name":"topobj_id","decl":"TopMenuObject topobj_id","default":null},{"type":"int","name":"param","decl":"int param","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"sdktools_tempents_stocks":{"functions":{"TE_SetupBloodSprite":{"symbol":{"name":"TE_SetupBloodSprite","docStart":8443,"docEnd":8779,"docs":{"brief":"Sets up a blood sprite effect.","tags":[{"tag":"","text":"Sets up a blood sprite effect."},{"tag":"param:pos","text":"Position of the sprite."},{"tag":"param:dir","text":"Sprite direction."},{"tag":"param:color","text":"Color array (r, g, b, a)."},{"tag":"param:Size","text":"Sprite size."},{"tag":"param:SprayModel","text":"Precached model index."},{"tag":"param:BloodDropModel","text":"Precached model index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null},{"type":"int","name":"Size","decl":"int Size","default":null},{"type":"int","name":"SprayModel","decl":"int SprayModel","default":null},{"type":"int","name":"BloodDropModel","decl":"int BloodDropModel","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupSmoke":{"symbol":{"name":"TE_SetupSmoke","docStart":4081,"docEnd":4312,"docs":{"brief":"Sets up a smoke effect.","tags":[{"tag":"","text":"Sets up a smoke effect."},{"tag":"param:pos","text":"Position of the smoke."},{"tag":"param:Model","text":"Precached model index."},{"tag":"param:Scale","text":"Scale of the smoke."},{"tag":"param:FrameRate","text":"Frame rate of the smoke."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"Model","decl":"int Model","default":null},{"type":"float","name":"Scale","decl":"float Scale","default":null},{"type":"int","name":"FrameRate","decl":"int FrameRate","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_BeamRing":{"symbol":{"name":"TE_BeamRing","docStart":12541,"docEnd":13132,"docs":{"brief":"Sets up a beam ring effect.","tags":[{"tag":"","text":"Sets up a beam ring effect."},{"tag":"param:StartEntity","text":"Entity index from where the ring starts."},{"tag":"param:EndEntity","text":"Entity index from where the ring ends."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:StartFrame","text":"Initital frame to render."},{"tag":"param:FrameRate","text":"Ring frame rate."},{"tag":"param:Life","text":"Time duration of the ring."},{"tag":"param:Width","text":"Beam width."},{"tag":"param:Amplitude","text":"Beam amplitude."},{"tag":"param:color","text":"Color array (r, g, b, a)."},{"tag":"param:Speed","text":"Speed of the beam."},{"tag":"param:Flags","text":"Beam flags."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"StartEntity","decl":"int StartEntity","default":null},{"type":"int","name":"EndEntity","decl":"int EndEntity","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"int","name":"StartFrame","decl":"int StartFrame","default":null},{"type":"int","name":"FrameRate","decl":"int FrameRate","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"Amplitude","decl":"float Amplitude","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null},{"type":"int","name":"Speed","decl":"int Speed","default":null},{"type":"int","name":"Flags","decl":"int Flags","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_SetupArmorRicochet":{"symbol":{"name":"TE_SetupArmorRicochet","docStart":6443,"docEnd":6608,"docs":{"brief":"Sets up an armor ricochet effect.","tags":[{"tag":"","text":"Sets up an armor ricochet effect."},{"tag":"param:pos","text":"Position of the armor ricochet."},{"tag":"param:dir","text":"Direction of the armor ricochet."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupDust":{"symbol":{"name":"TE_SetupDust","docStart":4583,"docEnd":4808,"docs":{"brief":"Sets up a dust cloud effect.","tags":[{"tag":"","text":"Sets up a dust cloud effect."},{"tag":"param:pos","text":"Position of the dust."},{"tag":"param:dir","text":"Direction of the dust."},{"tag":"param:Size","text":"Dust cloud size."},{"tag":"param:Speed","text":"Dust cloud speed."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":null},{"type":"float","name":"Size","decl":"float Size","default":null},{"type":"float","name":"Speed","decl":"float Speed","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupBeamRingPoint":{"symbol":{"name":"TE_SetupBeamRingPoint","docStart":9277,"docEnd":9921,"docs":{"brief":"Sets up a beam ring point effect.","tags":[{"tag":"","text":"Sets up a beam ring point effect."},{"tag":"param:center","text":"Center position of the ring."},{"tag":"param:Start_Radius","text":"Initial ring radius."},{"tag":"param:End_Radius","text":"Final ring radius."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:StartFrame","text":"Initial frame to render."},{"tag":"param:FrameRate","text":"Ring frame rate."},{"tag":"param:Life","text":"Time duration of the ring."},{"tag":"param:Width","text":"Beam width."},{"tag":"param:Amplitude","text":"Beam amplitude."},{"tag":"param:Color","text":"Color array (r, g, b, a)."},{"tag":"param:Speed","text":"Speed of the beam."},{"tag":"param:Flags","text":"Beam flags."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"center","decl":"const float center[3]","default":null},{"type":"float","name":"Start_Radius","decl":"float Start_Radius","default":null},{"type":"float","name":"End_Radius","decl":"float End_Radius","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"int","name":"StartFrame","decl":"int StartFrame","default":null},{"type":"int","name":"FrameRate","decl":"int FrameRate","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"Amplitude","decl":"float Amplitude","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null},{"type":"int","name":"Speed","decl":"int Speed","default":null},{"type":"int","name":"Flags","decl":"int Flags","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupBeamRing":{"symbol":{"name":"TE_SetupBeamRing","docStart":14056,"docEnd":14680,"docs":{"brief":"Sets up a beam ring effect.","tags":[{"tag":"","text":"Sets up a beam ring effect."},{"tag":"param:StartEntity","text":"Entity index from where the ring starts."},{"tag":"param:EndEntity","text":"Entity index from where the ring ends."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:StartFrame","text":"Initial frame to render."},{"tag":"param:FrameRate","text":"Ring frame rate."},{"tag":"param:Life","text":"Time duration of the ring."},{"tag":"param:Width","text":"Beam width."},{"tag":"param:Amplitude","text":"Beam amplitude."},{"tag":"param:Color","text":"Color array (r, g, b, a)."},{"tag":"param:Speed","text":"Speed of the beam."},{"tag":"param:Flags","text":"Beam flags."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"StartEntity","decl":"int StartEntity","default":null},{"type":"int","name":"EndEntity","decl":"int EndEntity","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"int","name":"StartFrame","decl":"int StartFrame","default":null},{"type":"int","name":"FrameRate","decl":"int FrameRate","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"Amplitude","decl":"float Amplitude","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null},{"type":"int","name":"Speed","decl":"int Speed","default":null},{"type":"int","name":"Flags","decl":"int Flags","default":null}]},"created":{"hash":"ce6950aee2520bcb2cd0ec274bf1f81d1d9a312b","count":1059,"time":1183864675},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupExplosion":{"symbol":{"name":"TE_SetupExplosion","docStart":7402,"docEnd":7860,"docs":{"brief":"Sets up a explosion effect.","tags":[{"tag":"","text":"Sets up a explosion effect."},{"tag":"param:pos","text":"Explosion position."},{"tag":"param:Model","text":"Precached model index."},{"tag":"param:Scale","text":"Explosion scale."},{"tag":"param:Framerate","text":"Explosion frame rate."},{"tag":"param:Flags","text":"Explosion flags."},{"tag":"param:Radius","text":"Explosion radius."},{"tag":"param:Magnitude","text":"Explosion size."},{"tag":"param:normal","text":"Normal vector to the explosion."},{"tag":"param:MaterialType","text":"Exploded material type."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"Model","decl":"int Model","default":null},{"type":"float","name":"Scale","decl":"float Scale","default":null},{"type":"int","name":"Framerate","decl":"int Framerate","default":null},{"type":"int","name":"Flags","decl":"int Flags","default":null},{"type":"int","name":"Radius","decl":"int Radius","default":null},{"type":"int","name":"Magnitude","decl":"int Magnitude","default":null},{"type":"const float[3]","name":"normal","decl":"const float normal[3]","default":"{ 0.000000, 0.000000, 1.000000 }"},{"type":"int","name":"MaterialType","decl":"int MaterialType","default":"'C'"}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupBeamPoints":{"symbol":{"name":"TE_SetupBeamPoints","docStart":10892,"docEnd":11564,"docs":{"brief":"Sets up a point to point beam effect.","tags":[{"tag":"","text":"Sets up a point to point beam effect."},{"tag":"param:start","text":"Start position of the beam."},{"tag":"param:end","text":"End position of the beam."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:StartFrame","text":"Initial frame to render."},{"tag":"param:FrameRate","text":"Beam frame rate."},{"tag":"param:Life","text":"Time duration of the beam."},{"tag":"param:Width","text":"Initial beam width."},{"tag":"param:EndWidth","text":"Final beam width."},{"tag":"param:FadeLength","text":"Beam fade time duration."},{"tag":"param:Amplitude","text":"Beam amplitude."},{"tag":"param:Color","text":"Color array (r, g, b, a)."},{"tag":"param:Speed","text":"Speed of the beam."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"start","decl":"const float start[3]","default":null},{"type":"const float[3]","name":"end","decl":"const float end[3]","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"int","name":"StartFrame","decl":"int StartFrame","default":null},{"type":"int","name":"FrameRate","decl":"int FrameRate","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"EndWidth","decl":"float EndWidth","default":null},{"type":"int","name":"FadeLength","decl":"int FadeLength","default":null},{"type":"float","name":"Amplitude","decl":"float Amplitude","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null},{"type":"int","name":"Speed","decl":"int Speed","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupMetalSparks":{"symbol":{"name":"TE_SetupMetalSparks","docStart":5650,"docEnd":5808,"docs":{"brief":"Sets up a metal sparks effect.","tags":[{"tag":"","text":"Sets up a metal sparks effect."},{"tag":"param:pos","text":"Position of the metal sparks."},{"tag":"param:dir","text":"Direction of the metal sparks."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupGlowSprite":{"symbol":{"name":"TE_SetupGlowSprite","docStart":6792,"docEnd":7074,"docs":{"brief":"Sets up a glowing sprite effect.","tags":[{"tag":"","text":"Sets up a glowing sprite effect."},{"tag":"param:pos","text":"Position of the sprite."},{"tag":"param:Model","text":"Precached model index."},{"tag":"param:Life","text":"Time duration of the sprite."},{"tag":"param:Size","text":"Sprite size."},{"tag":"param:Brightness","text":"Sprite brightness."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"Model","decl":"int Model","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Size","decl":"float Size","default":null},{"type":"int","name":"Brightness","decl":"int Brightness","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupBeamFollow":{"symbol":{"name":"TE_SetupBeamFollow","docStart":15571,"docEnd":16020,"docs":{"brief":"Sets up a follow beam effect.","tags":[{"tag":"","text":"Sets up a follow beam effect."},{"tag":"param:EntIndex","text":"Entity index from where the beam starts."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:Life","text":"Time duration of the beam."},{"tag":"param:Width","text":"Initial beam width."},{"tag":"param:EndWidth","text":"Final beam width."},{"tag":"param:FadeLength","text":"Beam fade time duration."},{"tag":"param:Color","text":"Color array (r, g, b, a)."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"EntIndex","decl":"int EntIndex","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"EndWidth","decl":"float EndWidth","default":null},{"type":"int","name":"FadeLength","decl":"int FadeLength","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null}]},"created":{"hash":"ce6950aee2520bcb2cd0ec274bf1f81d1d9a312b","count":1059,"time":1183864675},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupMuzzleFlash":{"symbol":{"name":"TE_SetupMuzzleFlash","docStart":5082,"docEnd":5367,"docs":{"brief":"Sets up a muzzle flash effect.","tags":[{"tag":"","text":"Sets up a muzzle flash effect."},{"tag":"param:pos","text":"Position of the muzzle flash."},{"tag":"param:angles","text":"Rotation angles of the muzzle flash."},{"tag":"param:Scale","text":"Scale of the muzzle flash."},{"tag":"param:Type","text":"Muzzle flash type to render (Mod specific)."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"angles","decl":"const float angles[3]","default":null},{"type":"float","name":"Scale","decl":"float Scale","default":null},{"type":"int","name":"Type","decl":"int Type","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupBeamLaser":{"symbol":{"name":"TE_SetupBeamLaser","docStart":12456,"docEnd":13158,"docs":{"brief":"Sets up an entity to entity laser effect.","tags":[{"tag":"","text":"Sets up an entity to entity laser effect."},{"tag":"param:StartEntity","text":"Entity index from where the beam starts."},{"tag":"param:EndEntity","text":"Entity index from where the beam ends."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:StartFrame","text":"Initial frame to render."},{"tag":"param:FrameRate","text":"Beam frame rate."},{"tag":"param:Life","text":"Time duration of the beam."},{"tag":"param:Width","text":"Initial beam width."},{"tag":"param:EndWidth","text":"Final beam width."},{"tag":"param:FadeLength","text":"Beam fade time duration."},{"tag":"param:Amplitude","text":"Beam amplitude."},{"tag":"param:Color","text":"Color array (r, g, b, a)."},{"tag":"param:Speed","text":"Speed of the beam."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"StartEntity","decl":"int StartEntity","default":null},{"type":"int","name":"EndEntity","decl":"int EndEntity","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"int","name":"StartFrame","decl":"int StartFrame","default":null},{"type":"int","name":"FrameRate","decl":"int FrameRate","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"EndWidth","decl":"float EndWidth","default":null},{"type":"int","name":"FadeLength","decl":"int FadeLength","default":null},{"type":"float","name":"Amplitude","decl":"float Amplitude","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null},{"type":"int","name":"Speed","decl":"int Speed","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupEnergySplash":{"symbol":{"name":"TE_SetupEnergySplash","docStart":5988,"docEnd":6203,"docs":{"brief":"Sets up an energy splash effect.","tags":[{"tag":"","text":"Sets up an energy splash effect."},{"tag":"param:pos","text":"Position of the energy splash."},{"tag":"param:dir","text":"Direction of the energy splash."},{"tag":"param:Explosive","text":"Makes the effect explosive."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":null},{"type":"bool","name":"Explosive","decl":"bool Explosive","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_SetupSparks":{"symbol":{"name":"TE_SetupSparks","docStart":3555,"docEnd":3786,"docs":{"brief":"Sets up a sparks effect.","tags":[{"tag":"","text":"Sets up a sparks effect."},{"tag":"param:pos","text":"Position of the sparks."},{"tag":"param:dir","text":"Direction of the sparks."},{"tag":"param:Magnitude","text":"Sparks size."},{"tag":"param:TrailLength","text":"Trail lenght of the sparks."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":null},{"type":"int","name":"Magnitude","decl":"int Magnitude","default":null},{"type":"int","name":"TrailLength","decl":"int TrailLength","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_BeamFollow":{"symbol":{"name":"TE_BeamFollow","docStart":13977,"docEnd":14406,"docs":{"brief":"Sets up a follow beam effect.","tags":[{"tag":"","text":"Sets up a follow beam effect."},{"tag":"param:EntIndex","text":"Entity index from where the beam starts."},{"tag":"param:ModelIndex","text":"Precached model index."},{"tag":"param:HaloIndex","text":"Precached model index."},{"tag":"param:Life","text":"Time duration of the beam."},{"tag":"param:Width","text":"Initial beam width."},{"tag":"param:EndWidth","text":"Final beam width."},{"tag":"param:FadeLength","text":"Beam fade time duration."},{"tag":"param:color","text":"Color array (r, g, b, a)."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"EntIndex","decl":"int EntIndex","default":null},{"type":"int","name":"ModelIndex","decl":"int ModelIndex","default":null},{"type":"int","name":"HaloIndex","decl":"int HaloIndex","default":null},{"type":"float","name":"Life","decl":"float Life","default":null},{"type":"float","name":"Width","decl":"float Width","default":null},{"type":"float","name":"EndWidth","decl":"float EndWidth","default":null},{"type":"int","name":"FadeLength","decl":"int FadeLength","default":null},{"type":"const int[4]","name":"Color","decl":"const int Color[4]","default":null}]},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"TE_EXPLFLAG_ROTATE":{"symbol":{"name":"TE_EXPLFLAG_ROTATE","docStart":2285,"docEnd":2319,"docs":{"brief":"rotate the sprite randomly","tags":[{"tag":"","text":"rotate the sprite randomly"}]},"value":"0x20"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_EXPLFLAG_NOFIREBALL":{"symbol":{"name":"TE_EXPLFLAG_NOFIREBALL","docStart":2363,"docEnd":2393,"docs":{"brief":"do not draw a fireball","tags":[{"tag":"","text":"do not draw a fireball"}]},"value":"0x40"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_SHADEIN":{"symbol":{"name":"FBEAM_SHADEIN","docStart":0,"docEnd":0,"docs":null,"value":"0x00000040"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"FBEAM_ENDVISIBLE":{"symbol":{"name":"FBEAM_ENDVISIBLE","docStart":3257,"docEnd":3322,"docs":{"brief":"Has this client actually seen this beam's end entity yet?","tags":[{"tag":"","text":"Has this client actually seen this beam's end entity yet?"}]},"value":"0x00001000"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_USE_HITBOXES":{"symbol":{"name":"FBEAM_USE_HITBOXES","docStart":3029,"docEnd":3106,"docs":{"brief":"Attachment indices represent hitbox indices instead when this is set.","tags":[{"tag":"","text":"Attachment indices represent hitbox indices instead when this is set."}]},"value":"0x00000400"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_SINENOISE":{"symbol":{"name":"FBEAM_SINENOISE","docStart":0,"docEnd":0,"docs":null,"value":"0x00000010"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_EXPLFLAG_NONE":{"symbol":{"name":"TE_EXPLFLAG_NONE","docStart":1729,"docEnd":1786,"docs":{"brief":"all flags clear makes default Half-Life explosion","tags":[{"tag":"","text":"all flags clear makes default Half-Life explosion"}]},"value":"0x0"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_FOREVER":{"symbol":{"name":"FBEAM_FOREVER","docStart":0,"docEnd":0,"docs":null,"value":"0x00004000"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_EXPLFLAG_NOFIREBALLSMOKE":{"symbol":{"name":"TE_EXPLFLAG_NOFIREBALLSMOKE","docStart":2437,"docEnd":2480,"docs":{"brief":"do not draw smoke with the fireball","tags":[{"tag":"","text":"do not draw smoke with the fireball"}]},"value":"0x80"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_STARTENTITY":{"symbol":{"name":"FBEAM_STARTENTITY","docStart":0,"docEnd":0,"docs":null,"value":"0x00000001"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_EXPLFLAG_NOADDITIVE":{"symbol":{"name":"TE_EXPLFLAG_NOADDITIVE","docStart":1830,"docEnd":1924,"docs":{"brief":"sprite will be drawn opaque (ensure that the sprite you send is a non-additive sprite)","tags":[{"tag":"","text":"sprite will be drawn opaque (ensure that the sprite you send is a non-additive sprite)"}]},"value":"0x1"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_FADEIN":{"symbol":{"name":"FBEAM_FADEIN","docStart":0,"docEnd":0,"docs":null,"value":"0x00000004"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_EXPLFLAG_NOPARTICLES":{"symbol":{"name":"TE_EXPLFLAG_NOPARTICLES","docStart":2134,"docEnd":2163,"docs":{"brief":"do not draw particles","tags":[{"tag":"","text":"do not draw particles"}]},"value":"0x8"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TE_EXPLFLAG_DRAWALPHA":{"symbol":{"name":"TE_EXPLFLAG_DRAWALPHA","docStart":2207,"docEnd":2241,"docs":{"brief":"sprite will be drawn alpha","tags":[{"tag":"","text":"sprite will be drawn alpha"}]},"value":"0x10"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_NOTILE":{"symbol":{"name":"FBEAM_NOTILE","docStart":0,"docEnd":0,"docs":null,"value":"0x00000200"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_EXPLFLAG_NOSOUND":{"symbol":{"name":"TE_EXPLFLAG_NOSOUND","docStart":2048,"docEnd":2090,"docs":{"brief":"do not play client explosion sound","tags":[{"tag":"","text":"do not play client explosion sound"}]},"value":"0x4"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_SOLID":{"symbol":{"name":"FBEAM_SOLID","docStart":0,"docEnd":0,"docs":null,"value":"0x00000020"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"FBEAM_SHADEOUT":{"symbol":{"name":"FBEAM_SHADEOUT","docStart":0,"docEnd":0,"docs":null,"value":"0x00000080"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"_te_stocks_included":{"symbol":{"name":"_te_stocks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919},"last_updated":{"hash":"6e98ba7080cb88dfe1695bc1c2bad7f017599090","count":1040,"time":1183594919}},"FBEAM_FADEOUT":{"symbol":{"name":"FBEAM_FADEOUT","docStart":0,"docEnd":0,"docs":null,"value":"0x00000008"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"TE_EXPLFLAG_NODLIGHTS":{"symbol":{"name":"TE_EXPLFLAG_NODLIGHTS","docStart":1968,"docEnd":2004,"docs":{"brief":"do not render dynamic lights","tags":[{"tag":"","text":"do not render dynamic lights"}]},"value":"0x2"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_STARTVISIBLE":{"symbol":{"name":"FBEAM_STARTVISIBLE","docStart":3148,"docEnd":3215,"docs":{"brief":"Has this client actually seen this beam's start entity yet?","tags":[{"tag":"","text":"Has this client actually seen this beam's start entity yet?"}]},"value":"0x00000800"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_ONLYNOISEONCE":{"symbol":{"name":"FBEAM_ONLYNOISEONCE","docStart":2910,"docEnd":2947,"docs":{"brief":"Only calculate our noise once","tags":[{"tag":"","text":"Only calculate our noise once"}]},"value":"0x00000100"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FBEAM_ENDENTITY":{"symbol":{"name":"FBEAM_ENDENTITY","docStart":0,"docEnd":0,"docs":null,"value":"0x00000002"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"FBEAM_ISACTIVE":{"symbol":{"name":"FBEAM_ISACTIVE","docStart":0,"docEnd":0,"docs":null,"value":"0x00002000"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356}},"FBEAM_HALOBEAM":{"symbol":{"name":"FBEAM_HALOBEAM","docStart":3444,"docEnd":3523,"docs":{"brief":"When drawing a beam with a halo, don't ignore the segments and endwidth","tags":[{"tag":"","text":"When drawing a beam with a halo, don't ignore the segments and endwidth"}]},"value":"0x00008000"},"created":{"hash":"3d7ef5ce496f933484f51355d1e8e9b676fe9ff0","count":1041,"time":1183596356},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{},"typesets":{},"typedefs":{}},"testing":{"functions":{"AssertStrEq":{"symbol":{"name":"AssertStrEq","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"const char[]","name":"expected","decl":"const char[] expected","default":null}]},"created":{"hash":"69ae2249386fa3349e1e37f78c0587d5542cd97a","count":6586,"time":1594261119},"last_updated":{"hash":"69ae2249386fa3349e1e37f78c0587d5542cd97a","count":6586,"time":1594261119}},"AssertEq":{"symbol":{"name":"AssertEq","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"int","name":"cell1","decl":"int cell1","default":null},{"type":"int","name":"cell2","decl":"int cell2","default":null}]},"created":{"hash":"2379c76b032097cfa266dbcd4ee9d1d2334e6563","count":4467,"time":1401955217},"last_updated":{"hash":"52c7ef0f6fd3dd90521b635cd455541cde8b48f8","count":5831,"time":1452126916}},"AssertTrue":{"symbol":{"name":"AssertTrue","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},"created":{"hash":"2379c76b032097cfa266dbcd4ee9d1d2334e6563","count":4467,"time":1401955217},"last_updated":{"hash":"52c7ef0f6fd3dd90521b635cd455541cde8b48f8","count":5831,"time":1452126916}},"AssertFalse":{"symbol":{"name":"AssertFalse","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},"created":{"hash":"2379c76b032097cfa266dbcd4ee9d1d2334e6563","count":4467,"time":1401955217},"last_updated":{"hash":"52c7ef0f6fd3dd90521b635cd455541cde8b48f8","count":5831,"time":1452126916}},"SetTestContext":{"symbol":{"name":"SetTestContext","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"context","decl":"const char[] context","default":null}]},"created":{"hash":"2379c76b032097cfa266dbcd4ee9d1d2334e6563","count":4467,"time":1401955217},"last_updated":{"hash":"52c7ef0f6fd3dd90521b635cd455541cde8b48f8","count":5831,"time":1452126916}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{},"enums":{},"typesets":{},"typedefs":{}},"mapchooser":{"functions":{"GetNominatedMapList":{"symbol":{"name":"GetNominatedMapList","docStart":3555,"docEnd":3778,"docs":{"brief":"Gets the current list of nominated maps.","tags":[{"tag":"","text":"Gets the current list of nominated maps."},{"tag":"param:maparray","text":"An ADT array handle to add the map strings to."},{"tag":"param:ownerarray","text":"An optional ADT array handle to add the nominator client indexes to."}]},"kind":"native","returnType":"void","arguments":[{"type":"ArrayList","name":"maparray","decl":"ArrayList maparray","default":null},{"type":"ArrayList","name":"ownerarray","decl":"ArrayList ownerarray","default":"null"}]},"created":{"hash":"6267c17c6be842f258c5baf5ca7cc08482e539de","count":3151,"time":1290141593},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HasEndOfMapVoteFinished":{"symbol":{"name":"HasEndOfMapVoteFinished","docStart":4521,"docEnd":4651,"docs":{"brief":"Checks if MapChooser's end of map vote has completed.","tags":[{"tag":"","text":"Checks if MapChooser's end of map vote has completed."},{"tag":"return","text":"True if complete, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnNominationRemoved":{"symbol":{"name":"OnNominationRemoved","docStart":4865,"docEnd":5003,"docs":{"brief":"Called when mapchooser removes a nomination from its list.\nNominations cleared on map start will not trigger this forward","tags":[{"tag":"","text":"Called when mapchooser removes a nomination from its list.\nNominations cleared on map start will not trigger this forward"}]},"kind":"forward","returnType":"void","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"int","name":"owner","decl":"int owner","default":null}]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveNominationByOwner":{"symbol":{"name":"RemoveNominationByOwner","docStart":3082,"docEnd":3321,"docs":{"brief":"Attempt to remove a map from the mapchooser map list.","tags":[{"tag":"","text":"Attempt to remove a map from the mapchooser map list."},{"tag":"param:owner","text":"Client index of the nominator."},{"tag":"return","text":"True if the nomination was found and removed, or false if the nomination was not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"owner","decl":"int owner","default":null}]},"created":{"hash":"6267c17c6be842f258c5baf5ca7cc08482e539de","count":3151,"time":1290141593},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"NominateMap":{"symbol":{"name":"NominateMap","docStart":2284,"docEnd":2720,"docs":{"brief":"Attempt to add a map to the mapchooser map list.","tags":[{"tag":"","text":"Attempt to add a map to the mapchooser map list."},{"tag":"param:map","text":"Map to add."},{"tag":"param:force","text":"Should we force the map in even if it requires overwriting an existing nomination?"},{"tag":"param:owner","text":"Client index of the nominator. If the client disconnects the nomination will be removed.\nUse 0 for constant nominations"},{"tag":"return","text":"Nominate Result of the outcome"}]},"kind":"native","returnType":"NominateResult","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"bool","name":"force","decl":"bool force","default":null},{"type":"int","name":"owner","decl":"int owner","default":null}]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetExcludeMapList":{"symbol":{"name":"GetExcludeMapList","docStart":3374,"docEnd":3502,"docs":{"brief":"Gets the current list of excluded maps.","tags":[{"tag":"","text":"Gets the current list of excluded maps."},{"tag":"param:array","text":"An ADT array handle to add the map strings to."}]},"kind":"native","returnType":"void","arguments":[{"type":"ArrayList","name":"array","decl":"ArrayList array","default":null}]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CanMapChooserStartVote":{"symbol":{"name":"CanMapChooserStartVote","docStart":3865,"docEnd":4023,"docs":{"brief":"Checks if MapChooser will allow a vote","tags":[{"tag":"","text":"Checks if MapChooser will allow a vote"},{"tag":"return","text":"True if a vote can be held, or false if mapchooser is already holding a vote."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"EndOfMapVoteEnabled":{"symbol":{"name":"EndOfMapVoteEnabled","docStart":4695,"docEnd":4825,"docs":{"brief":"Checks if MapChooser is set to run an end of map vote.","tags":[{"tag":"","text":"Checks if MapChooser is set to run an end of map vote."},{"tag":"return","text":"True if enabled, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},"created":{"hash":"eee77228e63e5a851eb8aca1939b059821a75d0b","count":2224,"time":1218153974},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"InitiateMapChooserVote":{"symbol":{"name":"InitiateMapChooserVote","docStart":4066,"docEnd":4437,"docs":{"brief":"Initiates a MapChooser map vote\n\nNote: If no input array is specified mapchooser will use its internal list. This includes\nany nominations and excluded maps (as per mapchoosers convars).","tags":[{"tag":"","text":"Initiates a MapChooser map vote\n\nNote: If no input array is specified mapchooser will use its internal list. This includes\nany nominations and excluded maps (as per mapchoosers convars)."},{"tag":"param:when","text":"MapChange consant of when the resulting mapchange should occur."},{"tag":"param:inputarray","text":"ADT array list of maps to add to the vote."}]},"kind":"native","returnType":"void","arguments":[{"type":"MapChange","name":"when","decl":"MapChange when","default":null},{"type":"ArrayList","name":"inputarray","decl":"ArrayList inputarray","default":"null"}]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnMapVoteStarted":{"symbol":{"name":"OnMapVoteStarted","docStart":5071,"docEnd":5125,"docs":{"brief":"Called when mapchooser starts a Map Vote.","tags":[{"tag":"","text":"Called when mapchooser starts a Map Vote."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"6267c17c6be842f258c5baf5ca7cc08482e539de","count":3151,"time":1290141593},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveNominationByMap":{"symbol":{"name":"RemoveNominationByMap","docStart":2801,"docEnd":3024,"docs":{"brief":"Attempt to remove a map from the mapchooser map list.","tags":[{"tag":"","text":"Attempt to remove a map from the mapchooser map list."},{"tag":"param:map","text":"Map to remove."},{"tag":"return","text":"True if the nomination was found and removed, or false if the nomination was not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null}]},"created":{"hash":"6267c17c6be842f258c5baf5ca7cc08482e539de","count":3151,"time":1290141593},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"__pl_mapchooser_SetNTVOptional":{"symbol":{"name":"__pl_mapchooser_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"dad66c9204d21d74f0b03a4f09cf9b70ea9ced99","count":2213,"time":1216280831},"last_updated":{"hash":"dad66c9204d21d74f0b03a4f09cf9b70ea9ced99","count":2213,"time":1216280831}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_mapchooser_included_":{"symbol":{"name":"_mapchooser_included_","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132}}},"enums":{"NominateResult":{"symbol":{"name":"NominateResult","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Nominate_Added","docStart":1694,"docEnd":1739,"docs":{"brief":"The map was added to the nominate list","tags":[{"tag":"","text":"The map was added to the nominate list"}]},"value":null},{"name":"Nominate_Replaced","docStart":1766,"docEnd":1815,"docs":{"brief":"A clients existing nomination was replaced","tags":[{"tag":"","text":"A clients existing nomination was replaced"}]},"value":null},{"name":"Nominate_AlreadyInVote","docStart":1842,"docEnd":1886,"docs":{"brief":"Specified map was already in the vote","tags":[{"tag":"","text":"Specified map was already in the vote"}]},"value":null},{"name":"Nominate_InvalidMap","docStart":1913,"docEnd":1956,"docs":{"brief":"Mapname specified wasn't a valid map","tags":[{"tag":"","text":"Mapname specified wasn't a valid map"}]},"value":null},{"name":"Nominate_VoteFull","docStart":1983,"docEnd":2036,"docs":{"brief":"This will only occur if force was set to false","tags":[{"tag":"","text":"This will only occur if force was set to false"}]},"value":null}]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MapChange":{"symbol":{"name":"MapChange","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"MapChange_Instant","docStart":2088,"docEnd":2148,"docs":{"brief":"Change map as soon as the voting results have come in","tags":[{"tag":"","text":"Change map as soon as the voting results have come in"}]},"value":null},{"name":"MapChange_RoundEnd","docStart":2175,"docEnd":2216,"docs":{"brief":"Change map at the end of the round","tags":[{"tag":"","text":"Change map at the end of the round"}]},"value":null},{"name":"MapChange_MapEnd","docStart":2243,"docEnd":2276,"docs":{"brief":"Change the sm_nextmap cvar","tags":[{"tag":"","text":"Change the sm_nextmap cvar"}]},"value":null}]},"created":{"hash":"4106620928bb9506f7fd8b5eba59d821da143232","count":2134,"time":1214875132},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"datapack":{"functions":{"SetPackPosition":{"symbol":{"name":"SetPackPosition","docStart":7971,"docEnd":8276,"docs":{"brief":"Sets the read/write position in a data pack.","tags":[{"tag":"","text":"Sets the read/write position in a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:position","text":"New position to set. Must have been previously retrieved from a call to GetPackPosition."},{"tag":"error","text":"Invalid handle, or position is beyond the pack bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"DataPackPos","name":"position","decl":"DataPackPos position","default":null}]},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"CreateDataPack":{"symbol":{"name":"CreateDataPack","docStart":5165,"docEnd":5294,"docs":{"brief":"Creates a new data pack.","tags":[{"tag":"","text":"Creates a new data pack."},{"tag":"return","text":"A Handle to the data pack.  Must be closed with CloseHandle()."}]},"kind":"native","returnType":"DataPack","arguments":[]},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"WritePackFunction":{"symbol":{"name":"WritePackFunction","docStart":6051,"docEnd":6251,"docs":{"brief":"Packs a function pointer into a data pack.","tags":[{"tag":"","text":"Packs a function pointer into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:fktptr","text":"Function pointer to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"Function","name":"fktptr","decl":"Function fktptr","default":null}]},"created":{"hash":"bfcfbbe1071d0d26ab466606c7741f866d33454c","count":4727,"time":1407110725},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"GetPackPosition":{"symbol":{"name":"GetPackPosition","docStart":7664,"docEnd":7917,"docs":{"brief":"Returns the read or write position in a data pack.","tags":[{"tag":"","text":"Returns the read or write position in a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Position in the data pack, only usable with calls to SetPackPosition."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"DataPackPos","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"ReadPackCell":{"symbol":{"name":"ReadPackCell","docStart":6317,"docEnd":6509,"docs":{"brief":"Reads a cell from a data pack.","tags":[{"tag":"","text":"Reads a cell from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Cell value."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"WritePackCell":{"symbol":{"name":"WritePackCell","docStart":5333,"docEnd":5516,"docs":{"brief":"Packs a normal cell into a data pack.","tags":[{"tag":"","text":"Packs a normal cell into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:cell","text":"Cell to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"any","name":"cell","decl":"any cell","default":null}]},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"ReadPackString":{"symbol":{"name":"ReadPackString","docStart":6792,"docEnd":7066,"docs":{"brief":"Reads a string from a data pack.","tags":[{"tag":"","text":"Reads a string from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"47acc11df77b947a18887b0f92291596585b25f4","count":462,"time":1171059159},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"IsPackReadable":{"symbol":{"name":"IsPackReadable","docStart":8345,"docEnd":8684,"docs":{"brief":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read.","tags":[{"tag":"","text":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:bytes","text":"Number of bytes to simulate reading."},{"tag":"return","text":"True if can be read, false otherwise."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"int","name":"bytes","decl":"int bytes","default":null}]},"created":{"hash":"47acc11df77b947a18887b0f92291596585b25f4","count":462,"time":1171059159},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"ReadPackFloat":{"symbol":{"name":"ReadPackFloat","docStart":6552,"docEnd":6746,"docs":{"brief":"Reads a float from a data pack.","tags":[{"tag":"","text":"Reads a float from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Float value."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},"created":{"hash":"47acc11df77b947a18887b0f92291596585b25f4","count":462,"time":1171059159},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"ReadPackFunction":{"symbol":{"name":"ReadPackFunction","docStart":7139,"docEnd":7349,"docs":{"brief":"Reads a function pointer from a data pack.","tags":[{"tag":"","text":"Reads a function pointer from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Function pointer."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"Function","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},"created":{"hash":"bfcfbbe1071d0d26ab466606c7741f866d33454c","count":4727,"time":1407110725},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"WritePackString":{"symbol":{"name":"WritePackString","docStart":5806,"docEnd":5986,"docs":{"brief":"Packs a string into a data pack.","tags":[{"tag":"","text":"Packs a string into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:str","text":"String to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"47acc11df77b947a18887b0f92291596585b25f4","count":462,"time":1171059159},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"ResetPack":{"symbol":{"name":"ResetPack","docStart":7401,"docEnd":7605,"docs":{"brief":"Resets the position in a data pack.","tags":[{"tag":"","text":"Resets the position in a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:clear","text":"If true, clears the contained data."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"bool","name":"clear","decl":"bool clear","default":"false"}]},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}},"WritePackFloat":{"symbol":{"name":"WritePackFloat","docStart":5571,"docEnd":5749,"docs":{"brief":"Packs a float into a data pack.","tags":[{"tag":"","text":"Packs a float into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:val","text":"Float to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"float","name":"val","decl":"float val","default":null}]},"created":{"hash":"47acc11df77b947a18887b0f92291596585b25f4","count":462,"time":1171059159},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}}},"methodmaps":{"DataPack":{"symbol":{"name":"DataPack","docStart":1737,"docEnd":1810,"docs":{"brief":"A DataPack allows serializing multiple variables into a single stream.","tags":[{"tag":"","text":"A DataPack allows serializing multiple variables into a single stream."}]},"parent":"Handle","methods":[{"name":"DataPack","docStart":1845,"docEnd":1872,"docs":{"brief":"Creates a new data pack.","tags":[{"tag":"","text":"Creates a new data pack."}]},"kind":"native","returnType":"DataPack","arguments":[]},{"name":"WriteCell","docStart":1905,"docEnd":2084,"docs":{"brief":"Packs a normal cell into a data pack.","tags":[{"tag":"","text":"Packs a normal cell into a data pack."},{"tag":"param:cell","text":"Cell to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"any","name":"cell","decl":"any cell","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteFloat","docStart":2152,"docEnd":2326,"docs":{"brief":"Packs a float into a data pack.","tags":[{"tag":"","text":"Packs a float into a data pack."},{"tag":"param:val","text":"Float to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"val","decl":"float val","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteString","docStart":2396,"docEnd":2572,"docs":{"brief":"Packs a string into a data pack.","tags":[{"tag":"","text":"Packs a string into a data pack."},{"tag":"param:str","text":"String to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteFunction","docStart":2650,"docEnd":2846,"docs":{"brief":"Packs a function pointer into a data pack.","tags":[{"tag":"","text":"Packs a function pointer into a data pack."},{"tag":"param:fktptr","text":"Function pointer to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"Function","name":"fktptr","decl":"Function fktptr","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteCellArray","docStart":2925,"docEnd":3154,"docs":{"brief":"Packs an array of cells into a data pack.","tags":[{"tag":"","text":"Packs an array of cells into a data pack."},{"tag":"param:array","text":"Array to add."},{"tag":"param:count","text":"Number of elements"},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"const any[]","name":"array","decl":"const any[] array","default":null},{"type":"int","name":"count","decl":"int count","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteFloatArray","docStart":3247,"docEnd":3477,"docs":{"brief":"Packs an array of floats into a data pack.","tags":[{"tag":"","text":"Packs an array of floats into a data pack."},{"tag":"param:array","text":"Array to add."},{"tag":"param:count","text":"Number of elements"},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[]","name":"array","decl":"const float[] array","default":null},{"type":"int","name":"count","decl":"int count","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"ReadCell","docStart":3573,"docEnd":3649,"docs":{"brief":"Reads a cell from a data pack.","tags":[{"tag":"","text":"Reads a cell from a data pack."},{"tag":"return","text":"A cell at this position"}]},"kind":"native","returnType":"any","arguments":[]},{"name":"ReadFloat","docStart":3686,"docEnd":3762,"docs":{"brief":"Reads a float from a data pack.","tags":[{"tag":"","text":"Reads a float from a data pack."},{"tag":"return","text":"Float at this position"}]},"kind":"native","returnType":"float","arguments":[]},{"name":"ReadString","docStart":3802,"docEnd":3961,"docs":{"brief":"Reads a string from a data pack.","tags":[{"tag":"","text":"Reads a string from a data pack."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"ReadFunction","docStart":4026,"docEnd":4120,"docs":{"brief":"Reads a function pointer from a data pack.","tags":[{"tag":"","text":"Reads a function pointer from a data pack."},{"tag":"return","text":"Function pointer."}]},"kind":"native","returnType":"Function","arguments":[]},{"name":"ReadCellArray","docStart":4166,"docEnd":4315,"docs":{"brief":"Reads an array of cells a data pack.","tags":[{"tag":"","text":"Reads an array of cells a data pack."},{"tag":"param:buffer","text":"Destination buffer."},{"tag":"param:count","text":"Maximum length of output buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"count","decl":"int count","default":null}]},{"name":"ReadFloatArray","docStart":4381,"docEnd":4536,"docs":{"brief":"Reads an array of floats from a data pack.","tags":[{"tag":"","text":"Reads an array of floats from a data pack."},{"tag":"param:buffer","text":"Destination buffer."},{"tag":"param:count","text":"Maximum length of output buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[]","name":"buffer","decl":"float[] buffer","default":null},{"type":"int","name":"count","decl":"int count","default":null}]},{"name":"Reset","docStart":4605,"docEnd":4710,"docs":{"brief":"Resets the position in a data pack.","tags":[{"tag":"","text":"Resets the position in a data pack."},{"tag":"param:clear","text":"If true, clears the contained data."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"clear","decl":"bool clear","default":"false"}]},{"name":"IsReadable","docStart":4761,"docEnd":4956,"docs":{"brief":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read.","tags":[{"tag":"","text":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read."},{"tag":"param:unused","text":"Unused variable. Exists for backwards compatability."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"unused","decl":"int unused","default":"0"}]}],"properties":[{"name":"Position","docStart":5011,"docEnd":5056,"docs":{"brief":"The read or write position in a data pack.","tags":[{"tag":"","text":"The read or write position in a data pack."}]},"type":"DataPackPos","getter":true,"setter":true}]},"created":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577},"last_updated":{"hash":"13621a1274be8cf2736c5102ff226373af9d6c94","count":6542,"time":1588976628}}},"enumstructs":{},"constants":{},"defines":{"_datapack_included":{"symbol":{"name":"_datapack_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044},"last_updated":{"hash":"8649e57ebc007cce4030322d4842cd4087af251a","count":429,"time":1170576044}}},"enums":{"DataPackPos":{"symbol":{"name":"DataPackPos","docStart":1660,"docEnd":1710,"docs":{"brief":"Opaque handle to a datapack position.","tags":[{"tag":"","text":"Opaque handle to a datapack position."}]},"entries":[]},"created":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577},"last_updated":{"hash":"bcfef75c5dd00c8b66440e524633c97bbaee4c23","count":5537,"time":1439405577}}},"typesets":{},"typedefs":{}},"cstrike":{"functions":{"CS_WeaponIDToItemDefIndex":{"symbol":{"name":"CS_WeaponIDToItemDefIndex","docStart":15352,"docEnd":15719,"docs":{"brief":"Returns a item definition index equivalent based on the CSWeaponID.","tags":[{"tag":"","text":"Returns a item definition index equivalent based on the CSWeaponID."},{"tag":"param:id","text":"CSWeaponID to get the item definition for."},{"tag":"return","text":"Returns item definition index value for the weapon id."},{"tag":"error","text":"Invalid weapon id."},{"tag":"note","text":"In most cases the item deinition index will be the id. Works for CS:GO ONLY."}]},"kind":"native","returnType":"int","arguments":[{"type":"CSWeaponID","name":"id","decl":"CSWeaponID id","default":null}]},"created":{"hash":"8c8af88cee70e4b88fbf67a79e879ab156ac0688","count":6165,"time":1505839031},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetTeamScore":{"symbol":{"name":"CS_GetTeamScore","docStart":11286,"docEnd":11479,"docs":{"brief":"Gets a team's score","tags":[{"tag":"","text":"Gets a team's score"},{"tag":"param:team","text":"Team index to get score for."},{"tag":"return","text":"Returns the internal team score."},{"tag":"error","text":"Invalid team index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"team","decl":"int team","default":null}]},"created":{"hash":"e2340363e357fd7cf82e71b2ab2a418069402664","count":3536,"time":1338219778},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetMVPCount":{"symbol":{"name":"CS_GetMVPCount","docStart":11964,"docEnd":12172,"docs":{"brief":"Gets a client's mvp count","tags":[{"tag":"","text":"Gets a client's mvp count"},{"tag":"param:client","text":"Client index to get mvp count of."},{"tag":"return","text":"Returns the client's internal MVP count."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"e2340363e357fd7cf82e71b2ab2a418069402664","count":3536,"time":1338219778},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetClientClanTag":{"symbol":{"name":"CS_GetClientClanTag","docStart":10641,"docEnd":10947,"docs":{"brief":"Gets a clients clan tag","tags":[{"tag":"","text":"Gets a clients clan tag"},{"tag":"param:client","text":"Client index to get clan tag for."},{"tag":"param:buffer","text":"Buffer to store clients clan tag in."},{"tag":"param:size","text":"Size of the buffer."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"1b9fb906e27ab78cda768ed3ce58612fc41156f5","count":3406,"time":1318526249},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_OnBuyCommand":{"symbol":{"name":"CS_OnBuyCommand","docStart":6635,"docEnd":6880,"docs":{"brief":"Called when a player attempts to purchase an item.\nReturn Plugin_Continue to allow the purchase or return a\nhigher action to deny.","tags":[{"tag":"","text":"Called when a player attempts to purchase an item.\nReturn Plugin_Continue to allow the purchase or return a\nhigher action to deny."},{"tag":"param:client","text":"Client index"},{"tag":"param:weapon","text":"User input for weapon name"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"weapon","decl":"const char[] weapon","default":null}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_SetMVPCount":{"symbol":{"name":"CS_SetMVPCount","docStart":12216,"docEnd":12420,"docs":{"brief":"Sets a client's mvp count","tags":[{"tag":"","text":"Sets a client's mvp count"},{"tag":"param:client","text":"Client index to set mvp count for."},{"tag":"param:value","text":"Value to set client's mvp count as."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"e2340363e357fd7cf82e71b2ab2a418069402664","count":3536,"time":1338219778},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetWeaponPrice":{"symbol":{"name":"CS_GetWeaponPrice","docStart":10038,"docEnd":10551,"docs":{"brief":"Gets a weapon's price","tags":[{"tag":"","text":"Gets a weapon's price"},{"tag":"param:client","text":"Client to check weapon price for."},{"tag":"param:id","text":"Weapon id for the weapon to check"},{"tag":"param:defaultprice","text":"Set to true to get defaultprice."},{"tag":"return","text":"Returns price of the weapon (even if modified)"},{"tag":"error","text":"Invalid client, failing to get weapon info, or failing to get price offset."},{"tag":"note","text":"c4, knife and shield will always return 0. vest, vest helmet and night vision will always return default price."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"CSWeaponID","name":"id","decl":"CSWeaponID id","default":null},{"type":"bool","name":"defaultprice","decl":"bool defaultprice","default":"false"}]},"created":{"hash":"ee1bbd5994d2a5adc413c25abebc93fcdea0ca21","count":3325,"time":1309307575},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_OnTerminateRound":{"symbol":{"name":"CS_OnTerminateRound","docStart":7816,"docEnd":8178,"docs":{"brief":"Called when TerminateRound is called.\nReturn Plugin_Continue to ignore, return Plugin_Changed to continue,\nusing the given delay and reason, or return Plugin_Handled or a higher\naction to block TerminateRound from firing.","tags":[{"tag":"","text":"Called when TerminateRound is called.\nReturn Plugin_Continue to ignore, return Plugin_Changed to continue,\nusing the given delay and reason, or return Plugin_Handled or a higher\naction to block TerminateRound from firing."},{"tag":"param:delay","text":"Time (in seconds) until new round starts"},{"tag":"param:reason","text":"Reason for round end"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"float&","name":"delay","decl":"float& delay","default":null},{"type":"CSRoundEndReason&","name":"reason","decl":"CSRoundEndReason& reason","default":null}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_OnCSWeaponDrop":{"symbol":{"name":"CS_OnCSWeaponDrop","docStart":6950,"docEnd":7162,"docs":{"brief":"Called when CSWeaponDrop is called\nReturn Plugin_Continue to allow the call or return a\nhigher action to block.","tags":[{"tag":"","text":"Called when CSWeaponDrop is called\nReturn Plugin_Continue to allow the call or return a\nhigher action to block."},{"tag":"param:client","text":"Client index"},{"tag":"param:weaponIndex","text":"Weapon index"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weaponIndex","decl":"int weaponIndex","default":null}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_AliasToWeaponID":{"symbol":{"name":"CS_AliasToWeaponID","docStart":13564,"docEnd":13854,"docs":{"brief":"Gets a weaponID from a alias","tags":[{"tag":"","text":"Gets a weaponID from a alias"},{"tag":"param:alias","text":"Weapon alias to attempt to get an id for."},{"tag":"return","text":"Returns a weapon id or 0 if failed to find a match."},{"tag":"note","text":"For best results use CS_GetTranslatedWeaponAlias on the weapon name before passing it."}]},"kind":"native","returnType":"CSWeaponID","arguments":[{"type":"const char[]","name":"alias","decl":"const char[] alias","default":null}]},"created":{"hash":"3b18745bcda5fcdfacf4d07cf4b7b58d745a1c93","count":3507,"time":1338071483},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_RespawnPlayer":{"symbol":{"name":"CS_RespawnPlayer","docStart":8259,"docEnd":8402,"docs":{"brief":"Respawns a player.","tags":[{"tag":"","text":"Respawns a player."},{"tag":"param:client","text":"Player's index."},{"tag":"error","text":"Invalid client index, client not in game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_OnGetWeaponPrice":{"symbol":{"name":"CS_OnGetWeaponPrice","docStart":7230,"docEnd":7730,"docs":{"brief":"Called when game retrieves a weapon's price for a player.\nReturn Plugin_Continue to use default value or return a higher\naction to use a newly-set price.","tags":[{"tag":"","text":"Called when game retrieves a weapon's price for a player.\nReturn Plugin_Continue to use default value or return a higher\naction to use a newly-set price."},{"tag":"note","text":"This can be called multiple times per weapon purchase"},{"tag":"param:client","text":"Client index"},{"tag":"param:weapon","text":"Weapon classname"},{"tag":"param:price","text":"Buffer param for the price of the weapon"},{"tag":"note","text":"Not all \"weapons\" call GetWeaponPrice. Example: c4, knife, vest, vest helmet, night vision."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"weapon","decl":"const char[] weapon","default":null},{"type":"int&","name":"price","decl":"int& price","default":null}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetClientContributionScore":{"symbol":{"name":"CS_GetClientContributionScore","docStart":12476,"docEnd":12689,"docs":{"brief":"Gets a client's contribution score (CS:GO only)","tags":[{"tag":"","text":"Gets a client's contribution score (CS:GO only)"},{"tag":"param:client","text":"Client index to get score of."},{"tag":"return","text":"Returns the client's score."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"ba2915ce4ee9c72b1e3c5628d34119612267a60f","count":3708,"time":1355600212},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_SetClientAssists":{"symbol":{"name":"CS_SetClientAssists","docStart":13292,"docEnd":13503,"docs":{"brief":"Sets a client's assists (CS:GO only)","tags":[{"tag":"","text":"Sets a client's assists (CS:GO only)"},{"tag":"param:client","text":"Client index to set assists for."},{"tag":"param:value","text":"Value to set client's assists as."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"ba2915ce4ee9c72b1e3c5628d34119612267a60f","count":3708,"time":1355600212},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_SetClientClanTag":{"symbol":{"name":"CS_SetClientClanTag","docStart":11021,"docEnd":11218,"docs":{"brief":"Sets a clients clan tag","tags":[{"tag":"","text":"Sets a clients clan tag"},{"tag":"param:client","text":"Client index to set clan tag for."},{"tag":"param:tag","text":"Tag to set clients clan tag as."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"tag","decl":"const char[] tag","default":null}]},"created":{"hash":"1b9fb906e27ab78cda768ed3ce58612fc41156f5","count":3406,"time":1318526249},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetClientAssists":{"symbol":{"name":"CS_GetClientAssists","docStart":13037,"docEnd":13243,"docs":{"brief":"Gets a client's assists (CS:GO only)","tags":[{"tag":"","text":"Gets a client's assists (CS:GO only)"},{"tag":"param:client","text":"Client index to get assists of."},{"tag":"return","text":"Returns the client's assists."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"ba2915ce4ee9c72b1e3c5628d34119612267a60f","count":3708,"time":1355600212},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_DropWeapon":{"symbol":{"name":"CS_DropWeapon","docStart":8692,"docEnd":9107,"docs":{"brief":"Forces a player to drop or toss their weapon","tags":[{"tag":"","text":"Forces a player to drop or toss their weapon"},{"tag":"param:client","text":"Player's index."},{"tag":"param:weaponIndex","text":"Index of weapon to drop."},{"tag":"param:toss","text":"True to toss weapon (with velocity) or false to just drop weapon"},{"tag":"param:blockhook","text":"Set to true to stop the corresponding CS_OnCSWeaponDrop"},{"tag":"error","text":"Invalid client index, client not in game, or invalid weapon index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weaponIndex","decl":"int weaponIndex","default":null},{"type":"bool","name":"toss","decl":"bool toss","default":null},{"type":"bool","name":"blockhook","decl":"bool blockhook","default":"false"}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"__ext_cstrike_SetNTVOptional":{"symbol":{"name":"__ext_cstrike_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"e08b4cdf1e167a9d3ad5c2cd455f069d350882b4","count":1574,"time":1192422476},"last_updated":{"hash":"e08b4cdf1e167a9d3ad5c2cd455f069d350882b4","count":1574,"time":1192422476}},"CS_TerminateRound":{"symbol":{"name":"CS_TerminateRound","docStart":9203,"docEnd":9517,"docs":{"brief":"Forces round to end with a reason","tags":[{"tag":"","text":"Forces round to end with a reason"},{"tag":"param:delay","text":"Time (in seconds) to delay before new round starts"},{"tag":"param:reason","text":"Reason for the round ending"},{"tag":"param:blockhook","text":"Set to true to stop the corresponding CS_OnTerminateRound\nforward from being called."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"delay","decl":"float delay","default":null},{"type":"CSRoundEndReason","name":"reason","decl":"CSRoundEndReason reason","default":null},{"type":"bool","name":"blockhook","decl":"bool blockhook","default":"false"}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_GetTranslatedWeaponAlias":{"symbol":{"name":"CS_GetTranslatedWeaponAlias","docStart":9616,"docEnd":9946,"docs":{"brief":"Gets a weapon name from a weapon alias","tags":[{"tag":"","text":"Gets a weapon name from a weapon alias"},{"tag":"param:alias","text":"Weapons alias to get weapon name for."},{"tag":"param:weapon","text":"Buffer to store weapons name"},{"tag":"param:size","text":"Size of buffer to store the weapons name."},{"tag":"note","text":"Will set the buffer to the original alias if it is not an alias to a weapon."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"alias","decl":"const char[] alias","default":null},{"type":"char[]","name":"weapon","decl":"char[] weapon","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_SwitchTeam":{"symbol":{"name":"CS_SwitchTeam","docStart":8449,"docEnd":8638,"docs":{"brief":"Switches the player's team.","tags":[{"tag":"","text":"Switches the player's team."},{"tag":"param:client","text":"Player's index."},{"tag":"param:team","text":"Team index."},{"tag":"error","text":"Invalid client index, client not in game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"team","decl":"int team","default":null}]},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_SetTeamScore":{"symbol":{"name":"CS_SetTeamScore","docStart":11522,"docEnd":11909,"docs":{"brief":"Sets a team's score","tags":[{"tag":"","text":"Sets a team's score"},{"tag":"param:team","text":"Team index to set score for."},{"tag":"param:value","text":"Value to set teams score as."},{"tag":"error","text":"Invalid team index."},{"tag":"note","text":"This will update the scoreboard only after the scoreboard update function is called.\nUse SetTeamScore plus this to update the scoreboard instantly and save values correctly."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"team","decl":"int team","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"e2340363e357fd7cf82e71b2ab2a418069402664","count":3536,"time":1338219778},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_WeaponIDToAlias":{"symbol":{"name":"CS_WeaponIDToAlias","docStart":13917,"docEnd":14200,"docs":{"brief":"Gets a alias from a weaponID","tags":[{"tag":"","text":"Gets a alias from a weaponID"},{"tag":"param:weaponID","text":"WeaponID to get alias for."},{"tag":"param:destination","text":"Destination string to hold the weapon alias."},{"tag":"param:len","text":"Length of the destination array."},{"tag":"return","text":"Returns number of cells written."}]},"kind":"native","returnType":"int","arguments":[{"type":"CSWeaponID","name":"weaponID","decl":"CSWeaponID weaponID","default":null},{"type":"char[]","name":"destination","decl":"char[] destination","default":null},{"type":"int","name":"len","decl":"int len","default":null}]},"created":{"hash":"2e3c5e367ed737dc7309a77262deb1fecd17062c","count":3704,"time":1355515942},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_SetClientContributionScore":{"symbol":{"name":"CS_SetClientContributionScore","docStart":12748,"docEnd":12966,"docs":{"brief":"Sets a client's contribution score (CS:GO only)","tags":[{"tag":"","text":"Sets a client's contribution score (CS:GO only)"},{"tag":"param:client","text":"Client index to set score for."},{"tag":"param:value","text":"Value to set client's score as."},{"tag":"error","text":"Invalid client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"ba2915ce4ee9c72b1e3c5628d34119612267a60f","count":3708,"time":1355600212},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_IsValidWeaponID":{"symbol":{"name":"CS_IsValidWeaponID","docStart":14286,"docEnd":14637,"docs":{"brief":"Returns weather a WeaponID is valid on the current mod (css or csgo)","tags":[{"tag":"","text":"Returns weather a WeaponID is valid on the current mod (css or csgo)"},{"tag":"param:weaponID","text":"WeaponID to check"},{"tag":"return","text":"Returns true if its a valid WeaponID false otherwise."},{"tag":"note","text":"This will return false always for CSWeapon_NONE. Should only be called after OnMapStart since weapon info isnt intialized before."}]},"kind":"native","returnType":"bool","arguments":[{"type":"CSWeaponID","name":"id","decl":"CSWeaponID id","default":null}]},"created":{"hash":"fa0df413f47dbc8074999c3ce22c3c0b8ffee562","count":3966,"time":1375323075},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_UpdateClientModel":{"symbol":{"name":"CS_UpdateClientModel","docStart":14689,"docEnd":14864,"docs":{"brief":"Sets a player's model based on their current class","tags":[{"tag":"","text":"Sets a player's model based on their current class"},{"tag":"param:client","text":"Player's index."},{"tag":"error","text":"Invalid client index, client not in game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"75ce4c395aa30634cef4ef5e6cc076e21e8614ff","count":4122,"time":1378832894},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CS_ItemDefIndexToID":{"symbol":{"name":"CS_ItemDefIndexToID","docStart":14915,"docEnd":15293,"docs":{"brief":"Returns a CSWeaponID equivalent based on the item definition index.","tags":[{"tag":"","text":"Returns a CSWeaponID equivalent based on the item definition index."},{"tag":"param:iDefIndex","text":"Definition index to get the CSWeaponID value for."},{"tag":"return","text":"Returns CSWeaponID value for the definition index."},{"tag":"error","text":"Invalid definition index."},{"tag":"note","text":"In most cases the id will be the item definition index. Works for CS:GO ONLY."}]},"kind":"native","returnType":"CSWeaponID","arguments":[{"type":"int","name":"iDefIndex","decl":"int iDefIndex","default":null}]},"created":{"hash":"1f3b14367d8ce6618bdc375b5b7ad6460c9f4dde","count":6163,"time":1505014052},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"CS_TEAM_CT":{"symbol":{"name":"CS_TEAM_CT","docStart":1832,"docEnd":1859,"docs":{"brief":"Counter-Terrorists.","tags":[{"tag":"","text":"Counter-Terrorists."}]},"value":"3"},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_TEAM_NONE":{"symbol":{"name":"CS_TEAM_NONE","docStart":1672,"docEnd":1692,"docs":{"brief":"No team yet.","tags":[{"tag":"","text":"No team yet."}]},"value":"0"},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_SLOT_PRIMARY":{"symbol":{"name":"CS_SLOT_PRIMARY","docStart":1895,"docEnd":1923,"docs":{"brief":"Primary weapon slot.","tags":[{"tag":"","text":"Primary weapon slot."}]},"value":"0"},"created":{"hash":"0f45f8b5eeddcb56292cfd99dc7fe927e3b1234d","count":1460,"time":1190575999},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_cstrike_included":{"symbol":{"name":"_cstrike_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882}},"CS_SLOT_SECONDARY":{"symbol":{"name":"CS_SLOT_SECONDARY","docStart":1957,"docEnd":1987,"docs":{"brief":"Secondary weapon slot.","tags":[{"tag":"","text":"Secondary weapon slot."}]},"value":"1"},"created":{"hash":"0f45f8b5eeddcb56292cfd99dc7fe927e3b1234d","count":1460,"time":1190575999},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_TEAM_SPECTATOR":{"symbol":{"name":"CS_TEAM_SPECTATOR","docStart":1726,"docEnd":1745,"docs":{"brief":"Spectators.","tags":[{"tag":"","text":"Spectators."}]},"value":"1"},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_SLOT_UTILITY":{"symbol":{"name":"CS_SLOT_UTILITY","docStart":2318,"docEnd":2342,"docs":{"brief":"Slot for tablet.","tags":[{"tag":"","text":"Slot for tablet."}]},"value":"12"},"created":{"hash":"23e1c0b71ec847b0d18984f22fdea55c60e92066","count":6465,"time":1572870977},"last_updated":{"hash":"23e1c0b71ec847b0d18984f22fdea55c60e92066","count":6465,"time":1572870977}},"CS_SLOT_C4":{"symbol":{"name":"CS_SLOT_C4","docStart":2160,"docEnd":2176,"docs":{"brief":"C4 slot.","tags":[{"tag":"","text":"C4 slot."}]},"value":"4"},"created":{"hash":"0f45f8b5eeddcb56292cfd99dc7fe927e3b1234d","count":1460,"time":1190575999},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_SLOT_KNIFE":{"symbol":{"name":"CS_SLOT_KNIFE","docStart":2021,"docEnd":2040,"docs":{"brief":"Knife slot.","tags":[{"tag":"","text":"Knife slot."}]},"value":"2"},"created":{"hash":"3c52840dd862a26f0c8ed5d1c00065a3946c9ea8","count":4377,"time":1400677733},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_DMG_HEADSHOT":{"symbol":{"name":"CS_DMG_HEADSHOT","docStart":2387,"docEnd":2403,"docs":{"brief":"Headshot","tags":[{"tag":"","text":"Headshot"}]},"value":"(1 << 30)"},"created":{"hash":"5eef4bccd38e76812712b6eb7beb5f181a3ea06c","count":4413,"time":1401283978},"last_updated":{"hash":"23e1c0b71ec847b0d18984f22fdea55c60e92066","count":6465,"time":1572870977}},"CS_SLOT_GRENADE":{"symbol":{"name":"CS_SLOT_GRENADE","docStart":2074,"docEnd":2126,"docs":{"brief":"Grenade slot (will only return one grenade).","tags":[{"tag":"","text":"Grenade slot (will only return one grenade)."}]},"value":"3"},"created":{"hash":"0f45f8b5eeddcb56292cfd99dc7fe927e3b1234d","count":1460,"time":1190575999},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_TEAM_T":{"symbol":{"name":"CS_TEAM_T","docStart":1779,"docEnd":1798,"docs":{"brief":"Terrorists.","tags":[{"tag":"","text":"Terrorists."}]},"value":"2"},"created":{"hash":"9733816b35f385ce1296e7c74a72e9b44bc63952","count":1442,"time":1190213882},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CS_SLOT_BOOST":{"symbol":{"name":"CS_SLOT_BOOST","docStart":2210,"docEnd":2284,"docs":{"brief":"Slot for healthshot and shield (will only return one weapon/item).","tags":[{"tag":"","text":"Slot for healthshot and shield (will only return one weapon/item)."}]},"value":"11"},"created":{"hash":"23e1c0b71ec847b0d18984f22fdea55c60e92066","count":6465,"time":1572870977},"last_updated":{"hash":"23e1c0b71ec847b0d18984f22fdea55c60e92066","count":6465,"time":1572870977}}},"enums":{"CSWeaponID":{"symbol":{"name":"CSWeaponID","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"CSWeapon_NONE","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"CSWeapon_P228","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_GLOCK","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SCOUT","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_HEGRENADE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_XM1014","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_C4","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_MAC10","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_AUG","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SMOKEGRENADE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_ELITE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_FIVESEVEN","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_UMP45","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SG550","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_GALIL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_FAMAS","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_USP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_AWP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_MP5NAVY","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_M249","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_M3","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_M4A1","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_TMP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_G3SG1","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_FLASHBANG","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_DEAGLE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SG552","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_AK47","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_KNIFE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_P90","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SHIELD","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_KEVLAR","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_ASSAULTSUIT","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_NIGHTVISION","docStart":4716,"docEnd":4746,"docs":{"brief":"Anything below is CS:GO ONLY","tags":[{"tag":"","text":"Anything below is CS:GO ONLY"}]},"value":null},{"name":"CSWeapon_GALILAR","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_BIZON","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_MAG7","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_NEGEV","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SAWEDOFF","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_TEC9","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_TASER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_HKP2000","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_MP7","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_MP9","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_NOVA","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_P250","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SCAR17","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SCAR20","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SG556","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_SSG08","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_KNIFE_GG","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_MOLOTOV","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_DECOY","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_INCGRENADE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_DEFUSER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_HEAVYASSAULTSUIT","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CSWeapon_CUTTERS","docStart":5169,"docEnd":5224,"docs":{"brief":"The rest are actual item definition indexes for CS:GO","tags":[{"tag":"","text":"The rest are actual item definition indexes for CS:GO"}]},"value":"56"},{"name":"CSWeapon_HEALTHSHOT","docStart":0,"docEnd":0,"docs":null,"value":"57"},{"name":"CSWeapon_KNIFE_T","docStart":0,"docEnd":0,"docs":null,"value":"59"},{"name":"CSWeapon_M4A1_SILENCER","docStart":0,"docEnd":0,"docs":null,"value":"60"},{"name":"CSWeapon_USP_SILENCER","docStart":0,"docEnd":0,"docs":null,"value":"61"},{"name":"CSWeapon_CZ75A","docStart":0,"docEnd":0,"docs":null,"value":"63"},{"name":"CSWeapon_REVOLVER","docStart":0,"docEnd":0,"docs":null,"value":"64"},{"name":"CSWeapon_TAGGRENADE","docStart":0,"docEnd":0,"docs":null,"value":"68"},{"name":"CSWeapon_FISTS","docStart":0,"docEnd":0,"docs":null,"value":"69"},{"name":"CSWeapon_BREACHCHARGE","docStart":0,"docEnd":0,"docs":null,"value":"70"},{"name":"CSWeapon_TABLET","docStart":0,"docEnd":0,"docs":null,"value":"72"},{"name":"CSWeapon_MELEE","docStart":0,"docEnd":0,"docs":null,"value":"74"},{"name":"CSWeapon_AXE","docStart":0,"docEnd":0,"docs":null,"value":"75"},{"name":"CSWeapon_HAMMER","docStart":0,"docEnd":0,"docs":null,"value":"76"},{"name":"CSWeapon_SPANNER","docStart":0,"docEnd":0,"docs":null,"value":"78"},{"name":"CSWeapon_KNIFE_GHOST","docStart":0,"docEnd":0,"docs":null,"value":"80"},{"name":"CSWeapon_FIREBOMB","docStart":0,"docEnd":0,"docs":null,"value":"81"},{"name":"CSWeapon_DIVERSION","docStart":0,"docEnd":0,"docs":null,"value":"82"},{"name":"CSWeapon_FRAGGRENADE","docStart":0,"docEnd":0,"docs":null,"value":"83"},{"name":"CSWeapon_SNOWBALL","docStart":0,"docEnd":0,"docs":null,"value":"84"},{"name":"CSWeapon_BUMPMINE","docStart":0,"docEnd":0,"docs":null,"value":"85"},{"name":"CSWeapon_MAX_WEAPONS_NO_KNIFES","docStart":5808,"docEnd":5895,"docs":{"brief":"Max without the knife item defs, useful when treating all knives as a regular knife.","tags":[{"tag":"","text":"Max without the knife item defs, useful when treating all knives as a regular knife."}]},"value":null},{"name":"CSWeapon_BAYONET","docStart":0,"docEnd":0,"docs":null,"value":"500"},{"name":"CSWeapon_KNIFE_CLASSIC","docStart":0,"docEnd":0,"docs":null,"value":"503"},{"name":"CSWeapon_KNIFE_FLIP","docStart":0,"docEnd":0,"docs":null,"value":"505"},{"name":"CSWeapon_KNIFE_GUT","docStart":0,"docEnd":0,"docs":null,"value":"506"},{"name":"CSWeapon_KNIFE_KARAMBIT","docStart":0,"docEnd":0,"docs":null,"value":"507"},{"name":"CSWeapon_KNIFE_M9_BAYONET","docStart":0,"docEnd":0,"docs":null,"value":"508"},{"name":"CSWeapon_KNIFE_TATICAL","docStart":0,"docEnd":0,"docs":null,"value":"509"},{"name":"CSWeapon_KNIFE_FALCHION","docStart":0,"docEnd":0,"docs":null,"value":"512"},{"name":"CSWeapon_KNIFE_SURVIVAL_BOWIE","docStart":0,"docEnd":0,"docs":null,"value":"514"},{"name":"CSWeapon_KNIFE_BUTTERFLY","docStart":0,"docEnd":0,"docs":null,"value":"515"},{"name":"CSWeapon_KNIFE_PUSH","docStart":0,"docEnd":0,"docs":null,"value":"516"},{"name":"CSWeapon_KNIFE_CORD","docStart":0,"docEnd":0,"docs":null,"value":"517"},{"name":"CSWeapon_KNIFE_CANIS","docStart":0,"docEnd":0,"docs":null,"value":"518"},{"name":"CSWeapon_KNIFE_URSUS","docStart":0,"docEnd":0,"docs":null,"value":"519"},{"name":"CSWeapon_KNIFE_GYPSY_JACKKNIFE","docStart":0,"docEnd":0,"docs":null,"value":"520"},{"name":"CSWeapon_KNIFE_OUTDOOR","docStart":0,"docEnd":0,"docs":null,"value":"521"},{"name":"CSWeapon_KNIFE_STILETTO","docStart":0,"docEnd":0,"docs":null,"value":"522"},{"name":"CSWeapon_KNIFE_WIDOWMAKER","docStart":0,"docEnd":0,"docs":null,"value":"523"},{"name":"CSWeapon_KNIFE_SKELETON","docStart":0,"docEnd":0,"docs":null,"value":"525"},{"name":"CSWeapon_MAX_WEAPONS","docStart":6531,"docEnd":6627,"docs":{"brief":"THIS MUST BE LAST, EASY WAY TO CREATE LOOPS. When looping, do CS_IsValidWeaponID(i), to check.","tags":[{"tag":"","text":"THIS MUST BE LAST, EASY WAY TO CREATE LOOPS. When looping, do CS_IsValidWeaponID(i), to check."}]},"value":null}]},"created":{"hash":"ee1bbd5994d2a5adc413c25abebc93fcdea0ca21","count":3325,"time":1309307575},"last_updated":{"hash":"4ea85a92919b3f1f837950684ba383d133be67c7","count":6495,"time":1581211718}},"CSRoundEndReason":{"symbol":{"name":"CSRoundEndReason","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"CSRoundEnd_TargetBombed","docStart":2473,"docEnd":2508,"docs":{"brief":"Target Successfully Bombed!","tags":[{"tag":"","text":"Target Successfully Bombed!"}]},"value":"0"},{"name":"CSRoundEnd_VIPEscaped","docStart":2550,"docEnd":2603,"docs":{"brief":"The VIP has escaped! - Doesn't exist on CS:GO","tags":[{"tag":"","text":"The VIP has escaped! - Doesn't exist on CS:GO"}]},"value":null},{"name":"CSRoundEnd_VIPKilled","docStart":2645,"docEnd":2704,"docs":{"brief":"VIP has been assassinated! - Doesn't exist on CS:GO","tags":[{"tag":"","text":"VIP has been assassinated! - Doesn't exist on CS:GO"}]},"value":null},{"name":"CSRoundEnd_TerroristsEscaped","docStart":2746,"docEnd":2782,"docs":{"brief":"The terrorists have escaped!","tags":[{"tag":"","text":"The terrorists have escaped!"}]},"value":null},{"name":"CSRoundEnd_CTStoppedEscape","docStart":2824,"docEnd":2892,"docs":{"brief":"The CTs have prevented most of the terrorists from escaping!","tags":[{"tag":"","text":"The CTs have prevented most of the terrorists from escaping!"}]},"value":null},{"name":"CSRoundEnd_TerroristsStopped","docStart":2934,"docEnd":2988,"docs":{"brief":"Escaping terrorists have all been neutralized!","tags":[{"tag":"","text":"Escaping terrorists have all been neutralized!"}]},"value":null},{"name":"CSRoundEnd_BombDefused","docStart":3030,"docEnd":3064,"docs":{"brief":"The bomb has been defused!","tags":[{"tag":"","text":"The bomb has been defused!"}]},"value":null},{"name":"CSRoundEnd_CTWin","docStart":3106,"docEnd":3137,"docs":{"brief":"Counter-Terrorists Win!","tags":[{"tag":"","text":"Counter-Terrorists Win!"}]},"value":null},{"name":"CSRoundEnd_TerroristWin","docStart":3179,"docEnd":3202,"docs":{"brief":"Terrorists Win!","tags":[{"tag":"","text":"Terrorists Win!"}]},"value":null},{"name":"CSRoundEnd_Draw","docStart":3244,"docEnd":3263,"docs":{"brief":"Round Draw!","tags":[{"tag":"","text":"Round Draw!"}]},"value":null},{"name":"CSRoundEnd_HostagesRescued","docStart":3305,"docEnd":3344,"docs":{"brief":"All Hostages have been rescued!","tags":[{"tag":"","text":"All Hostages have been rescued!"}]},"value":null},{"name":"CSRoundEnd_TargetSaved","docStart":3386,"docEnd":3416,"docs":{"brief":"Target has been saved!","tags":[{"tag":"","text":"Target has been saved!"}]},"value":null},{"name":"CSRoundEnd_HostagesNotRescued","docStart":3458,"docEnd":3497,"docs":{"brief":"Hostages have not been rescued!","tags":[{"tag":"","text":"Hostages have not been rescued!"}]},"value":null},{"name":"CSRoundEnd_TerroristsNotEscaped","docStart":3539,"docEnd":3575,"docs":{"brief":"Terrorists have not escaped!","tags":[{"tag":"","text":"Terrorists have not escaped!"}]},"value":null},{"name":"CSRoundEnd_VIPNotEscaped","docStart":3617,"docEnd":3670,"docs":{"brief":"VIP has not escaped! - Doesn't exist on CS:GO","tags":[{"tag":"","text":"VIP has not escaped! - Doesn't exist on CS:GO"}]},"value":null},{"name":"CSRoundEnd_GameStart","docStart":3712,"docEnd":3736,"docs":{"brief":"Game Commencing!","tags":[{"tag":"","text":"Game Commencing!"}]},"value":null},{"name":"CSRoundEnd_TerroristsSurrender","docStart":3742,"docEnd":3774,"docs":{"brief":"The below only exist on CS:GO","tags":[{"tag":"","text":"The below only exist on CS:GO"}]},"value":null},{"name":"CSRoundEnd_CTSurrender","docStart":3886,"docEnd":3907,"docs":{"brief":"CTs Surrender","tags":[{"tag":"","text":"CTs Surrender"}]},"value":null},{"name":"CSRoundEnd_TerroristsPlanted","docStart":3949,"docEnd":3984,"docs":{"brief":"Terrorists Planted the bomb","tags":[{"tag":"","text":"Terrorists Planted the bomb"}]},"value":null},{"name":"CSRoundEnd_CTsReachedHostage","docStart":4026,"docEnd":4057,"docs":{"brief":"CTs Reached the hostage","tags":[{"tag":"","text":"CTs Reached the hostage"}]},"value":null}]},"created":{"hash":"e0f670499ccf4547ac1822da93636108b0753a90","count":3314,"time":1309076742},"last_updated":{"hash":"23e1c0b71ec847b0d18984f22fdea55c60e92066","count":6465,"time":1572870977}}},"typesets":{},"typedefs":{}},"sdktools_hooks":{"functions":{"OnPlayerRunCmdPost":{"symbol":{"name":"OnPlayerRunCmdPost","docStart":3081,"docEnd":3955,"docs":{"brief":"Called after a clients movement buttons were processed.","tags":[{"tag":"","text":"Called after a clients movement buttons were processed."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:buttons","text":"The current commands (as bitflags - see entity_prop_stocks.inc)."},{"tag":"param:impulse","text":"The current impulse command."},{"tag":"param:vel","text":"Players desired velocity."},{"tag":"param:angles","text":"Players desired view angles."},{"tag":"param:weapon","text":"Entity index of the new weapon if player switches weapon, 0 otherwise."},{"tag":"param:subtype","text":"Weapon subtype when selected from a menu."},{"tag":"param:cmdnum","text":"Command number. Increments from the first command sent."},{"tag":"param:tickcount","text":"Tick count. A client's prediction based on the server's GetGameTickCount value."},{"tag":"param:seed","text":"Random seed. Used to determine weapon recoil, spread, and other predicted elements."},{"tag":"param:mouse","text":"Mouse direction (x, y)."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"buttons","decl":"int buttons","default":null},{"type":"int","name":"impulse","decl":"int impulse","default":null},{"type":"const float[3]","name":"vel","decl":"const float vel[3]","default":null},{"type":"const float[3]","name":"angles","decl":"const float angles[3]","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"int","name":"subtype","decl":"int subtype","default":null},{"type":"int","name":"cmdnum","decl":"int cmdnum","default":null},{"type":"int","name":"tickcount","decl":"int tickcount","default":null},{"type":"int","name":"seed","decl":"int seed","default":null},{"type":"const int[2]","name":"mouse","decl":"const int mouse[2]","default":null}]},"created":{"hash":"1351df42608f62e8f6b08bbc37906e98d870c3f0","count":6087,"time":1494339365},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnPlayerRunCmd":{"symbol":{"name":"OnPlayerRunCmd","docStart":1733,"docEnd":2893,"docs":{"brief":"Called when a clients movement buttons are being processed","tags":[{"tag":"","text":"Called when a clients movement buttons are being processed"},{"tag":"param:client","text":"Index of the client."},{"tag":"param:buttons","text":"Copyback buffer containing the current commands (as bitflags - see entity_prop_stocks.inc)."},{"tag":"param:impulse","text":"Copyback buffer containing the current impulse command."},{"tag":"param:vel","text":"Players desired velocity."},{"tag":"param:angles","text":"Players desired view angles."},{"tag":"param:weapon","text":"Entity index of the new weapon if player switches weapon, 0 otherwise."},{"tag":"param:subtype","text":"Weapon subtype when selected from a menu."},{"tag":"param:cmdnum","text":"Command number. Increments from the first command sent."},{"tag":"param:tickcount","text":"Tick count. A client's prediction based on the server's GetGameTickCount value."},{"tag":"param:seed","text":"Random seed. Used to determine weapon recoil, spread, and other predicted elements."},{"tag":"param:mouse","text":"Mouse direction (x, y)."},{"tag":"return","text":"Plugin_Handled to block the commands from being processed, Plugin_Continue otherwise."},{"tag":"note","text":"To see if all 11 params are available, use FeatureType_Capability and FEATURECAP_PLAYERRUNCMD_11PARAMS."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int&","name":"buttons","decl":"int& buttons","default":null},{"type":"int&","name":"impulse","decl":"int& impulse","default":null},{"type":"float[3]","name":"vel","decl":"float vel[3]","default":null},{"type":"float[3]","name":"angles","decl":"float angles[3]","default":null},{"type":"int&","name":"weapon","decl":"int& weapon","default":null},{"type":"int&","name":"subtype","decl":"int& subtype","default":null},{"type":"int&","name":"cmdnum","decl":"int& cmdnum","default":null},{"type":"int&","name":"tickcount","decl":"int& tickcount","default":null},{"type":"int&","name":"seed","decl":"int& seed","default":null},{"type":"int[2]","name":"mouse","decl":"int mouse[2]","default":null}]},"created":{"hash":"7b6f2863a94a415e31fd833101f42d70536f8b3f","count":2712,"time":1242093246},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnFileSend":{"symbol":{"name":"OnFileSend","docStart":4156,"docEnd":4413,"docs":{"brief":"Called when a client requests a file from the server.","tags":[{"tag":"","text":"Called when a client requests a file from the server."},{"tag":"param:client","text":"Client index."},{"tag":"param:sFile","text":"Requested file path."},{"tag":"return","text":"Plugin_Handled to block the transfer, Plugin_Continue to let it proceed."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"sFile","decl":"const char[] sFile","default":null}]},"created":{"hash":"274e7bd32923ad1d55979d1c9d09590da276dbc4","count":5630,"time":1442088093},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnFileReceive":{"symbol":{"name":"OnFileReceive","docStart":4477,"docEnd":4729,"docs":{"brief":"Called when a client sends a file to the server.","tags":[{"tag":"","text":"Called when a client sends a file to the server."},{"tag":"param:client","text":"Client index."},{"tag":"param:sFile","text":"Requested file path."},{"tag":"return","text":"Plugin_Handled to block the transfer, Plugin_Continue to let it proceed."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"sFile","decl":"const char[] sFile","default":null}]},"created":{"hash":"274e7bd32923ad1d55979d1c9d09590da276dbc4","count":5630,"time":1442088093},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_hooks_included":{"symbol":{"name":"_sdktools_hooks_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"7b6f2863a94a415e31fd833101f42d70536f8b3f","count":2712,"time":1242093246},"last_updated":{"hash":"7b6f2863a94a415e31fd833101f42d70536f8b3f","count":2712,"time":1242093246}},"FEATURECAP_PLAYERRUNCMD_11PARAMS":{"symbol":{"name":"FEATURECAP_PLAYERRUNCMD_11PARAMS","docStart":0,"docEnd":0,"docs":null,"value":"\"SDKTools PlayerRunCmd 11Params\""},"created":{"hash":"74f49ec38f321e2b12d30b9e20deea8ff815b3a8","count":3621,"time":1345524166},"last_updated":{"hash":"74f49ec38f321e2b12d30b9e20deea8ff815b3a8","count":3621,"time":1345524166}}},"enums":{},"typesets":{},"typedefs":{}},"helpers":{"functions":{"OnBanAdded":{"symbol":{"name":"OnBanAdded","docStart":2091,"docEnd":2474,"docs":{"brief":"Provided by basecommands.sp when sm_addban or sm_banip is called.","tags":[{"tag":"","text":"Provided by basecommands.sp when sm_addban or sm_banip is called."},{"tag":"param:admin","text":"Admin client index (0 for server)."},{"tag":"param:info","text":"User info (either steamid or ip)."},{"tag":"param:time","text":"Minutes banned for (0 is permanent)."},{"tag":"param:reason","text":"Ban reason (may be empty if none exists)."},{"tag":"return","text":"Pl_Handled to block output, Pl_Stop to block output and action."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"admin","decl":"int admin","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null}]},"created":{"hash":"706b28cb6456b95f5d512f893cb5608f41697e43","count":928,"time":1181279509},"last_updated":{"hash":"a1009aed3875b2c7fc250e9b1dcde60a42ab6b2a","count":1331,"time":1187158770}},"FormatUserLogText":{"symbol":{"name":"FormatUserLogText","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"57c1f0dd4d3dbf0952591eece4a089ad8069cc36","count":461,"time":1170996063},"last_updated":{"hash":"beaf81290919512fb08176a44c1084f74ed25dc4","count":6321,"time":1533089958}},"SearchForClients":{"symbol":{"name":"SearchForClients","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"maxClients","decl":"int maxClients","default":null}]},"created":{"hash":"877b604ce9afda33c5f2fbb97077f79be9d19478","count":903,"time":1181187944},"last_updated":{"hash":"b4896ecada9bc087330a58b166ddf84c0e3c23c7","count":1628,"time":1193021667}},"OnBanRemoved":{"symbol":{"name":"OnBanRemoved","docStart":2563,"docEnd":2832,"docs":{"brief":"Provided by basecommands.sp when sm_unban or sm_unbanip is called.","tags":[{"tag":"","text":"Provided by basecommands.sp when sm_unban or sm_unbanip is called."},{"tag":"param:admin","text":"Admin client index (0 for server)."},{"tag":"param:info","text":"User info (either steamid or ip)."},{"tag":"return","text":"Pl_Handled to block output, Pl_Stop to block output and action."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"admin","decl":"int admin","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null}]},"created":{"hash":"706b28cb6456b95f5d512f893cb5608f41697e43","count":928,"time":1181279509},"last_updated":{"hash":"a1009aed3875b2c7fc250e9b1dcde60a42ab6b2a","count":1331,"time":1187158770}},"FindTarget":{"symbol":{"name":"FindTarget","docStart":3877,"docEnd":4532,"docs":{"brief":"Wraps ProcessTargetString() and handles producing error messages for\nbad targets.\n\nNote that you should use LoadTranslations(\"common.phrases\") in OnPluginStart().\n\"common.phrases\" contains all of the translatable phrases that FindTarget() will\nreply with in the event a target is not found (error).","tags":[{"tag":"","text":"Wraps ProcessTargetString() and handles producing error messages for\nbad targets.\n\nNote that you should use LoadTranslations(\"common.phrases\") in OnPluginStart().\n\"common.phrases\" contains all of the translatable phrases that FindTarget() will\nreply with in the event a target is not found (error)."},{"tag":"param:client","text":"Client who issued command"},{"tag":"param:target","text":"Client's target argument"},{"tag":"param:nobots","text":"Optional. Set to true if bots should NOT be targetted"},{"tag":"param:immunity","text":"Optional. Set to false to ignore target immunity."},{"tag":"return","text":"Index of target client, or -1 on error."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"target","decl":"const char[] target","default":null},{"type":"bool","name":"nobots","decl":"bool nobots","default":"false"},{"type":"bool","name":"immunity","decl":"bool immunity","default":"true"}]},"created":{"hash":"9ddf5504ff9ea6daa2b8b118b22844df7cedc86b","count":1178,"time":1185492718},"last_updated":{"hash":"9f4c6c61d9c895ca9f8b976e9194ee6773a8da45","count":6486,"time":1579042827}},"LoadMaps":{"symbol":{"name":"LoadMaps","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int&","name":"fileTime","decl":"int& fileTime","default":"0"},{"type":"Handle","name":"fileCvar","decl":"Handle fileCvar","default":"INVALID_HANDLE"}]},"created":{"hash":"bd58aa930b3a3400fc654002c4b6504fbc92af96","count":1607,"time":1192670202},"last_updated":{"hash":"63cb644232268b302efc996974c4a798f8582580","count":1890,"time":1203714068}},"FindPluginByFile":{"symbol":{"name":"FindPluginByFile","docStart":2147,"docEnd":2348,"docs":{"brief":"Returns plugin handle from plugin filename.","tags":[{"tag":"","text":"Returns plugin handle from plugin filename."},{"tag":"param:filename","text":"Filename of the plugin to search for."},{"tag":"return","text":"Handle to plugin if found, INVALID_HANDLE otherwise."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"filename","decl":"const char[] filename","default":null}]},"created":{"hash":"5fa53bfc682035f472fd7f790b0d5c76033c8485","count":622,"time":1174028064},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnClientBanned":{"symbol":{"name":"OnClientBanned","docStart":1641,"docEnd":2011,"docs":{"brief":"Provided by basecommands.sp when sm_ban is called.","tags":[{"tag":"","text":"Provided by basecommands.sp when sm_ban is called."},{"tag":"param:admin","text":"Admin client index (0 for server)."},{"tag":"param:client","text":"Client index which will be banned."},{"tag":"param:time","text":"Minutes banned for (0 is permanent)."},{"tag":"param:reason","text":"Ban reason (may be empty if none exists)."},{"tag":"return","text":"Pl_Handled to block output, Pl_Stop to block output and action."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"admin","decl":"int admin","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null}]},"created":{"hash":"48830e2c16d90adace9e01fa9c55408f6c6ea966","count":927,"time":1181277640},"last_updated":{"hash":"a1009aed3875b2c7fc250e9b1dcde60a42ab6b2a","count":1331,"time":1187158770}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_helpers_included":{"symbol":{"name":"_helpers_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"57c1f0dd4d3dbf0952591eece4a089ad8069cc36","count":461,"time":1170996063},"last_updated":{"hash":"57c1f0dd4d3dbf0952591eece4a089ad8069cc36","count":461,"time":1170996063}}},"enums":{},"typesets":{},"typedefs":{}},"admin":{"functions":{"FlagBitsToArray":{"symbol":{"name":"FlagBitsToArray","docStart":24771,"docEnd":25050,"docs":{"brief":"Converts a bit string to an array of flags.","tags":[{"tag":"","text":"Converts a bit string to an array of flags."},{"tag":"param:bits","text":"Bit string containing the flags."},{"tag":"param:array","text":"Output array to write flags."},{"tag":"param:maxSize","text":"Maximum size of the flag array."},{"tag":"return","text":"Number of flags written."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"bits","decl":"int bits","default":null},{"type":"AdminFlag[]","name":"array","decl":"AdminFlag[] array","default":null},{"type":"int","name":"maxSize","decl":"int maxSize","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OnRebuildAdminCache":{"symbol":{"name":"OnRebuildAdminCache","docStart":13337,"docEnd":13465,"docs":{"brief":"Called when part of the cache needs to be rebuilt.","tags":[{"tag":"","text":"Called when part of the cache needs to be rebuilt."},{"tag":"param:part","text":"Part of the admin cache to rebuild."}]},"kind":"forward","returnType":"void","arguments":[{"type":"AdminCachePart","name":"part","decl":"AdminCachePart part","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AdminInheritGroup":{"symbol":{"name":"AdminInheritGroup","docStart":21136,"docEnd":21472,"docs":{"brief":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags.","tags":[{"tag":"","text":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:gid","text":"GroupId index of the group."},{"tag":"return","text":"True on success, false on invalid input or duplicate membership."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"GroupId","name":"gid","decl":"GroupId gid","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupImmunityLevel":{"symbol":{"name":"GetAdmGroupImmunityLevel","docStart":27802,"docEnd":27947,"docs":{"brief":"Gets a group's immunity level (defaults to 0).","tags":[{"tag":"","text":"Gets a group's immunity level (defaults to 0)."},{"tag":"param:gid","text":"Group Id."},{"tag":"return","text":"Immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"gid","decl":"GroupId gid","default":null}]},"created":{"hash":"6aec628ab02b198e2b45b06c6b9377f88e9166c2","count":1404,"time":1189467538},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminGroup":{"symbol":{"name":"GetAdminGroup","docStart":21775,"docEnd":22353,"docs":{"brief":"Returns group information from an admin.","tags":[{"tag":"","text":"Returns group information from an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:index","text":"Group number to retrieve, from 0 to N-1, where N\nis the value of GetAdminGroupCount(id)."},{"tag":"param:name","text":"Buffer to store the group's name.\nNote: This will safely chop UTF-8 strings."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer."},{"tag":"return","text":"A GroupId index and a name pointer, or\nINVALID_GROUP_ID and NULL if an error occurred."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindAdminByIdentity":{"symbol":{"name":"FindAdminByIdentity","docStart":23122,"docEnd":23377,"docs":{"brief":"Attempts to find an admin by an auth method and an identity.","tags":[{"tag":"","text":"Attempts to find an admin by an auth method and an identity."},{"tag":"param:auth","text":"Auth method to try."},{"tag":"param:identity","text":"Identity string to look up."},{"tag":"return","text":"An AdminId index if found, INVALID_ADMIN_ID otherwise."}]},"kind":"native","returnType":"AdminId","arguments":[{"type":"const char[]","name":"auth","decl":"const char[] auth","default":null},{"type":"const char[]","name":"identity","decl":"const char[] identity","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BitToFlag":{"symbol":{"name":"BitToFlag","docStart":28659,"docEnd":28872,"docs":{"brief":"Converts a bit to an AdminFlag.","tags":[{"tag":"","text":"Converts a bit to an AdminFlag."},{"tag":"param:bit","text":"Bit to convert."},{"tag":"param:flag","text":"Stores the converted flag by reference."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"bit","decl":"int bit","default":null},{"type":"AdminFlag&","name":"flag","decl":"AdminFlag& flag","default":null}]},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetAdminImmunityLevel":{"symbol":{"name":"SetAdminImmunityLevel","docStart":28002,"docEnd":28183,"docs":{"brief":"Sets an admin's immunity level.","tags":[{"tag":"","text":"Sets an admin's immunity level."},{"tag":"param:id","text":"Admin Id."},{"tag":"param:level","text":"Immunity level value."},{"tag":"return","text":"Old immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"int","name":"level","decl":"int level","default":null}]},"created":{"hash":"6aec628ab02b198e2b45b06c6b9377f88e9166c2","count":1404,"time":1189467538},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminGroupCount":{"symbol":{"name":"GetAdminGroupCount","docStart":21533,"docEnd":21727,"docs":{"brief":"Returns the number of groups this admin is a member of.","tags":[{"tag":"","text":"Returns the number of groups this admin is a member of."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"return","text":"Number of groups this admin is a member of."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"DumpAdminCache":{"symbol":{"name":"DumpAdminCache","docStart":13525,"docEnd":13752,"docs":{"brief":"Tells the admin system to dump a portion of the cache.","tags":[{"tag":"","text":"Tells the admin system to dump a portion of the cache."},{"tag":"param:part","text":"Part of the cache to dump.  Specifying groups also dumps admins."},{"tag":"param:rebuild","text":"If true, the rebuild forwards will fire."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminCachePart","name":"part","decl":"AdminCachePart part","default":null},{"type":"bool","name":"rebuild","decl":"bool rebuild","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CanAdminTarget":{"symbol":{"name":"CanAdminTarget","docStart":26287,"docEnd":27200,"docs":{"brief":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds.","tags":[{"tag":"","text":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds."},{"tag":"param:admin","text":"Admin doing the targetting (may be INVALID_ADMIN_ID)."},{"tag":"param:target","text":"Target admin (may be INVALID_ADMIN_ID)."},{"tag":"return","text":"True if targetable, false if immune."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"admin","decl":"AdminId admin","default":null},{"type":"AdminId","name":"target","decl":"AdminId target","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetAdminFlag":{"symbol":{"name":"SetAdminFlag","docStart":20170,"docEnd":20393,"docs":{"brief":"Sets whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Sets whether or not a flag is enabled on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:enabled","text":"True to enable, false to disable."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminPassword":{"symbol":{"name":"GetAdminPassword","docStart":22664,"docEnd":23040,"docs":{"brief":"Gets an admin's password.","tags":[{"tag":"","text":"Gets an admin's password."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:buffer","text":"Optional buffer to store the admin's password."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer.\nNote: This will safely chop UTF-8 strings."},{"tag":"return","text":"True if there was a password set, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":"\"\""},{"type":"int","name":"maxlength","decl":"int maxlength","default":"0"}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddAdmGroupCmdOverride":{"symbol":{"name":"AddAdmGroupCmdOverride","docStart":17622,"docEnd":17906,"docs":{"brief":"Adds a group-specific override type.","tags":[{"tag":"","text":"Adds a group-specific override type."},{"tag":"param:id","text":"Group id."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Override allow/deny setting."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null},{"type":"OverrideRule","name":"rule","decl":"OverrideRule rule","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminFlag":{"symbol":{"name":"GetAdminFlag","docStart":20466,"docEnd":20739,"docs":{"brief":"Returns whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Returns whether or not a flag is enabled on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:mode","text":"Access mode to check."},{"tag":"return","text":"True if enabled, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode","default":"Access_Effective"}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetAdmGroupAddFlag":{"symbol":{"name":"SetAdmGroupAddFlag","docStart":15426,"docEnd":15718,"docs":{"brief":"Adds or removes a flag from a group's flag set.","tags":[{"tag":"","text":"Adds or removes a flag from a group's flag set."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"Group id."},{"tag":"param:flag","text":"Admin flag to toggle."},{"tag":"param:enabled","text":"True to set the flag, false to unset/disable."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupAddFlag":{"symbol":{"name":"GetAdmGroupAddFlag","docStart":15797,"docEnd":16088,"docs":{"brief":"Gets the set value of an add flag on a group's flag set.","tags":[{"tag":"","text":"Gets the set value of an add flag on a group's flag set."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"Group id."},{"tag":"param:flag","text":"Admin flag to retrieve."},{"tag":"return","text":"True if enabled, false otherwise,"}]},"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RegisterAuthIdentType":{"symbol":{"name":"RegisterAuthIdentType","docStart":18506,"docEnd":18712,"docs":{"brief":"Registers an authentication identity type.  You normally never need to call this except for\nvery specific systems.","tags":[{"tag":"","text":"Registers an authentication identity type.  You normally never need to call this except for\nvery specific systems."},{"tag":"param:name","text":"Codename to use for your authentication type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupCmdOverride":{"symbol":{"name":"GetAdmGroupCmdOverride","docStart":18016,"docEnd":18395,"docs":{"brief":"Retrieves a group-specific command override.","tags":[{"tag":"","text":"Retrieves a group-specific command override."},{"tag":"param:id","text":"Group id."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Optional pointer to store allow/deny setting."},{"tag":"return","text":"True if an override exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null},{"type":"OverrideRule&","name":"rule","decl":"OverrideRule& rule","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AddCommandOverride":{"symbol":{"name":"AddCommandOverride","docStart":13820,"docEnd":14165,"docs":{"brief":"Adds a global command flag override.  Any command registered with this name\nwill assume the new flag.  This is applied retroactively as well.","tags":[{"tag":"","text":"Adds a global command flag override.  Any command registered with this name\nwill assume the new flag.  This is applied retroactively as well."},{"tag":"param:cmd","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:flags","text":"New admin flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetAdminPassword":{"symbol":{"name":"SetAdminPassword","docStart":22439,"docEnd":22594,"docs":{"brief":"Sets a password on an admin.","tags":[{"tag":"","text":"Sets a password on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:password","text":"String containing the password."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"const char[]","name":"password","decl":"const char[] password","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupImmuneFrom":{"symbol":{"name":"GetAdmGroupImmuneFrom","docStart":17271,"docEnd":17555,"docs":{"brief":"Returns a group that this group is immune to given an index.","tags":[{"tag":"","text":"Returns a group that this group is immune to given an index."},{"tag":"param:id","text":"Group id."},{"tag":"param:number","text":"Index from 0 to N-1, from GetAdmGroupImmuneCount()."},{"tag":"return","text":"GroupId that this group is immune to, or INVALID_GROUP_ID on failure."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"int","name":"number","decl":"int number","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetAdmGroupImmunityLevel":{"symbol":{"name":"SetAdmGroupImmunityLevel","docStart":27556,"docEnd":27736,"docs":{"brief":"Sets a group's immunity level.","tags":[{"tag":"","text":"Sets a group's immunity level."},{"tag":"param:gid","text":"Group Id."},{"tag":"param:level","text":"Immunity level value."},{"tag":"return","text":"Old immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"gid","decl":"GroupId gid","default":null},{"type":"int","name":"level","decl":"int level","default":null}]},"created":{"hash":"6aec628ab02b198e2b45b06c6b9377f88e9166c2","count":1404,"time":1189467538},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindFlagChar":{"symbol":{"name":"FindFlagChar","docStart":25698,"docEnd":25916,"docs":{"brief":"Finds the flag char for a given admin flag.","tags":[{"tag":"","text":"Finds the flag char for a given admin flag."},{"tag":"param:flag","text":"Flag to look up."},{"tag":"param:c","text":"Variable to store flag char."},{"tag":"return","text":"True on success, false if not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"int&","name":"c","decl":"int& c","default":null}]},"created":{"hash":"5d5400a9ac16359fe32e86fe53a5217d97bcb9e3","count":3056,"time":1277680645},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupImmuneCount":{"symbol":{"name":"GetAdmGroupImmuneCount","docStart":17066,"docEnd":17219,"docs":{"brief":"Returns the number of specific group immunities.","tags":[{"tag":"","text":"Returns the number of specific group immunities."},{"tag":"param:id","text":"Group id."},{"tag":"return","text":"Number of group immunities."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupAddFlags":{"symbol":{"name":"GetAdmGroupAddFlags","docStart":16153,"docEnd":16419,"docs":{"brief":"Returns the flag set that is added to a user from their group.","tags":[{"tag":"","text":"Returns the flag set that is added to a user from their group."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"GroupId of the group."},{"tag":"return","text":"Bitstring containing the flags enabled."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null}]},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ReadFlagString":{"symbol":{"name":"ReadFlagString","docStart":25971,"docEnd":26218,"docs":{"brief":"Converts a string of flag characters to a bit string.","tags":[{"tag":"","text":"Converts a string of flag characters to a bit string."},{"tag":"param:flags","text":"Flag ASCII string."},{"tag":"param:numchars","text":"Optional variable to store the number of bytes read."},{"tag":"return","text":"Bit string of ADMFLAG values."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"flags","decl":"const char[] flags","default":null},{"type":"int&","name":"numchars","decl":"int& numchars","default":"0"}]},"created":{"hash":"2a8d9a7aee036379e6e8dceb4eb7e83ecc30926c","count":1299,"time":1186721610},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindAdmGroup":{"symbol":{"name":"FindAdmGroup","docStart":15198,"docEnd":15367,"docs":{"brief":"Finds a group by name.","tags":[{"tag":"","text":"Finds a group by name."},{"tag":"param:group_name","text":"String containing the group name."},{"tag":"return","text":"A group id, or INVALID_GROUP_ID if not found."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"const char[]","name":"group_name","decl":"const char[] group_name","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminFlags":{"symbol":{"name":"GetAdminFlags","docStart":20835,"docEnd":21073,"docs":{"brief":"Returns the bitstring of access flags on an admin.","tags":[{"tag":"","text":"Returns the bitstring of access flags on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:mode","text":"Access mode to use."},{"tag":"return","text":"A bitstring containing which flags are enabled."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetAdmGroupImmunity":{"symbol":{"name":"SetAdmGroupImmunity","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"ImmunityType","name":"type","decl":"ImmunityType type","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"c2d37cdff5be0127f390ff7b1d4c27d616ef499f","count":5231,"time":1424186396}},"SetAdmGroupImmuneFrom":{"symbol":{"name":"SetAdmGroupImmuneFrom","docStart":16852,"docEnd":16996,"docs":{"brief":"Adds immunity to a specific group.","tags":[{"tag":"","text":"Adds immunity to a specific group."},{"tag":"param:id","text":"Group id."},{"tag":"param:other_id","text":"Group id to receive immunity to."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"GroupId","name":"other_id","decl":"GroupId other_id","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminImmunityLevel":{"symbol":{"name":"GetAdminImmunityLevel","docStart":28245,"docEnd":28375,"docs":{"brief":"Gets an admin's immunity level.","tags":[{"tag":"","text":"Gets an admin's immunity level."},{"tag":"param:id","text":"Admin Id."},{"tag":"return","text":"Immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null}]},"created":{"hash":"6aec628ab02b198e2b45b06c6b9377f88e9166c2","count":1404,"time":1189467538},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveAdmin":{"symbol":{"name":"RemoveAdmin","docStart":23460,"docEnd":23699,"docs":{"brief":"Removes an admin entry from the cache.","tags":[{"tag":"","text":"Removes an admin entry from the cache."},{"tag":"note","text":"This will remove any bindings to a specific user."},{"tag":"param:id","text":"AdminId index to remove/invalidate."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BindAdminIdentity":{"symbol":{"name":"BindAdminIdentity","docStart":19608,"docEnd":20083,"docs":{"brief":"Binds an admin to an identity for fast lookup later on.  The bind must be unique.","tags":[{"tag":"","text":"Binds an admin to an identity for fast lookup later on.  The bind must be unique."},{"tag":"param:id","text":"AdminId of the admin."},{"tag":"param:auth","text":"Auth method to use, predefined or from RegisterAuthIdentType()."},{"tag":"param:ident","text":"String containing the arbitrary, unique identity."},{"tag":"return","text":"True on success, false if the auth method was not found,\nident was already taken, or ident invalid for auth method."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"const char[]","name":"auth","decl":"const char[] auth","default":null},{"type":"const char[]","name":"ident","decl":"const char[] ident","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindFlagByName":{"symbol":{"name":"FindFlagByName","docStart":25125,"docEnd":25354,"docs":{"brief":"Finds a flag by its string name.","tags":[{"tag":"","text":"Finds a flag by its string name."},{"tag":"param:name","text":"Flag name (like \"kick\"), case sensitive."},{"tag":"param:flag","text":"Variable to store flag in."},{"tag":"return","text":"True on success, false if not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"AdminFlag&","name":"flag","decl":"AdminFlag& flag","default":null}]},"created":{"hash":"2a8d9a7aee036379e6e8dceb4eb7e83ecc30926c","count":1299,"time":1186721610},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateAuthMethod":{"symbol":{"name":"CreateAuthMethod","docStart":27264,"docEnd":27500,"docs":{"brief":"Creates an admin auth method.  This does not need to be called more than once\nper method, ever.","tags":[{"tag":"","text":"Creates an admin auth method.  This does not need to be called more than once\nper method, ever."},{"tag":"param:method","text":"Name of the authentication method."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"method","decl":"const char[] method","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindFlagByChar":{"symbol":{"name":"FindFlagByChar","docStart":25423,"docEnd":25641,"docs":{"brief":"Finds a flag by a given character.","tags":[{"tag":"","text":"Finds a flag by a given character."},{"tag":"param:c","text":"Flag ASCII character/token."},{"tag":"param:flag","text":"Variable to store flag in."},{"tag":"return","text":"True on success, false if not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"c","decl":"int c","default":null},{"type":"AdminFlag&","name":"flag","decl":"AdminFlag& flag","default":null}]},"created":{"hash":"2a8d9a7aee036379e6e8dceb4eb7e83ecc30926c","count":1299,"time":1186721610},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FlagArrayToBits":{"symbol":{"name":"FlagArrayToBits","docStart":24459,"docEnd":24699,"docs":{"brief":"Converts an array of flags to bits.","tags":[{"tag":"","text":"Converts an array of flags to bits."},{"tag":"param:array","text":"Array containing flags that are enabled."},{"tag":"param:numFlags","text":"Number of flags in the array."},{"tag":"return","text":"A bit string composed of the array flags."}]},"kind":"native","returnType":"int","arguments":[{"type":"const AdminFlag[]","name":"array","decl":"const AdminFlag[] array","default":null},{"type":"int","name":"numFlags","decl":"int numFlags","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"UnsetCommandOverride":{"symbol":{"name":"UnsetCommandOverride","docStart":14681,"docEnd":14866,"docs":{"brief":"Unsets a command override.","tags":[{"tag":"","text":"Unsets a command override."},{"tag":"param:cmd","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FlagBitArrayToBits":{"symbol":{"name":"FlagBitArrayToBits","docStart":24136,"docEnd":24390,"docs":{"brief":"Converts a flag array to a bit string.","tags":[{"tag":"","text":"Converts a flag array to a bit string."},{"tag":"param:array","text":"Array containing true or false for each AdminFlag."},{"tag":"param:maxSize","text":"Maximum size of the flag array."},{"tag":"return","text":"A bit string composed of the array bits."}]},"kind":"native","returnType":"int","arguments":[{"type":"const bool[]","name":"array","decl":"const bool[] array","default":null},{"type":"int","name":"maxSize","decl":"int maxSize","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdminUsername":{"symbol":{"name":"GetAdminUsername","docStart":19162,"docEnd":19534,"docs":{"brief":"Retrieves an admin's user name as made with CreateAdmin().","tags":[{"tag":"","text":"Retrieves an admin's user name as made with CreateAdmin()."},{"tag":"note","text":"This function can return UTF-8 strings, and will safely chop UTF-8 strings."},{"tag":"param:id","text":"AdminId of the admin."},{"tag":"param:name","text":"String buffer to store name."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"return","text":"Number of bytes written."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupAddFlagBits":{"symbol":{"name":"GetAdmGroupAddFlagBits","docStart":4832,"docEnd":5233,"docs":{"brief":"Returns the flag set that is added to a user from their group.","tags":[{"tag":"","text":"Returns the flag set that is added to a user from their group."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"GroupId of the group."},{"tag":"param:flags","text":"Array to store flags in."},{"tag":"param:total","text":"Total number of flags that can be stored in the array (AdminFlags_TOTAL, usually)."},{"tag":"return","text":"Number of flags that were written to the array."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"bool[]","name":"flags","decl":"bool[] flags","default":null},{"type":"int","name":"total","decl":"int total","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"bf145be82655fe0463f351df04f2def3fe40ce88","count":422,"time":1170139414}},"GetCommandOverride":{"symbol":{"name":"GetCommandOverride","docStart":14250,"docEnd":14595,"docs":{"brief":"Returns a command override.","tags":[{"tag":"","text":"Returns a command override."},{"tag":"param:cmd","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:flags","text":"By-reference cell to store the flag (undefined if not found)."},{"tag":"return","text":"True if there is an override, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FlagToBit":{"symbol":{"name":"FlagToBit","docStart":28426,"docEnd":28576,"docs":{"brief":"Converts a flag to its single bit.","tags":[{"tag":"","text":"Converts a flag to its single bit."},{"tag":"param:flag","text":"Flag to convert."},{"tag":"return","text":"Bit representation of the flag."}]},"kind":"stock","returnType":"int","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null}]},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateAdmin":{"symbol":{"name":"CreateAdmin","docStart":18771,"docEnd":19107,"docs":{"brief":"Creates a new admin entry in the permissions cache and returns the generated AdminId index.","tags":[{"tag":"","text":"Creates a new admin entry in the permissions cache and returns the generated AdminId index."},{"tag":"param:name","text":"Name for this entry (does not have to be unique).\nSpecify an empty string for an anonymous admin."},{"tag":"return","text":"New AdminId index or INVALID_ADMIN_ID if name is empty"}]},"kind":"native","returnType":"AdminId","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":"\"\""}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FlagBitsToBitArray":{"symbol":{"name":"FlagBitsToBitArray","docStart":23741,"docEnd":24063,"docs":{"brief":"Converts a flag bit string to a bit array.","tags":[{"tag":"","text":"Converts a flag bit string to a bit array."},{"tag":"param:bits","text":"Bit string containing the flags."},{"tag":"param:array","text":"Array to write the flags to.  Enabled flags will be 'true'."},{"tag":"param:maxSize","text":"Maximum number of flags the array can store."},{"tag":"return","text":"Number of flags written."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"bits","decl":"int bits","default":null},{"type":"bool[]","name":"array","decl":"bool[] array","default":null},{"type":"int","name":"maxSize","decl":"int maxSize","default":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateAdmGroup":{"symbol":{"name":"CreateAdmGroup","docStart":14942,"docEnd":15137,"docs":{"brief":"Adds a new group.  Name must be unique.","tags":[{"tag":"","text":"Adds a new group.  Name must be unique."},{"tag":"param:group_name","text":"String containing the group name."},{"tag":"return","text":"A new group id, INVALID_GROUP_ID if it already exists."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"const char[]","name":"group_name","decl":"const char[] group_name","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetAdmGroupImmunity":{"symbol":{"name":"GetAdmGroupImmunity","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id","default":null},{"type":"ImmunityType","name":"type","decl":"ImmunityType type","default":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"6aec628ab02b198e2b45b06c6b9377f88e9166c2","count":1404,"time":1189467538}}},"methodmaps":{"AdminId":{"symbol":{"name":"AdminId","docStart":0,"docEnd":0,"docs":null,"parent":null,"methods":[{"name":"GetUsername","docStart":6900,"docEnd":7221,"docs":{"brief":"Retrieves an admin's user name as made with CreateAdmin().","tags":[{"tag":"","text":"Retrieves an admin's user name as made with CreateAdmin()."},{"tag":"note","text":"This function can return UTF-8 strings, and will safely chop UTF-8 strings."},{"tag":"param:name","text":"String buffer to store name."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"return","text":"Number of bytes written."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"BindIdentity","docStart":7288,"docEnd":7711,"docs":{"brief":"Binds an admin to an identity for fast lookup later on.  The bind must be unique.","tags":[{"tag":"","text":"Binds an admin to an identity for fast lookup later on.  The bind must be unique."},{"tag":"param:authMethod","text":"Auth method to use, predefined or from RegisterAuthIdentType()."},{"tag":"param:ident","text":"String containing the arbitrary, unique identity."},{"tag":"return","text":"True on success, false if the auth method was not found,\nident was already taken, or ident invalid for auth method."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"authMethod","decl":"const char[] authMethod","default":null},{"type":"const char[]","name":"ident","decl":"const char[] ident","default":null}]},{"name":"SetFlag","docStart":7796,"docEnd":7959,"docs":{"brief":"Sets whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Sets whether or not a flag is enabled on an admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:enabled","text":"True to enable, false to disable."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},{"name":"HasFlag","docStart":8024,"docEnd":8238,"docs":{"brief":"Returns whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Returns whether or not a flag is enabled on an admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:mode","text":"Access mode to check."},{"tag":"return","text":"True if enabled, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode","default":"Access_Effective"}]},{"name":"GetFlags","docStart":8326,"docEnd":8504,"docs":{"brief":"Returns the bitstring of access flags on an admin.","tags":[{"tag":"","text":"Returns the bitstring of access flags on an admin."},{"tag":"param:mode","text":"Access mode to use."},{"tag":"return","text":"A bitstring containing which flags are enabled."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode","default":null}]},{"name":"InheritGroup","docStart":8559,"docEnd":8836,"docs":{"brief":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags.","tags":[{"tag":"","text":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags."},{"tag":"param:gid","text":"GroupId index of the group."},{"tag":"return","text":"True on success, false on invalid input or duplicate membership."}]},"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"gid","decl":"GroupId gid","default":null}]},{"name":"GetGroup","docStart":8889,"docEnd":9413,"docs":{"brief":"Returns group information from an admin.","tags":[{"tag":"","text":"Returns group information from an admin."},{"tag":"param:index","text":"Group number to retrieve, from 0 to N-1, where N\nis the value of the GroupCount property."},{"tag":"param:name","text":"Buffer to store the group's name.\nNote: This will safely chop UTF-8 strings."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer."},{"tag":"return","text":"A GroupId index and a name pointer, or\nINVALID_GROUP_ID and NULL if an error occurred."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"SetPassword","docStart":9491,"docEnd":9585,"docs":{"brief":"Sets a password on an admin.","tags":[{"tag":"","text":"Sets a password on an admin."},{"tag":"param:password","text":"String containing the password."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"password","decl":"const char[] password","default":null}]},{"name":"GetPassword","docStart":9647,"docEnd":9965,"docs":{"brief":"Gets an admin's password.","tags":[{"tag":"","text":"Gets an admin's password."},{"tag":"param:buffer","text":"Optional buffer to store the admin's password."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer.\nNote: This will safely chop UTF-8 strings."},{"tag":"return","text":"True if there was a password set, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":"\"\""},{"type":"int","name":"maxlength","decl":"int maxlength","default":"0"}]},{"name":"CanTarget","docStart":10039,"docEnd":10878,"docs":{"brief":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds.","tags":[{"tag":"","text":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds."},{"tag":"param:target","text":"Target admin (may be INVALID_ADMIN_ID)."},{"tag":"return","text":"True if targetable, false if immune."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"other","decl":"AdminId other","default":null}]}],"properties":[{"name":"GroupCount","docStart":10930,"docEnd":10986,"docs":{"brief":"The number of groups of which this admin is a member.","tags":[{"tag":"","text":"The number of groups of which this admin is a member."}]},"type":"int","getter":true,"setter":false},{"name":"ImmunityLevel","docStart":11047,"docEnd":11085,"docs":{"brief":"Immunity level used for targetting.","tags":[{"tag":"","text":"Immunity level used for targetting."}]},"type":"int","getter":true,"setter":true}]},"created":{"hash":"c2d37cdff5be0127f390ff7b1d4c27d616ef499f","count":5231,"time":1424186396},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GroupId":{"symbol":{"name":"GroupId","docStart":0,"docEnd":0,"docs":null,"parent":null,"methods":[{"name":"HasFlag","docStart":11206,"docEnd":11384,"docs":{"brief":"Gets whether or not a flag is enabled on a group's flag set.","tags":[{"tag":"","text":"Gets whether or not a flag is enabled on a group's flag set."},{"tag":"param:flag","text":"Admin flag to retrieve."},{"tag":"return","text":"True if enabled, false otherwise,"}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null}]},{"name":"SetFlag","docStart":11435,"docEnd":11610,"docs":{"brief":"Adds or removes a flag from a group's flag set.","tags":[{"tag":"","text":"Adds or removes a flag from a group's flag set."},{"tag":"param:flag","text":"Admin flag to toggle."},{"tag":"param:enabled","text":"True to set the flag, false to unset/disable."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag","default":null},{"type":"bool","name":"enabled","decl":"bool enabled","default":null}]},{"name":"GetFlags","docStart":11675,"docEnd":11809,"docs":{"brief":"Returns the flag set that is added to users from this group.","tags":[{"tag":"","text":"Returns the flag set that is added to users from this group."},{"tag":"return","text":"Bitstring containing the flags enabled."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"GetGroupImmunity","docStart":11846,"docEnd":12084,"docs":{"brief":"Returns a group that this group is immune to given an index.","tags":[{"tag":"","text":"Returns a group that this group is immune to given an index."},{"tag":"param:number","text":"Index from 0 to N-1, from GroupImmunitiesCount."},{"tag":"return","text":"GroupId that this group is immune to, or INVALID_GROUP_ID on failure."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"AddGroupImmunity","docStart":12142,"docEnd":12243,"docs":{"brief":"Adds immunity to a specific group.","tags":[{"tag":"","text":"Adds immunity to a specific group."},{"tag":"param:other","text":"Group id to receive immunity to."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"other","decl":"GroupId other","default":null}]},{"name":"GetCommandOverride","docStart":12302,"docEnd":12641,"docs":{"brief":"Retrieves a group-specific command override.","tags":[{"tag":"","text":"Retrieves a group-specific command override."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Optional pointer to store allow/deny setting."},{"tag":"return","text":"True if an override exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null},{"type":"OverrideRule&","name":"rule","decl":"OverrideRule& rule","default":null}]},{"name":"AddCommandOverride","docStart":12745,"docEnd":12988,"docs":{"brief":"Adds a group-specific override type.","tags":[{"tag":"","text":"Adds a group-specific override type."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Override allow/deny setting."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"OverrideType","name":"type","decl":"OverrideType type","default":null},{"type":"OverrideRule","name":"rule","decl":"OverrideRule rule","default":null}]}],"properties":[{"name":"GroupImmunitiesCount","docStart":13091,"docEnd":13129,"docs":{"brief":"Number of specific group immunities","tags":[{"tag":"","text":"Number of specific group immunities"}]},"type":"int","getter":true,"setter":false},{"name":"ImmunityLevel","docStart":13200,"docEnd":13238,"docs":{"brief":"Immunity level used for targetting.","tags":[{"tag":"","text":"Immunity level used for targetting."}]},"type":"int","getter":true,"setter":true}]},"created":{"hash":"c0729ff5e2644b631084d8ffd8b7ab391f9f9efa","count":5232,"time":1424190074},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_admin_included":{"symbol":{"name":"_admin_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211}},"ADMIN_CACHE_OVERRIDES":{"symbol":{"name":"ADMIN_CACHE_OVERRIDES","docStart":0,"docEnd":0,"docs":null,"value":"(1<<0)"},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211}},"ADMFLAG_KICK":{"symbol":{"name":"ADMFLAG_KICK","docStart":3286,"docEnd":3339,"docs":{"brief":"Convenience macro for Admin_Kick as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Kick as a FlagBit"}]},"value":"(1<<2)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CONVARS":{"symbol":{"name":"ADMFLAG_CONVARS","docStart":3806,"docEnd":3862,"docs":{"brief":"Convenience macro for Admin_Convars as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Convars as a FlagBit"}]},"value":"(1<<7)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_ROOT":{"symbol":{"name":"ADMFLAG_ROOT","docStart":4538,"docEnd":4591,"docs":{"brief":"Convenience macro for Admin_Root as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Root as a FlagBit"}]},"value":"(1<<14)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_UNBAN":{"symbol":{"name":"ADMFLAG_UNBAN","docStart":3491,"docEnd":3545,"docs":{"brief":"Convenience macro for Admin_Unban as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Unban as a FlagBit"}]},"value":"(1<<4)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CUSTOM1":{"symbol":{"name":"ADMFLAG_CUSTOM1","docStart":4641,"docEnd":4697,"docs":{"brief":"Convenience macro for Admin_Custom1 as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Custom1 as a FlagBit"}]},"value":"(1<<15)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CHEATS":{"symbol":{"name":"ADMFLAG_CHEATS","docStart":4433,"docEnd":4488,"docs":{"brief":"Convenience macro for Admin_Cheats as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Cheats as a FlagBit"}]},"value":"(1<<13)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_BAN":{"symbol":{"name":"ADMFLAG_BAN","docStart":3389,"docEnd":3441,"docs":{"brief":"Convenience macro for Admin_Ban as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Ban as a FlagBit"}]},"value":"(1<<3)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_VOTE":{"symbol":{"name":"ADMFLAG_VOTE","docStart":4120,"docEnd":4173,"docs":{"brief":"Convenience macro for Admin_Vote as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Vote as a FlagBit"}]},"value":"(1<<10)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AUTHMETHOD_STEAM":{"symbol":{"name":"AUTHMETHOD_STEAM","docStart":5363,"docEnd":5399,"docs":{"brief":"SteamID based authentication","tags":[{"tag":"","text":"SteamID based authentication"}]},"value":"\"steam\""},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMIN_CACHE_ADMINS":{"symbol":{"name":"ADMIN_CACHE_ADMINS","docStart":0,"docEnd":0,"docs":null,"value":"(1<<1)"},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211}},"AdminFlags_TOTAL":{"symbol":{"name":"AdminFlags_TOTAL","docStart":2916,"docEnd":2951,"docs":{"brief":"Total number of admin flags","tags":[{"tag":"","text":"Total number of admin flags"}]},"value":"21"},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CUSTOM5":{"symbol":{"name":"ADMFLAG_CUSTOM5","docStart":5065,"docEnd":5121,"docs":{"brief":"Convenience macro for Admin_Custom5 as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Custom5 as a FlagBit"}]},"value":"(1<<19)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AUTHMETHOD_IP":{"symbol":{"name":"AUTHMETHOD_IP","docStart":5449,"docEnd":5480,"docs":{"brief":"IP based authentication","tags":[{"tag":"","text":"IP based authentication"}]},"value":"\"ip\""},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_PASSWORD":{"symbol":{"name":"ADMFLAG_PASSWORD","docStart":4223,"docEnd":4280,"docs":{"brief":"Convenience macro for Admin_Password as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Password as a FlagBit"}]},"value":"(1<<11)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CUSTOM4":{"symbol":{"name":"ADMFLAG_CUSTOM4","docStart":4959,"docEnd":5015,"docs":{"brief":"Convenience macro for Admin_Custom4 as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Custom4 as a FlagBit"}]},"value":"(1<<18)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CUSTOM6":{"symbol":{"name":"ADMFLAG_CUSTOM6","docStart":5171,"docEnd":5227,"docs":{"brief":"Convenience macro for Admin_Custom6 as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Custom6 as a FlagBit"}]},"value":"(1<<20)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CUSTOM3":{"symbol":{"name":"ADMFLAG_CUSTOM3","docStart":4853,"docEnd":4909,"docs":{"brief":"Convenience macro for Admin_Custom3 as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Custom3 as a FlagBit"}]},"value":"(1<<17)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CHAT":{"symbol":{"name":"ADMFLAG_CHAT","docStart":4017,"docEnd":4070,"docs":{"brief":"Convenience macro for Admin_Chat as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Chat as a FlagBit"}]},"value":"(1<<9)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CUSTOM2":{"symbol":{"name":"ADMFLAG_CUSTOM2","docStart":4747,"docEnd":4803,"docs":{"brief":"Convenience macro for Admin_Custom2 as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Custom2 as a FlagBit"}]},"value":"(1<<16)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CHANGEMAP":{"symbol":{"name":"ADMFLAG_CHANGEMAP","docStart":3698,"docEnd":3756,"docs":{"brief":"Convenience macro for Admin_Changemap as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Changemap as a FlagBit"}]},"value":"(1<<6)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AUTHMETHOD_NAME":{"symbol":{"name":"AUTHMETHOD_NAME","docStart":5530,"docEnd":5563,"docs":{"brief":"Name based authentication","tags":[{"tag":"","text":"Name based authentication"}]},"value":"\"name\""},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMIN_CACHE_GROUPS":{"symbol":{"name":"ADMIN_CACHE_GROUPS","docStart":0,"docEnd":0,"docs":null,"value":"((1<<2)|ADMIN_CACHE_ADMINS)"},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211}},"ADMFLAG_SLAY":{"symbol":{"name":"ADMFLAG_SLAY","docStart":3595,"docEnd":3648,"docs":{"brief":"Convenience macro for Admin_Slay as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Slay as a FlagBit"}]},"value":"(1<<5)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_CONFIG":{"symbol":{"name":"ADMFLAG_CONFIG","docStart":3912,"docEnd":3967,"docs":{"brief":"Convenience macro for Admin_Config as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Config as a FlagBit"}]},"value":"(1<<8)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_RCON":{"symbol":{"name":"ADMFLAG_RCON","docStart":4330,"docEnd":4383,"docs":{"brief":"Convenience macro for Admin_RCON as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_RCON as a FlagBit"}]},"value":"(1<<12)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_GENERIC":{"symbol":{"name":"ADMFLAG_GENERIC","docStart":3180,"docEnd":3236,"docs":{"brief":"Convenience macro for Admin_Generic as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Generic as a FlagBit"}]},"value":"(1<<1)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ADMFLAG_RESERVATION":{"symbol":{"name":"ADMFLAG_RESERVATION","docStart":3070,"docEnd":3130,"docs":{"brief":"Convenience macro for Admin_Reservation as a FlagBit","tags":[{"tag":"","text":"Convenience macro for Admin_Reservation as a FlagBit"}]},"value":"(1<<0)"},"created":{"hash":"b018cd9d3ab74cc9b4007be8250a2098b399ed7e","count":434,"time":1170666880},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enums":{"GroupId":{"symbol":{"name":"GroupId","docStart":6013,"docEnd":6107,"docs":{"brief":"Identifies a unique entry in the group permissions cache.  These are not Handles.","tags":[{"tag":"","text":"Identifies a unique entry in the group permissions cache.  These are not Handles."}]},"entries":[{"name":"INVALID_GROUP_ID","docStart":6151,"docEnd":6188,"docs":{"brief":"An invalid/non-existent group","tags":[{"tag":"","text":"An invalid/non-existent group"}]},"value":"-1"}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AdminFlag":{"symbol":{"name":"AdminFlag","docStart":1635,"docEnd":1681,"docs":{"brief":"Access levels (flags) for admins.","tags":[{"tag":"","text":"Access levels (flags) for admins."}]},"entries":[{"name":"Admin_Reservation","docStart":1727,"docEnd":1748,"docs":{"brief":"Reserved slot","tags":[{"tag":"","text":"Reserved slot"}]},"value":"0"},{"name":"Admin_Generic","docStart":1775,"docEnd":1806,"docs":{"brief":"Generic admin abilities","tags":[{"tag":"","text":"Generic admin abilities"}]},"value":null},{"name":"Admin_Kick","docStart":1833,"docEnd":1858,"docs":{"brief":"Kick another user","tags":[{"tag":"","text":"Kick another user"}]},"value":null},{"name":"Admin_Ban","docStart":1885,"docEnd":1909,"docs":{"brief":"Ban another user","tags":[{"tag":"","text":"Ban another user"}]},"value":null},{"name":"Admin_Unban","docStart":1936,"docEnd":1962,"docs":{"brief":"Unban another user","tags":[{"tag":"","text":"Unban another user"}]},"value":null},{"name":"Admin_Slay","docStart":1989,"docEnd":2026,"docs":{"brief":"Slay/kill/damage another user","tags":[{"tag":"","text":"Slay/kill/damage another user"}]},"value":null},{"name":"Admin_Changemap","docStart":2053,"docEnd":2075,"docs":{"brief":"Change the map","tags":[{"tag":"","text":"Change the map"}]},"value":null},{"name":"Admin_Convars","docStart":2102,"docEnd":2130,"docs":{"brief":"Change basic convars","tags":[{"tag":"","text":"Change basic convars"}]},"value":null},{"name":"Admin_Config","docStart":2157,"docEnd":2185,"docs":{"brief":"Change configuration","tags":[{"tag":"","text":"Change configuration"}]},"value":null},{"name":"Admin_Chat","docStart":2212,"docEnd":2243,"docs":{"brief":"Special chat privileges","tags":[{"tag":"","text":"Special chat privileges"}]},"value":null},{"name":"Admin_Vote","docStart":2270,"docEnd":2301,"docs":{"brief":"Special vote privileges","tags":[{"tag":"","text":"Special vote privileges"}]},"value":null},{"name":"Admin_Password","docStart":2328,"docEnd":2357,"docs":{"brief":"Set a server password","tags":[{"tag":"","text":"Set a server password"}]},"value":null},{"name":"Admin_RCON","docStart":2384,"docEnd":2400,"docs":{"brief":"Use RCON","tags":[{"tag":"","text":"Use RCON"}]},"value":null},{"name":"Admin_Cheats","docStart":2427,"docEnd":2472,"docs":{"brief":"Change sv_cheats and use its commands","tags":[{"tag":"","text":"Change sv_cheats and use its commands"}]},"value":null},{"name":"Admin_Root","docStart":2499,"docEnd":2528,"docs":{"brief":"All access by default","tags":[{"tag":"","text":"All access by default"}]},"value":null},{"name":"Admin_Custom1","docStart":2555,"docEnd":2585,"docs":{"brief":"First custom flag type","tags":[{"tag":"","text":"First custom flag type"}]},"value":null},{"name":"Admin_Custom2","docStart":2612,"docEnd":2643,"docs":{"brief":"Second custom flag type","tags":[{"tag":"","text":"Second custom flag type"}]},"value":null},{"name":"Admin_Custom3","docStart":2670,"docEnd":2700,"docs":{"brief":"Third custom flag type","tags":[{"tag":"","text":"Third custom flag type"}]},"value":null},{"name":"Admin_Custom4","docStart":2727,"docEnd":2758,"docs":{"brief":"Fourth custom flag type","tags":[{"tag":"","text":"Fourth custom flag type"}]},"value":null},{"name":"Admin_Custom5","docStart":2785,"docEnd":2815,"docs":{"brief":"Fifth custom flag type","tags":[{"tag":"","text":"Fifth custom flag type"}]},"value":null},{"name":"Admin_Custom6","docStart":2842,"docEnd":2872,"docs":{"brief":"Sixth custom flag type","tags":[{"tag":"","text":"Sixth custom flag type"}]},"value":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OverrideRule":{"symbol":{"name":"OverrideRule","docStart":5750,"docEnd":5785,"docs":{"brief":"Access override rules.","tags":[{"tag":"","text":"Access override rules."}]},"entries":[{"name":"Command_Deny","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"Command_Allow","docStart":0,"docEnd":0,"docs":null,"value":"1"}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"OverrideType":{"symbol":{"name":"OverrideType","docStart":5595,"docEnd":5630,"docs":{"brief":"Access override types.","tags":[{"tag":"","text":"Access override types."}]},"entries":[{"name":"Override_Command","docStart":5679,"docEnd":5694,"docs":{"brief":"Command","tags":[{"tag":"","text":"Command"}]},"value":"1"},{"name":"Override_CommandGroup","docStart":5721,"docEnd":5742,"docs":{"brief":"Command group","tags":[{"tag":"","text":"Command group"}]},"value":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ImmunityType":{"symbol":{"name":"ImmunityType","docStart":5855,"docEnd":5891,"docs":{"brief":"DEPRECATED, do not use.","tags":[{"tag":"","text":"DEPRECATED, do not use."}]},"entries":[{"name":"Immunity_Default","docStart":5940,"docEnd":5959,"docs":{"brief":"Deprecated.","tags":[{"tag":"","text":"Deprecated."}]},"value":"1"},{"name":"Immunity_Global","docStart":5986,"docEnd":6005,"docs":{"brief":"Deprecated.","tags":[{"tag":"","text":"Deprecated."}]},"value":null}]},"created":{"hash":"0b8b26042ed7f7aa984184a7359571338619287f","count":337,"time":1169682211},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AdminId":{"symbol":{"name":"AdminId","docStart":6196,"docEnd":6290,"docs":{"brief":"Identifies a unique entry in the admin permissions cache.  These are not Handles.","tags":[{"tag":"","text":"Identifies a unique entry in the admin permissions cache.  These are not Handles."}]},"entries":[{"name":"INVALID_ADMIN_ID","docStart":6334,"docEnd":6371,"docs":{"brief":"An invalid/non-existent admin","tags":[{"tag":"","text":"An invalid/non-existent admin"}]},"value":"-1"}]},"created":{"hash":"5085521b548d9aa703d70ccd86e25bc204a9cc90","count":421,"time":1170135777},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AdminCachePart":{"symbol":{"name":"AdminCachePart","docStart":6592,"docEnd":6642,"docs":{"brief":"Represents the various cache regions.","tags":[{"tag":"","text":"Represents the various cache regions."}]},"entries":[{"name":"AdminCache_Overrides","docStart":6701,"docEnd":6725,"docs":{"brief":"Global overrides","tags":[{"tag":"","text":"Global overrides"}]},"value":"0"},{"name":"AdminCache_Groups","docStart":6760,"docEnd":6817,"docs":{"brief":"All groups (automatically invalidates admins too)","tags":[{"tag":"","text":"All groups (automatically invalidates admins too)"}]},"value":"1"},{"name":"AdminCache_Admins","docStart":6852,"docEnd":6870,"docs":{"brief":"All admins","tags":[{"tag":"","text":"All admins"}]},"value":"2"}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"AdmAccessMode":{"symbol":{"name":"AdmAccessMode","docStart":6379,"docEnd":6432,"docs":{"brief":"Methods of computing access permissions.","tags":[{"tag":"","text":"Methods of computing access permissions."}]},"entries":[{"name":"Access_Real","docStart":6478,"docEnd":6516,"docs":{"brief":"Access the user has inherently","tags":[{"tag":"","text":"Access the user has inherently"}]},"value":null},{"name":"Access_Effective","docStart":6539,"docEnd":6584,"docs":{"brief":"Access the user has from their groups","tags":[{"tag":"","text":"Access the user has from their groups"}]},"value":null}]},"created":{"hash":"86344c06af85ec7f4a8d6631eea1a9a017834461","count":815,"time":1179595699},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"basecomm":{"functions":{"BaseComm_SetClientMute":{"symbol":{"name":"BaseComm_SetClientMute","docStart":2839,"docEnd":3070,"docs":{"brief":"Sets a client's mute state","tags":[{"tag":"","text":"Sets a client's mute state"},{"tag":"param:client","text":"Client index."},{"tag":"param:muteState","text":"True to mute client, false to unmute."},{"tag":"return","text":"True if this caused a change in mute state, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"muteState","decl":"bool muteState","default":null}]},"created":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"__pl_basecomm_SetNTVOptional":{"symbol":{"name":"__pl_basecomm_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061},"last_updated":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061}},"BaseComm_OnClientGag":{"symbol":{"name":"BaseComm_OnClientGag","docStart":1877,"docEnd":2042,"docs":{"brief":"Called when a client is gagged or ungagged","tags":[{"tag":"","text":"Called when a client is gagged or ungagged"},{"tag":"param:client","text":"Client index"},{"tag":"param:gagState","text":"True if client was gaged, false otherwise"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"gagState","decl":"bool gagState","default":null}]},"created":{"hash":"34d2db6d78c67f1efbfe8557a32cdc42a101e59f","count":3648,"time":1346701511},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BaseComm_OnClientMute":{"symbol":{"name":"BaseComm_OnClientMute","docStart":1643,"docEnd":1806,"docs":{"brief":"Called when a client is muted or unmuted","tags":[{"tag":"","text":"Called when a client is muted or unmuted"},{"tag":"param:client","text":"Client index"},{"tag":"param:muteState","text":"True if client was muted, false otherwise"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"muteState","decl":"bool muteState","default":null}]},"created":{"hash":"34d2db6d78c67f1efbfe8557a32cdc42a101e59f","count":3648,"time":1346701511},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BaseComm_IsClientGagged":{"symbol":{"name":"BaseComm_IsClientGagged","docStart":2110,"docEnd":2275,"docs":{"brief":"Returns whether or not a client is gagged","tags":[{"tag":"","text":"Returns whether or not a client is gagged"},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if client is gagged, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BaseComm_IsClientMuted":{"symbol":{"name":"BaseComm_IsClientMuted","docStart":2329,"docEnd":2492,"docs":{"brief":"Returns whether or not a client is muted","tags":[{"tag":"","text":"Returns whether or not a client is muted"},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if client is muted, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"BaseComm_SetClientGag":{"symbol":{"name":"BaseComm_SetClientGag","docStart":2545,"docEnd":2772,"docs":{"brief":"Sets a client's gag state","tags":[{"tag":"","text":"Sets a client's gag state"},{"tag":"param:client","text":"Client index."},{"tag":"param:gagState","text":"True to gag client, false to ungag."},{"tag":"return","text":"True if this caused a change in gag state, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"gagState","decl":"bool gagState","default":null}]},"created":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_basecomm_included":{"symbol":{"name":"_basecomm_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061},"last_updated":{"hash":"bb7f7eff516ad653e6902c2d160f8df1c0862f18","count":3341,"time":1310006061}}},"enums":{},"typesets":{},"typedefs":{}},"sourcemod":{"functions":{"OnGameFrame":{"symbol":{"name":"OnGameFrame","docStart":6771,"docEnd":6911,"docs":{"brief":"Called before every server frame.  Note that you should avoid\ndoing expensive computations or declaring large local arrays.","tags":[{"tag":"","text":"Called before every server frame.  Note that you should avoid\ndoing expensive computations or declaring large local arrays."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"FormatTime":{"symbol":{"name":"FormatTime","docStart":13367,"docEnd":14123,"docs":{"brief":"Produces a date and/or time string value for a timestamp.\n\nSee this URL for valid parameters:\nhttp://cplusplus.com/reference/clibrary/ctime/strftime.html\n\nNote that available parameters depends on support from your operating system.\nIn particular, ones highlighted in yellow on that page are not currently\navailable on Windows and should be avoided for portable plugins.","tags":[{"tag":"","text":"Produces a date and/or time string value for a timestamp.\n\nSee this URL for valid parameters:\nhttp://cplusplus.com/reference/clibrary/ctime/strftime.html\n\nNote that available parameters depends on support from your operating system.\nIn particular, ones highlighted in yellow on that page are not currently\navailable on Windows and should be avoided for portable plugins."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:format","text":"Formatting rules (passing NULL_STRING will use the rules defined in sm_datetime_format)."},{"tag":"param:stamp","text":"Optional time stamp."},{"tag":"error","text":"Buffer too small or invalid time format."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"int","name":"stamp","decl":"int stamp","default":"-1"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginEnd":{"symbol":{"name":"OnPluginEnd","docStart":6297,"docEnd":6542,"docs":{"brief":"Called when the plugin is about to be unloaded.\n\nIt is not necessary to close any handles or remove hooks in this function.\nSourceMod guarantees that plugin shutdown automatically and correctly releases\nall resources.","tags":[{"tag":"","text":"Called when the plugin is about to be unloaded.\n\nIt is not necessary to close any handles or remove hooks in this function.\nSourceMod guarantees that plugin shutdown automatically and correctly releases\nall resources."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"AskPluginLoad2":{"symbol":{"name":"AskPluginLoad2","docStart":5068,"docEnd":6208,"docs":{"brief":"Called before OnPluginStart, in case the plugin wants to check for load failure.\nThis is called even if the plugin type is \"private.\"  Any natives from modules are\nnot available at this point.  Thus, this forward should only be used for explicit\npre-emptive things, such as adding dynamic natives, setting certain types of load\nfilters (such as not loading the plugin for certain games).","tags":[{"tag":"","text":"Called before OnPluginStart, in case the plugin wants to check for load failure.\nThis is called even if the plugin type is \"private.\"  Any natives from modules are\nnot available at this point.  Thus, this forward should only be used for explicit\npre-emptive things, such as adding dynamic natives, setting certain types of load\nfilters (such as not loading the plugin for certain games)."},{"tag":"note","text":"It is not safe to call externally resolved natives until OnPluginStart()."},{"tag":"note","text":"Any sort of RTE in this function will cause the plugin to fail loading."},{"tag":"note","text":"If you do not return anything, it is treated like returning success."},{"tag":"note","text":"If a plugin has an AskPluginLoad2(), AskPluginLoad() will not be called."},{"tag":"param:myself","text":"Handle to the plugin."},{"tag":"param:late","text":"Whether or not the plugin was loaded \"late\" (after map load)."},{"tag":"param:error","text":"Error message buffer in case load failed."},{"tag":"param:err_max","text":"Maximum number of characters for error message buffer."},{"tag":"return","text":"APLRes_Success for load success, APLRes_Failure or APLRes_SilentFailure otherwise"}]},"kind":"forward","returnType":"APLRes","arguments":[{"type":"Handle","name":"myself","decl":"Handle myself","default":null},{"type":"bool","name":"late","decl":"bool late","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"err_max","decl":"int err_max","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"LogStackTrace":{"symbol":{"name":"LogStackTrace","docStart":12775,"docEnd":13050,"docs":{"brief":"Logs a stack trace from the current function call. Code\nexecution continues after the call","tags":[{"tag":"","text":"Logs a stack trace from the current function call. Code\nexecution continues after the call"},{"tag":"param:fmt","text":"Format string to send with the stack trace."},{"tag":"param:...","text":"Format arguments."},{"tag":"error","text":"Always logs a stack trace."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"7068c3e8653250ddd219827e2970259a55e99949","count":6320,"time":1533035856},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginPauseChange":{"symbol":{"name":"OnPluginPauseChange","docStart":6575,"docEnd":6720,"docs":{"brief":"Called when the plugin's pause status is changing.","tags":[{"tag":"","text":"Called when the plugin's pause status is changing."},{"tag":"param:pause","text":"True if the plugin is being paused, false otherwise."}]},"kind":"forward","returnType":"void","arguments":[{"type":"bool","name":"pause","decl":"bool pause","default":null}]},"created":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GameConfGetAddress":{"symbol":{"name":"GameConfGetAddress","docStart":15302,"docEnd":15628,"docs":{"brief":"Finds an address calculation in a GameConfig file,\nperforms LoadFromAddress on it as appropriate, then returns the final address.","tags":[{"tag":"","text":"Finds an address calculation in a GameConfig file,\nperforms LoadFromAddress on it as appropriate, then returns the final address."},{"tag":"param:gameconf","text":"Game config handle."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"An address calculated on success, or 0 on failure."}]},"kind":"native","returnType":"Address","arguments":[{"type":"Handle","name":"gameconf","decl":"Handle gameconf","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"SetFailState":{"symbol":{"name":"SetFailState","docStart":11677,"docEnd":12400,"docs":{"brief":"Causes the plugin to enter a failed state.  An error will be thrown and\nthe plugin will be paused until it is unloaded or reloaded.\n\nFor backwards compatibility, if no extra arguments are passed, no\nformatting is applied.  If one or more additional arguments is passed,\nthe string is formatted using Format().  If any errors are encountered\nduring formatting, both the format specifier string and an additional\nerror message are written.\n\nThis function does not return, and no further code in the plugin is\nexecuted.","tags":[{"tag":"","text":"Causes the plugin to enter a failed state.  An error will be thrown and\nthe plugin will be paused until it is unloaded or reloaded.\n\nFor backwards compatibility, if no extra arguments are passed, no\nformatting is applied.  If one or more additional arguments is passed,\nthe string is formatted using Format().  If any errors are encountered\nduring formatting, both the format specifier string and an additional\nerror message are written.\n\nThis function does not return, and no further code in the plugin is\nexecuted."},{"tag":"param:string","text":"Format specifier string."},{"tag":"param:...","text":"Formatting arguments."},{"tag":"error","text":"Always throws SP_ERROR_ABORT."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"string","decl":"const char[] string","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnLibraryAdded":{"symbol":{"name":"OnLibraryAdded","docStart":18009,"docEnd":18191,"docs":{"brief":"Called after a library is added.\nA library is either a plugin name or extension name, as\nexposed via its include file.","tags":[{"tag":"","text":"Called after a library is added.\nA library is either a plugin name or extension name, as\nexposed via its include file."},{"tag":"param:name","text":"Library name."}]},"kind":"forward","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"CanTestFeatures":{"symbol":{"name":"CanTestFeatures","docStart":24438,"docEnd":24753,"docs":{"brief":"Returns whether \"GetFeatureStatus\" will work. Using this native\nor this function will not cause SourceMod to fail loading on older versions,\nhowever, GetFeatureStatus will only work if this function returns true.","tags":[{"tag":"","text":"Returns whether \"GetFeatureStatus\" will work. Using this native\nor this function will not cause SourceMod to fail loading on older versions,\nhowever, GetFeatureStatus will only work if this function returns true."},{"tag":"return","text":"True if GetFeatureStatus will work, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetPluginIterator":{"symbol":{"name":"GetPluginIterator","docStart":8725,"docEnd":8955,"docs":{"brief":"Returns an iterator that can be used to search through plugins.","tags":[{"tag":"","text":"Returns an iterator that can be used to search through plugins."},{"tag":"return","text":"Handle to iterate with.  Must be closed via\nCloseHandle()."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GameConfGetOffset":{"symbol":{"name":"GameConfGetOffset","docStart":14584,"docEnd":14790,"docs":{"brief":"Returns an offset value.","tags":[{"tag":"","text":"Returns an offset value."},{"tag":"param:gc","text":"Game config handle."},{"tag":"param:key","text":"Key to retrieve from the offset section."},{"tag":"return","text":"An offset, or -1 on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"gc","decl":"Handle gc","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"AskPluginLoad":{"symbol":{"name":"AskPluginLoad","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"bool","arguments":[{"type":"Handle","name":"myself","decl":"Handle myself","default":null},{"type":"bool","name":"late","decl":"bool late","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"err_max","decl":"int err_max","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"GetFeatureStatus":{"symbol":{"name":"GetFeatureStatus","docStart":24840,"docEnd":25042,"docs":{"brief":"Returns whether a feature exists, and if so, whether it is usable.","tags":[{"tag":"","text":"Returns whether a feature exists, and if so, whether it is usable."},{"tag":"param:type","text":"Feature type."},{"tag":"param:name","text":"Feature name."},{"tag":"return","text":"Feature status."}]},"kind":"native","returnType":"FeatureStatus","arguments":[{"type":"FeatureType","name":"type","decl":"FeatureType type","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetSysTickCount":{"symbol":{"name":"GetSysTickCount","docStart":15704,"docEnd":15935,"docs":{"brief":"Returns the operating system's \"tick count,\" which is a number of\nmilliseconds since the operating system loaded.  This can be used\nfor basic benchmarks.","tags":[{"tag":"","text":"Returns the operating system's \"tick count,\" which is a number of\nmilliseconds since the operating system loaded.  This can be used\nfor basic benchmarks."},{"tag":"return","text":"Tick count in milliseconds."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"ReadMapList":{"symbol":{"name":"ReadMapList","docStart":18807,"docEnd":21970,"docs":{"brief":"Loads a map list to an ADT Array.\n\nA map list is a list of maps from a file.  SourceMod allows easy configuration of\nmaplists through addons/sourcemod/configs/maplists.cfg.  Each entry is given a\nname and a file (for example, \"rtv\" => \"rtv.cfg\"), or a name and a redirection\n(for example, \"rtv\" => \"default\").  This native will read a map list entry,\ncache the file, and return the list of maps it holds.\n\nSerial change numbers are used to identify if a map list has changed.  Thus, if\nyou pass a serial change number and it's equal to what SourceMod currently knows\nabout the map list, then SourceMod won't re-parse the file.\n\nIf the maps end up being read from the maps folder (MAPLIST_FLAG_MAPSFOLDER), they\nare automatically sorted in alphabetical, ascending order.\n\nArrays created by this function are temporary and must be freed via CloseHandle().\nModifying arrays created by this function will not affect future return values or\nor the contents of arrays returned to other plugins.","tags":[{"tag":"","text":"Loads a map list to an ADT Array.\n\nA map list is a list of maps from a file.  SourceMod allows easy configuration of\nmaplists through addons/sourcemod/configs/maplists.cfg.  Each entry is given a\nname and a file (for example, \"rtv\" => \"rtv.cfg\"), or a name and a redirection\n(for example, \"rtv\" => \"default\").  This native will read a map list entry,\ncache the file, and return the list of maps it holds.\n\nSerial change numbers are used to identify if a map list has changed.  Thus, if\nyou pass a serial change number and it's equal to what SourceMod currently knows\nabout the map list, then SourceMod won't re-parse the file.\n\nIf the maps end up being read from the maps folder (MAPLIST_FLAG_MAPSFOLDER), they\nare automatically sorted in alphabetical, ascending order.\n\nArrays created by this function are temporary and must be freed via CloseHandle().\nModifying arrays created by this function will not affect future return values or\nor the contents of arrays returned to other plugins."},{"tag":"param:array","text":"Array to store the map list.  If INVALID_HANDLE, a new blank\narray will be created.  The blocksize should be at least 16;\notherwise results may be truncated.  Items are added to the array\nas strings.  The array is never checked for duplicates, and it is\nnot read beforehand.  Only the serial number is used to detect\nchanges."},{"tag":"param:serial","text":"Serial number to identify last known map list change.  If -1, the\nthe value will not be checked.  If the map list has since changed,\nthe serial is updated (even if -1 was passed).  If there is an error\nfinding a valid maplist, then the serial is set to -1."},{"tag":"param:str","text":"Config name, or \"default\" for the default map list.  Config names\nshould be somewhat descriptive.  For example, the admin menu uses\na config name of \"admin menu\".  The list names can be configured\nby users in addons/sourcemod/configs/maplists.cfg."},{"tag":"param:flags","text":"MAPLIST_FLAG flags."},{"tag":"return","text":"On failure:\nINVALID_HANDLE is returned, the serial is set to -1, and the input\narray (if any) is left unchanged.\nOn no change:\nINVALID_HANDLE is returned, the serial is unchanged, and the input\narray (if any) is left unchanged.\nOn success:\nA valid array Handle is returned, containing at least one map string.\nIf an array was passed, the return value is equal to the passed Array\nHandle.  If the passed array was not cleared, it will have grown by at\nleast one item.  The serial number is updated to a positive number."},{"tag":"error","text":"Invalid array Handle that is not INVALID_HANDLE."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":"INVALID_HANDLE"},{"type":"int&","name":"serial","decl":"int& serial","default":"-1"},{"type":"const char[]","name":"str","decl":"const char[] str","default":"\"default\""},{"type":"int","name":"flags","decl":"int flags","default":"1 << 1"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnClientFloodResult":{"symbol":{"name":"OnClientFloodResult","docStart":23110,"docEnd":23595,"docs":{"brief":"Called after a client's flood check has been computed.  This can be used\nby antiflood algorithms to decay/increase flooding weights.\n\nSince the result from \"OnClientFloodCheck\" isn't guaranteed to be the\nfinal result, it is generally a good idea to use this to play with other\nalgorithms nicely.","tags":[{"tag":"","text":"Called after a client's flood check has been computed.  This can be used\nby antiflood algorithms to decay/increase flooding weights.\n\nSince the result from \"OnClientFloodCheck\" isn't guaranteed to be the\nfinal result, it is generally a good idea to use this to play with other\nalgorithms nicely."},{"tag":"param:client","text":"Client index.  The server (0) will never be passed."},{"tag":"param:blocked","text":"True if client flooded last \"say\", false otherwise."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"blocked","decl":"bool blocked","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"FindPluginByNumber":{"symbol":{"name":"FindPluginByNumber","docStart":11115,"docEnd":11623,"docs":{"brief":"Finds a plugin by its order in the list from the \"plugins list\" server\n\"sm\" command.  You should not use this function to loop through all plugins,\nuse the iterator instead.  Looping through all plugins using this native\nis O(n^2), whereas using the iterator is O(n).","tags":[{"tag":"","text":"Finds a plugin by its order in the list from the \"plugins list\" server\n\"sm\" command.  You should not use this function to loop through all plugins,\nuse the iterator instead.  Looping through all plugins using this native\nis O(n^2), whereas using the iterator is O(n)."},{"tag":"param:order_num","text":"Number of the plugin as it appears in \"sm plugins list\"."},{"tag":"return","text":"Plugin Handle on success, INVALID_HANDLE if no plugin\nmatches the given number."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"int","name":"order_num","decl":"int order_num","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"MorePlugins":{"symbol":{"name":"MorePlugins","docStart":8995,"docEnd":9238,"docs":{"brief":"Returns whether there are more plugins available in the iterator.","tags":[{"tag":"","text":"Returns whether there are more plugins available in the iterator."},{"tag":"param:iter","text":"Handle to the plugin iterator."},{"tag":"return","text":"True on more plugins, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"iter","decl":"Handle iter","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginStart":{"symbol":{"name":"OnPluginStart","docStart":4383,"docEnd":4688,"docs":{"brief":"Called when the plugin is fully initialized and all known external references\nare resolved. This is only called once in the lifetime of the plugin, and is\npaired with OnPluginEnd().\n\nIf any run-time error is thrown during this callback, the plugin will be marked\nas failed.","tags":[{"tag":"","text":"Called when the plugin is fully initialized and all known external references\nare resolved. This is only called once in the lifetime of the plugin, and is\npaired with OnPluginEnd().\n\nIf any run-time error is thrown during this callback, the plugin will be marked\nas failed."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"ThrowError":{"symbol":{"name":"ThrowError","docStart":12461,"docEnd":12719,"docs":{"brief":"Aborts the current callback and throws an error.  This function\ndoes not return in that no code is executed following it.","tags":[{"tag":"","text":"Aborts the current callback and throws an error.  This function\ndoes not return in that no code is executed following it."},{"tag":"param:fmt","text":"String format."},{"tag":"param:...","text":"Format arguments."},{"tag":"error","text":"Always!"}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"AutoExecConfig":{"symbol":{"name":"AutoExecConfig","docStart":15970,"docEnd":16659,"docs":{"brief":"Specifies that the given config file should be executed after plugin load.\nOnConfigsExecuted() will not be called until the config file has executed,\nbut it will be called if the execution fails.","tags":[{"tag":"","text":"Specifies that the given config file should be executed after plugin load.\nOnConfigsExecuted() will not be called until the config file has executed,\nbut it will be called if the execution fails."},{"tag":"param:autoCreate","text":"If true, and the config file does not exist, such a config\nfile will be automatically created and populated with\ninformation from the plugin's registered cvars."},{"tag":"param:name","text":"Name of the config file, excluding the .cfg extension.\nIf empty, <plugin.filename.cfg> is assumed."},{"tag":"param:folder","text":"Folder under cfg/ to use.  By default this is \"sourcemod.\""}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"autoCreate","decl":"bool autoCreate","default":"true"},{"type":"const char[]","name":"name","decl":"const char[] name","default":"\"\""},{"type":"const char[]","name":"folder","decl":"const char[] folder","default":"\"sourcemod\""}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"IsPluginDebugging":{"symbol":{"name":"IsPluginDebugging","docStart":10303,"docEnd":10560,"docs":{"brief":"Retrieves whether or not a plugin is being debugged.","tags":[{"tag":"","text":"Retrieves whether or not a plugin is being debugged."},{"tag":"param:plugin","text":"Plugin Handle (INVALID_HANDLE uses the calling plugin)."},{"tag":"return","text":"True if being debugged, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetExtensionFileStatus":{"symbol":{"name":"GetExtensionFileStatus","docStart":17387,"docEnd":17916,"docs":{"brief":"Returns the status of an extension, by filename.","tags":[{"tag":"","text":"Returns the status of an extension, by filename."},{"tag":"param:name","text":"Extension name (like \"sdktools.ext\")."},{"tag":"param:error","text":"Optional error message buffer."},{"tag":"param:maxlength","text":"Length of optional error message buffer."},{"tag":"return","text":"-2 if the extension was not found.\n-1 if the extension was found but failed to load.\n0 if the extension loaded but reported an error.\n1 if the extension is running without error."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":"\"\""},{"type":"int","name":"maxlength","decl":"int maxlength","default":"0"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginLoad":{"symbol":{"name":"OnPluginLoad","docStart":652,"docEnd":1053,"docs":{"brief":"Called before OnPluginInit, in case the plugin wants to check for load failure.","tags":[{"tag":"","text":"Called before OnPluginInit, in case the plugin wants to check for load failure."},{"tag":"param:myself","text":"Handle to the plugin."},{"tag":"param:late","text":"Whether or not the plugin was loaded \"late\" (after map load)."},{"tag":"param:error","text":"Error message buffer in case load failed."},{"tag":"param:err_max","text":"Maximum number of characters for error message buffer."},{"tag":"return","text":"True if load success, false otherwise."}]},"kind":"forward","returnType":"bool","arguments":[{"type":"Handle","name":"myself","decl":"Handle myself","default":null},{"type":"bool","name":"late","decl":"bool late","default":null},{"type":"char[]","name":"error","decl":"char[] error","default":null},{"type":"int","name":"err_max","decl":"int err_max","default":null}]},"created":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112},"last_updated":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112}},"OnAutoConfigsBuffered":{"symbol":{"name":"OnAutoConfigsBuffered","docStart":7604,"docEnd":8169,"docs":{"brief":"This is called once, right after OnMapStart() but any time before\nOnConfigsExecuted().  It is called after the \"exec sourcemod.cfg\"\ncommand and all AutoExecConfig() exec commands have been added to\nthe ServerCommand() buffer.\n\nIf you need to load per-map settings that override default values,\nadding commands to the ServerCommand() buffer here will guarantee\nthat they're set before OnConfigsExecuted().\n\nUnlike OnMapStart() and OnConfigsExecuted(), this is not called on\nlate loads that occur after OnMapStart().","tags":[{"tag":"","text":"This is called once, right after OnMapStart() but any time before\nOnConfigsExecuted().  It is called after the \"exec sourcemod.cfg\"\ncommand and all AutoExecConfig() exec commands have been added to\nthe ServerCommand() buffer.\n\nIf you need to load per-map settings that override default values,\nadding commands to the ServerCommand() buffer here will guarantee\nthat they're set before OnConfigsExecuted().\n\nUnlike OnMapStart() and OnConfigsExecuted(), this is not called on\nlate loads that occur after OnMapStart()."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnServerCfg":{"symbol":{"name":"OnServerCfg","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"GetPluginInfo":{"symbol":{"name":"GetPluginInfo","docStart":10611,"docEnd":11021,"docs":{"brief":"Retrieves a plugin's public info.","tags":[{"tag":"","text":"Retrieves a plugin's public info."},{"tag":"param:plugin","text":"Plugin Handle (INVALID_HANDLE uses the calling plugin)."},{"tag":"param:info","text":"Plugin info property to retrieve."},{"tag":"param:buffer","text":"Buffer to store info in."},{"tag":"param:maxlength","text":"Maximum length of buffer."},{"tag":"return","text":"True on success, false if property is not available."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"PluginInfo","name":"info","decl":"PluginInfo info","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetTime":{"symbol":{"name":"GetTime","docStart":13109,"docEnd":13319,"docs":{"brief":"Gets the system time as a unix timestamp.","tags":[{"tag":"","text":"Gets the system time as a unix timestamp."},{"tag":"param:bigStamp","text":"Optional array to store the 64bit timestamp in."},{"tag":"return","text":"32bit timestamp (number of seconds since unix epoch)."}]},"kind":"native","returnType":"int","arguments":[{"type":"int[2]","name":"bigStamp","decl":"int bigStamp[2]","default":"{ 0, 0 }"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnClientFloodCheck":{"symbol":{"name":"OnClientFloodCheck","docStart":22651,"docEnd":23060,"docs":{"brief":"Called when a client has sent chat text.  This must return either true or\nfalse to indicate that a client is or is not spamming the server.\n\nThe return value is a hint only.  Core or another plugin may decide\notherwise.","tags":[{"tag":"","text":"Called when a client has sent chat text.  This must return either true or\nfalse to indicate that a client is or is not spamming the server.\n\nThe return value is a hint only.  Core or another plugin may decide\notherwise."},{"tag":"param:client","text":"Client index.  The server (0) will never be passed."},{"tag":"return","text":"True if client is spamming the server, false otherwise."}]},"kind":"forward","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetPluginStatus":{"symbol":{"name":"GetPluginStatus","docStart":9626,"docEnd":9844,"docs":{"brief":"Returns a plugin's status.","tags":[{"tag":"","text":"Returns a plugin's status."},{"tag":"param:plugin","text":"Plugin Handle (INVALID_HANDLE uses the calling plugin)."},{"tag":"return","text":"Status code for the plugin."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"PluginStatus","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnConfigsExecuted":{"symbol":{"name":"OnConfigsExecuted","docStart":7221,"docEnd":7565,"docs":{"brief":"Called when the map has loaded, servercfgfile (server.cfg) has been\nexecuted, and all plugin configs are done executing.  This is the best\nplace to initialize plugin functions which are based on cvar data.","tags":[{"tag":"","text":"Called when the map has loaded, servercfgfile (server.cfg) has been\nexecuted, and all plugin configs are done executing.  This is the best\nplace to initialize plugin functions which are based on cvar data."},{"tag":"note","text":"This will always be called once and only once per map.  It will be\ncalled after OnMapStart()."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnMapEnd":{"symbol":{"name":"OnMapEnd","docStart":7147,"docEnd":7191,"docs":{"brief":"Called right before a map ends.","tags":[{"tag":"","text":"Called right before a map ends."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"LibraryExists":{"symbol":{"name":"LibraryExists","docStart":16957,"docEnd":17336,"docs":{"brief":"Returns whether a library exists.  This function should be considered\nexpensive; it should only be called on plugin to determine availability\nof resources.  Use OnLibraryAdded()/OnLibraryRemoved() to detect changes\nin libraries.","tags":[{"tag":"","text":"Returns whether a library exists.  This function should be considered\nexpensive; it should only be called on plugin to determine availability\nof resources.  Use OnLibraryAdded()/OnLibraryRemoved() to detect changes\nin libraries."},{"tag":"param:name","text":"Library name of a plugin or extension."},{"tag":"return","text":"True if exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"LoadGameConfigFile":{"symbol":{"name":"LoadGameConfigFile","docStart":14217,"docEnd":14524,"docs":{"brief":"Loads a game config file.","tags":[{"tag":"","text":"Loads a game config file."},{"tag":"param:file","text":"File to load.  The path must be relative to the 'gamedata' folder under the config folder\nand the extension should be omitted."},{"tag":"return","text":"A handle to the game config file or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"GameData","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"RegPluginLibrary":{"symbol":{"name":"RegPluginLibrary","docStart":16769,"docEnd":16903,"docs":{"brief":"Registers a library name for identifying as a dependency to\nother plugins.","tags":[{"tag":"","text":"Registers a library name for identifying as a dependency to\nother plugins."},{"tag":"param:name","text":"Library name."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"RequireFeature":{"symbol":{"name":"RequireFeature","docStart":25123,"docEnd":25461,"docs":{"brief":"Requires that a given feature is available. If it is not, SetFailState()\nis called with the given message.","tags":[{"tag":"","text":"Requires that a given feature is available. If it is not, SetFailState()\nis called with the given message."},{"tag":"param:type","text":"Feature type."},{"tag":"param:name","text":"Feature name."},{"tag":"param:fmt","text":"Message format string, or empty to use default."},{"tag":"param:...","text":"Message format parameters, if any."}]},"kind":"native","returnType":"void","arguments":[{"type":"FeatureType","name":"type","decl":"FeatureType type","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":"\"\""},{"type":"any...","name":"...","decl":"any...","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnAllPluginsLoaded":{"symbol":{"name":"OnAllPluginsLoaded","docStart":8363,"docEnd":8543,"docs":{"brief":"Called after all plugins have been loaded.  This is called once for\nevery plugin.  If a plugin late loads, it will be called immediately\nafter OnPluginStart().","tags":[{"tag":"","text":"Called after all plugins have been loaded.  This is called once for\nevery plugin.  If a plugin late loads, it will be called immediately\nafter OnPluginStart()."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"LoadFromAddress":{"symbol":{"name":"LoadFromAddress","docStart":25880,"docEnd":26198,"docs":{"brief":"Load up to 4 bytes from a memory address.","tags":[{"tag":"","text":"Load up to 4 bytes from a memory address."},{"tag":"param:addr","text":"Address to a memory location."},{"tag":"param:size","text":"How many bytes should be read.\nIf loading a floating-point value, use NumberType_Int32."},{"tag":"return","text":"The value that is stored at that address."}]},"kind":"native","returnType":"any","arguments":[{"type":"Address","name":"addr","decl":"Address addr","default":null},{"type":"NumberType","name":"size","decl":"NumberType size","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"StoreToAddress":{"symbol":{"name":"StoreToAddress","docStart":26262,"docEnd":26571,"docs":{"brief":"Store up to 4 bytes to a memory address.","tags":[{"tag":"","text":"Store up to 4 bytes to a memory address."},{"tag":"param:addr","text":"Address to a memory location."},{"tag":"param:data","text":"Value to store at the address."},{"tag":"param:size","text":"How many bytes should be written.\nIf storing a floating-point value, use NumberType_Int32."}]},"kind":"native","returnType":"void","arguments":[{"type":"Address","name":"addr","decl":"Address addr","default":null},{"type":"any","name":"data","decl":"any data","default":null},{"type":"NumberType","name":"size","decl":"NumberType size","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginInit":{"symbol":{"name":"OnPluginInit","docStart":471,"docEnd":622,"docs":{"brief":"Called when the plugin is fully initialized and all known external references are resolved,\nsuch as dynamic natives.\n","tags":[{"tag":"","text":"Called when the plugin is fully initialized and all known external references are resolved,\nsuch as dynamic natives.\n"}]},"kind":"forward","returnType":"int","arguments":[]},"created":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112},"last_updated":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112}},"SetMapListCompatBind":{"symbol":{"name":"SetMapListCompatBind","docStart":22191,"docEnd":22574,"docs":{"brief":"Makes a compatibility binding for map lists.  For example, if a function previously used\n\"clam.cfg\" for map lists, this function will insert a \"fake\" binding to \"clam.cfg\" that\nwill be overridden if it's in the maplists.cfg file.","tags":[{"tag":"","text":"Makes a compatibility binding for map lists.  For example, if a function previously used\n\"clam.cfg\" for map lists, this function will insert a \"fake\" binding to \"clam.cfg\" that\nwill be overridden if it's in the maplists.cfg file."},{"tag":"param:name","text":"Configuration name that would be used with ReadMapList()."},{"tag":"param:file","text":"Default file to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginCreated":{"symbol":{"name":"OnPluginCreated","docStart":1136,"docEnd":1252,"docs":{"brief":"Called when the plugin is first mapped into memory.  Use this to set dynamic natives.\n","tags":[{"tag":"","text":"Called when the plugin is first mapped into memory.  Use this to set dynamic natives.\n"}]},"kind":"forward","returnType":"int","arguments":[]},"created":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112},"last_updated":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112}},"OnLibraryRemoved":{"symbol":{"name":"OnLibraryRemoved","docStart":18244,"docEnd":18435,"docs":{"brief":"Called right before a library is removed.\nA library is either a plugin name or extension name, as\nexposed via its include file.","tags":[{"tag":"","text":"Called right before a library is removed.\nA library is either a plugin name or extension name, as\nexposed via its include file."},{"tag":"param:name","text":"Library name."}]},"kind":"forward","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GameConfGetKeyValue":{"symbol":{"name":"GameConfGetKeyValue","docStart":14854,"docEnd":15208,"docs":{"brief":"Gets the value of a key from the \"Keys\" section.","tags":[{"tag":"","text":"Gets the value of a key from the \"Keys\" section."},{"tag":"param:gc","text":"Game config handle."},{"tag":"param:key","text":"Key to retrieve from the Keys section."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"return","text":"True if key existed, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"gc","decl":"Handle gc","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnMapStart":{"symbol":{"name":"OnMapStart","docStart":6944,"docEnd":7115,"docs":{"brief":"Called when the map is loaded.","tags":[{"tag":"","text":"Called when the map is loaded."},{"tag":"note","text":"This used to be OnServerLoad(), which is now deprecated.\nPlugins still using the old forward will work."}]},"kind":"forward","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"ReadPlugin":{"symbol":{"name":"ReadPlugin","docStart":9281,"docEnd":9582,"docs":{"brief":"Returns the current plugin in the iterator and advances the iterator.","tags":[{"tag":"","text":"Returns the current plugin in the iterator and advances the iterator."},{"tag":"param:iter","text":"Handle to the plugin iterator."},{"tag":"return","text":"Current plugin the iterator is at, before\nthe iterator is advanced."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"iter","decl":"Handle iter","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetPluginFilename":{"symbol":{"name":"GetPluginFilename","docStart":9901,"docEnd":10222,"docs":{"brief":"Retrieves a plugin's file name relative to the plugins folder.","tags":[{"tag":"","text":"Retrieves a plugin's file name relative to the plugins folder."},{"tag":"param:plugin","text":"Plugin Handle (INVALID_HANDLE uses the calling plugin)."},{"tag":"param:buffer","text":"Buffer to the store the file name."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GetMyHandle":{"symbol":{"name":"GetMyHandle","docStart":8583,"docEnd":8691,"docs":{"brief":"Returns the calling plugin's Handle.","tags":[{"tag":"","text":"Returns the calling plugin's Handle."},{"tag":"return","text":"Handle of the calling plugin."}]},"kind":"native","returnType":"Handle","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"OnPluginUnload":{"symbol":{"name":"OnPluginUnload","docStart":1284,"docEnd":1362,"docs":{"brief":"Called when the plugin is about to be unloaded.\n","tags":[{"tag":"","text":"Called when the plugin is about to be unloaded.\n"}]},"kind":"forward","returnType":"int","arguments":[]},"created":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112},"last_updated":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112}}},"methodmaps":{"FrameIterator":{"symbol":{"name":"FrameIterator","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"FrameIterator","docStart":26682,"docEnd":26804,"docs":{"brief":"Creates a stack frame iterator to build your own stack traces.","tags":[{"tag":"","text":"Creates a stack frame iterator to build your own stack traces."},{"tag":"return","text":"New handle to a FrameIterator."}]},"kind":"native","returnType":"FrameIterator","arguments":[]},{"name":"Next","docStart":26842,"docEnd":27039,"docs":{"brief":"Advances the iterator to the next stack frame.","tags":[{"tag":"","text":"Advances the iterator to the next stack frame."},{"tag":"return","text":"True if another frame was fetched and data can be successfully read."},{"tag":"error","text":"No next element exception."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"Reset","docStart":27073,"docEnd":27127,"docs":{"brief":"Resets the iterator back to it's starting position.","tags":[{"tag":"","text":"Resets the iterator back to it's starting position."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GetFunctionName","docStart":27279,"docEnd":27424,"docs":{"brief":"Gets the name of the current function in the call stack.","tags":[{"tag":"","text":"Gets the name of the current function in the call stack."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlen","text":"Max size of the buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"GetFilePath","docStart":27494,"docEnd":27640,"docs":{"brief":"Gets the file path to the current call in the call stack.","tags":[{"tag":"","text":"Gets the file path to the current call in the call stack."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlen","text":"Max size of the buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]}],"properties":[{"name":"LineNumber","docStart":27162,"docEnd":27218,"docs":{"brief":"Returns the line number of the current function call.","tags":[{"tag":"","text":"Returns the line number of the current function call."}]},"type":"int","getter":true,"setter":false}]},"created":{"hash":"43cdf20fd3bb61d4b8a887bdf3bb9f6b14f2a8d9","count":6207,"time":1510887337},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"GameData":{"symbol":{"name":"GameData","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"GameData","docStart":2853,"docEnd":3144,"docs":{"brief":"Loads a game config file.","tags":[{"tag":"","text":"Loads a game config file."},{"tag":"param:file","text":"File to load.  The path must be relative to the 'gamedata' folder under the config folder\nand the extension should be omitted."},{"tag":"return","text":"A handle to the game config file or null on failure."}]},"kind":"native","returnType":"GameData","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"GetOffset","docStart":3194,"docEnd":3348,"docs":{"brief":"Returns an offset value.","tags":[{"tag":"","text":"Returns an offset value."},{"tag":"param:key","text":"Key to retrieve from the offset section."},{"tag":"return","text":"An offset, or -1 on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetKeyValue","docStart":3402,"docEnd":3706,"docs":{"brief":"Gets the value of a key from the \"Keys\" section.","tags":[{"tag":"","text":"Gets the value of a key from the \"Keys\" section."},{"tag":"param:key","text":"Key to retrieve from the Keys section."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"return","text":"True if key existed, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"GetAddress","docStart":3790,"docEnd":4065,"docs":{"brief":"Finds an address calculation in a GameConfig file,\nperforms LoadFromAddress on it as appropriate, then returns the final address.","tags":[{"tag":"","text":"Finds an address calculation in a GameConfig file,\nperforms LoadFromAddress on it as appropriate, then returns the final address."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"An address calculated on success, or 0 on failure."}]},"kind":"native","returnType":"Address","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"GetMemSig","docStart":4125,"docEnd":4321,"docs":{"brief":"Returns a function address calculated from a signature.","tags":[{"tag":"","text":"Returns a function address calculated from a signature."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"An address calculated on success, or 0 on failure."}]},"kind":"native","returnType":"Address","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]}],"properties":[]},"created":{"hash":"1b795a70b044d5b47b3b2665c6c98ee6b3dbeb72","count":6352,"time":1539314876},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}}},"enumstructs":{"Plugin":{"symbol":{"name":"Plugin","docStart":1643,"docEnd":1682,"docs":{"brief":"Plugin public information.","tags":[{"tag":"","text":"Plugin public information."}]},"methods":[],"fields":[{"name":"name","docStart":1738,"docEnd":1757,"docs":{"brief":"Plugin Name","tags":[{"tag":"","text":"Plugin Name"}]},"type":"const char[]"},{"name":"description","docStart":1795,"docEnd":1821,"docs":{"brief":"Plugin Description","tags":[{"tag":"","text":"Plugin Description"}]},"type":"const char[]"},{"name":"author","docStart":1859,"docEnd":1880,"docs":{"brief":"Plugin Author","tags":[{"tag":"","text":"Plugin Author"}]},"type":"const char[]"},{"name":"version","docStart":1918,"docEnd":1940,"docs":{"brief":"Plugin Version","tags":[{"tag":"","text":"Plugin Version"}]},"type":"const char[]"},{"name":"url","docStart":1978,"docEnd":1996,"docs":{"brief":"Plugin URL","tags":[{"tag":"","text":"Plugin URL"}]},"type":"const char[]"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"constants":{},"defines":{"MAPLIST_FLAG_CLEARARRAY":{"symbol":{"name":"MAPLIST_FLAG_CLEARARRAY","docStart":18634,"docEnd":18697,"docs":{"brief":"If an input array is specified, clear it before adding.","tags":[{"tag":"","text":"If an input array is specified, clear it before adding."}]},"value":"(1<<1)"},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"MAPLIST_FLAG_NO_DEFAULT":{"symbol":{"name":"MAPLIST_FLAG_NO_DEFAULT","docStart":18744,"docEnd":18803,"docs":{"brief":"Do not read \"default\" or \"mapcyclefile\" on failure.","tags":[{"tag":"","text":"Do not read \"default\" or \"mapcyclefile\" on failure."}]},"value":"(1<<2)"},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"MAPLIST_FLAG_MAPSFOLDER":{"symbol":{"name":"MAPLIST_FLAG_MAPSFOLDER","docStart":18535,"docEnd":18587,"docs":{"brief":"On failure, use all maps in the maps folder.","tags":[{"tag":"","text":"On failure, use all maps in the maps folder."}]},"value":"(1<<0)"},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"_sourcemod_included":{"symbol":{"name":"_sourcemod_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112},"last_updated":{"hash":"55266ffb80b75e2107b24c88eed55ab0a5b9eced","count":166,"time":1162978112}}},"enums":{"FeatureStatus":{"symbol":{"name":"FeatureStatus","docStart":24157,"docEnd":24187,"docs":{"brief":"Feature statuses.","tags":[{"tag":"","text":"Feature statuses."}]},"entries":[{"name":"FeatureStatus_Available","docStart":24213,"docEnd":24257,"docs":{"brief":"Feature is available for use.","tags":[{"tag":"","text":"Feature is available for use."}]},"value":null},{"name":"FeatureStatus_Unavailable","docStart":24289,"docEnd":24329,"docs":{"brief":"Feature is not available.","tags":[{"tag":"","text":"Feature is not available."}]},"value":null},{"name":"FeatureStatus_Unknown","docStart":24363,"docEnd":24406,"docs":{"brief":"Feature is not known at all.","tags":[{"tag":"","text":"Feature is not known at all."}]},"value":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"APLRes":{"symbol":{"name":"APLRes","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"APLRes_Success","docStart":2627,"docEnd":2653,"docs":{"brief":"Plugin should load","tags":[{"tag":"","text":"Plugin should load"}]},"value":"0"},{"name":"APLRes_Failure","docStart":2680,"docEnd":2737,"docs":{"brief":"Plugin shouldn't load and should display an error","tags":[{"tag":"","text":"Plugin shouldn't load and should display an error"}]},"value":null},{"name":"APLRes_SilentFailure","docStart":2764,"docEnd":2812,"docs":{"brief":"Plugin shouldn't load but do so silently","tags":[{"tag":"","text":"Plugin shouldn't load but do so silently"}]},"value":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Address":{"symbol":{"name":"Address","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Address_Null","docStart":25816,"docEnd":25872,"docs":{"brief":"a typical invalid result when an address lookup fails","tags":[{"tag":"","text":"a typical invalid result when an address lookup fails"}]},"value":"0"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"NumberType":{"symbol":{"name":"NumberType","docStart":25589,"docEnd":25669,"docs":{"brief":"Represents how many bytes we can read from an address with one load","tags":[{"tag":"","text":"Represents how many bytes we can read from an address with one load"}]},"entries":[{"name":"NumberType_Int8","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"NumberType_Int16","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"NumberType_Int32","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}},"FeatureType":{"symbol":{"name":"FeatureType","docStart":23660,"docEnd":23687,"docs":{"brief":"Feature types.","tags":[{"tag":"","text":"Feature types."}]},"entries":[{"name":"FeatureType_Native","docStart":23711,"docEnd":23749,"docs":{"brief":"A native function call.","tags":[{"tag":"","text":"A native function call."}]},"value":null},{"name":"FeatureType_Capability","docStart":23776,"docEnd":24124,"docs":{"brief":"A named capability. This is distinctly different from checking for a\nnative, because the underlying functionality could be enabled on-demand\nto improve loading time. Thus a native may appear to exist, but it might\nbe part of a set of features that are not compatible with the current game\nor version of SourceMod.","tags":[{"tag":"","text":"A named capability. This is distinctly different from checking for a\nnative, because the underlying functionality could be enabled on-demand\nto improve loading time. Thus a native may appear to exist, but it might\nbe part of a set of features that are not compatible with the current game\nor version of SourceMod."}]},"value":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"589d6df75dc37a5a704c36f97d02c72a33887cd5","count":6630,"time":1601682013}}},"typesets":{},"typedefs":{}},"clientprefs":{"functions":{"SetCookieMenuItem":{"symbol":{"name":"SetCookieMenuItem","docStart":9806,"docEnd":10191,"docs":{"brief":"Adds a new item to the client cookie settings menu.\n\nNote: This only adds the top level menu item. You need to handle any submenus from the callback.","tags":[{"tag":"","text":"Adds a new item to the client cookie settings menu.\n\nNote: This only adds the top level menu item. You need to handle any submenus from the callback."},{"tag":"param:handler","text":"A MenuHandler callback function."},{"tag":"param:info","text":"Data to pass to the callback."},{"tag":"param:display","text":"Text to show on the menu."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"CookieMenuHandler","name":"handler","decl":"CookieMenuHandler handler","default":null},{"type":"any","name":"info","decl":"any info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"OnClientCookiesLoaded":{"symbol":{"name":"OnClientCookiesLoaded","docStart":3293,"docEnd":3415,"docs":{"brief":"Called once a client's saved cookies have been loaded from the database.","tags":[{"tag":"","text":"Called once a client's saved cookies have been loaded from the database."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289}},"SetCookiePrefabMenu":{"symbol":{"name":"SetCookiePrefabMenu","docStart":9135,"docEnd":9658,"docs":{"brief":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback","tags":[{"tag":"","text":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback"},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:type","text":"A CookieMenu prefab menu type."},{"tag":"param:display","text":"Text to show on the menu."},{"tag":"param:handler","text":"Optional handler callback for translations and output on selection"},{"tag":"param:info","text":"Info data to pass to the callback."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"CookieMenu","name":"type","decl":"CookieMenu type","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"CookieMenuHandler","name":"handler","decl":"CookieMenuHandler handler","default":"INVALID_FUNCTION"},{"type":"any","name":"info","decl":"any info","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"GetClientCookie":{"symbol":{"name":"GetClientCookie","docStart":7853,"docEnd":8195,"docs":{"brief":"Retrieve the value of a Client preference cookie.","tags":[{"tag":"","text":"Retrieve the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:buffer","text":"Copyback buffer for value."},{"tag":"param:maxlen","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"RegClientCookie":{"symbol":{"name":"RegClientCookie","docStart":6468,"docEnd":7038,"docs":{"brief":"Creates a new Client preference cookie.\n\nHandles returned by RegClientCookie can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Creates a new Client preference cookie.\n\nHandles returned by RegClientCookie can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of the new preference cookie."},{"tag":"param:description","text":"Optional description of the preference cookie."},{"tag":"param:access","text":"What CookieAccess level to assign to this cookie."},{"tag":"return","text":"A handle to the newly created cookie. If the cookie already\nexists, a handle to it will still be returned."},{"tag":"error","text":"Cookie name is blank."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":null},{"type":"CookieAccess","name":"access","decl":"CookieAccess access","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"AreClientCookiesCached":{"symbol":{"name":"AreClientCookiesCached","docStart":8677,"docEnd":8901,"docs":{"brief":"Checks if a clients cookies have been loaded from the database.","tags":[{"tag":"","text":"Checks if a clients cookies have been loaded from the database."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if loaded, false otherwise."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"SetClientCookie":{"symbol":{"name":"SetClientCookie","docStart":7496,"docEnd":7772,"docs":{"brief":"Set the value of a Client preference cookie.","tags":[{"tag":"","text":"Set the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"FindClientCookie":{"symbol":{"name":"FindClientCookie","docStart":7140,"docEnd":7440,"docs":{"brief":"Searches for a Client preference cookie.\n\nHandles returned by FindClientCookie can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Searches for a Client preference cookie.\n\nHandles returned by FindClientCookie can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of cookie to find."},{"tag":"return","text":"A handle to the cookie if it is found. INVALID_HANDLE otherwise."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"RegClientPrefCookie":{"symbol":{"name":"RegClientPrefCookie","docStart":1649,"docEnd":1986,"docs":{"brief":"Creates a new Client preference cookie.","tags":[{"tag":"","text":"Creates a new Client preference cookie."},{"tag":"param:name","text":"Name of the new preference cookie."},{"tag":"param:description","text":"Optional description of the preference cookie."},{"tag":"return","text":"A handle to the newly created cookie. If the cookie already exists, a handle to it will still be returned."},{"tag":"error","text":"Cookie name is blank."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":null}]},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289}},"__ext_cprefs_SetNTVOptional":{"symbol":{"name":"__ext_cprefs_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894}},"GetClientPrefCookie":{"symbol":{"name":"GetClientPrefCookie","docStart":2658,"docEnd":2965,"docs":{"brief":"Retrieve the value of a Client preference cookie.","tags":[{"tag":"","text":"Retrieve the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:buffer","text":"Copyback buffer for value."},{"tag":"param:maxlen","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289}},"SetClientPrefCookie":{"symbol":{"name":"SetClientPrefCookie","docStart":2316,"docEnd":2580,"docs":{"brief":"Set the value of a Client preference cookie.","tags":[{"tag":"","text":"Set the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289}},"ReadCookieIterator":{"symbol":{"name":"ReadCookieIterator","docStart":10589,"docEnd":11042,"docs":{"brief":"Reads a cookie iterator, then advances to the next cookie if any.","tags":[{"tag":"","text":"Reads a cookie iterator, then advances to the next cookie if any."},{"tag":"param:iter","text":"Cookie iterator Handle."},{"tag":"param:name","text":"Name buffer."},{"tag":"param:nameLen","text":"Name buffer size."},{"tag":"param:access","text":"Access level of the cookie."},{"tag":"param:desc","text":"Cookie description buffer."},{"tag":"param:descLen","text":"Cookie description buffer size."},{"tag":"return","text":"True on success, false if there are no more commands."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"iter","decl":"Handle iter","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"nameLen","decl":"int nameLen","default":null},{"type":"CookieAccess&","name":"access","decl":"CookieAccess& access","default":null},{"type":"char[]","name":"desc","decl":"char[] desc","default":"\"\""},{"type":"int","name":"descLen","decl":"int descLen","default":"0"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"SetAuthIdCookie":{"symbol":{"name":"SetAuthIdCookie","docStart":8283,"docEnd":8587,"docs":{"brief":"Sets the value of a Client preference cookie based on an authID string.","tags":[{"tag":"","text":"Sets the value of a Client preference cookie based on an authID string."},{"tag":"param:authID","text":"String Auth/STEAM ID of player to set."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"authID","decl":"const char[] authID","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"FindClientPrefCookie":{"symbol":{"name":"FindClientPrefCookie","docStart":2075,"docEnd":2254,"docs":{"brief":"Searches for a Client preference cookie.","tags":[{"tag":"","text":"Searches for a Client preference cookie."},{"tag":"param:name","text":"Name of cookie to find."},{"tag":"return","text":"A handle to the cookie if it is found. INVALID_HANDLE otherwise."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289}},"GetCookieAccess":{"symbol":{"name":"GetCookieAccess","docStart":11220,"docEnd":11431,"docs":{"brief":"Returns the access level of a cookie","tags":[{"tag":"","text":"Returns the access level of a cookie"},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"return","text":"CookieAccess access level."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"CookieAccess","arguments":[{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"GetCookieIterator":{"symbol":{"name":"GetCookieIterator","docStart":10426,"docEnd":10549,"docs":{"brief":"Gets a cookie iterator.  Must be freed with CloseHandle().","tags":[{"tag":"","text":"Gets a cookie iterator.  Must be freed with CloseHandle()."},{"tag":"return","text":"A new cookie iterator."}]},"kind":"native","returnType":"Handle","arguments":[]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"ShowCookieMenu":{"symbol":{"name":"ShowCookieMenu","docStart":10286,"docEnd":10381,"docs":{"brief":"Displays the settings menu to a client.","tags":[{"tag":"","text":"Displays the settings menu to a client."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"GetClientCookieTime":{"symbol":{"name":"GetClientCookieTime","docStart":11488,"docEnd":11687,"docs":{"brief":"Returns the last updated timestamp for a client cookie","tags":[{"tag":"","text":"Returns the last updated timestamp for a client cookie"},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Cookie handle."},{"tag":"return","text":"Last updated timestamp."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"OnClientCookiesCached":{"symbol":{"name":"OnClientCookiesCached","docStart":8954,"docEnd":9082,"docs":{"brief":"Called once a client's saved cookies have been loaded from the database.","tags":[{"tag":"","text":"Called once a client's saved cookies have been loaded from the database."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}}},"methodmaps":{"Cookie":{"symbol":{"name":"Cookie","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"Cookie","docStart":3504,"docEnd":4055,"docs":{"brief":"Creates a new Client preference cookie.\n\nHandles returned can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Creates a new Client preference cookie.\n\nHandles returned can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of the new preference cookie."},{"tag":"param:description","text":"Optional description of the preference cookie."},{"tag":"param:access","text":"What CookieAccess level to assign to this cookie."},{"tag":"return","text":"A handle to the newly created cookie. If the cookie already\nexists, a handle to it will still be returned."},{"tag":"error","text":"Cookie name is blank."}]},"kind":"native","returnType":"Cookie","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":null},{"type":"CookieAccess","name":"access","decl":"CookieAccess access","default":null}]},{"name":"Find","docStart":4150,"docEnd":4441,"docs":{"brief":"Searches for a Client preference cookie.\n\nHandles returned by Cookie.Find can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Searches for a Client preference cookie.\n\nHandles returned by Cookie.Find can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of cookie to find."},{"tag":"return","text":"A handle to the cookie if it is found. INVALID_HANDLE otherwise."}]},"kind":"native","returnType":"Cookie","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"Set","docStart":4501,"docEnd":4713,"docs":{"brief":"Set the value of a Client preference cookie.","tags":[{"tag":"","text":"Set the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Get","docStart":4776,"docEnd":5055,"docs":{"brief":"Retrieve the value of a Client preference cookie.","tags":[{"tag":"","text":"Retrieve the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:buffer","text":"Copyback buffer for value."},{"tag":"param:maxlen","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"SetByAuthId","docStart":5125,"docEnd":5365,"docs":{"brief":"Sets the value of a Client preference cookie based on an authID string.","tags":[{"tag":"","text":"Sets the value of a Client preference cookie based on an authID string."},{"tag":"param:authID","text":"String Auth/STEAM ID of player to set."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"authID","decl":"const char[] authID","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetPrefabMenu","docStart":5445,"docEnd":5908,"docs":{"brief":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback","tags":[{"tag":"","text":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback"},{"tag":"param:type","text":"A CookieMenu prefab menu type."},{"tag":"param:display","text":"Text to show on the menu."},{"tag":"param:handler","text":"Optional handler callback for translations and output on selection"},{"tag":"param:info","text":"Info data to pass to the callback."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"CookieMenu","name":"type","decl":"CookieMenu type","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"CookieMenuHandler","name":"handler","decl":"CookieMenuHandler handler","default":"INVALID_FUNCTION"},{"type":"any","name":"info","decl":"any info","default":"0"}]},{"name":"GetClientTime","docStart":6044,"docEnd":6196,"docs":{"brief":"Returns the last updated timestamp for a client cookie","tags":[{"tag":"","text":"Returns the last updated timestamp for a client cookie"},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"Last updated timestamp."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]}],"properties":[{"name":"AccessLevel","docStart":6248,"docEnd":6394,"docs":{"brief":"Returns the access level of a cookie","tags":[{"tag":"","text":"Returns the access level of a cookie"},{"tag":"return","text":"CookieAccess access level."},{"tag":"error","text":"Invalid cookie handle."}]},"type":"CookieAccess","getter":true,"setter":false}]},"created":{"hash":"352f078b07667271dee6d5bab0c99f34cd2b273e","count":6422,"time":1559266034},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}}},"enumstructs":{},"constants":{},"defines":{"_clientprefs_included":{"symbol":{"name":"_clientprefs_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289},"last_updated":{"hash":"e63a5cd3dc56fd286fff635c315be755d86e216e","count":2010,"time":1208408289}}},"enums":{"CookieMenuAction":{"symbol":{"name":"CookieMenuAction","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"CookieMenuAction_DisplayOption","docStart":2378,"docEnd":2539,"docs":{"brief":"An option is being drawn for a menu.\n\nINPUT : Client index and data if available.\nOUTPUT: Buffer for rendering, maxlength of buffer.","tags":[{"tag":"","text":"An option is being drawn for a menu.\n\nINPUT : Client index and data if available.\nOUTPUT: Buffer for rendering, maxlength of buffer."}]},"value":"0"},{"name":"CookieMenuAction_SelectOption","docStart":2583,"docEnd":2688,"docs":{"brief":"A menu option has been selected.\n\nINPUT : Client index and any data if available.","tags":[{"tag":"","text":"A menu option has been selected.\n\nINPUT : Client index and any data if available."}]},"value":"1"}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"CookieAccess":{"symbol":{"name":"CookieAccess","docStart":1649,"docEnd":1700,"docs":{"brief":"Cookie access types for client viewing","tags":[{"tag":"","text":"Cookie access types for client viewing"}]},"entries":[{"name":"CookieAccess_Public","docStart":1757,"docEnd":1796,"docs":{"brief":"Visible and Changeable by users","tags":[{"tag":"","text":"Visible and Changeable by users"}]},"value":null},{"name":"CookieAccess_Protected","docStart":1831,"docEnd":1857,"docs":{"brief":"Read only to users","tags":[{"tag":"","text":"Read only to users"}]},"value":null},{"name":"CookieAccess_Private","docStart":1892,"docEnd":1924,"docs":{"brief":"Completely hidden cookie","tags":[{"tag":"","text":"Completely hidden cookie"}]},"value":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}},"CookieMenu":{"symbol":{"name":"CookieMenu","docStart":1932,"docEnd":1969,"docs":{"brief":"Cookie Prefab menu types","tags":[{"tag":"","text":"Cookie Prefab menu types"}]},"entries":[{"name":"CookieMenu_YesNo","docStart":2020,"docEnd":2085,"docs":{"brief":"Yes/No menu with \"yes\"/\"no\" results saved into the cookie","tags":[{"tag":"","text":"Yes/No menu with \"yes\"/\"no\" results saved into the cookie"}]},"value":null},{"name":"CookieMenu_YesNo_Int","docStart":2116,"docEnd":2166,"docs":{"brief":"Yes/No menu with 1/0 saved into the cookie","tags":[{"tag":"","text":"Yes/No menu with 1/0 saved into the cookie"}]},"value":null},{"name":"CookieMenu_OnOff","docStart":2197,"docEnd":2262,"docs":{"brief":"On/Off menu with \"on\"/\"off\" results saved into the cookie","tags":[{"tag":"","text":"On/Off menu with \"on\"/\"off\" results saved into the cookie"}]},"value":null},{"name":"CookieMenu_OnOff_Int","docStart":2293,"docEnd":2343,"docs":{"brief":"On/Off menu with 1/0 saved into the cookie","tags":[{"tag":"","text":"On/Off menu with 1/0 saved into the cookie"}]},"value":null}]},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}}},"typesets":{},"typedefs":{"CookieMenuHandler":{"symbol":{"name":"CookieMenuHandler","docStart":2732,"docEnd":3018,"docs":{"brief":"Cookie Menu Callback prototype","tags":[{"tag":"","text":"Cookie Menu Callback prototype"},{"tag":"param:client","text":"Client index."},{"tag":"param:action","text":"CookieMenuAction being performed."},{"tag":"param:info","text":"Info data passed."},{"tag":"param:buffer","text":"Outbut buffer."},{"tag":"param:maxlen","text":"Max length of the output buffer."}]},"type":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"CookieMenuAction","name":"action","decl":"CookieMenuAction action","default":null},{"type":"any","name":"info","decl":"any info","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]}},"created":{"hash":"ad376ff0b8d46637b924ed3b3f09e158afd1c4ea","count":4729,"time":1407127894},"last_updated":{"hash":"527a9987406325b64880b9af0c8f8e4be22f3eb2","count":6423,"time":1559272303}}}},"nextmap":{"functions":{"GetNextMap":{"symbol":{"name":"GetNextMap","docStart":1933,"docEnd":2218,"docs":{"brief":"Returns SourceMod's internal nextmap.","tags":[{"tag":"","text":"Returns SourceMod's internal nextmap."},{"tag":"param:map","text":"Buffer to store the nextmap name."},{"tag":"param:maxlen","text":"Maximum length of the map buffer."},{"tag":"return","text":"True if a Map was found and copied, false if no nextmap is set (map will be unchanged)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"map","decl":"char[] map","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"d9357d52241f550351f5a41eeacfe4886d0db49a","count":2078,"time":1211699476},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ForceChangeLevel":{"symbol":{"name":"ForceChangeLevel","docStart":2271,"docEnd":2452,"docs":{"brief":"Changes the current map and records the reason for the change with maphistory","tags":[{"tag":"","text":"Changes the current map and records the reason for the change with maphistory"},{"tag":"param:map","text":"Map to change to."},{"tag":"param:reason","text":"Reason for change."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"const char[]","name":"reason","decl":"const char[] reason","default":null}]},"created":{"hash":"c75d607a00e578c53daff7f1deee8b453092fa81","count":2204,"time":1215926017},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMapHistory":{"symbol":{"name":"GetMapHistory","docStart":2671,"docEnd":3133,"docs":{"brief":"Retrieves a map from the map history list.","tags":[{"tag":"","text":"Retrieves a map from the map history list."},{"tag":"param:item","text":"Item number. Must be 0 or greater and less than GetMapHistorySize()."},{"tag":"param:map","text":"Buffer to store the map name."},{"tag":"param:mapLen","text":"Length of map buffer."},{"tag":"param:reason","text":"Buffer to store the change reason."},{"tag":"param:reasonLen","text":"Length of the reason buffer."},{"tag":"param:startTime","text":"Time the map started."},{"tag":"error","text":"Invalid item number."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"item","decl":"int item","default":null},{"type":"char[]","name":"map","decl":"char[] map","default":null},{"type":"int","name":"mapLen","decl":"int mapLen","default":null},{"type":"char[]","name":"reason","decl":"char[] reason","default":null},{"type":"int","name":"reasonLen","decl":"int reasonLen","default":null},{"type":"int&","name":"startTime","decl":"int& startTime","default":null}]},"created":{"hash":"c75d607a00e578c53daff7f1deee8b453092fa81","count":2204,"time":1215926017},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMapHistorySize":{"symbol":{"name":"GetMapHistorySize","docStart":2526,"docEnd":2634,"docs":{"brief":"Gets the current number of maps in the map history","tags":[{"tag":"","text":"Gets the current number of maps in the map history"},{"tag":"return","text":"Number of maps."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"c75d607a00e578c53daff7f1deee8b453092fa81","count":2204,"time":1215926017},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetNextMap":{"symbol":{"name":"SetNextMap","docStart":1641,"docEnd":1886,"docs":{"brief":"Sets SourceMod's internal nextmap.\nEquivalent to changing sm_nextmap but with an added validity check.","tags":[{"tag":"","text":"Sets SourceMod's internal nextmap.\nEquivalent to changing sm_nextmap but with an added validity check."},{"tag":"param:map","text":"Next map to set."},{"tag":"return","text":"True if the nextmap was set, false if map was invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null}]},"created":{"hash":"d9357d52241f550351f5a41eeacfe4886d0db49a","count":2078,"time":1211699476},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_nextmap_included_":{"symbol":{"name":"_nextmap_included_","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"d9357d52241f550351f5a41eeacfe4886d0db49a","count":2078,"time":1211699476},"last_updated":{"hash":"d9357d52241f550351f5a41eeacfe4886d0db49a","count":2078,"time":1211699476}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_variant_t":{"functions":{"SetVariantPosVector3D":{"symbol":{"name":"SetVariantPosVector3D","docStart":2349,"docEnd":2465,"docs":{"brief":"Sets a 3D position vector in the global variant object.","tags":[{"tag":"","text":"Sets a 3D position vector in the global variant object."},{"tag":"param:vec","text":"Input position vector."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantFloat":{"symbol":{"name":"SetVariantFloat","docStart":2047,"docEnd":2155,"docs":{"brief":"Sets a floating point value in the global variant object.","tags":[{"tag":"","text":"Sets a floating point value in the global variant object."},{"tag":"param:val","text":"Input value."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"val","decl":"float val","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantVector3D":{"symbol":{"name":"SetVariantVector3D","docStart":2197,"docEnd":2295,"docs":{"brief":"Sets a 3D vector in the global variant object.","tags":[{"tag":"","text":"Sets a 3D vector in the global variant object."},{"tag":"param:vec","text":"Input vector."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantString":{"symbol":{"name":"SetVariantString","docStart":1762,"docEnd":1857,"docs":{"brief":"Sets a string in the global variant object.","tags":[{"tag":"","text":"Sets a string in the global variant object."},{"tag":"param:str","text":"Input string."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantColor":{"symbol":{"name":"SetVariantColor","docStart":2522,"docEnd":2615,"docs":{"brief":"Sets a color in the global variant object.","tags":[{"tag":"","text":"Sets a color in the global variant object."},{"tag":"param:color","text":"Input color."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantInt":{"symbol":{"name":"SetVariantInt","docStart":1907,"docEnd":2009,"docs":{"brief":"Sets an integer value in the global variant object.","tags":[{"tag":"","text":"Sets an integer value in the global variant object."},{"tag":"param:val","text":"Input value."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"val","decl":"int val","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantEntity":{"symbol":{"name":"SetVariantEntity","docStart":2666,"docEnd":2808,"docs":{"brief":"Sets an entity in the global variant object.","tags":[{"tag":"","text":"Sets an entity in the global variant object."},{"tag":"param:entity","text":"Entity index."},{"tag":"error","text":"Invalid entity index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetVariantBool":{"symbol":{"name":"SetVariantBool","docStart":1624,"docEnd":1722,"docs":{"brief":"Sets a bool value in the global variant object.","tags":[{"tag":"","text":"Sets a bool value in the global variant object."},{"tag":"param:val","text":"Input value."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"val","decl":"bool val","default":null}]},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_variant_t_included":{"symbol":{"name":"_sdktools_variant_t_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983},"last_updated":{"hash":"08238a803642352ab5e9490e5c78d252cc7e0eff","count":6056,"time":1487204983}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_client":{"functions":{"ReconnectClient":{"symbol":{"name":"ReconnectClient","docStart":1820,"docEnd":1929,"docs":{"brief":"Reconnect a client without dropping the netchannel","tags":[{"tag":"","text":"Reconnect a client without dropping the netchannel"},{"tag":"param:client","text":"The client index"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"838e8c7b35dadbe2544d9b1ea91d6eeb2ded7889","count":3340,"time":1309990262},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"InactivateClient":{"symbol":{"name":"InactivateClient","docStart":1656,"docEnd":1773,"docs":{"brief":"Sets the client to an inactive state waiting for a new map","tags":[{"tag":"","text":"Sets the client to an inactive state waiting for a new map"},{"tag":"param:client","text":"The client index"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},"created":{"hash":"838e8c7b35dadbe2544d9b1ea91d6eeb2ded7889","count":3340,"time":1309990262},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sdktools_client_included":{"symbol":{"name":"_sdktools_client_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"838e8c7b35dadbe2544d9b1ea91d6eeb2ded7889","count":3340,"time":1309990262},"last_updated":{"hash":"838e8c7b35dadbe2544d9b1ea91d6eeb2ded7889","count":3340,"time":1309990262}}},"enums":{},"typesets":{},"typedefs":{}},"entity":{"functions":{"GetEntDataEnt":{"symbol":{"name":"GetEntDataEnt","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"d595e020cd2197b750239c877908655998155ce5","count":2099,"time":1212187350}},"GetEntSendPropOffs":{"symbol":{"name":"GetEntSendPropOffs","docStart":19525,"docEnd":19930,"docs":{"brief":"Wrapper function for finding a send property for a particular entity.","tags":[{"tag":"","text":"Wrapper function for finding a send property for a particular entity."},{"tag":"param:ent","text":"Entity index."},{"tag":"param:prop","text":"Property name."},{"tag":"param:actual","text":"Defaults to false for backwards compatibility.\nIf true, the newer FindSendPropInfo() function\nis used instead."},{"tag":"return","text":"An offset, or -1 on failure."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"ent","decl":"int ent","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"bool","name":"actual","decl":"bool actual","default":"false"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindDataMapOffs":{"symbol":{"name":"FindDataMapOffs","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"PropFieldType&","name":"type","decl":"PropFieldType& type","default":"view_as<PropFieldType>(0)"},{"type":"int&","name":"num_bits","decl":"int& num_bits","default":"0"}]},"created":{"hash":"21923d7871e7c823018bce86e52f4f72de92b82c","count":683,"time":1176338753},"last_updated":{"hash":"c6323512ef0f5644ef2b88b0bf14598abb04d5b8","count":5766,"time":1446668815}},"GetEntPropVector":{"symbol":{"name":"GetEntPropVector","docStart":25338,"docEnd":25968,"docs":{"brief":"Retrieves a vector of floats from an entity, given a named network property.\n\nThis function is considered safer and more robust over GetEntDataVector,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Retrieves a vector of floats from an entity, given a named network property.\n\nThis function is considered safer and more robust over GetEntDataVector,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:vec","text":"Vector buffer to store data in."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"error","text":"Invalid entity, property not found, or property not\nactually a vector data type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindSendPropInfo":{"symbol":{"name":"FindSendPropInfo","docStart":16671,"docEnd":17572,"docs":{"brief":"Given a ServerClass name, finds a networkable send property offset.\nThis information is cached for future calls.","tags":[{"tag":"","text":"Given a ServerClass name, finds a networkable send property offset.\nThis information is cached for future calls."},{"tag":"param:cls","text":"Classname."},{"tag":"param:prop","text":"Property name."},{"tag":"param:type","text":"Optional parameter to store the type."},{"tag":"param:num_bits","text":"Optional parameter to store the number of bits the field\nuses, if applicable (otherwise 0 is stored).  The number\nof bits varies for integers and floats, and is always 0\nfor strings."},{"tag":"param:local_offset","text":"Optional parameter to store the local offset, as\nFindSendPropOffs() would return."},{"tag":"return","text":"On success, returns an absolutely computed offset.\nIf no offset is available, 0 is returned.\nIf the property is not found, -1 is returned."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"cls","decl":"const char[] cls","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"PropFieldType&","name":"type","decl":"PropFieldType& type","default":"view_as<PropFieldType>(0)"},{"type":"int&","name":"num_bits","decl":"int& num_bits","default":"0"},{"type":"int&","name":"local_offset","decl":"int& local_offset","default":"0"}]},"created":{"hash":"5f61876ab62e61835cc721b681b2b7724396e180","count":1848,"time":1200211825},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsValidEntity":{"symbol":{"name":"IsValidEntity","docStart":4491,"docEnd":4731,"docs":{"brief":"Returns whether or not an entity is valid.  Returns false\nif there is no matching CBaseEntity for this entity index.","tags":[{"tag":"","text":"Returns whether or not an entity is valid.  Returns false\nif there is no matching CBaseEntity for this entity index."},{"tag":"param:entity","text":"Index of the entity."},{"tag":"return","text":"True if valid, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CreateEdict":{"symbol":{"name":"CreateEdict","docStart":5239,"docEnd":5370,"docs":{"brief":"Creates a new edict (the basis of a networkable entity)","tags":[{"tag":"","text":"Creates a new edict (the basis of a networkable entity)"},{"tag":"return","text":"Index of the edict, 0 on failure."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntPropString":{"symbol":{"name":"SetEntPropString","docStart":27458,"docEnd":27917,"docs":{"brief":"Sets a network property as a string.","tags":[{"tag":"","text":"Sets a network property as a string."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:buffer","text":"String to set."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Invalid entity, offset out of reasonable bounds, or property is not a valid string."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"b56de5d546718e1d78b3ab39a2eba4716165ba9f","count":695,"time":1176517463},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityCount":{"symbol":{"name":"GetEntityCount","docStart":4163,"docEnd":4457,"docs":{"brief":"Returns the number of networked entities in the server.\n\nNote: For legacy reasons, this only returns the current count\nof networked entities (current edicts), rather than total\ncount of current entities.","tags":[{"tag":"","text":"Returns the number of networked entities in the server.\n\nNote: For legacy reasons, this only returns the current count\nof networked entities (current edicts), rather than total\ncount of current entities."},{"tag":"return","text":"Number of entities in the server."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveEdict":{"symbol":{"name":"RemoveEdict","docStart":5401,"docEnd":5541,"docs":{"brief":"Removes an edict from the world.","tags":[{"tag":"","text":"Removes an edict from the world."},{"tag":"param:edict","text":"Index of the edict."},{"tag":"error","text":"Invalid edict index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null}]},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindDataMapInfo":{"symbol":{"name":"FindDataMapInfo","docStart":18663,"docEnd":19340,"docs":{"brief":"Given an entity, finds a nested datamap property offset.\nThis information is cached for future calls.","tags":[{"tag":"","text":"Given an entity, finds a nested datamap property offset.\nThis information is cached for future calls."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:prop","text":"Property name."},{"tag":"param:type","text":"Optional parameter to store the type."},{"tag":"param:num_bits","text":"Optional parameter to store the number of bits the field\nuses.  The bit count will either be 1 (for boolean) or\ndivisible by 8 (including 0 if unknown)."},{"tag":"param:local_offset","text":"Optional parameter to store the local offset, as\nFindDataMapOffs() would return."},{"tag":"return","text":"An offset, or -1 on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"PropFieldType&","name":"type","decl":"PropFieldType& type","default":"view_as<PropFieldType>(0)"},{"type":"int&","name":"num_bits","decl":"int& num_bits","default":"0"},{"type":"int&","name":"local_offset","decl":"int& local_offset","default":"0"}]},"created":{"hash":"b9cd424186e0454b55246dece83a8f390023a66d","count":3998,"time":1376265261},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntPropEnt":{"symbol":{"name":"SetEntPropEnt","docStart":24687,"docEnd":25234,"docs":{"brief":"Sets an entity index in an entity's property.\n\nThis function is considered safer and more robust over SetEntDataEnt*,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Sets an entity index in an entity's property.\n\nThis function is considered safer and more robust over SetEntDataEnt*,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:other","text":"Entity index to set, or -1 to unset."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"other","decl":"int other","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntDataArray":{"symbol":{"name":"SetEntDataArray","docStart":29090,"docEnd":29570,"docs":{"brief":"Copies an array of cells to an entity at a given offset.","tags":[{"tag":"","text":"Copies an array of cells to an entity at a given offset."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:array","text":"Array of values to copy."},{"tag":"param:arraySize","text":"Number of values to copy."},{"tag":"param:dataSize","text":"Size of each value in bytes (1, 2, or 4)."},{"tag":"param:changeState","text":"True to set the network state as changed; false otherwise."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"const any[]","name":"array","decl":"const any[] array","default":null},{"type":"int","name":"arraySize","decl":"int arraySize","default":null},{"type":"int","name":"dataSize","decl":"int dataSize","default":"4"},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"608a1f0d8040d4cd7523b12f30d29ae4476a4266","count":824,"time":1179713627},"last_updated":{"hash":"4e0ae0cb5e57d3f438a7cb2d015bb36e9488c1aa","count":6590,"time":1594285753}},"GetEntDataEnt2":{"symbol":{"name":"GetEntDataEnt2","docStart":12143,"docEnd":12777,"docs":{"brief":"Peeks into an entity's object data and retrieves the entity index\nat the given offset.\n\nNote: This will only work on offsets that are stored as \"entity\nhandles\" (which usually looks like m_h* in properties).  These\nare not SourceMod Handles, but internal Source structures.","tags":[{"tag":"","text":"Peeks into an entity's object data and retrieves the entity index\nat the given offset.\n\nNote: This will only work on offsets that are stored as \"entity\nhandles\" (which usually looks like m_h* in properties).  These\nare not SourceMod Handles, but internal Source structures."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"return","text":"Entity index at the given location.  If there is no entity,\nor the stored entity is invalid, then -1 is returned."},{"tag":"error","text":"Invalid input entity, or offset out of reasonable bounds."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null}]},"created":{"hash":"5f61876ab62e61835cc721b681b2b7724396e180","count":1848,"time":1200211825},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntPropString":{"symbol":{"name":"GetEntPropString","docStart":26800,"docEnd":27336,"docs":{"brief":"Gets a network property as a string.","tags":[{"tag":"","text":"Gets a network property as a string."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property to use."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Invalid entity, offset out of reasonable bounds, or property is not a valid string."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"b56de5d546718e1d78b3ab39a2eba4716165ba9f","count":695,"time":1176517463},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntDataVector":{"symbol":{"name":"GetEntDataVector","docStart":13524,"docEnd":13964,"docs":{"brief":"Peeks into an entity's object data and retrieves the vector at the\ngiven offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and retrieves the vector at the\ngiven offset."},{"tag":"note","text":"Both a Vector and a QAngle are three floats.  This is a\nconvenience function and will work with both types."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:vec","text":"Vector buffer to store data in."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsValidEdict":{"symbol":{"name":"IsValidEdict","docStart":4775,"docEnd":4941,"docs":{"brief":"Returns whether or not an edict index is valid.","tags":[{"tag":"","text":"Returns whether or not an edict index is valid."},{"tag":"param:edict","text":"Index of the edict."},{"tag":"return","text":"True if valid, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null}]},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntProp":{"symbol":{"name":"SetEntProp","docStart":21772,"docEnd":22528,"docs":{"brief":"Sets an integer value in an entity's property.\n\nThis function is considered safer and more robust over SetEntData,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Sets an integer value in an entity's property.\n\nThis function is considered safer and more robust over SetEntData,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:value","text":"Value to set."},{"tag":"param:size","text":"Number of bytes to write (valid values are 1, 2, or 4).\nThis value is auto-detected, and the size parameter is\nonly used as a fallback in case detection fails."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"size","decl":"int size","default":"4"},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityNetClass":{"symbol":{"name":"GetEntityNetClass","docStart":6653,"docEnd":7097,"docs":{"brief":"Retrieves an entity's networkable serverclass name.\nThis is not the same as the classname and is used for networkable state changes.","tags":[{"tag":"","text":"Retrieves an entity's networkable serverclass name.\nThis is not the same as the classname and is used for networkable state changes."},{"tag":"param:edict","text":"Index of the entity."},{"tag":"param:clsname","text":"Buffer to store the serverclass name."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"True on success, false if the edict is not networkable."},{"tag":"error","text":"Invalid edict index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null},{"type":"char[]","name":"clsname","decl":"char[] clsname","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"bbb373297f554b47605500d1ded0a62b4de1786e","count":557,"time":1172800616},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetMaxEntities":{"symbol":{"name":"GetMaxEntities","docStart":3855,"docEnd":4129,"docs":{"brief":"Returns the maximum number of networked entities.\n\nNote: For legacy reasons, this only returns the maximum\nnetworked entities (maximum edicts), rather than total\nmaximum entities.","tags":[{"tag":"","text":"Returns the maximum number of networked entities.\n\nNote: For legacy reasons, this only returns the maximum\nnetworked entities (maximum edicts), rather than total\nmaximum entities."},{"tag":"return","text":"Maximum number of networked entities."}]},"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntDataFloat":{"symbol":{"name":"GetEntDataFloat","docStart":9741,"docEnd":10062,"docs":{"brief":"Peeks into an entity's object data and retrieves the float value at\nthe given offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and retrieves the float value at\nthe given offset."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"return","text":"Value at the given memory location."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntDataFloat":{"symbol":{"name":"SetEntDataFloat","docStart":10121,"docEnd":10487,"docs":{"brief":"Peeks into an entity's object data and sets the float value at\nthe given offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and sets the float value at\nthe given offset."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:value","text":"Value to set."},{"tag":"param:changeState","text":"If true, change will be sent over the network."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"float","name":"value","decl":"float value","default":null},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntDataEnt":{"symbol":{"name":"SetEntDataEnt","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"int","name":"other","decl":"int other","default":null},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"f91d659c6fff94685bb5252790eef0f07ba40d64","count":5908,"time":1463835163}},"GetEntPropFloat":{"symbol":{"name":"GetEntPropFloat","docStart":22641,"docEnd":23193,"docs":{"brief":"Retrieves a float value from an entity's property.\n\nThis function is considered safer and more robust over GetEntDataFloat,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Retrieves a float value from an entity's property.\n\nThis function is considered safer and more robust over GetEntDataFloat,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Value at the given property offset."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FindSendPropOffs":{"symbol":{"name":"FindSendPropOffs","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"cls","decl":"const char[] cls","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"c6323512ef0f5644ef2b88b0bf14598abb04d5b8","count":5766,"time":1446668815}},"SetEntDataEnt2":{"symbol":{"name":"SetEntDataEnt2","docStart":12833,"docEnd":13432,"docs":{"brief":"Peeks into an entity's object data and sets the entity index at the\ngiven offset.\n\nNote: This will only work on offsets that are stored as \"entity\nhandles\" (which usually looks like m_h* in properties).  These\nare not SourceMod Handles, but internal Source structures.","tags":[{"tag":"","text":"Peeks into an entity's object data and sets the entity index at the\ngiven offset.\n\nNote: This will only work on offsets that are stored as \"entity\nhandles\" (which usually looks like m_h* in properties).  These\nare not SourceMod Handles, but internal Source structures."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:other","text":"Entity index to set, or -1 to clear."},{"tag":"param:changeState","text":"If true, change will be sent over the network."},{"tag":"error","text":"Invalid input entity, or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"int","name":"other","decl":"int other","default":null},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"5f61876ab62e61835cc721b681b2b7724396e180","count":1848,"time":1200211825},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntPropEnt":{"symbol":{"name":"GetEntPropEnt","docStart":23920,"docEnd":24595,"docs":{"brief":"Retrieves an entity index from an entity's property.\n\nThis function is considered safer and more robust over GetEntDataEnt*,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Retrieves an entity index from an entity's property.\n\nThis function is considered safer and more robust over GetEntDataEnt*,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Entity index at the given property.\nIf there is no entity, or the entity is not valid,\nthen -1 is returned."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsEntNetworkable":{"symbol":{"name":"IsEntNetworkable","docStart":4983,"docEnd":5192,"docs":{"brief":"Returns whether or not an entity has a valid networkable edict.","tags":[{"tag":"","text":"Returns whether or not an entity has a valid networkable edict."},{"tag":"param:entity","text":"Index of the entity."},{"tag":"return","text":"True if networkable, false if invalid or not networkable."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntPropVector":{"symbol":{"name":"SetEntPropVector","docStart":26078,"docEnd":26684,"docs":{"brief":"Sets a vector of floats in an entity, given a named network property.\n\nThis function is considered safer and more robust over SetEntDataVector,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Sets a vector of floats in an entity, given a named network property.\n\nThis function is considered safer and more robust over SetEntDataVector,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:vec","text":"Vector to set."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"error","text":"Invalid entity, property not found, or property not\nactually a vector data type."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntDataString":{"symbol":{"name":"GetEntDataString","docStart":14630,"docEnd":15061,"docs":{"brief":"Peeks into an entity's object data and retrieves the string at\nthe given offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and retrieves the string at\nthe given offset."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"b56de5d546718e1d78b3ab39a2eba4716165ba9f","count":695,"time":1176517463},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntPropArraySize":{"symbol":{"name":"GetEntPropArraySize","docStart":28033,"docEnd":28397,"docs":{"brief":"Retrieves the count of values that an entity property's array can store.","tags":[{"tag":"","text":"Retrieves the count of values that an entity property's array can store."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"return","text":"Size of array (in elements) or 1 if property is not an array."},{"tag":"error","text":"Invalid entity or property not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null}]},"created":{"hash":"243b7e25f82845c0f8f2b4e36770e18c5c6e0160","count":3294,"time":1307325156},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"RemoveEntity":{"symbol":{"name":"RemoveEntity","docStart":5582,"docEnd":5721,"docs":{"brief":"Marks an entity for deletion.","tags":[{"tag":"","text":"Marks an entity for deletion."},{"tag":"param:entity","text":"Index of the entity."},{"tag":"error","text":"Invalid entity index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"9374620b8b26597b1e2d4231e50b85782a85a2c4","count":6242,"time":1515351156},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEdictFlags":{"symbol":{"name":"SetEdictFlags","docStart":6024,"docEnd":6240,"docs":{"brief":"Sets the flags on an edict.  These are not the same as entity flags.","tags":[{"tag":"","text":"Sets the flags on an edict.  These are not the same as entity flags."},{"tag":"param:edict","text":"Index of the entity."},{"tag":"param:flags","text":"Flags to set."},{"tag":"error","text":"Invalid edict index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntDataArray":{"symbol":{"name":"GetEntDataArray","docStart":28480,"docEnd":28873,"docs":{"brief":"Copies an array of cells from an entity at a given offset.","tags":[{"tag":"","text":"Copies an array of cells from an entity at a given offset."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:array","text":"Array to read into."},{"tag":"param:arraySize","text":"Number of values to read."},{"tag":"param:dataSize","text":"Size of each value in bytes (1, 2, or 4)."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"any[]","name":"array","decl":"any[] array","default":null},{"type":"int","name":"arraySize","decl":"int arraySize","default":null},{"type":"int","name":"dataSize","decl":"int dataSize","default":"4"}]},"created":{"hash":"608a1f0d8040d4cd7523b12f30d29ae4476a4266","count":824,"time":1179713627},"last_updated":{"hash":"4e0ae0cb5e57d3f438a7cb2d015bb36e9488c1aa","count":6590,"time":1594285753}},"GetEntityClassname":{"symbol":{"name":"GetEntityClassname","docStart":30061,"docEnd":30443,"docs":{"brief":"Retrieves the classname of an entity.\nThis is like GetEdictClassname(), except it works for ALL\nentities, not just edicts.","tags":[{"tag":"","text":"Retrieves the classname of an entity.\nThis is like GetEdictClassname(), except it works for ALL\nentities, not just edicts."},{"tag":"param:entity","text":"Index of the entity."},{"tag":"param:clsname","text":"Buffer to store the classname."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"True on success, false if there is no classname set."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"char[]","name":"clsname","decl":"char[] clsname","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"f2bcff69a9fc263151d4770de69761f1a8be3ecb","count":3232,"time":1302323386},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEdictClassname":{"symbol":{"name":"GetEdictClassname","docStart":6294,"docEnd":6575,"docs":{"brief":"Retrieves an edict classname.","tags":[{"tag":"","text":"Retrieves an edict classname."},{"tag":"param:edict","text":"Index of the entity."},{"tag":"param:clsname","text":"Buffer to store the classname."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"True on success, false if there is no classname set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null},{"type":"char[]","name":"clsname","decl":"char[] clsname","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},"created":{"hash":"bbb373297f554b47605500d1ded0a62b4de1786e","count":557,"time":1172800616},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntData":{"symbol":{"name":"SetEntData","docStart":9192,"docEnd":9641,"docs":{"brief":"Peeks into an entity's object data and sets the integer value at\nthe given offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and sets the integer value at\nthe given offset."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:value","text":"Value to set."},{"tag":"param:size","text":"Number of bytes to write (valid values are 1, 2, or 4)."},{"tag":"param:changeState","text":"If true, change will be sent over the network."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"size","decl":"int size","default":"4"},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntData":{"symbol":{"name":"GetEntData","docStart":8725,"docEnd":9128,"docs":{"brief":"Peeks into an entity's object data and retrieves the integer value at\nthe given offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and retrieves the integer value at\nthe given offset."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:size","text":"Number of bytes to read (valid values are 1, 2, or 4)."},{"tag":"return","text":"Value at the given memory location."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"int","name":"size","decl":"int size","default":"4"}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntPropFloat":{"symbol":{"name":"SetEntPropFloat","docStart":23289,"docEnd":23812,"docs":{"brief":"Sets a float value in an entity's property.\n\nThis function is considered safer and more robust over SetEntDataFloat,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Sets a float value in an entity's property.\n\nThis function is considered safer and more robust over SetEntDataFloat,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:value","text":"Value to set."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"float","name":"value","decl":"float value","default":null},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"HasEntProp":{"symbol":{"name":"HasEntProp","docStart":20243,"docEnd":20543,"docs":{"brief":"Checks if an entity property exists on an entity.","tags":[{"tag":"","text":"Checks if an entity property exists on an entity."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"return","text":"Whether the property exists on the entity."},{"tag":"error","text":"Invalid entity."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null}]},"created":{"hash":"c6323512ef0f5644ef2b88b0bf14598abb04d5b8","count":5766,"time":1446668815},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntDataVector":{"symbol":{"name":"SetEntDataVector","docStart":14037,"docEnd":14527,"docs":{"brief":"Peeks into an entity's object data and sets the vector at the given\noffset.","tags":[{"tag":"","text":"Peeks into an entity's object data and sets the vector at the given\noffset."},{"tag":"note","text":"Both a Vector and a QAngle are three floats.  This is a\nconvenience function and will work with both types."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:vec","text":"Vector to set."},{"tag":"param:changeState","text":"If true, change will be sent over the network."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"ec62fb6892b11a4a299ec040ad4afc389c86c35c","count":558,"time":1172822445},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntProp":{"symbol":{"name":"GetEntProp","docStart":20899,"docEnd":21671,"docs":{"brief":"Retrieves an integer value from an entity's property.\n\nThis function is considered safer and more robust over GetEntData,\nbecause it performs strict offset checking and typing rules.","tags":[{"tag":"","text":"Retrieves an integer value from an entity's property.\n\nThis function is considered safer and more robust over GetEntData,\nbecause it performs strict offset checking and typing rules."},{"tag":"param:entity","text":"Entity/edict index."},{"tag":"param:type","text":"Property type."},{"tag":"param:prop","text":"Property name."},{"tag":"param:size","text":"Number of bytes to write (valid values are 1, 2, or 4).\nThis value is auto-detected, and the size parameter is\nonly used as a fallback in case detection fails."},{"tag":"param:element","text":"Element # (starting from 0) if property is an array."},{"tag":"return","text":"Value at the given property offset."},{"tag":"error","text":"Invalid entity or property not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"PropType","name":"type","decl":"PropType type","default":null},{"type":"const char[]","name":"prop","decl":"const char[] prop","default":null},{"type":"int","name":"size","decl":"int size","default":"4"},{"type":"int","name":"element","decl":"int element","default":"0"}]},"created":{"hash":"791cbc985f7dca8edad6f55d431a013301441741","count":562,"time":1172862664},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"ChangeEdictState":{"symbol":{"name":"ChangeEdictState","docStart":8212,"docEnd":8663,"docs":{"brief":"Marks an entity as state changed.  This can be useful if you set an offset\nand wish for it to be immediately changed over the network.  By default this\nis not done for offset setting functions.","tags":[{"tag":"","text":"Marks an entity as state changed.  This can be useful if you set an offset\nand wish for it to be immediately changed over the network.  By default this\nis not done for offset setting functions."},{"tag":"param:edict","text":"Index to the edict."},{"tag":"param:offset","text":"Offset to mark as changed.  If 0,\nthe entire edict is marked as changed."},{"tag":"error","text":"Invalid entity or offset out of bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null},{"type":"int","name":"offset","decl":"int offset","default":"0"}]},"created":{"hash":"de588c77b9338c962a242dcf13a1a15cf9be1a6b","count":559,"time":1172824453},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SetEntDataString":{"symbol":{"name":"SetEntDataString","docStart":15146,"docEnd":15626,"docs":{"brief":"Peeks into an entity's object data and sets the string at\nthe given offset.","tags":[{"tag":"","text":"Peeks into an entity's object data and sets the string at\nthe given offset."},{"tag":"param:entity","text":"Edict index."},{"tag":"param:offset","text":"Offset to use."},{"tag":"param:buffer","text":"String to set."},{"tag":"param:maxlen","text":"Maximum length of bytes to write."},{"tag":"param:changeState","text":"If true, change will be sent over the network."},{"tag":"return","text":"Number of non-null bytes written."},{"tag":"error","text":"Invalid entity or offset out of reasonable bounds."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"bool","name":"changeState","decl":"bool changeState","default":"false"}]},"created":{"hash":"b56de5d546718e1d78b3ab39a2eba4716165ba9f","count":695,"time":1176517463},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEdictFlags":{"symbol":{"name":"GetEdictFlags","docStart":5764,"docEnd":5982,"docs":{"brief":"Returns the flags on an edict.  These are not the same as entity flags.","tags":[{"tag":"","text":"Returns the flags on an edict.  These are not the same as entity flags."},{"tag":"param:edict","text":"Index of the entity."},{"tag":"return","text":"Edict flags."},{"tag":"error","text":"Invalid edict index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"edict","decl":"int edict","default":null}]},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"GetEntityAddress":{"symbol":{"name":"GetEntityAddress","docStart":29829,"docEnd":30011,"docs":{"brief":"Gets the memory address of an entity.","tags":[{"tag":"","text":"Gets the memory address of an entity."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Address of the entity."},{"tag":"error","text":"Invalid entity."}]},"kind":"native","returnType":"Address","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"a46dcd45d7adb904f19faf810f20d6948cb89c10","count":3586,"time":1342978837},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"FL_EDICT_FULL":{"symbol":{"name":"FL_EDICT_FULL","docStart":2257,"docEnd":2293,"docs":{"brief":"this is a full server entity","tags":[{"tag":"","text":"this is a full server entity"}]},"value":"(1<<2)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_EDICT_FREE":{"symbol":{"name":"FL_EDICT_FREE","docStart":2171,"docEnd":2207,"docs":{"brief":"this edict if free for reuse","tags":[{"tag":"","text":"this edict if free for reuse"}]},"value":"(1<<1)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_entity_included":{"symbol":{"name":"_entity_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775},"last_updated":{"hash":"16eab8a0911a63e1daa51e44232f887087fd7958","count":555,"time":1172796775}},"FL_FULL_EDICT_CHANGED":{"symbol":{"name":"FL_FULL_EDICT_CHANGED","docStart":0,"docEnd":0,"docs":null,"value":"(1<<8)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503}},"FL_EDICT_ALWAYS":{"symbol":{"name":"FL_EDICT_ALWAYS","docStart":2453,"docEnd":2488,"docs":{"brief":"always transmit this entity","tags":[{"tag":"","text":"always transmit this entity"}]},"value":"(1<<3)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_EDICT_PVSCHECK":{"symbol":{"name":"FL_EDICT_PVSCHECK","docStart":2622,"docEnd":2674,"docs":{"brief":"always transmit entity, but cull against PVS","tags":[{"tag":"","text":"always transmit entity, but cull against PVS"}]},"value":"(1<<5)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_EDICT_DIRTY_PVS_INFORMATION":{"symbol":{"name":"FL_EDICT_DIRTY_PVS_INFORMATION","docStart":0,"docEnd":0,"docs":null,"value":"(1<<7)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503}},"FL_EDICT_CHANGED":{"symbol":{"name":"FL_EDICT_CHANGED","docStart":0,"docEnd":0,"docs":null,"value":"(1<<0)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503}},"FL_EDICT_DONTSEND":{"symbol":{"name":"FL_EDICT_DONTSEND","docStart":2538,"docEnd":2572,"docs":{"brief":"don't transmit this entity","tags":[{"tag":"","text":"don't transmit this entity"}]},"value":"(1<<4)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_EDICT_FULLCHECK":{"symbol":{"name":"FL_EDICT_FULLCHECK","docStart":2343,"docEnd":2403,"docs":{"brief":"call ShouldTransmit() each time, this is a fake flag","tags":[{"tag":"","text":"call ShouldTransmit() each time, this is a fake flag"}]},"value":"(0<<0)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"FL_EDICT_PENDING_DORMANT_CHECK":{"symbol":{"name":"FL_EDICT_PENDING_DORMANT_CHECK","docStart":0,"docEnd":0,"docs":null,"value":"(1<<6)"},"created":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503},"last_updated":{"hash":"a0ae2a5b16d9c6a1eba1b70062d1be230dc661fa","count":556,"time":1172798503}}},"enums":{"PropFieldType":{"symbol":{"name":"PropFieldType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"PropField_Unsupported","docStart":2874,"docEnd":2906,"docs":{"brief":"The type is unsupported.","tags":[{"tag":"","text":"The type is unsupported."}]},"value":null},{"name":"PropField_Integer","docStart":2937,"docEnd":2979,"docs":{"brief":"Valid for SendProp and Data fields","tags":[{"tag":"","text":"Valid for SendProp and Data fields"}]},"value":null},{"name":"PropField_Float","docStart":3010,"docEnd":3052,"docs":{"brief":"Valid for SendProp and Data fields","tags":[{"tag":"","text":"Valid for SendProp and Data fields"}]},"value":null},{"name":"PropField_Entity","docStart":3083,"docEnd":3141,"docs":{"brief":"Valid for Data fields only (SendProp shows as int)","tags":[{"tag":"","text":"Valid for Data fields only (SendProp shows as int)"}]},"value":null},{"name":"PropField_Vector","docStart":3172,"docEnd":3214,"docs":{"brief":"Valid for SendProp and Data fields","tags":[{"tag":"","text":"Valid for SendProp and Data fields"}]},"value":null},{"name":"PropField_String","docStart":3245,"docEnd":3287,"docs":{"brief":"Valid for SendProp and Data fields","tags":[{"tag":"","text":"Valid for SendProp and Data fields"}]},"value":null},{"name":"PropField_String_T","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"PropField_Variant","docStart":3318,"docEnd":3623,"docs":{"brief":"Valid for Data fields.  Read only.\nNote that the size of a string_t is dynamic, and\nthus FindDataMapOffs() will return the constant size\nof the string_t container (which is 32 bits right now).","tags":[{"tag":"","text":"Valid for Data fields.  Read only.\nNote that the size of a string_t is dynamic, and\nthus FindDataMapOffs() will return the constant size\nof the string_t container (which is 32 bits right now)."}]},"value":null}]},"created":{"hash":"5f61876ab62e61835cc721b681b2b7724396e180","count":1848,"time":1200211825},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PropType":{"symbol":{"name":"PropType","docStart":1637,"docEnd":1678,"docs":{"brief":"Property types for entities.","tags":[{"tag":"","text":"Property types for entities."}]},"entries":[{"name":"Prop_Send","docStart":1715,"docEnd":1750,"docs":{"brief":"This property is networked.","tags":[{"tag":"","text":"This property is networked."}]},"value":"0"},{"name":"Prop_Data","docStart":1769,"docEnd":1820,"docs":{"brief":"This property is for save game data fields.","tags":[{"tag":"","text":"This property is for save game data fields."}]},"value":"1"}]},"created":{"hash":"3f7180aa65889a38469097b3f02939097211dff0","count":611,"time":1173845339},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}},"adt":{"functions":{},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_adt_included":{"symbol":{"name":"_adt_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908},"last_updated":{"hash":"8fa974961c93561608ad249ee437fc100962da8a","count":1157,"time":1185239908}}},"enums":{},"typesets":{},"typedefs":{}},"sorting":{"functions":{"SortCustom1D":{"symbol":{"name":"SortCustom1D","docStart":3519,"docEnd":3812,"docs":{"brief":"Sorts a custom 1D array.  You must pass in a comparison function.","tags":[{"tag":"","text":"Sorts a custom 1D array.  You must pass in a comparison function."},{"tag":"param:array","text":"Array to sort."},{"tag":"param:array_size","text":"Size of the array to sort."},{"tag":"param:sortfunc","text":"Sort function."},{"tag":"param:hndl","text":"Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"int[]","name":"array","decl":"int[] array","default":null},{"type":"int","name":"array_size","decl":"int array_size","default":null},{"type":"SortFunc1D","name":"sortfunc","decl":"SortFunc1D sortfunc","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortStrings":{"symbol":{"name":"SortStrings","docStart":2575,"docEnd":2769,"docs":{"brief":"Sorts an array of strings.","tags":[{"tag":"","text":"Sorts an array of strings."},{"tag":"param:array","text":"Array of strings to sort in-place."},{"tag":"param:array_size","text":"Size of the array."},{"tag":"param:order","text":"Sorting order to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[][]","name":"array","decl":"char[][] array","default":null},{"type":"int","name":"array_size","decl":"int array_size","default":null},{"type":"SortOrder","name":"order","decl":"SortOrder order","default":"Sort_Ascending"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortIntegers":{"symbol":{"name":"SortIntegers","docStart":1970,"docEnd":2166,"docs":{"brief":"Sorts an array of integers.","tags":[{"tag":"","text":"Sorts an array of integers."},{"tag":"param:array","text":"Array of integers to sort in-place."},{"tag":"param:array_size","text":"Size of the array."},{"tag":"param:order","text":"Sorting order to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"int[]","name":"array","decl":"int[] array","default":null},{"type":"int","name":"array_size","decl":"int array_size","default":null},{"type":"SortOrder","name":"order","decl":"SortOrder order","default":"Sort_Ascending"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortADTArray":{"symbol":{"name":"SortADTArray","docStart":5130,"docEnd":5382,"docs":{"brief":"Sort an ADT Array. Specify the type as Integer, Float, or String.","tags":[{"tag":"","text":"Sort an ADT Array. Specify the type as Integer, Float, or String."},{"tag":"param:array","text":"Array Handle to sort"},{"tag":"param:order","text":"Sort order to use, same as other sorts."},{"tag":"param:type","text":"Data type stored in the ADT Array"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"SortOrder","name":"order","decl":"SortOrder order","default":null},{"type":"SortType","name":"type","decl":"SortType type","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortCustom2D":{"symbol":{"name":"SortCustom2D","docStart":4677,"docEnd":5019,"docs":{"brief":"Sorts a custom 2D array.  You must pass in a comparison function.","tags":[{"tag":"","text":"Sorts a custom 2D array.  You must pass in a comparison function."},{"tag":"param:array","text":"Array to sort."},{"tag":"param:array_size","text":"Size of the major array to sort (first index, outermost)."},{"tag":"param:sortfunc","text":"Sort comparison function to use."},{"tag":"param:hndl","text":"Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[][]","name":"array","decl":"any[][] array","default":null},{"type":"int","name":"array_size","decl":"int array_size","default":null},{"type":"SortFunc2D","name":"sortfunc","decl":"SortFunc2D sortfunc","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortADTArrayCustom":{"symbol":{"name":"SortADTArrayCustom","docStart":6171,"docEnd":6436,"docs":{"brief":"Custom sorts an ADT Array. You must pass in a comparison function.","tags":[{"tag":"","text":"Custom sorts an ADT Array. You must pass in a comparison function."},{"tag":"param:array","text":"Array Handle to sort"},{"tag":"param:sortfunc","text":"Sort comparison function to use"},{"tag":"param:hndl","text":"Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"SortFuncADTArray","name":"sortfunc","decl":"SortFuncADTArray sortfunc","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortFloats":{"symbol":{"name":"SortFloats","docStart":2260,"docEnd":2481,"docs":{"brief":"Sorts an array of float point numbers.","tags":[{"tag":"","text":"Sorts an array of float point numbers."},{"tag":"param:array","text":"Array of floating point numbers to sort in-place."},{"tag":"param:array_size","text":"Size of the array."},{"tag":"param:order","text":"Sorting order to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[]","name":"array","decl":"float[] array","default":null},{"type":"int","name":"array_size","decl":"int array_size","default":null},{"type":"SortOrder","name":"order","decl":"SortOrder order","default":"Sort_Ascending"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"_sorting_included":{"symbol":{"name":"_sorting_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}}},"enums":{"SortType":{"symbol":{"name":"SortType","docStart":1853,"docEnd":1896,"docs":{"brief":"Data types for ADT Array Sorts","tags":[{"tag":"","text":"Data types for ADT Array Sorts"}]},"entries":[{"name":"Sort_Integer","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"Sort_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Sort_String","docStart":0,"docEnd":0,"docs":null,"value":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortOrder":{"symbol":{"name":"SortOrder","docStart":1641,"docEnd":1678,"docs":{"brief":"Contains sorting orders.","tags":[{"tag":"","text":"Contains sorting orders."}]},"entries":[{"name":"Sort_Ascending","docStart":1724,"docEnd":1747,"docs":{"brief":"Ascending order","tags":[{"tag":"","text":"Ascending order"}]},"value":"0"},{"name":"Sort_Descending","docStart":1774,"docEnd":1798,"docs":{"brief":"Descending order","tags":[{"tag":"","text":"Descending order"}]},"value":"1"},{"name":"Sort_Random","docStart":1825,"docEnd":1845,"docs":{"brief":"Random order","tags":[{"tag":"","text":"Random order"}]},"value":"2"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"SortFunc2D":{"symbol":{"name":"SortFunc2D","docStart":3921,"docEnd":4489,"docs":{"brief":"Sort comparison function for 2D array elements (sub-arrays).","tags":[{"tag":"","text":"Sort comparison function for 2D array elements (sub-arrays)."},{"tag":"note","text":"You may need to use explicit tags in order to use data properly."},{"tag":"param:elem1","text":"First array to compare."},{"tag":"param:elem2","text":"Second array to compare."},{"tag":"param:array","text":"Array that is being sorted (order is undefined)."},{"tag":"param:hndl","text":"Handle optionally passed in while sorting."},{"tag":"return","text":"-1 if first should go before second\n0 if first is equal to second\n1 if first should go after second"}]},"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function int(int[] elem1, int[] elem2, const int[][] array, Handle hndl)","parsedSignature":{"returnType":"int","arguments":[{"type":"int[]","name":"elem1","decl":"int[] elem1","default":null},{"type":"int[]","name":"elem2","decl":"int[] elem2","default":null},{"type":"const int[][]","name":"array","decl":"const int[][] array","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function int(char[] elem1, char[] elem2, const char[][] array, Handle hndl)","parsedSignature":{"returnType":"int","arguments":[{"type":"char[]","name":"elem1","decl":"char[] elem1","default":null},{"type":"char[]","name":"elem2","decl":"char[] elem2","default":null},{"type":"const char[][]","name":"array","decl":"const char[][] array","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]}}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{"SortFunc1D":{"symbol":{"name":"SortFunc1D","docStart":2865,"docEnd":3424,"docs":{"brief":"Sort comparison function for 1D array elements.","tags":[{"tag":"","text":"Sort comparison function for 1D array elements."},{"tag":"note","text":"You may need to use explicit tags in order to use data properly."},{"tag":"param:elem1","text":"First element to compare."},{"tag":"param:elem2","text":"Second element to compare."},{"tag":"param:array","text":"Array that is being sorted (order is undefined)."},{"tag":"param:hndl","text":"Handle optionally passed in while sorting."},{"tag":"return","text":"-1 if first should go before second\n0 if first is equal to second\n1 if first should go after second"}]},"type":"function int(int elem1, int elem2, const int[] array, Handle hndl)","parsedSignature":{"returnType":"int","arguments":[{"type":"int","name":"elem1","decl":"int elem1","default":null},{"type":"int","name":"elem2","decl":"int elem2","default":null},{"type":"const int[]","name":"array","decl":"const int[] array","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]}},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SortFuncADTArray":{"symbol":{"name":"SortFuncADTArray","docStart":5459,"docEnd":6073,"docs":{"brief":"Sort comparison function for ADT Array elements. Function provides you with\nindexes currently being sorted, use ADT Array functions to retrieve the\nindex values and compare.","tags":[{"tag":"","text":"Sort comparison function for ADT Array elements. Function provides you with\nindexes currently being sorted, use ADT Array functions to retrieve the\nindex values and compare."},{"tag":"param:index1","text":"First index to compare."},{"tag":"param:index2","text":"Second index to compare."},{"tag":"param:array","text":"Array that is being sorted (order is undefined)."},{"tag":"param:hndl","text":"Handle optionally passed in while sorting."},{"tag":"return","text":"-1 if first should go before second\n0 if first is equal to second\n1 if first should go after second"}]},"type":"function int(int index1, int index2, Handle array, Handle hndl)","parsedSignature":{"returnType":"int","arguments":[{"type":"int","name":"index1","decl":"int index1","default":null},{"type":"int","name":"index2","decl":"int index2","default":null},{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null}]}},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}}},"protobuf":{"functions":{"PbAddInt":{"symbol":{"name":"PbAddInt","docStart":20742,"docEnd":21084,"docs":{"brief":"Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Integer value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadAngle":{"symbol":{"name":"PbReadAngle","docStart":15354,"docEnd":15701,"docs":{"brief":"Reads an XYZ angle value from a protobuf message.","tags":[{"tag":"","text":"Reads an XYZ angle value from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination angle buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbSetInt":{"symbol":{"name":"PbSetInt","docStart":17136,"docEnd":17516,"docs":{"brief":"Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message.","tags":[{"tag":"","text":"Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Integer value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"value","decl":"int value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbGetRepeatedFieldCount":{"symbol":{"name":"PbGetRepeatedFieldCount","docStart":16741,"docEnd":17064,"docs":{"brief":"Gets the number of elements in a repeated field of a protobuf message.","tags":[{"tag":"","text":"Gets the number of elements in a repeated field of a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"Number of elements in the field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedMessage":{"symbol":{"name":"PbReadRepeatedMessage","docStart":24556,"docEnd":24954,"docs":{"brief":"Retrieve a handle to an embedded protobuf message in a protobuf message repeated field.","tags":[{"tag":"","text":"Retrieve a handle to an embedded protobuf message in a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index in the repeated field."},{"tag":"return","text":"protobuf handle to embedded message."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbAddVector":{"symbol":{"name":"PbAddVector","docStart":23009,"docEnd":23305,"docs":{"brief":"Add an XYZ vector to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an XYZ vector to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbSetColor":{"symbol":{"name":"PbSetColor","docStart":18944,"docEnd":19277,"docs":{"brief":"Sets an RGBA color on a protobuf message.","tags":[{"tag":"","text":"Sets an RGBA color on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:color","text":"Color value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedColor":{"symbol":{"name":"PbReadRepeatedColor","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"int[4]","name":"buffer","decl":"int buffer[4]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbReadInt":{"symbol":{"name":"PbReadInt","docStart":13021,"docEnd":13402,"docs":{"brief":"Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message.","tags":[{"tag":"","text":"Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"return","text":"Integer value read."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbAddBool":{"symbol":{"name":"PbAddBool","docStart":21525,"docEnd":21815,"docs":{"brief":"Add a bool to a protobuf message repeated field.","tags":[{"tag":"","text":"Add a bool to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Boolean value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedFloat":{"symbol":{"name":"PbReadRepeatedFloat","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbAddColor":{"symbol":{"name":"PbAddColor","docStart":22258,"docEnd":22553,"docs":{"brief":"Add an RGBA color to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an RGBA color to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:color","text":"Color value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbAddFloat":{"symbol":{"name":"PbAddFloat","docStart":21153,"docEnd":21452,"docs":{"brief":"Add a float or double to a protobuf message repeated field.","tags":[{"tag":"","text":"Add a float or double to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Float value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadBool":{"symbol":{"name":"PbReadBool","docStart":13941,"docEnd":14270,"docs":{"brief":"Reads a bool from a protobuf message.","tags":[{"tag":"","text":"Reads a bool from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"return","text":"Boolean value read."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbAddMessage":{"symbol":{"name":"PbAddMessage","docStart":25038,"docEnd":25373,"docs":{"brief":"Adds an embedded protobuf message to a protobuf message repeated field.","tags":[{"tag":"","text":"Adds an embedded protobuf message to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"protobuf handle to added, embedded message."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbSetVector":{"symbol":{"name":"PbSetVector","docStart":19841,"docEnd":20175,"docs":{"brief":"Sets an XYZ vector on a protobuf message.","tags":[{"tag":"","text":"Sets an XYZ vector on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbSetFloat":{"symbol":{"name":"PbSetFloat","docStart":17620,"docEnd":17957,"docs":{"brief":"Sets a float or double on a protobuf message.","tags":[{"tag":"","text":"Sets a float or double on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Float value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float","name":"value","decl":"float value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbRemoveRepeatedFieldValue":{"symbol":{"name":"PbRemoveRepeatedFieldValue","docStart":23764,"docEnd":24075,"docs":{"brief":"Removes a value by index from a protobuf message repeated field.","tags":[{"tag":"","text":"Removes a value by index from a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"9215ddcf8a882f570b3f56dee4307d0f1caa6259","count":4294,"time":1395422628},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbAddVector2D":{"symbol":{"name":"PbAddVector2D","docStart":23386,"docEnd":23681,"docs":{"brief":"Add an XY vector to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an XY vector to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[2]","name":"vec","decl":"const float vec[2]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadColor":{"symbol":{"name":"PbReadColor","docStart":14895,"docEnd":15243,"docs":{"brief":"Reads an RGBA color value from a protobuf message.","tags":[{"tag":"","text":"Reads an RGBA color value from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination color buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int[4]","name":"buffer","decl":"int buffer[4]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadString":{"symbol":{"name":"PbReadString","docStart":14365,"docEnd":14768,"docs":{"brief":"Reads a string from a protobuf message.","tags":[{"tag":"","text":"Reads a string from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadFloat":{"symbol":{"name":"PbReadFloat","docStart":13495,"docEnd":13844,"docs":{"brief":"Reads a float or downcasted double from a protobuf message.","tags":[{"tag":"","text":"Reads a float or downcasted double from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"return","text":"Float value read."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadVector2D":{"symbol":{"name":"PbReadVector2D","docStart":16277,"docEnd":16625,"docs":{"brief":"Reads an XY vector value from a protobuf message.","tags":[{"tag":"","text":"Reads an XY vector value from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination vector buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float[2]","name":"buffer","decl":"float buffer[2]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadVector":{"symbol":{"name":"PbReadVector","docStart":15814,"docEnd":16163,"docs":{"brief":"Reads an XYZ vector value from a protobuf message.","tags":[{"tag":"","text":"Reads an XYZ vector value from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination vector buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedBool":{"symbol":{"name":"PbReadRepeatedBool","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbReadMessage":{"symbol":{"name":"PbReadMessage","docStart":24162,"docEnd":24491,"docs":{"brief":"Retrieve a handle to an embedded protobuf message in a protobuf message.","tags":[{"tag":"","text":"Retrieve a handle to an embedded protobuf message in a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"protobuf handle to embedded message."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedAngle":{"symbol":{"name":"PbReadRepeatedAngle","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbSetAngle":{"symbol":{"name":"PbSetAngle","docStart":19392,"docEnd":19724,"docs":{"brief":"Sets an XYZ angle on a protobuf message.","tags":[{"tag":"","text":"Sets an XYZ angle on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:angle","text":"Angle value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"angle","decl":"const float angle[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbSetBool":{"symbol":{"name":"PbSetBool","docStart":18065,"docEnd":18393,"docs":{"brief":"Sets a bool on a protobuf message.","tags":[{"tag":"","text":"Sets a bool on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Boolean value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"bool","name":"value","decl":"bool value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedString":{"symbol":{"name":"PbReadRepeatedString","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbReadRepeatedVector":{"symbol":{"name":"PbReadRepeatedVector","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbAddString":{"symbol":{"name":"PbAddString","docStart":21886,"docEnd":22177,"docs":{"brief":"Add a string to a protobuf message repeated field.","tags":[{"tag":"","text":"Add a string to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"String value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedVector2D":{"symbol":{"name":"PbReadRepeatedVector2D","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"float[2]","name":"buffer","decl":"float buffer[2]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbSetVector2D":{"symbol":{"name":"PbSetVector2D","docStart":20291,"docEnd":20624,"docs":{"brief":"Sets an XY vector on a protobuf message.","tags":[{"tag":"","text":"Sets an XY vector on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[2]","name":"vec","decl":"const float vec[2]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbReadRepeatedInt":{"symbol":{"name":"PbReadRepeatedInt","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}},"PbSetString":{"symbol":{"name":"PbSetString","docStart":18499,"docEnd":18828,"docs":{"brief":"Sets a string on a protobuf message.","tags":[{"tag":"","text":"Sets a string on a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"String value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PbAddAngle":{"symbol":{"name":"PbAddAngle","docStart":22633,"docEnd":22927,"docs":{"brief":"Add an XYZ angle to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an XYZ angle to a protobuf message repeated field."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:angle","text":"Angle value to add."},{"tag":"error","text":"Invalid or incorrect Handle, non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pb","decl":"Handle pb","default":null},{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"angle","decl":"const float angle[3]","default":null}]},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"methodmaps":{"Protobuf":{"symbol":{"name":"Protobuf","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"ReadInt","docStart":1721,"docEnd":2014,"docs":{"brief":"Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message.","tags":[{"tag":"","text":"Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"return","text":"Integer value read."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadInt64","docStart":2103,"docEnd":2425,"docs":{"brief":"Reads an int64, uint64, sint64, fixed64, sfixed64 from a protobuf message.","tags":[{"tag":"","text":"Reads an int64, uint64, sint64, fixed64, sfixed64 from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Array to represent the large integer (0=High bits, 1=Low bits)."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadFloat","docStart":2531,"docEnd":2792,"docs":{"brief":"Reads a float or downcasted double from a protobuf message.","tags":[{"tag":"","text":"Reads a float or downcasted double from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"return","text":"Float value read."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadBool","docStart":2885,"docEnd":3126,"docs":{"brief":"Reads a bool from a protobuf message.","tags":[{"tag":"","text":"Reads a bool from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"return","text":"Boolean value read."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadString","docStart":3217,"docEnd":3530,"docs":{"brief":"Reads a string from a protobuf message.","tags":[{"tag":"","text":"Reads a string from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlength","text":"Maximum length of output string buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadColor","docStart":3653,"docEnd":3913,"docs":{"brief":"Reads an RGBA color value from a protobuf message.","tags":[{"tag":"","text":"Reads an RGBA color value from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination color buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int[4]","name":"buffer","decl":"int buffer[4]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadAngle","docStart":4020,"docEnd":4279,"docs":{"brief":"Reads an XYZ angle value from a protobuf message.","tags":[{"tag":"","text":"Reads an XYZ angle value from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination angle buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadVector","docStart":4388,"docEnd":4689,"docs":{"brief":"Reads an XYZ vector value from a protobuf message.","tags":[{"tag":"","text":"Reads an XYZ vector value from a protobuf message."},{"tag":"param:pb","text":"protobuf handle."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination vector buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"ReadVector2D","docStart":4799,"docEnd":5059,"docs":{"brief":"Reads an XY vector value from a protobuf message.","tags":[{"tag":"","text":"Reads an XY vector value from a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:buffer","text":"Destination vector buffer."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float[2]","name":"buffer","decl":"float buffer[2]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"GetRepeatedFieldCount","docStart":5171,"docEnd":5406,"docs":{"brief":"Gets the number of elements in a repeated field of a protobuf message.","tags":[{"tag":"","text":"Gets the number of elements in a repeated field of a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"Number of elements in the field."},{"tag":"error","text":"Non-existent field, or non-repeated field."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]},{"name":"HasField","docStart":5474,"docEnd":5711,"docs":{"brief":"Returns whether or not the named, non-repeated field has a value set.","tags":[{"tag":"","text":"Returns whether or not the named, non-repeated field has a value set."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"True if value has been set, else false."},{"tag":"error","text":"Non-existent field, or repeated field."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]},{"name":"SetInt","docStart":5767,"docEnd":6059,"docs":{"brief":"Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message.","tags":[{"tag":"","text":"Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Integer value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"value","decl":"int value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetInt64","docStart":6159,"docEnd":6468,"docs":{"brief":"Sets an int64, uint64, sint64, fixed64, sfixed64 on a protobuf message.","tags":[{"tag":"","text":"Sets an int64, uint64, sint64, fixed64, sfixed64 on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Large integer value to set (0=High bits, 1=Low bits)."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetFloat","docStart":6573,"docEnd":6822,"docs":{"brief":"Sets a float or double on a protobuf message.","tags":[{"tag":"","text":"Sets a float or double on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Float value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float","name":"value","decl":"float value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetBool","docStart":6926,"docEnd":7166,"docs":{"brief":"Sets a bool on a protobuf message.","tags":[{"tag":"","text":"Sets a bool on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Boolean value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"bool","name":"value","decl":"bool value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetString","docStart":7268,"docEnd":7509,"docs":{"brief":"Sets a string on a protobuf message.","tags":[{"tag":"","text":"Sets a string on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"String value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetColor","docStart":7621,"docEnd":7866,"docs":{"brief":"Sets an RGBA color on a protobuf message.","tags":[{"tag":"","text":"Sets an RGBA color on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:color","text":"Color value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetAngle","docStart":7977,"docEnd":8221,"docs":{"brief":"Sets an XYZ angle on a protobuf message.","tags":[{"tag":"","text":"Sets an XYZ angle on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:angle","text":"Angle value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"angle","decl":"const float angle[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetVector","docStart":8334,"docEnd":8580,"docs":{"brief":"Sets an XYZ vector on a protobuf message.","tags":[{"tag":"","text":"Sets an XYZ vector on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"SetVector2D","docStart":8692,"docEnd":8937,"docs":{"brief":"Sets an XY vector on a protobuf message.","tags":[{"tag":"","text":"Sets an XY vector on a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to set."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[2]","name":"vec","decl":"const float vec[2]","default":null},{"type":"int","name":"index","decl":"int index","default":"-1"}]},{"name":"AddInt","docStart":9051,"docEnd":9307,"docs":{"brief":"Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Integer value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"AddInt64","docStart":9372,"docEnd":9645,"docs":{"brief":"Add an int64, uint64, sint64, fixed64, sfixed64 to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an int64, uint64, sint64, fixed64, sfixed64 to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Large integer value to add (0=High bits, 1=Low bits)."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null}]},{"name":"AddFloat","docStart":9715,"docEnd":9928,"docs":{"brief":"Add a float or double to a protobuf message repeated field.","tags":[{"tag":"","text":"Add a float or double to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Float value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"AddBool","docStart":9997,"docEnd":10201,"docs":{"brief":"Add a bool to a protobuf message repeated field.","tags":[{"tag":"","text":"Add a bool to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"Boolean value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"AddString","docStart":10268,"docEnd":10473,"docs":{"brief":"Add a string to a protobuf message repeated field.","tags":[{"tag":"","text":"Add a string to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:value","text":"String value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"AddColor","docStart":10550,"docEnd":10759,"docs":{"brief":"Add an RGBA color to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an RGBA color to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:color","text":"Color value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null}]},{"name":"AddAngle","docStart":10835,"docEnd":11043,"docs":{"brief":"Add an XYZ angle to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an XYZ angle to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:angle","text":"Angle value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"angle","decl":"const float angle[3]","default":null}]},{"name":"AddVector","docStart":11121,"docEnd":11331,"docs":{"brief":"Add an XYZ vector to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an XYZ vector to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"AddVector2D","docStart":11408,"docEnd":11617,"docs":{"brief":"Add an XY vector to a protobuf message repeated field.","tags":[{"tag":"","text":"Add an XY vector to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:vec","text":"Vector value to add."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"const float[2]","name":"vec","decl":"const float vec[2]","default":null}]},{"name":"RemoveRepeatedFieldValue","docStart":11696,"docEnd":11921,"docs":{"brief":"Removes a value by index from a protobuf message repeated field.","tags":[{"tag":"","text":"Removes a value by index from a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index into repeated field."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"ReadMessage","docStart":12004,"docEnd":12247,"docs":{"brief":"Retrieve a handle to an embedded protobuf message in a protobuf message.","tags":[{"tag":"","text":"Retrieve a handle to an embedded protobuf message in a protobuf message."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"Protobuf handle to embedded message."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"Protobuf","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]},{"name":"ReadRepeatedMessage","docStart":12310,"docEnd":12625,"docs":{"brief":"Retrieve a handle to an embedded protobuf message in a protobuf message\nrepeated field.","tags":[{"tag":"","text":"Retrieve a handle to an embedded protobuf message in a protobuf message\nrepeated field."},{"tag":"param:field","text":"Field name."},{"tag":"param:index","text":"Index in the repeated field."},{"tag":"return","text":"Protobuf handle to embedded message."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"Protobuf","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"AddMessage","docStart":12707,"docEnd":12956,"docs":{"brief":"Adds an embedded protobuf message to a protobuf message repeated field.","tags":[{"tag":"","text":"Adds an embedded protobuf message to a protobuf message repeated field."},{"tag":"param:field","text":"Field name."},{"tag":"return","text":"Protobuf handle to added, embedded message."},{"tag":"error","text":"Non-existent field, or incorrect field type."}]},"kind":"native","returnType":"Protobuf","arguments":[{"type":"const char[]","name":"field","decl":"const char[] field","default":null}]}],"properties":[]},"created":{"hash":"6b714dafe39d2af9b0a49c3e751f427e51943910","count":5004,"time":1415571556},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"enumstructs":{},"constants":{},"defines":{"_protobuf_included":{"symbol":{"name":"_protobuf_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992},"last_updated":{"hash":"312e26a5cfba5263bd165832f8dc68d46a8a2312","count":3745,"time":1358908992}},"PB_FIELD_NOT_REPEATED":{"symbol":{"name":"PB_FIELD_NOT_REPEATED","docStart":0,"docEnd":0,"docs":null,"value":"-1"},"created":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095},"last_updated":{"hash":"42b415952bc606fff1ee94ff3a2cde3d721b5cc0","count":3814,"time":1363455095}}},"enums":{},"typesets":{},"typedefs":{}},"sdktools_trace":{"functions":{"TR_EnumerateEntitiesSphere":{"symbol":{"name":"TR_EnumerateEntitiesSphere","docStart":15098,"docEnd":15550,"docs":{"brief":"Enumerates over entities in a sphere.","tags":[{"tag":"","text":"Enumerates over entities in a sphere."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:radius","text":"Radius of the ray."},{"tag":"param:mask","text":"Mask to use for the trace. See PARTITION_* flags."},{"tag":"param:enumerator","text":"Function to use as enumerator. For each entity found\nalong the ray, this function is called."},{"tag":"param:data","text":"Arbitrary data value to pass through to the enumerator."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"float","name":"radius","decl":"float radius","default":null},{"type":"int","name":"mask","decl":"int mask","default":null},{"type":"TraceEntityEnumerator","name":"enumerator","decl":"TraceEntityEnumerator enumerator","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetFraction":{"symbol":{"name":"TR_GetFraction","docStart":25970,"docEnd":26247,"docs":{"brief":"Returns the time fraction from a trace result (1.0 means no collision).","tags":[{"tag":"","text":"Returns the time fraction from a trace result (1.0 means no collision)."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Time fraction value of the trace."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceRayEx":{"symbol":{"name":"TR_TraceRayEx","docStart":20746,"docEnd":21187,"docs":{"brief":"Starts up a new trace ray using a new trace result.","tags":[{"tag":"","text":"Starts up a new trace ray using a new trace result."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the ending\npoint, or the direction angle."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceRay":{"symbol":{"name":"TR_TraceRay","docStart":11786,"docEnd":12147,"docs":{"brief":"Starts up a new trace ray using a global trace result.","tags":[{"tag":"","text":"Starts up a new trace ray using a global trace result."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the\nending point, or the direction angle."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TR_GetPointContents":{"symbol":{"name":"TR_GetPointContents","docStart":11180,"docEnd":11433,"docs":{"brief":"Get the contents mask and the entity index at the given position.","tags":[{"tag":"","text":"Get the contents mask and the entity index at the given position."},{"tag":"param:pos","text":"World position to test."},{"tag":"param:entindex","text":"Entity index found at the given position (by reference)."},{"tag":"return","text":"Contents mask."}]},"kind":"native","returnType":"int","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int&","name":"entindex","decl":"int& entindex","default":"-1"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TR_TraceRayFilterEx":{"symbol":{"name":"TR_TraceRayFilterEx","docStart":22008,"docEnd":22754,"docs":{"brief":"Starts up a new trace ray using a new trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_TraceRay*Ex from inside a filter\nfunction is currently not allowed and may not work.","tags":[{"tag":"","text":"Starts up a new trace ray using a new trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_TraceRay*Ex from inside a filter\nfunction is currently not allowed and may not work."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the ending\npoint, or the direction angle."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."},{"tag":"param:filter","text":"Function to use as a filter."},{"tag":"param:data","text":"Arbitrary data value to pass through to the filter function."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null},{"type":"TraceEntityFilter","name":"filter","decl":"TraceEntityFilter filter","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetSurfaceName":{"symbol":{"name":"TR_GetSurfaceName","docStart":28014,"docEnd":28320,"docs":{"brief":"Returns the name of the surface that was hit.","tags":[{"tag":"","text":"Returns the name of the surface that was hit."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"param:buffer","text":"Buffer to store surface name in"},{"tag":"param:maxlen","text":"Maximum length of output buffer"},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetEntityIndex":{"symbol":{"name":"TR_GetEntityIndex","docStart":27346,"docEnd":27609,"docs":{"brief":"Returns the entity index that collided with the trace.","tags":[{"tag":"","text":"Returns the entity index that collided with the trace."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Entity index or -1 for no collision."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetEndPosition":{"symbol":{"name":"TR_GetEndPosition","docStart":27015,"docEnd":27268,"docs":{"brief":"Returns the collision position of a trace result.","tags":[{"tag":"","text":"Returns the collision position of a trace result."},{"tag":"param:pos","text":"Vector buffer to store data in."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[3]","name":"pos","decl":"float pos[3]","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_DidHit":{"symbol":{"name":"TR_DidHit","docStart":29995,"docEnd":30276,"docs":{"brief":"Returns if there was any kind of collision along the trace ray.","tags":[{"tag":"","text":"Returns if there was any kind of collision along the trace ray."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"True if any collision found, otherwise false."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_PointOutsideWorld":{"symbol":{"name":"TR_PointOutsideWorld","docStart":31477,"docEnd":31670,"docs":{"brief":"Tests a point to see if it's outside any playable area","tags":[{"tag":"","text":"Tests a point to see if it's outside any playable area"},{"tag":"param:pos","text":"Vector buffer to store data in."},{"tag":"return","text":"True if outside world, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"float[3]","name":"pos","decl":"float pos[3]","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceHullEx":{"symbol":{"name":"TR_TraceHullEx","docStart":21374,"docEnd":21760,"docs":{"brief":"Starts up a new trace hull using a new trace result.","tags":[{"tag":"","text":"Starts up a new trace hull using a new trace result."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:flags","text":"Trace flags."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_EnumerateEntitiesHull":{"symbol":{"name":"TR_EnumerateEntitiesHull","docStart":13959,"docEnd":14695,"docs":{"brief":"Enumerates over entities along a ray hull. This may find entities that are\nclose to the ray but do not actually intersect it. Use TR_Clip*RayToEntity\nwith TR_DidHit to check if the ray actually intersects the entity.","tags":[{"tag":"","text":"Enumerates over entities along a ray hull. This may find entities that are\nclose to the ray but do not actually intersect it. Use TR_Clip*RayToEntity\nwith TR_DidHit to check if the ray actually intersects the entity."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:mask","text":"Mask to use for the trace. See PARTITION_* flags."},{"tag":"param:enumerator","text":"Function to use as enumerator. For each entity found\nalong the ray, this function is called."},{"tag":"param:data","text":"Arbitrary data value to pass through to the enumerator."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"mask","decl":"int mask","default":null},{"type":"TraceEntityEnumerator","name":"enumerator","decl":"TraceEntityEnumerator enumerator","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TR_GetHitGroup":{"symbol":{"name":"TR_GetHitGroup","docStart":30332,"docEnd":30578,"docs":{"brief":"Returns in which body hit group the trace collided if any.","tags":[{"tag":"","text":"Returns in which body hit group the trace collided if any."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Body hit group."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetFractionLeftSolid":{"symbol":{"name":"TR_GetFractionLeftSolid","docStart":26309,"docEnd":26634,"docs":{"brief":"Returns the time fraction from a trace result when it left a solid.\nOnly valid if trace started in solid","tags":[{"tag":"","text":"Returns the time fraction from a trace result when it left a solid.\nOnly valid if trace started in solid"},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Time fraction left solid value of the trace."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetPointContentsEnt":{"symbol":{"name":"TR_GetPointContentsEnt","docStart":11508,"docEnd":11712,"docs":{"brief":"Get the point contents testing only the given entity index.","tags":[{"tag":"","text":"Get the point contents testing only the given entity index."},{"tag":"param:entindex","text":"Entity index to test."},{"tag":"param:pos","text":"World position."},{"tag":"return","text":"Contents mask."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entindex","decl":"int entindex","default":null},{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TR_ClipRayToEntity":{"symbol":{"name":"TR_ClipRayToEntity","docStart":19228,"docEnd":19614,"docs":{"brief":"Clips a ray to a particular entity.","tags":[{"tag":"","text":"Clips a ray to a particular entity."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the ending\npoint, or the direction angle."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."},{"tag":"param:entity","text":"Entity to clip to."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceRayFilter":{"symbol":{"name":"TR_TraceRayFilter","docStart":17240,"docEnd":17934,"docs":{"brief":"Starts up a new trace ray using a global trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter\nfunction is currently not allowed and may not work.","tags":[{"tag":"","text":"Starts up a new trace ray using a global trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter\nfunction is currently not allowed and may not work."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the ending\npoint, or the direction angle."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."},{"tag":"param:filter","text":"Function to use as a filter."},{"tag":"param:data","text":"Arbitrary data value to pass through to the filter\nfunction."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null},{"type":"TraceEntityFilter","name":"filter","decl":"TraceEntityFilter filter","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetPlaneNormal":{"symbol":{"name":"TR_GetPlaneNormal","docStart":31119,"docEnd":31411,"docs":{"brief":"Find the normal vector to the collision plane of a trace.","tags":[{"tag":"","text":"Find the normal vector to the collision plane of a trace."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"param:normal","text":"Vector buffer to store the vector normal to the collision plane"},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"float[3]","name":"normal","decl":"float normal[3]","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetPhysicsBone":{"symbol":{"name":"TR_GetPhysicsBone","docStart":29001,"docEnd":29244,"docs":{"brief":"Returns the index of the physics bone that was hit.","tags":[{"tag":"","text":"Returns the index of the physics bone that was hit."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Physics bone index."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_ClipRayToEntityEx":{"symbol":{"name":"TR_ClipRayToEntityEx","docStart":24155,"docEnd":24624,"docs":{"brief":"Clips a ray to a particular entity.","tags":[{"tag":"","text":"Clips a ray to a particular entity."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the ending\npoint, or the direction angle."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."},{"tag":"param:entity","text":"Entity to clip to."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_ClipCurrentRayToEntityEx":{"symbol":{"name":"TR_ClipCurrentRayToEntityEx","docStart":25655,"docEnd":25899,"docs":{"brief":"Clips the current global ray (or hull) to a particular entity.","tags":[{"tag":"","text":"Clips the current global ray (or hull) to a particular entity."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:entity","text":"Entity to clip to."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_ClipRayHullToEntityEx":{"symbol":{"name":"TR_ClipRayHullToEntityEx","docStart":24887,"docEnd":25305,"docs":{"brief":"Clips a ray hull to a particular entity.","tags":[{"tag":"","text":"Clips a ray hull to a particular entity."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:entity","text":"Entity to clip to."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetStartPosition":{"symbol":{"name":"TR_GetStartPosition","docStart":26705,"docEnd":26950,"docs":{"brief":"Returns the starting position of a trace.","tags":[{"tag":"","text":"Returns the starting position of a trace."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"param:pos","text":"Vector buffer to store data in."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":null},{"type":"float[3]","name":"pos","decl":"float pos[3]","default":null}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_ClipRayHullToEntity":{"symbol":{"name":"TR_ClipRayHullToEntity","docStart":19857,"docEnd":20192,"docs":{"brief":"Clips a ray hull to a particular entity.","tags":[{"tag":"","text":"Clips a ray hull to a particular entity."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:entity","text":"Entity to clip to."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_EnumerateEntities":{"symbol":{"name":"TR_EnumerateEntities","docStart":12852,"docEnd":13639,"docs":{"brief":"Enumerates over entities along a ray. This may find entities that are\nclose to the ray but do not actually intersect it. Use TR_Clip*RayToEntity\nwith TR_DidHit to check if the ray actually intersects the entity.","tags":[{"tag":"","text":"Enumerates over entities along a ray. This may find entities that are\nclose to the ray but do not actually intersect it. Use TR_Clip*RayToEntity\nwith TR_DidHit to check if the ray actually intersects the entity."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Depending on RayType, it will be used as the ending\npoint, or the direction angle."},{"tag":"param:mask","text":"Mask to use for the trace. See PARTITION_* flags."},{"tag":"param:rtype","text":"Method to calculate the ray direction."},{"tag":"param:enumerator","text":"Function to use as enumerator. For each entity found\nalong the ray, this function is called."},{"tag":"param:data","text":"Arbitrary data value to pass through to the enumerator."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"int","name":"mask","decl":"int mask","default":null},{"type":"RayType","name":"rtype","decl":"RayType rtype","default":null},{"type":"TraceEntityEnumerator","name":"enumerator","decl":"TraceEntityEnumerator enumerator","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TR_GetSurfaceFlags":{"symbol":{"name":"TR_GetSurfaceFlags","docStart":28712,"docEnd":28937,"docs":{"brief":"Returns the surface flags. See SURF_*.","tags":[{"tag":"","text":"Returns the surface flags. See SURF_*."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Surface flags."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceHull":{"symbol":{"name":"TR_TraceHull","docStart":12318,"docEnd":12624,"docs":{"brief":"Starts up a new trace hull using a global trace result.","tags":[{"tag":"","text":"Starts up a new trace hull using a global trace result."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:flags","text":"Trace flags."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TR_GetDisplacementFlags":{"symbol":{"name":"TR_GetDisplacementFlags","docStart":27672,"docEnd":27945,"docs":{"brief":"Returns the displacement flags for the surface that was hit. See DISPSURF_FLAG_*.","tags":[{"tag":"","text":"Returns the displacement flags for the surface that was hit. See DISPSURF_FLAG_*."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Displacement flags."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceHullFilterEx":{"symbol":{"name":"TR_TraceHullFilterEx","docStart":23073,"docEnd":23767,"docs":{"brief":"Starts up a new trace hull using a new trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter\nfunction is currently not allowed and may not work.","tags":[{"tag":"","text":"Starts up a new trace hull using a new trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter\nfunction is currently not allowed and may not work."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:filter","text":"Function to use as a filter."},{"tag":"param:data","text":"Arbitrary data value to pass through to the filter function."},{"tag":"return","text":"Ray trace handle, which must be closed via CloseHandle()."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"TraceEntityFilter","name":"filter","decl":"TraceEntityFilter filter","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_StartSolid":{"symbol":{"name":"TR_StartSolid","docStart":29649,"docEnd":29935,"docs":{"brief":"Returns whether the initial point was in a solid area.","tags":[{"tag":"","text":"Returns whether the initial point was in a solid area."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"True if initial point was in a solid area, otherwise false."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_ClipCurrentRayToEntity":{"symbol":{"name":"TR_ClipCurrentRayToEntity","docStart":20518,"docEnd":20679,"docs":{"brief":"Clips the current global ray (or hull) to a particular entity.","tags":[{"tag":"","text":"Clips the current global ray (or hull) to a particular entity."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:entity","text":"Entity to clip to."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"int","name":"entity","decl":"int entity","default":null}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_EnumerateEntitiesBox":{"symbol":{"name":"TR_EnumerateEntitiesBox","docStart":15869,"docEnd":16305,"docs":{"brief":"Enumerates over entities in a box.","tags":[{"tag":"","text":"Enumerates over entities in a box."},{"tag":"param:mins","text":"Box minimum size."},{"tag":"param:maxs","text":"Box maximum size."},{"tag":"param:mask","text":"Mask to use for the trace. See PARTITION_* flags."},{"tag":"param:enumerator","text":"Function to use as enumerator. For each entity found\nalong the box, this function is called."},{"tag":"param:data","text":"Arbitrary data value to pass through to the enumerator."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"mask","decl":"int mask","default":null},{"type":"TraceEntityEnumerator","name":"enumerator","decl":"TraceEntityEnumerator enumerator","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetHitBoxIndex":{"symbol":{"name":"TR_GetHitBoxIndex","docStart":30638,"docEnd":31056,"docs":{"brief":"Returns in which hitbox the trace collided if any.\n\nNote: if the entity that collided with the trace is the world entity,\nthen this function doesn't return an hitbox index but a static prop index.","tags":[{"tag":"","text":"Returns in which hitbox the trace collided if any.\n\nNote: if the entity that collided with the trace is the world entity,\nthen this function doesn't return an hitbox index but a static prop index."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Hitbox index (Or static prop index)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"e02e6bcb4fa1f157b7bc32514ce203e5f5076720","count":6444,"time":1568751876},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_GetSurfaceProps":{"symbol":{"name":"TR_GetSurfaceProps","docStart":28396,"docEnd":28648,"docs":{"brief":"Returns the surface properties index of the surface that was hit.","tags":[{"tag":"","text":"Returns the surface properties index of the surface that was hit."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"Surface props."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_EnumerateEntitiesPoint":{"symbol":{"name":"TR_EnumerateEntitiesPoint","docStart":16601,"docEnd":17001,"docs":{"brief":"Enumerates over entities at point.","tags":[{"tag":"","text":"Enumerates over entities at point."},{"tag":"param:pos","text":"Position of the point."},{"tag":"param:mask","text":"Mask to use for the trace. See PARTITION_* flags."},{"tag":"param:enumerator","text":"Function to use as enumerator. For each entity found\nalong the point, this function is called."},{"tag":"param:data","text":"Arbitrary data value to pass through to the enumerator."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"mask","decl":"int mask","default":null},{"type":"TraceEntityEnumerator","name":"enumerator","decl":"TraceEntityEnumerator enumerator","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_AllSolid":{"symbol":{"name":"TR_AllSolid","docStart":29307,"docEnd":29591,"docs":{"brief":"Returns whether the entire trace was in a solid area.","tags":[{"tag":"","text":"Returns whether the entire trace was in a solid area."},{"tag":"param:hndl","text":"A trace Handle, or INVALID_HANDLE to use a global trace result."},{"tag":"return","text":"True if entire trace was in a solid area, otherwise false."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}},"TR_TraceHullFilter":{"symbol":{"name":"TR_TraceHullFilter","docStart":18229,"docEnd":18868,"docs":{"brief":"Starts up a new trace hull using a global trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter\nfunction is currently not allowed and may not work.","tags":[{"tag":"","text":"Starts up a new trace hull using a global trace result and a customized\ntrace ray filter.\n\nCalling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter\nfunction is currently not allowed and may not work."},{"tag":"param:pos","text":"Starting position of the ray."},{"tag":"param:vec","text":"Ending position of the ray."},{"tag":"param:mins","text":"Hull minimum size."},{"tag":"param:maxs","text":"Hull maximum size."},{"tag":"param:flags","text":"Trace flags."},{"tag":"param:filter","text":"Function to use as a filter."},{"tag":"param:data","text":"Arbitrary data value to pass through to the filter\nfunction."}]},"kind":"native","returnType":"void","arguments":[{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null},{"type":"const float[3]","name":"mins","decl":"const float mins[3]","default":null},{"type":"const float[3]","name":"maxs","decl":"const float maxs[3]","default":null},{"type":"int","name":"flags","decl":"int flags","default":null},{"type":"TraceEntityFilter","name":"filter","decl":"TraceEntityFilter filter","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"bcd5e408425b7a18fe1891531118c3288e170611","count":6508,"time":1582762795}}},"methodmaps":{},"enumstructs":{},"constants":{},"defines":{"CONTENTS_HITBOX":{"symbol":{"name":"CONTENTS_HITBOX","docStart":4204,"docEnd":4243,"docs":{"brief":"use accurate hitboxes on trace.","tags":[{"tag":"","text":"use accurate hitboxes on trace."}]},"value":"0x40000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_CURRENT_270":{"symbol":{"name":"CONTENTS_CURRENT_270","docStart":0,"docEnd":0,"docs":null,"value":"0x200000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_PLAYERCLIP":{"symbol":{"name":"CONTENTS_PLAYERCLIP","docStart":0,"docEnd":0,"docs":null,"value":"0x10000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"DISPSURF_FLAG_SURFPROP2":{"symbol":{"name":"DISPSURF_FLAG_SURFPROP2","docStart":0,"docEnd":0,"docs":null,"value":"(1<<4)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_TEAM1":{"symbol":{"name":"CONTENTS_TEAM1","docStart":2714,"docEnd":2773,"docs":{"brief":"per team contents used to differentiate collisions.","tags":[{"tag":"","text":"per team contents used to differentiate collisions."}]},"value":"0x800"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_OPAQUE":{"symbol":{"name":"MASK_OPAQUE","docStart":5194,"docEnd":5260,"docs":{"brief":"everything that blocks line of sight for AI, lighting, etc","tags":[{"tag":"","text":"everything that blocks line of sight for AI, lighting, etc"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_OPAQUE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_WATER":{"symbol":{"name":"CONTENTS_WATER","docStart":0,"docEnd":0,"docs":null,"value":"0x20"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_MOVEABLE":{"symbol":{"name":"CONTENTS_MOVEABLE","docStart":3058,"docEnd":3123,"docs":{"brief":"hits entities which are MOVETYPE_PUSH (doors, plats, etc)","tags":[{"tag":"","text":"hits entities which are MOVETYPE_PUSH (doors, plats, etc)"}]},"value":"0x4000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"DISPSURF_FLAG_SURFACE":{"symbol":{"name":"DISPSURF_FLAG_SURFACE","docStart":0,"docEnd":0,"docs":null,"value":"(1<<0)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_SOLID_BRUSHONLY":{"symbol":{"name":"MASK_SOLID_BRUSHONLY","docStart":6650,"docEnd":6719,"docs":{"brief":"everything normally solid, except monsters (world+brush only)","tags":[{"tag":"","text":"everything normally solid, except monsters (world+brush only)"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_CURRENT_90":{"symbol":{"name":"CONTENTS_CURRENT_90","docStart":0,"docEnd":0,"docs":null,"value":"0x80000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_ORIGIN":{"symbol":{"name":"CONTENTS_ORIGIN","docStart":3757,"docEnd":3798,"docs":{"brief":"removed before bsp-ing an entity.","tags":[{"tag":"","text":"removed before bsp-ing an entity."}]},"value":"0x1000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_AREAPORTAL":{"symbol":{"name":"CONTENTS_AREAPORTAL","docStart":3178,"docEnd":3244,"docs":{"brief":"remaining contents are non-visible, and don't eat brushes.","tags":[{"tag":"","text":"remaining contents are non-visible, and don't eat brushes."}]},"value":"0x8000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"SURF_SKY2D":{"symbol":{"name":"SURF_SKY2D","docStart":7752,"docEnd":7841,"docs":{"brief":"don't draw, indicates we should skylight + draw 2d sky but not draw the 3D skybox","tags":[{"tag":"","text":"don't draw, indicates we should skylight + draw 2d sky but not draw the 3D skybox"}]},"value":"0x0002"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"LAST_VISIBLE_CONTENTS":{"symbol":{"name":"LAST_VISIBLE_CONTENTS","docStart":0,"docEnd":0,"docs":null,"value":"0x80"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_DEBRIS":{"symbol":{"name":"CONTENTS_DEBRIS","docStart":0,"docEnd":0,"docs":null,"value":"0x4000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"SURF_LIGHT":{"symbol":{"name":"SURF_LIGHT","docStart":7671,"docEnd":7713,"docs":{"brief":"value will hold the light strength","tags":[{"tag":"","text":"value will hold the light strength"}]},"value":"0x0001"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SURF_HINT":{"symbol":{"name":"SURF_HINT","docStart":8372,"docEnd":8407,"docs":{"brief":"make a primary bsp splitter","tags":[{"tag":"","text":"make a primary bsp splitter"}]},"value":"0x0100"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MASK_SPLITAREAPORTAL":{"symbol":{"name":"MASK_SPLITAREAPORTAL","docStart":7511,"docEnd":7562,"docs":{"brief":"These are things that can split areaportals","tags":[{"tag":"","text":"These are things that can split areaportals"}]},"value":"(CONTENTS_WATER|CONTENTS_SLIME)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"PARTITION_NON_STATIC_EDICTS":{"symbol":{"name":"PARTITION_NON_STATIC_EDICTS","docStart":9309,"docEnd":9391,"docs":{"brief":"everything in solid & trigger except the static props, includes SOLID_NOTs","tags":[{"tag":"","text":"everything in solid & trigger except the static props, includes SOLID_NOTs"}]},"value":"(1 << 5)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MASK_SOLID":{"symbol":{"name":"MASK_SOLID","docStart":4473,"docEnd":4514,"docs":{"brief":"everything that is normally solid","tags":[{"tag":"","text":"everything that is normally solid"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"PARTITION_SOLID_EDICTS":{"symbol":{"name":"PARTITION_SOLID_EDICTS","docStart":9090,"docEnd":9168,"docs":{"brief":"every edict_t that isn't SOLID_TRIGGER or SOLID_NOT (and static props)","tags":[{"tag":"","text":"every edict_t that isn't SOLID_TRIGGER or SOLID_NOT (and static props)"}]},"value":"(1 << 1)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CONTENTS_CURRENT_0":{"symbol":{"name":"CONTENTS_CURRENT_0","docStart":0,"docEnd":0,"docs":null,"value":"0x40000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_UNUSED5":{"symbol":{"name":"CONTENTS_UNUSED5","docStart":0,"docEnd":0,"docs":null,"value":"0x200"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"DISPSURF_FLAG_BUILDABLE":{"symbol":{"name":"DISPSURF_FLAG_BUILDABLE","docStart":0,"docEnd":0,"docs":null,"value":"(1<<2)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_CURRENT_180":{"symbol":{"name":"CONTENTS_CURRENT_180","docStart":0,"docEnd":0,"docs":null,"value":"0x100000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"PARTITION_STATIC_PROPS":{"symbol":{"name":"PARTITION_STATIC_PROPS","docStart":0,"docEnd":0,"docs":null,"value":"(1 << 7)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_PLAYERSOLID":{"symbol":{"name":"MASK_PLAYERSOLID","docStart":4656,"docEnd":4702,"docs":{"brief":"everything that blocks player movement","tags":[{"tag":"","text":"everything that blocks player movement"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_PLAYERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_NPCSOLID":{"symbol":{"name":"MASK_NPCSOLID","docStart":4844,"docEnd":4871,"docs":{"brief":"blocks npc movement","tags":[{"tag":"","text":"blocks npc movement"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"SURF_HITBOX":{"symbol":{"name":"SURF_HITBOX","docStart":8934,"docEnd":8969,"docs":{"brief":"surface is part of a hitbox","tags":[{"tag":"","text":"surface is part of a hitbox"}]},"value":"0x8000"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SURF_TRIGGER":{"symbol":{"name":"SURF_TRIGGER","docStart":8149,"docEnd":8248,"docs":{"brief":"This is an xbox hack to work around elimination of trigger surfaces, which breaks occluders","tags":[{"tag":"","text":"This is an xbox hack to work around elimination of trigger surfaces, which breaks occluders"}]},"value":"0x0040"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SURF_NOPORTAL":{"symbol":{"name":"SURF_NOPORTAL","docStart":8056,"docEnd":8110,"docs":{"brief":"the surface can not have a portal placed on it","tags":[{"tag":"","text":"the surface can not have a portal placed on it"}]},"value":"0x0020"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SURF_BUMPLIGHT":{"symbol":{"name":"SURF_BUMPLIGHT","docStart":8609,"docEnd":8674,"docs":{"brief":"calculate three lightmaps for the surface for bumpmapping","tags":[{"tag":"","text":"calculate three lightmaps for the surface for bumpmapping"}]},"value":"0x0800"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MASK_PLAYERSOLID_BRUSHONLY":{"symbol":{"name":"MASK_PLAYERSOLID_BRUSHONLY","docStart":6861,"docEnd":6950,"docs":{"brief":"everything normally solid for player movement, except monsters (world+brush only)","tags":[{"tag":"","text":"everything normally solid for player movement, except monsters (world+brush only)"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_PLAYERCLIP|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_VISIBLE":{"symbol":{"name":"MASK_VISIBLE","docStart":5636,"docEnd":5692,"docs":{"brief":"everything that blocks line of sight for players","tags":[{"tag":"","text":"everything that blocks line of sight for players"}]},"value":"(MASK_OPAQUE|CONTENTS_IGNORE_NODRAW_OPAQUE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"ALL_VISIBLE_CONTENTS":{"symbol":{"name":"ALL_VISIBLE_CONTENTS","docStart":0,"docEnd":0,"docs":null,"value":"(LAST_VISIBLE_CONTENTS | (LAST_VISIBLE_CONTENTS-1))"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_GRATE":{"symbol":{"name":"CONTENTS_GRATE","docStart":2023,"docEnd":2108,"docs":{"brief":"alpha-tested \"grate\" textures.  Bullets/sight pass through, but solids don't.","tags":[{"tag":"","text":"alpha-tested \"grate\" textures.  Bullets/sight pass through, but solids don't."}]},"value":"0x8"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_TESTFOGVOLUME":{"symbol":{"name":"CONTENTS_TESTFOGVOLUME","docStart":0,"docEnd":0,"docs":null,"value":"0x100"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"SURF_NOSHADOWS":{"symbol":{"name":"SURF_NOSHADOWS","docStart":8713,"docEnd":8742,"docs":{"brief":"Don't receive shadows","tags":[{"tag":"","text":"Don't receive shadows"}]},"value":"0x1000"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CONTENTS_MIST":{"symbol":{"name":"CONTENTS_MIST","docStart":0,"docEnd":0,"docs":null,"value":"0x40"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_TRANSLUCENT":{"symbol":{"name":"CONTENTS_TRANSLUCENT","docStart":4072,"docEnd":4114,"docs":{"brief":"auto set if any surface has trans.","tags":[{"tag":"","text":"auto set if any surface has trans."}]},"value":"0x10000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_SHOT":{"symbol":{"name":"MASK_SHOT","docStart":6058,"docEnd":6092,"docs":{"brief":"bullets see these as solid","tags":[{"tag":"","text":"bullets see these as solid"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_HITBOX)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_EMPTY":{"symbol":{"name":"CONTENTS_EMPTY","docStart":1706,"docEnd":1726,"docs":{"brief":"No contents.","tags":[{"tag":"","text":"No contents."}]},"value":"0"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_NPCWORLDSTATIC":{"symbol":{"name":"MASK_NPCWORLDSTATIC","docStart":7320,"docEnd":7369,"docs":{"brief":"just the world, used for route rebuilding","tags":[{"tag":"","text":"just the world, used for route rebuilding"}]},"value":"(CONTENTS_SOLID|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_SHOT_PORTAL":{"symbol":{"name":"MASK_SHOT_PORTAL","docStart":6441,"docEnd":6508,"docs":{"brief":"hits solids (not grates) and passes through everything else","tags":[{"tag":"","text":"hits solids (not grates) and passes through everything else"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"SURF_NOCHOP":{"symbol":{"name":"SURF_NOCHOP","docStart":8848,"docEnd":8895,"docs":{"brief":"Don't subdivide patches on this surface","tags":[{"tag":"","text":"Don't subdivide patches on this surface"}]},"value":"0x4000"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PARTITION_TRIGGER_EDICTS":{"symbol":{"name":"PARTITION_TRIGGER_EDICTS","docStart":9217,"docEnd":9260,"docs":{"brief":"every edict_t that IS SOLID_TRIGGER","tags":[{"tag":"","text":"every edict_t that IS SOLID_TRIGGER"}]},"value":"(1 << 2)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SURF_TRANS":{"symbol":{"name":"SURF_TRANS","docStart":0,"docEnd":0,"docs":null,"value":"0x0010"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_VISIBLE_AND_NPCS":{"symbol":{"name":"MASK_VISIBLE_AND_NPCS","docStart":5834,"docEnd":5916,"docs":{"brief":"everything that blocks line of sight for players, but with monsters added.","tags":[{"tag":"","text":"everything that blocks line of sight for players, but with monsters added."}]},"value":"(MASK_OPAQUE_AND_NPCS|CONTENTS_IGNORE_NODRAW_OPAQUE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_DETAIL":{"symbol":{"name":"CONTENTS_DETAIL","docStart":3982,"docEnd":4026,"docs":{"brief":"brushes to be added after vis leafs.","tags":[{"tag":"","text":"brushes to be added after vis leafs."}]},"value":"0x8000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"SURF_WARP":{"symbol":{"name":"SURF_WARP","docStart":7956,"docEnd":7984,"docs":{"brief":"turbulent water warp","tags":[{"tag":"","text":"turbulent water warp"}]},"value":"0x0008"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"SURF_SKY":{"symbol":{"name":"SURF_SKY","docStart":7880,"docEnd":7917,"docs":{"brief":"don't draw, but add to skybox","tags":[{"tag":"","text":"don't draw, but add to skybox"}]},"value":"0x0004"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"_sdktools_trace_included":{"symbol":{"name":"_sdktools_trace_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"SURF_NODECALS":{"symbol":{"name":"SURF_NODECALS","docStart":8781,"docEnd":8809,"docs":{"brief":"Don't receive decals","tags":[{"tag":"","text":"Don't receive decals"}]},"value":"0x2000"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MASK_ALL":{"symbol":{"name":"MASK_ALL","docStart":0,"docEnd":0,"docs":null,"value":"(0xFFFFFFFF)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_CURRENT_DOWN":{"symbol":{"name":"CONTENTS_CURRENT_DOWN","docStart":0,"docEnd":0,"docs":null,"value":"0x800000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"MASK_WATER":{"symbol":{"name":"MASK_WATER","docStart":5013,"docEnd":5052,"docs":{"brief":"water physics in these contents","tags":[{"tag":"","text":"water physics in these contents"}]},"value":"(CONTENTS_WATER|CONTENTS_MOVEABLE|CONTENTS_SLIME)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_NPCSOLID_BRUSHONLY":{"symbol":{"name":"MASK_NPCSOLID_BRUSHONLY","docStart":7092,"docEnd":7178,"docs":{"brief":"everything normally solid for npc movement, except monsters (world+brush only)","tags":[{"tag":"","text":"everything normally solid for npc movement, except monsters (world+brush only)"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_SOLID":{"symbol":{"name":"CONTENTS_SOLID","docStart":1781,"docEnd":1823,"docs":{"brief":"an eye is never valid in a solid .","tags":[{"tag":"","text":"an eye is never valid in a solid ."}]},"value":"0x1"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_SLIME":{"symbol":{"name":"CONTENTS_SLIME","docStart":0,"docEnd":0,"docs":null,"value":"0x10"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_LADDER":{"symbol":{"name":"CONTENTS_LADDER","docStart":0,"docEnd":0,"docs":null,"value":"0x20000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_OPAQUE":{"symbol":{"name":"CONTENTS_OPAQUE","docStart":2304,"docEnd":2373,"docs":{"brief":"things that cannot be seen through (may be non-solid though).","tags":[{"tag":"","text":"things that cannot be seen through (may be non-solid though)."}]},"value":"0x80"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"DISPSURF_FLAG_SURFPROP1":{"symbol":{"name":"DISPSURF_FLAG_SURFPROP1","docStart":0,"docEnd":0,"docs":null,"value":"(1<<3)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_MONSTER":{"symbol":{"name":"CONTENTS_MONSTER","docStart":3844,"docEnd":3893,"docs":{"brief":"should never be on a brush, only in game.","tags":[{"tag":"","text":"should never be on a brush, only in game."}]},"value":"0x2000000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_WINDOW":{"symbol":{"name":"CONTENTS_WINDOW","docStart":1878,"docEnd":1922,"docs":{"brief":"translucent, but not watery (glass).","tags":[{"tag":"","text":"translucent, but not watery (glass)."}]},"value":"0x2"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_TEAM2":{"symbol":{"name":"CONTENTS_TEAM2","docStart":2828,"docEnd":2883,"docs":{"brief":"between players and objects on different teams.","tags":[{"tag":"","text":"between players and objects on different teams."}]},"value":"0x1000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"MASK_OPAQUE_AND_NPCS":{"symbol":{"name":"MASK_OPAQUE_AND_NPCS","docStart":5402,"docEnd":5494,"docs":{"brief":"everything that blocks line of sight for AI, lighting, etc, but with monsters added.","tags":[{"tag":"","text":"everything that blocks line of sight for AI, lighting, etc, but with monsters added."}]},"value":"(MASK_OPAQUE|CONTENTS_MONSTER)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"SURF_NOLIGHT":{"symbol":{"name":"SURF_NOLIGHT","docStart":8541,"docEnd":8570,"docs":{"brief":"Don't calculate light","tags":[{"tag":"","text":"Don't calculate light"}]},"value":"0x0400"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CONTENTS_UNUSED6":{"symbol":{"name":"CONTENTS_UNUSED6","docStart":0,"docEnd":0,"docs":null,"value":"0x4000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"CONTENTS_AUX":{"symbol":{"name":"CONTENTS_AUX","docStart":0,"docEnd":0,"docs":null,"value":"0x4"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"SURF_NODRAW":{"symbol":{"name":"SURF_NODRAW","docStart":8287,"docEnd":8331,"docs":{"brief":"don't bother referencing the texture","tags":[{"tag":"","text":"don't bother referencing the texture"}]},"value":"0x0080"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MASK_SHOT_HULL":{"symbol":{"name":"MASK_SHOT_HULL","docStart":6234,"docEnd":6299,"docs":{"brief":"non-raycasted weapons see this as solid (includes grates)","tags":[{"tag":"","text":"non-raycasted weapons see this as solid (includes grates)"}]},"value":"(CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_GRATE)"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"SURF_SKIP":{"symbol":{"name":"SURF_SKIP","docStart":8448,"docEnd":8502,"docs":{"brief":"completely ignore, allowing non-closed brushes","tags":[{"tag":"","text":"completely ignore, allowing non-closed brushes"}]},"value":"0x0200"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"CONTENTS_CURRENT_UP":{"symbol":{"name":"CONTENTS_CURRENT_UP","docStart":0,"docEnd":0,"docs":null,"value":"0x400000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}},"DISPSURF_FLAG_WALKABLE":{"symbol":{"name":"DISPSURF_FLAG_WALKABLE","docStart":0,"docEnd":0,"docs":null,"value":"(1<<1)"},"created":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_IGNORE_NODRAW_OPAQUE":{"symbol":{"name":"CONTENTS_IGNORE_NODRAW_OPAQUE","docStart":2938,"docEnd":3003,"docs":{"brief":"ignore CONTENTS_OPAQUE on surfaces that have SURF_NODRAW.","tags":[{"tag":"","text":"ignore CONTENTS_OPAQUE on surfaces that have SURF_NODRAW."}]},"value":"0x2000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"3add38f66581982a74c72702fd44b9b0480ff5df","count":6343,"time":1538946954}},"CONTENTS_MONSTERCLIP":{"symbol":{"name":"CONTENTS_MONSTERCLIP","docStart":0,"docEnd":0,"docs":null,"value":"0x20000"},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402}}},"enums":{"RayType":{"symbol":{"name":"RayType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RayType_EndPoint","docStart":9814,"docEnd":9888,"docs":{"brief":"The trace ray will go from the start position to the end position.","tags":[{"tag":"","text":"The trace ray will go from the start position to the end position."}]},"value":null},{"name":"RayType_Infinite","docStart":9911,"docEnd":10002,"docs":{"brief":"The trace ray will go from the start position to infinity using a direction vector.","tags":[{"tag":"","text":"The trace ray will go from the start position to infinity using a direction vector."}]},"value":null}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{"TraceEntityEnumerator":{"symbol":{"name":"TraceEntityEnumerator","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":10672,"docEnd":10863,"docs":{"brief":"Called for each entity enumerated with EnumerateEntities*.","tags":[{"tag":"","text":"Called for each entity enumerated with EnumerateEntities*."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"True to continue enumerating, otherwise false."}]},"type":"function bool(int entity)","parsedSignature":{"returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]}},{"docStart":10898,"docEnd":11133,"docs":{"brief":"Called for each entity enumerated with EnumerateEntities*.","tags":[{"tag":"","text":"Called for each entity enumerated with EnumerateEntities*."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:data","text":"Data value, if used."},{"tag":"return","text":"True to continue enumerating, otherwise false."}]},"type":"function bool(int entity, any data)","parsedSignature":{"returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"any","name":"data","decl":"any data","default":null}]}}]},"created":{"hash":"144fb907f1f636ef80019d2fa3c132f09d6d7719","count":6326,"time":1534197732},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"TraceEntityFilter":{"symbol":{"name":"TraceEntityFilter","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":10041,"docEnd":10256,"docs":{"brief":"Called on entity filtering.","tags":[{"tag":"","text":"Called on entity filtering."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:contentsMask","text":"Contents Mask."},{"tag":"return","text":"True to allow the current entity to be hit, otherwise false."}]},"type":"function bool(int entity, int contentsMask)","parsedSignature":{"returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"contentsMask","decl":"int contentsMask","default":null}]}},{"docStart":10309,"docEnd":10571,"docs":{"brief":"Called on entity filtering.","tags":[{"tag":"","text":"Called on entity filtering."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:contentsMask","text":"Contents Mask."},{"tag":"param:data","text":"Data value, if used."},{"tag":"return","text":"True to allow the current entity to be hit, otherwise false."}]},"type":"function bool(int entity, int contentsMask, any data)","parsedSignature":{"returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"contentsMask","decl":"int contentsMask","default":null},{"type":"any","name":"data","decl":"any data","default":null}]}}]},"created":{"hash":"9c98edd1048b608e47f7b3991ef1d5d9bb5dcbc8","count":5070,"time":1418193402},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typedefs":{}},"core":{"functions":{"IsNullString":{"symbol":{"name":"IsNullString","docStart":5081,"docEnd":5239,"docs":{"brief":"Check if the given string is the NULL_STRING.","tags":[{"tag":"","text":"Check if the given string is the NULL_STRING."},{"tag":"param:str","text":"The string to test."},{"tag":"return","text":"True if NULL_STRING, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},"created":{"hash":"c1888c2d05447acf153966682a232f6371ca48e0","count":6059,"time":1488566739},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"IsNullVector":{"symbol":{"name":"IsNullVector","docStart":4872,"docEnd":5030,"docs":{"brief":"Check if the given vector is the NULL_VECTOR.","tags":[{"tag":"","text":"Check if the given vector is the NULL_VECTOR."},{"tag":"param:vec","text":"The vector to test."},{"tag":"return","text":"True if NULL_VECTOR, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},"created":{"hash":"c1888c2d05447acf153966682a232f6371ca48e0","count":6059,"time":1488566739},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"MarkNativeAsOptional":{"symbol":{"name":"MarkNativeAsOptional","docStart":5473,"docEnd":5709,"docs":{"brief":"Sets a native as optional, such that if it is unloaded, removed,\nor otherwise non-existent, the plugin will still work.  Calling\nremoved natives results in a run-time error.","tags":[{"tag":"","text":"Sets a native as optional, such that if it is unloaded, removed,\nor otherwise non-existent, the plugin will still work.  Calling\nremoved natives results in a run-time error."},{"tag":"param:name","text":"Native name."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"VerifyCoreVersion":{"symbol":{"name":"VerifyCoreVersion","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"__ext_core_SetNTVOptional":{"symbol":{"name":"__ext_core_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}}},"methodmaps":{},"enumstructs":{"SharedPlugin":{"symbol":{"name":"SharedPlugin","docStart":4405,"docEnd":4479,"docs":{"brief":"Defines how a plugin must expose itself for native requiring.","tags":[{"tag":"","text":"Defines how a plugin must expose itself for native requiring."}]},"methods":[],"fields":[{"name":"name","docStart":4534,"docEnd":4552,"docs":{"brief":"Short name","tags":[{"tag":"","text":"Short name"}]},"type":"const char[]"},{"name":"file","docStart":4583,"docEnd":4600,"docs":{"brief":"File name","tags":[{"tag":"","text":"File name"}]},"type":"const char[]"},{"name":"required","docStart":4631,"docEnd":4664,"docs":{"brief":"Whether or not to require","tags":[{"tag":"","text":"Whether or not to require"}]},"type":"bool"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Extension":{"symbol":{"name":"Extension","docStart":4068,"docEnd":4141,"docs":{"brief":"Defines how an extension must expose itself for autoloading.","tags":[{"tag":"","text":"Defines how an extension must expose itself for autoloading."}]},"methods":[],"fields":[{"name":"name","docStart":4193,"docEnd":4211,"docs":{"brief":"Short name","tags":[{"tag":"","text":"Short name"}]},"type":"const char[]"},{"name":"file","docStart":4242,"docEnd":4267,"docs":{"brief":"Default file name","tags":[{"tag":"","text":"Default file name"}]},"type":"const char[]"},{"name":"autoload","docStart":4298,"docEnd":4333,"docs":{"brief":"Whether or not to auto-load","tags":[{"tag":"","text":"Whether or not to auto-load"}]},"type":"bool"},{"name":"required","docStart":4364,"docEnd":4397,"docs":{"brief":"Whether or not to require","tags":[{"tag":"","text":"Whether or not to require"}]},"type":"bool"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PlVers":{"symbol":{"name":"PlVers","docStart":0,"docEnd":0,"docs":null,"methods":[],"fields":[{"name":"version","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"filevers","docStart":0,"docEnd":0,"docs":null,"type":"const char[]"},{"name":"date","docStart":0,"docEnd":0,"docs":null,"type":"const char[]"},{"name":"time","docStart":0,"docEnd":0,"docs":null,"type":"const char[]"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}}},"constants":{},"defines":{"_core_included":{"symbol":{"name":"_core_included","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"SOURCEMOD_PLUGINAPI_VERSION":{"symbol":{"name":"SOURCEMOD_PLUGINAPI_VERSION","docStart":0,"docEnd":0,"docs":null,"value":"5"},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"REQUIRE_PLUGIN":{"symbol":{"name":"REQUIRE_PLUGIN","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"AUTOLOAD_EXTENSIONS":{"symbol":{"name":"AUTOLOAD_EXTENSIONS","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}},"REQUIRE_EXTENSIONS":{"symbol":{"name":"REQUIRE_EXTENSIONS","docStart":0,"docEnd":0,"docs":null,"value":""},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783}}},"enums":{"Identity":{"symbol":{"name":"Identity","docStart":2320,"docEnd":2358,"docs":{"brief":"Specifies identity types.","tags":[{"tag":"","text":"Specifies identity types."}]},"entries":[{"name":"Identity_Core","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"Identity_Extension","docStart":0,"docEnd":0,"docs":null,"value":"1"},{"name":"Identity_Plugin","docStart":0,"docEnd":0,"docs":null,"value":"2"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"Action":{"symbol":{"name":"Action","docStart":1913,"docEnd":1970,"docs":{"brief":"Specifies what to do after a hook completes.","tags":[{"tag":"","text":"Specifies what to do after a hook completes."}]},"entries":[{"name":"Plugin_Continue","docStart":2013,"docEnd":2054,"docs":{"brief":"Continue with the original action","tags":[{"tag":"","text":"Continue with the original action"}]},"value":"0"},{"name":"Plugin_Changed","docStart":2081,"docEnd":2143,"docs":{"brief":"Inputs or outputs have been overridden with new values","tags":[{"tag":"","text":"Inputs or outputs have been overridden with new values"}]},"value":"1"},{"name":"Plugin_Handled","docStart":2170,"docEnd":2222,"docs":{"brief":"Handle the action at the end (don't call it)","tags":[{"tag":"","text":"Handle the action at the end (don't call it)"}]},"value":"3"},{"name":"Plugin_Stop","docStart":2249,"docEnd":2312,"docs":{"brief":"Immediately stop the hook chain and handle the original","tags":[{"tag":"","text":"Immediately stop the hook chain and handle the original"}]},"value":"4"}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PluginStatus":{"symbol":{"name":"PluginStatus","docStart":2600,"docEnd":2634,"docs":{"brief":"Plugin status values.","tags":[{"tag":"","text":"Plugin status values."}]},"entries":[{"name":"Plugin_Running","docStart":2683,"docEnd":2764,"docs":{"brief":"Plugin is running\nAll states below are \"temporarily\" unexecutable","tags":[{"tag":"","text":"Plugin is running"},{"tag":"","text":"All states below are \"temporarily\" unexecutable"}]},"value":"0"},{"name":"Plugin_Paused","docStart":2791,"docEnd":2826,"docs":{"brief":"Plugin is loaded but paused","tags":[{"tag":"","text":"Plugin is loaded but paused"}]},"value":null},{"name":"Plugin_Error","docStart":2853,"docEnd":2945,"docs":{"brief":"Plugin is loaded but errored/locked\nAll states below do not have all natives","tags":[{"tag":"","text":"Plugin is loaded but errored/locked"},{"tag":"","text":"All states below do not have all natives"}]},"value":null},{"name":"Plugin_Loaded","docStart":2972,"docEnd":3026,"docs":{"brief":"Plugin has passed loading and can be finalized","tags":[{"tag":"","text":"Plugin has passed loading and can be finalized"}]},"value":null},{"name":"Plugin_Failed","docStart":3053,"docEnd":3087,"docs":{"brief":"Plugin has a fatal failure","tags":[{"tag":"","text":"Plugin has a fatal failure"}]},"value":null},{"name":"Plugin_Created","docStart":3114,"docEnd":3159,"docs":{"brief":"Plugin is created but not initialized","tags":[{"tag":"","text":"Plugin is created but not initialized"}]},"value":null},{"name":"Plugin_Uncompiled","docStart":3186,"docEnd":3231,"docs":{"brief":"Plugin is not yet compiled by the JIT","tags":[{"tag":"","text":"Plugin is not yet compiled by the JIT"}]},"value":null},{"name":"Plugin_BadLoad","docStart":3258,"docEnd":3287,"docs":{"brief":"Plugin failed to load","tags":[{"tag":"","text":"Plugin failed to load"}]},"value":null},{"name":"Plugin_Evicted","docStart":3314,"docEnd":3357,"docs":{"brief":"Plugin was unloaded due to an error","tags":[{"tag":"","text":"Plugin was unloaded due to an error"}]},"value":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}},"PluginInfo":{"symbol":{"name":"PluginInfo","docStart":3365,"docEnd":3799,"docs":{"brief":"Plugin information properties. Plugins can declare a global variable with\ntheir info. Example,\n\npublic Plugin myinfo = {\nname = \"Admin Help\",\nauthor = \"AlliedModders LLC\",\ndescription = \"Display command information\",\nversion = \"1.0\",\nurl = \"http://www.sourcemod.net/\"\n};\n\nSourceMod will display this information when a user inspects plugins in the\nconsole.","tags":[{"tag":"","text":"Plugin information properties. Plugins can declare a global variable with\ntheir info. Example,\n\npublic Plugin myinfo = {\nname = \"Admin Help\",\nauthor = \"AlliedModders LLC\",\ndescription = \"Display command information\",\nversion = \"1.0\",\nurl = \"http://www.sourcemod.net/\"\n};\n\nSourceMod will display this information when a user inspects plugins in the\nconsole."}]},"entries":[{"name":"PlInfo_Name","docStart":3846,"docEnd":3865,"docs":{"brief":"Plugin name","tags":[{"tag":"","text":"Plugin name"}]},"value":null},{"name":"PlInfo_Author","docStart":3892,"docEnd":3913,"docs":{"brief":"Plugin author","tags":[{"tag":"","text":"Plugin author"}]},"value":null},{"name":"PlInfo_Description","docStart":3940,"docEnd":3966,"docs":{"brief":"Plugin description","tags":[{"tag":"","text":"Plugin description"}]},"value":null},{"name":"PlInfo_Version","docStart":3993,"docEnd":4015,"docs":{"brief":"Plugin version","tags":[{"tag":"","text":"Plugin version"}]},"value":null},{"name":"PlInfo_URL","docStart":4042,"docEnd":4060,"docs":{"brief":"Plugin URL","tags":[{"tag":"","text":"Plugin URL"}]},"value":null}]},"created":{"hash":"686890ec1033d97c5f959a75d93bf5644d8941af","count":4683,"time":1405883783},"last_updated":{"hash":"81dc80fbd14b7eba3c20bc22a60629fc874015de","count":6420,"time":1559093938}}},"typesets":{},"typedefs":{}}},"version":{"hash":"eef96da641be20f7359cfd10749248d0df389a91","count":6633,"time":1601685237}}